<samples>
	<dd name="Active Directory" code="ad" desc="Sample scripts for managing Active Directory and Active Directory objects.">
		<dd name="Computer Accounts" code="computer" desc="Sample scripts for managing computer accounts and computer roles within Active Directory."><vb name="Copy an Active Directory Computer Account" n="0">' Copy an Active Directory Computer Account


Set objCompt = _
    GetObject("LDAP://cn=Computers,dc=NA,dc=fabrikam,dc=com")
Set objComptCopy = objCompt.Create("computer", "cn=SEA-SQL-01")
objComptCopy.Put "sAMAccountName", "sea-sql-01"
objComptCopy.SetInfo
 
Set objComptTemplate = GetObject _
    ("LDAP://cn=SEA-PM-01,cn=Computers,dc=NA,dc=fabrikam,dc=com")
arrAttributes = Array("description", "location")
 
For Each strAttrib in arrAttributes
    strValue = objComptTemplate.Get(strAttrib)
    objComptCopy.Put strAttrib, strValue
Next
 
objComptCopy.SetInfo
</vb><vb name="Create a Computer Account For a Specific User" n="1">' Create a Computer Account For a Specific User


strComputer = "atl-pro-002"
strComputerUser = "fabrikam\lewjudy"
 
Const ADS_UF_PASSWD_NOTREQD = &amp;amp;h0020
Const ADS_UF_WORKSTATION_TRUST_ACCOUNT = &amp;amp;h1000
Const ADS_ACETYPE_ACCESS_ALLOWED = &amp;amp;h0
Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = &amp;amp;h5
Const ADS_FLAG_OBJECT_TYPE_PRESENT = &amp;amp;h1
Const ADS_RIGHT_GENERIC_READ = &amp;amp;h80000000
Const ADS_RIGHT_DS_SELF = &amp;amp;h8
Const ADS_RIGHT_DS_WRITE_PROP = &amp;amp;h20
Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;h100
 
Const ALLOWED_TO_AUTHENTICATE = _
    "{68B1D179-0D15-4d4f-AB71-46152E79A7BC}"
Const RECEIVE_AS = "{AB721A56-1E2f-11D0-9819-00AA0040529B}"
Const SEND_AS = "{AB721A54-1E2f-11D0-9819-00AA0040529B}"
Const USER_CHANGE_PASSWORD = _
    "{AB721A53-1E2f-11D0-9819-00AA0040529b}"
Const USER_FORCE_CHANGE_PASSWORD = _
    "{00299570-246D-11D0-A768-00AA006E0529}"
Const USER_ACCOUNT_RESTRICTIONS = _
    "{4C164200-20C0-11D0-A768-00AA006E0529}"
Const VALIDATED_DNS_HOST_NAME = _
    "{72E39547-7B18-11D1-ADEF-00C04FD8D5CD}"
Const VALIDATED_SPN = "{F3A64788-5306-11D1-A9C5-0000F80367C1}"
 
Set objRootDSE = GetObject("LDAP://rootDSE")
Set objContainer = GetObject("LDAP://cn=Computers," &amp;amp; _
    objRootDSE.Get("defaultNamingContext"))
 
Set objComputer = objContainer.Create _
    ("Computer", "cn=" &amp;amp; strComputer)
objComputer.Put "sAMAccountName", strComputer &amp;amp; "$"
objComputer.Put "userAccountControl", _
    ADS_UF_PASSWD_NOTREQD Or ADS_UF_WORKSTATION_TRUST_ACCOUNT
objComputer.SetInfo
 
Set objSecurityDescriptor = objComputer.Get("ntSecurityDescriptor")
Set objDACL = objSecurityDescriptor.DiscretionaryAcl
 
Set objACE1 = CreateObject("AccessControlEntry")
objACE1.Trustee    = strComputerUser
objACE1.AccessMask = ADS_RIGHT_GENERIC_READ
objACE1.AceFlags   = 0
objACE1.AceType    = ADS_ACETYPE_ACCESS_ALLOWED
 
Set objACE2 = CreateObject("AccessControlEntry")
objACE2.Trustee    = strComputerUser
objACE2.AccessMask = ADS_RIGHT_DS_CONTROL_ACCESS
objACE2.AceFlags   = 0
objACE2.AceType    = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objACE2.Flags      = ADS_FLAG_OBJECT_TYPE_PRESENT
objACE2.ObjectType = ALLOWED_TO_AUTHENTICATE
 
Set objACE3 = CreateObject("AccessControlEntry")
objACE3.Trustee    = strComputerUser
objACE3.AccessMask = ADS_RIGHT_DS_CONTROL_ACCESS
objACE3.AceFlags   = 0
objACE3.AceType    = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objACE3.Flags      = ADS_FLAG_OBJECT_TYPE_PRESENT
objACE3.ObjectType = RECEIVE_AS
 
Set objACE4 = CreateObject("AccessControlEntry")
objACE4.Trustee    = strComputerUser
objACE4.AccessMask = ADS_RIGHT_DS_CONTROL_ACCESS
objACE4.AceFlags   = 0
objACE4.AceType    = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objACE4.Flags      = ADS_FLAG_OBJECT_TYPE_PRESENT
objACE4.ObjectType = SEND_AS
 
Set objACE5 = CreateObject("AccessControlEntry")
objACE5.Trustee    = strComputerUser
objACE5.AccessMask = ADS_RIGHT_DS_CONTROL_ACCESS
objACE5.AceFlags   = 0
objACE5.AceType    = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objACE5.Flags      = ADS_FLAG_OBJECT_TYPE_PRESENT
objACE5.ObjectType = USER_CHANGE_PASSWORD
 
Set objACE6 = CreateObject("AccessControlEntry")
objACE6.Trustee    = strComputerUser
objACE6.AccessMask = ADS_RIGHT_DS_CONTROL_ACCESS
objACE6.AceFlags   = 0
objACE6.AceType    = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objACE6.Flags      = ADS_FLAG_OBJECT_TYPE_PRESENT
objACE6.ObjectType = USER_FORCE_CHANGE_PASSWORD
 
Set objACE7 = CreateObject("AccessControlEntry")
objACE7.Trustee    = strComputerUser
objACE7.AccessMask = ADS_RIGHT_DS_WRITE_PROP
objACE7.AceFlags   = 0
objACE7.AceType    = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objACE7.Flags      = ADS_FLAG_OBJECT_TYPE_PRESENT
objACE7.ObjectType = USER_ACCOUNT_RESTRICTIONS
 
Set objACE8 = CreateObject("AccessControlEntry")
objACE8.Trustee    = strComputerUser
objACE8.AccessMask = ADS_RIGHT_DS_SELF
objACE8.AceFlags   = 0
objACE8.AceType    = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objACE8.Flags      = ADS_FLAG_OBJECT_TYPE_PRESENT
objACE8.ObjectType = VALIDATED_DNS_HOST_NAME
 
Set objACE9 = CreateObject("AccessControlEntry")
objACE9.Trustee    = strComputerUser
objACE9.AccessMask = ADS_RIGHT_DS_SELF
objACE9.AceFlags   = 0
objACE9.AceType  = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objACE9.Flags  =  ADS_FLAG_OBJECT_TYPE_PRESENT
objACE9.ObjectType = VALIDATED_SPN
 
objDACL.AddAce objACE1
objDACL.AddAce objACE2
objDACL.AddAce objACE3
objDACL.AddAce objACE4
objDACL.AddAce objACE5
objDACL.AddAce objACE6
objDACL.AddAce objACE7
objDACL.AddAce objACE8
objDACL.AddAce objACE9
 
objSecurityDescriptor.DiscretionaryAcl = objDACL
objComputer.Put "ntSecurityDescriptor", objSecurityDescriptor
objComputer.SetInfo
</vb><vb name="Delete a Computer Account" n="2">' Delete a Computer Account


strComputer = "atl-pro-040"

set objComputer = GetObject("LDAP://CN=" &amp;amp; strComputer &amp;amp; _
    ",CN=Computers,DC=fabrikam,DC=com")
objComputer.DeleteObject (0)
</vb><vb name="Disable a Global Catalog Server" n="3">' Disable a Global Catalog Server


strComputer = "atl-dc-01"
 
Const NTDSDSA_OPT_IS_GC = 1
 
Set objRootDSE = GetObject("LDAP://" &amp;amp; strComputer &amp;amp; "/rootDSE")
strDsServiceDN = objRootDSE.Get("dsServiceName")
Set objDsRoot  = GetObject _
    ("LDAP://" &amp;amp; strComputer &amp;amp; "/" &amp;amp; strDsServiceDN)
intOptions = objDsRoot.Get("options")
 
If intOptions And NTDSDSA_OPT_IS_GC Then
    objDsRoot.Put "options", intOptions Xor NTDSDSA_OPT_IS_GC
    objDsRoot.Setinfo
End If
</vb><vb name="Enable a Global Catalog Server" n="4">' Enable a Global Catalog Server


strComputer = "atl-dc-01"
 
Const NTDSDSA_OPT_IS_GC = 1
 
Set objRootDSE = GetObject("LDAP://" &amp;amp; strComputer &amp;amp; "/RootDSE")
strDsServiceDN = objRootDSE.Get("dsServiceName")
Set objDsRoot  = GetObject _
    ("LDAP://" &amp;amp; strComputer &amp;amp; "/" &amp;amp; strDsServiceDN)
intOptions = objDsRoot.Get("options")
 
If (intOptions And NTDSDSA_OPT_IS_GC) = FALSE Then
    objDsRoot.Put "options" , intOptions Or NTDSDSA_OPT_IS_GC
    objDsRoot.Setinfo
End If
</vb><vb name="Join a Computer to a Domain" n="5">' Join a Computer to a Domain


Const JOIN_DOMAIN = 1
Const ACCT_CREATE = 2
Const ACCT_DELETE = 4
Const WIN9X_UPGRADE = 16
Const DOMAIN_JOIN_IF_JOINED = 32
Const JOIN_UNSECURE = 64
Const MACHINE_PASSWORD_PASSED = 128
Const DEFERRED_SPN_SET = 256
Const INSTALL_INVOCATION = 262144
 
strDomain = "FABRIKAM"
strPassword = "ls4k5ywA"
strUser = "shenalan"
 
Set objNetwork = CreateObject("WScript.Network")
strComputer = objNetwork.ComputerName
 
Set objComputer = GetObject("winmgmts:{impersonationLevel=Impersonate}!\\" &amp;amp; _
    strComputer &amp;amp; "\root\cimv2:Win32_ComputerSystem.Name='" &amp;amp; _
        strComputer &amp;amp; "'")
 
ReturnValue = objComputer.JoinDomainOrWorkGroup(strDomain, _
    strPassword, strDomain &amp;amp; "\" &amp;amp; strUser, NULL, _
        JOIN_DOMAIN + ACCT_CREATE)
</vb><vb name="List All Computer Accounts in Active Directory" n="6">' List All Computer Accounts in Active Directory


Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"

Set objCOmmand.ActiveConnection = objConnection
objCommand.CommandText = _
    "Select Name, Location from 'LDAP://DC=fabrikam,DC=com' " _
        &amp;amp; "Where objectClass='computer'"  
objCommand.Properties("Page Size") = 1000
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo "Computer Name: " &amp;amp; objRecordSet.Fields("Name").Value
    Wscript.Echo "Location: " &amp;amp; objRecordSet.Fields("Location").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="List FSMO Role Holders" n="7">' List FSMO Role Holders


Set objRootDSE = GetObject("LDAP://rootDSE")
 
Set objSchema = GetObject _
    ("LDAP://" &amp;amp; objRootDSE.Get("schemaNamingContext"))
strSchemaMaster = objSchema.Get("fSMORoleOwner")
Set objNtds = GetObject("LDAP://" &amp;amp; strSchemaMaster)
Set objComputer = GetObject(objNtds.Parent)
WScript.Echo "Forest-wide Schema Master FSMO: " &amp;amp; objComputer.Name
 
Set objNtds = Nothing
Set objComputer = Nothing
 
Set objPartitions = GetObject("LDAP://CN=Partitions," &amp;amp; _ 
    objRootDSE.Get("configurationNamingContext"))
strDomainNamingMaster = objPartitions.Get("fSMORoleOwner")
Set objNtds = GetObject("LDAP://" &amp;amp; strDomainNamingMaster)
Set objComputer = GetObject(objNtds.Parent)
WScript.Echo "Forest-wide Domain Naming Master FSMO: " &amp;amp; objComputer.Name
 
Set objDomain = GetObject _
    ("LDAP://" &amp;amp; objRootDSE.Get("defaultNamingContext"))
strPdcEmulator = objDomain.Get("fSMORoleOwner")
Set objNtds = GetObject("LDAP://" &amp;amp; strPdcEmulator)
Set objComputer = GetObject(objNtds.Parent)
WScript.Echo "Domain's PDC Emulator FSMO: " &amp;amp; objComputer.Name
 
Set objRidManager = GetObject("LDAP://CN=RID Manager$,CN=System," &amp;amp; _
    objRootDSE.Get("defaultNamingContext"))
strRidMaster = objRidManager.Get("fSMORoleOwner")
Set objNtds = GetObject("LDAP://" &amp;amp; strRidMaster)
Set objComputer = GetObject(objNtds.Parent)
WScript.Echo "Domain's RID Master FSMO: " &amp;amp; objComputer.Name
 
Set objInfrastructure = GetObject("LDAP://CN=Infrastructure," &amp;amp; _
    objRootDSE.Get("defaultNamingContext"))
strInfrastructureMaster = objInfrastructure.Get("fSMORoleOwner")
Set objNtds = GetObject("LDAP://" &amp;amp; strInfrastructureMaster)
Set objComputer = GetObject(objNtds.Parent)
WScript.Echo "Domain's Infrastructure Master FSMO: " &amp;amp; objComputer.Name
</vb><vb name="List Selected Computer Account Attributes" n="8">' List Selected Computer Account Attributes


On Error Resume Next

Set objComputer = GetObject _
    ("LDAP://CN=atl-dc-01,CN=Computers,DC=fabrikam,DC=com")

objProperty = objComputer.Get("Location")
If IsNull(objProperty) Then
    Wscript.Echo "The location has not been set."
Else
    Wscript.Echo "Location: " &amp;amp; objProperty
    objProperty = Null
End If

objProperty = objComputer.Get("Description")
If IsNull(objProperty) Then
    Wscript.Echo "The description has not been set."
Else
    Wscript.Echo "Description: " &amp;amp; objProperty
    objProperty = Null
End If
</vb><vb name="Modify Computer Location Attribute" n="9">' Modify Computer Location Attribute


Set objComputer = GetObject _ 
    ("LDAP://CN=atl-dc-01,CN=Computers,DC=fabrikam,DC=com")

objComputer.Put "Location" , "Building 37, Floor 2, Room 2133"
objComputer.SetInfo
</vb><vb name="Move a Computer Account" n="10">' Move a Computer Account


Set objNewOU = GetObject("LDAP://OU=Finance,DC=fabrikam,DC=com")

Set objMoveComputer = objNewOU.MoveHere _
    ("LDAP://CN=atl-pro-03,CN=Computers,DC=fabrikam,DC=com", "CN=atl-pro-03")
</vb><vb name="Move a Computer Account to a New Domain" n="11">' Move a Computer Account to a New Domain


Set objOU = GetObject("LDAP://cn=Computers,dc=NA,dc=fabrikam,dc=com")

objOU.MoveHere "LDAP://cn=Computer01,cn=Users,dc=fabrikam,dc=com", _
    vbNullString
</vb><vb name="Rename a Computer Account" n="12">' Rename a Computer Account


Set objNewOU = GetObject("LDAP://OU=Finance,DC=fabrikam,DC=com")

Set objMoveComputer = objNewOU.MoveHere _
    ("LDAP://CN=atl-pro-037,OU=Finance,DC=fabrikam,DC=com", _
        "CN=atl-pro-003")
</vb><vb name="Rename a Computer and Computer Account" n="13">' Rename a Computer and Computer Account


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colComputers = objWMIService.ExecQuery _
    ("Select * from Win32_ComputerSystem")

For Each objComputer in colComputers
    err = objComputer.Rename("WebServer")
Next
</vb><vb name="Reset a Computer Account Password" n="14">' Reset a Computer Account Password


Set objComputer = GetObject _
    ("LDAP://CN=atl-dc-01,CN=Computers,DC=Reskit,DC=COM")

objComputer.SetPassword "atl-dc-01$"
</vb><vb name="Search for Specific Computer Accounts" n="15">' Search for Specific Computer Accounts


Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"

Set objCommand.ActiveConnection = objConnection
objCommand.CommandText = _
    "Select Name, Location, operatingSystemVersion from " &amp;amp; _
        "'LDAP://DC=fabrikam,DC=com' where objectClass='computer'" &amp;amp; _
            " and operatingSystemVersion = '5.1 (3600)'"  
objCommand.Properties("Page Size") = 1000
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo "Computer Name: " &amp;amp; objRecordSet.Fields("Name").Value
    Wscript.Echo "Location: " &amp;amp; objRecordSet.Fields("Location").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Verify Computer Role" n="16">' Verify Computer Role


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colComputers = objWMIService.ExecQuery _
    ("Select DomainRole from Win32_ComputerSystem")

For Each objComputer in colComputers
    Select Case objComputer.DomainRole 
        Case 0 
            strComputerRole = "Standalone Workstation"
        Case 1        
            strComputerRole = "Member Workstation"
        Case 2
            strComputerRole = "Standalone Server"
        Case 3
            strComputerRole = "Member Server"
        Case 4
            strComputerRole = "Backup Domain Controller"
        Case 5
            strComputerRole = "Primary Domain Controller"
    End Select
    Wscript.Echo strComputerRole
Next
</vb><vb name="Verify that a Computer is a Global Catalog Server" n="17">' Verify that a Computer is a Global Catalog Server


strComputer = "atl-dc-01"
 
Const NTDSDSA_OPT_IS_GC = 1
 
Set objRootDSE = GetObject("LDAP://" &amp;amp; strComputer &amp;amp; "/rootDSE")
strDsServiceDN = objRootDSE.Get("dsServiceName")
Set objDsRoot  = GetObject("LDAP://" &amp;amp; strComputer &amp;amp; "/" &amp;amp; strDsServiceDN)
intOptions = objDsRoot.Get("options")
 
If intOptions And NTDSDSA_OPT_IS_GC Then
    WScript.Echo strComputer &amp;amp; " is a global catalog server."
Else
    Wscript.Echo strComputer &amp;amp; " is not a global catalog server."
End If
</vb><vb name="Unjoin a Computer from a Domain" n="18">' Unjoin a Computer from a Domain



Const NETSETUP_ACCT_DELETE = 2 'Disables computer account in domain.
strPassword = "password"
strUser = "kenmyer"

Set objNetwork = CreateObject("WScript.Network")
strComputer = objNetwork.ComputerName

Set objComputer = GetObject("winmgmts:{impersonationLevel=Impersonate}!\\" &amp;amp; _
 strComputer &amp;amp; "\root\cimv2:Win32_ComputerSystem.Name='" &amp;amp; strComputer &amp;amp; "'")
strDomain = objComputer.Domain
intReturn = objComputer.UnjoinDomainOrWorkgroup _
 (strPassword, strDomain &amp;amp; "\" &amp;amp; strUser, NETSETUP_ACCT_DELETE)
</vb></dd>
		<dd name="Domains" code="domains" desc="Sample scripts for managing Active Directory domains."><vb name="List Domain Information Using WMI" n="19">' List Domain Information Using WMI


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_NTDomain")

For Each objItem in colItems
    Wscript.Echo "Client Site Name: " &amp;amp; objItem.ClientSiteName
    Wscript.Echo "DC Site Name: " &amp;amp; objItem.DcSiteName
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "DNS Forest Name: " &amp;amp; objItem.DnsForestName
    Wscript.Echo "Domain Controller Address: " &amp;amp; _
        objItem.DomainControllerAddress
    Wscript.Echo "Domain Controller Address Type: " &amp;amp; _
        objItem.DomainControllerAddressType
    Wscript.Echo "Domain Controller Name: " &amp;amp; objItem.DomainControllerName
    Wscript.Echo "Domain GUID: " &amp;amp; objItem.DomainGuid
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "DS Directory Service Flag: " &amp;amp; objItem.DSDirectoryServiceFlag
    Wscript.Echo "DS DNS Controller Flag: " &amp;amp; objItem.DSDnsControllerFlag
    Wscript.Echo "DS DNS Domain Flag: " &amp;amp; objItem.DSDnsDomainFlag
    Wscript.Echo "DS DNS Forest Flag: " &amp;amp; objItem.DSDnsForestFlag
    Wscript.Echo "DS Global Catalog Flag: " &amp;amp; objItem.DSGlobalCatalogFlag
    Wscript.Echo "DS Kerberos Distribution Center Flag: " &amp;amp; _
        objItem.DSKerberosDistributionCenterFlag
    Wscript.Echo "DS Primary Domain Controller Flag: " &amp;amp; _
        objItem.DSPrimaryDomainControllerFlag
    Wscript.Echo "DS Time Service Flag: " &amp;amp; objItem.DSTimeServiceFlag
    Wscript.Echo "DS Writable Flag: " &amp;amp; objItem.DSWritableFlag
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Primary Owner Contact: " &amp;amp; objItem.PrimaryOwnerContact
    Wscript.Echo
Next
</vb><vb name="Convert domain name to ADsPath" n="20">' Convert domain name to ADsPath



strDomainName = "accounting.sea.na.fabrikam.com"
arrDomLevels = Split(strDomainName, ".")
strADsPath = "dc=" &amp;amp; Join(arrDomLevels, ",dc=")
WScript.Echo strADsPath
</vb></dd>
		<dd name="Groups" code="groups" desc="Sample scripts for managing security and distribution groups within Active Directory."><vb name="Add 1000 Sample Users to a Security Group" n="21">' Add 1000 Sample Users to a Security Group


Const ADS_PROPERTY_APPEND = 3 

Set objRootDSE = GetObject("LDAP://rootDSE")
Set objContainer = GetObject("LDAP://cn=Users," &amp;amp; _
    objRootDSE.Get("defaultNamingContext"))
Set objGroup = objContainer.Create("Group", "cn=Group1")
objGroup.Put "sAMAccountName","Group1"
objGroup.SetInfo 

For i = 1 To 1000
    strDN = ",cn=Users," &amp;amp; objRootDSE.defaultNamingContext
    objGroup.PutEx ADS_PROPERTY_APPEND, "member", _
        Array("cn=UserNo" &amp;amp; i &amp;amp; strDN)
    objGroup.SetInfo
Next
WScript.Echo "Group1 created and 1000 Users added to the group."
</vb><vb name="Add a User to Two Security Groups" n="22">' Add a User to Two Security Groups


Const ADS_PROPERTY_APPEND = 3
 
Set objGroup = GetObject _
    ("LDAP://cn=Atl-Users,cn=Users,dc=NA,dc=fabrikam,dc=com")
objGroup.PutEx ADS_PROPERTY_APPEND, _
    "member", Array("cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
objGroup.SetInfo
 
Set objGroup = GetObject _
    ("LDAP://cn=NA-Employees,cn=Users,dc=NA,dc=fabrikam,dc=com")  
objGroup.PutEx ADS_PROPERTY_APPEND, _
    "member", Array("cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
objGroup.SetInfo
</vb><vb name="Add New Members to a Security Group" n="23">' Add New Members to a Security Group


Const ADS_PROPERTY_APPEND = 3 
 
Set objGroup = GetObject _
  ("LDAP://cn=Sea-Users,cn=Users,dc=NA,dc=fabrikam,dc=com") 
 
objGroup.PutEx ADS_PROPERTY_APPEND, "member", _
    Array("cn=Scientists,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com", _
        "cn=Executives,ou=Management,dc=NA,dc=fabrikam,dc=com", _ 
            "cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
objGroup.SetInfo
</vb><vb name="Assign a Group Manager" n="24">' Assign a Group Manager


Set objGroup = GetObject _
  ("LDAP://cn=Scientists,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com")
 
objGroup.Put "managedBy", "cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com"
objGroup.SetInfo
</vb><vb name="Change the Scope of a Security Group" n="25">' Change the Scope of a Security Group


Const ADS_GROUP_TYPE_GLOBAL_GROUP = &amp;amp;h2
Const ADS_GROUP_TYPE_LOCAL_GROUP = &amp;amp;h4
Const ADS_GROUP_TYPE_UNIVERSAL_GROUP = &amp;amp;h8
Const ADS_GROUP_TYPE_SECURITY_ENABLED = &amp;amp;h80000000
 
Set objGroup = GetObject _
    ("LDAP://cn=Scientists,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com") 
 
objGroup.Put "groupType", _
    ADS_GROUP_TYPE_GLOBAL_GROUP + ADS_GROUP_TYPE_SECURITY_ENABLED
 
objGroup.SetInfo
</vb><vb name="Create a Domain Local Distribution Group" n="26">' Create a Domain Local Distribution Group


Const ADS_GROUP_TYPE_LOCAL_GROUP = &amp;amp;h4

Set objOU = GetObject("LDAP://ou=HR,dc=NA,dc=fabrikam,dc=com")
Set objGroup = objOU.Create("Group", "cn=Vendors")

objGroup.Put "sAMAccountName", "vendors"
objGroup.Put "groupType", ADS_GROUP_TYPE_LOCAL_GROUP
objGroup.SetInfo
</vb><vb name="Create a Domain Local Security Group" n="27">' Create a Domain Local Security Group


Const ADS_GROUP_TYPE_LOCAL_GROUP = &amp;amp;h4
Const ADS_GROUP_TYPE_SECURITY_ENABLED = &amp;amp;h80000000

Set objOU = GetObject("LDAP://cn=Computers,dc=NA,dc=fabrikam,dc=com")
Set objGroup = objOU.Create("Group", "cn=DB-Servers")

objGroup.Put "sAMAccountName", "DBServers"
objGroup.Put "groupType", ADS_GROUP_TYPE_LOCAL_GROUP Or _
    ADS_GROUP_TYPE_SECURITY_ENABLED
objGroup.SetInfo
</vb><vb name="Create a Global Distribution Group" n="28">' Create a Global Distribution Group


Const ADS_GROUP_TYPE_GLOBAL_GROUP = &amp;amp;h2

Set objOU = GetObject("LDAP://ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com")
Set objGroup = objOU.Create("Group", "cn=Scientists")

objGroup.Put "sAMAccountName", "scientists"
objGroup.Put "groupType", ADS_GROUP_TYPE_GLOBAL_GROUP
objGroup.SetInfo
</vb><vb name="Create a Global Security Group" n="29">' Create a Global Security Group


Const ADS_GROUP_TYPE_GLOBAL_GROUP = &amp;amp;h2
Const ADS_GROUP_TYPE_SECURITY_ENABLED = &amp;amp;h80000000

Set objOU = GetObject("LDAP://ou=HR,dc=NA,dc=fabrikam,dc=com")
Set objGroup = objOU.Create("Group", "cn=HR-Employees")

objGroup.Put "sAMAccountName", "HRStaff"
objGroup.Put "groupType", ADS_GROUP_TYPE_GLOBAL_GROUP Or _
    ADS_GROUP_TYPE_SECURITY_ENABLED
objGroup.SetInfo
</vb><vb name="Create a Universal Distribution Group" n="30">' Create a Universal Distribution Group


Const ADS_GROUP_TYPE_UNIVERSAL_GROUP = &amp;amp;h8

Set objOU = GetObject("LDAP://ou=Sales,dc=NA,dc=fabrikam,dc=com")
Set objGroup = objOU.Create("Group", "cn=Customers")

objGroup.Put "sAMAccountName", "customers"
objGroup.Put "groupType", ADS_GROUP_TYPE_UNIVERSAL_GROUP
objGroup.SetInfo
</vb><vb name="Create a Universal Security Group" n="31">' Create a Universal Security Group


Const ADS_GROUP_TYPE_UNIVERSAL_GROUP = &amp;amp;h8
Const ADS_GROUP_TYPE_SECURITY_ENABLED = &amp;amp;h80000000

Set objOU = GetObject("LDAP://cn=Users,dc=NA,dc=fabrikam,dc=com")
Set objGroup = objOU.Create("Group", "cn=All-Employees")

objGroup.Put "sAMAccountName", "AllEmployees"
objGroup.Put "groupType", ADS_GROUP_TYPE_UNIVERSAL_GROUP Or _
    ADS_GROUP_TYPE_SECURITY_ENABLED
objGroup.SetInfo
</vb><vb name="Delete a Group from Active Directory" n="32">' Delete a Group from Active Directory


Set objOU = GetObject("LDAP://ou=hr,dc=fabrikam,dc=com")

objOU.Delete "group", "cn=atl-users"
</vb><vb name="List All the Members of a Group" n="33">' List All the Members of a Group


On Error Resume Next
 
Set objGroup = GetObject _
  ("LDAP://cn=Scientists,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com")
objGroup.GetInfo
 
arrMemberOf = objGroup.GetEx("member")
 
WScript.Echo "Members:"
For Each strMember in arrMemberOf
    WScript.echo strMember
Next
</vb><vb name="List Group Memberships for All the Users in an OU" n="34">' List Group Memberships for All the Users in an OU


On Error Resume Next

Const E_ADS_PROPERTY_NOT_FOUND  = &amp;amp;h8000500D

Set objOU = GetObject _
    ("LDAP://cn=Users,dc=NA,dc=fabrikam,dc=com")
  
ObjOU.Filter= Array("user")
 
For Each objUser in objOU
    WScript.Echo objUser.cn &amp;amp; " is a member of: " 
    WScript.Echo vbTab &amp;amp; "Primary Group ID: " &amp;amp; _
        objUser.Get("primaryGroupID")
  
    arrMemberOf = objUser.GetEx("memberOf")
  
    If Err.Number &amp;lt;&amp;gt;  E_ADS_PROPERTY_NOT_FOUND Then
        For Each Group in arrMemberOf
            WScript.Echo vbTab &amp;amp; Group
        Next
    Else
        WScript.Echo vbTab &amp;amp; "memberOf attribute is not set"
        Err.Clear
    End If
    Wscript.Echo 
Next
</vb><vb name="List Group Object Information" n="35">' List Group Object Information


Set objGroup = GetObject _
  ("GC://cn=Scientists,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com")
 
strWhenCreated = objGroup.Get("whenCreated")
strWhenChanged = objGroup.Get("whenChanged")
 
Set objUSNChanged = objGroup.Get("uSNChanged")
dblUSNChanged = _
    Abs(objUSNChanged.HighPart * 2^32 + objUSNChanged.LowPart)
 
Set objUSNCreated = objGroup.Get("uSNCreated")
dblUSNCreated = _
    Abs(objUSNCreated.HighPart * 2^32 + objUSNCreated.LowPart)
 
objGroup.GetInfoEx Array("canonicalName"), 0
arrCanonicalName = objGroup.GetEx("canonicalName")
 
WScript.echo "CanonicalName of object:"
For Each strValue in arrCanonicalName
    WScript.Echo vbTab &amp;amp; strValue
Next
WScript.Echo 
 
WScript.Echo "Object class: " &amp;amp; objGroup.Class 
WScript.Echo "When Created: " &amp;amp; strWhenCreated &amp;amp; " (Created - GMT)"
WScript.Echo "When Changed: " &amp;amp; strWhenChanged &amp;amp; " (Modified - GMT)"
WScript.Echo 
WScript.Echo "USN Changed: " &amp;amp; dblUSNChanged &amp;amp; " (USN Current)"
WScript.Echo "USN Created: " &amp;amp; dblUSNCreated &amp;amp; " (USN Original)"
</vb><vb name="List Other Groups a Group Belongs To" n="36">' List Other Groups a Group Belongs To


On Error Resume Next
 
Set objGroup = GetObject _
    ("LDAP://cn=Scientists,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com")
objGroup.GetInfo
 
arrMembersOf = objGroup.GetEx("memberOf")
 
WScript.Echo "MembersOf:"
For Each strMemberOf in arrMembersOf
    WScript.Echo strMemberOf
Next
</vb><vb name="List the Active Directory Groups a User Belongs To" n="37">' List the Active Directory Groups a User Belongs To


On Error Resume Next
Const E_ADS_PROPERTY_NOT_FOUND  = &amp;amp;h8000500D
 
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
intPrimaryGroupID = objUser.Get("primaryGroupID")
arrMemberOf = objUser.GetEx("memberOf")
 
If Err.Number = E_ADS_PROPERTY_NOT_FOUND Then
    WScript.Echo "The memberOf attribute is not set."
Else
    WScript.Echo "Member of: "
    For Each Group in arrMemberOf
        WScript.Echo Group
    Next
End If
 
Set objConnection = CreateObject("ADODB.Connection")
objConnection.Open "Provider=ADsDSOObject;"

Set objCommand = CreateObject("ADODB.Command")
objCommand.ActiveConnection = objConnection
objCommand.CommandText = _
    "&amp;lt;LDAP://dc=NA,dc=fabrikam,dc=com&amp;gt;;(objectCategory=Group);" &amp;amp; _
        "distinguishedName,primaryGroupToken;subtree"  
Set objRecordSet = objCommand.Execute
  
Do Until objRecordset.EOF
    If objRecordset.Fields("primaryGroupToken") = intPrimaryGroupID Then
        WScript.Echo "Primary group:"
        WScript.Echo objRecordset.Fields("distinguishedName") &amp;amp; _
            " (primaryGroupID: " &amp;amp; intPrimaryGroupID &amp;amp; ")"
    End If
    objRecordset.MoveNext
Loop
 
objConnection.Close
</vb><vb name="List the Attributes of the Group Class" n="38">' List the Attributes of the Group Class


Set objGroupClass = GetObject("LDAP://schema/group")
Set objSchemaClass = GetObject(objGroupClass.Parent)
 
i = 0
WScript.Echo "Mandatory attributes:"
For Each strAttribute in objGroupClass.MandatoryProperties
    i= i + 1
    WScript.Echo i &amp;amp; vbTab &amp;amp; strAttribute
    Set objAttribute = objSchemaClass.GetObject("Property",  strAttribute)
    WScript.Echo " (Syntax: " &amp;amp; objAttribute.Syntax &amp;amp; ")"
    If objAttribute.MultiValued Then
        WScript.Echo " Multivalued"
    Else
        WScript.Echo " Single-valued"
    End If
Next
 
WScript.Echo VbCrLf &amp;amp; "Optional attributes:"
For Each strAttribute in objGroupClass.OptionalProperties
    i= i + 1
    Wscript.Echo i &amp;amp; vbTab &amp;amp; strAttribute
    Set objAttribute = objSchemaClass.GetObject("Property",  strAttribute)
    Wscript.Echo " [Syntax: " &amp;amp; objAttribute.Syntax &amp;amp; "]"
    If objAttribute.MultiValued Then
        WScript.Echo " Multivalued"
    Else
        WScript.Echo " Single-valued"
    End If
Next
</vb><vb name="List the General Properties of a Group" n="39">' List the General Properties of a Group



On Error Resume Next

Const ADS_GROUP_TYPE_GLOBAL_GROUP = &amp;amp;h2
Const ADS_GROUP_TYPE_LOCAL_GROUP = &amp;amp;h4
Const ADS_GROUP_TYPE_UNIVERSAL_GROUP = &amp;amp;h8
Const ADS_GROUP_TYPE_SECURITY_ENABLED = &amp;amp;h80000000
 
Set objGroup = GetObject _
    ("LDAP://cn=Scientists,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com")

WScript.Echo "Name: " &amp;amp; objGroup.Name
WScript.Echo "SAM Account Name: " &amp;amp; objGroup.SAMAccountName
WScript.Echo "Mail: " &amp;amp; objGroup.Mail
WScript.Echo "Info: " &amp;amp; objGroup.Info

intGroupType = objGroup.GroupType
 
If intGroupType AND ADS_GROUP_TYPE_LOCAL_GROUP Then
    WScript.Echo "Group scope: Domain local"
ElseIf intGroupType AND ADS_GROUP_TYPE_GLOBAL_GROUP Then
    WScript.Echo "Group scope: Global"
ElseIf intGroupType AND ADS_GROUP_TYPE_UNIVERSAL_GROUP Then
    WScript.Echo "Group scope: Universal"
Else
    WScript.Echo "Group scope: Unknown"
End If
 
If intGroupType AND ADS_GROUP_TYPE_SECURITY_ENABLED Then
    WScript.Echo "Group type: Security group"
Else
    WScript.Echo "Group type: Distribution group"
End If
 
For Each strValue in objGroup.Description
    WScript.Echo "Description: " &amp;amp; strValue
Next
</vb><vb name="List the Managed By Information for a Group" n="40">' List the Managed By Information for a Group


On Error Resume Next
 
Set objGroup = GetObject _
    ("LDAP://cn=Scientists,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com")
 
strManagedBy = objGroup.Get("managedBy")
 
If IsEmpty(strManagedBy) = TRUE Then
    WScript.Echo "No user account is assigned to manage " &amp;amp; _
        "this group."
Else
    Set objUser = GetObject("LDAP://" &amp;amp; strManagedBy)

    Call GetUpdateMemberList
 
    WScript.Echo "Office: " &amp;amp; _
        objUser.physicalDeliveryOfficeName  
    WScript.Echo "Street Address: " &amp;amp; objUser.streetAddress
    WScript.Echo "Locality: " &amp;amp; objUser.l
    WScript.Echo "State/Province: " &amp;amp; objUser.st
    WScript.Echo "Country: " &amp;amp; objUser.c
    WScript.Echo "Telephone Number: " &amp;amp; objUser.telephoneNumber
    WScript.Echo "Fax Number: " &amp;amp; _
        objUser.facsimileTelephoneNumber
End If
 
Sub GetUpdateMemberList
    Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = &amp;amp;H5 
    Const Member_SchemaIDGuid = "{BF9679C0-0DE6-11D0-A285-00AA003049E2}"
    Const ADS_RIGHT_DS_WRITE_PROP = &amp;amp;H20
    objUser.GetInfoEx Array("canonicalName"),0
    strCanonicalName = objUser.Get("canonicalName")
    strDomain = Mid(strCanonicalName,1,InStr(1,strCanonicalName,".")-1)
    strSAMAccountName = objUser.Get("sAMAccountName")
 
    Set objNtSecurityDescriptor = objGroup.Get("ntSecurityDescriptor")
    Set objDiscretionaryAcl = objNtSecurityDescriptor.DiscretionaryAcl
 
    blnMatch = False
    For Each objAce In objDiscretionaryAcl
        If LCase(objAce.Trustee) = _
            LCase(strDomain &amp;amp; "\" &amp;amp; strSAMAccountName) AND _
            objAce.ObjectType =  Member_SchemaIDGuid AND _
                objAce.AceType = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT AND _
                    objAce.AccessMask And ADS_RIGHT_DS_WRITE_PROP Then
                        blnMatch = True
        End If  
    Next
    If blnMatch Then 
        WScript.Echo "Manager can update the member list"
    Else
        WScript.Echo "Manager cannot update the member list."
    End If
End Sub
</vb><vb name="List the Owner of a Group" n="41">' List the Owner of a Group


Set objGroup = GetObject _
  ("LDAP://cn=Scientists,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com")
 
Set objNtSecurityDescriptor = objGroup.Get("ntSecurityDescriptor")
 
WScript.Echo "Owner Tab"
WScript.Echo "Current owner of this item: " &amp;amp; objNtSecurityDescriptor.Owner
</vb><vb name="List the Primary Group for a User Account" n="42">' List the Primary Group for a User Account


On Error Resume Next

Const E_ADS_PROPERTY_NOT_FOUND  = &amp;amp;h8000500D
 
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
intPrimaryGroupID = objUser.Get("primaryGroupID")
 
Set objConnection = CreateObject("ADODB.Connection")
objConnection.Open "Provider=ADsDSOObject;"
Set objCommand = CreateObject("ADODB.Command")
objCommand.ActiveConnection = objConnection
objCommand.CommandText = _
    "&amp;lt;LDAP://dc=NA,dc=fabrikam,dc=com&amp;gt;;(objectCategory=Group);" &amp;amp; _
        "distinguishedName,primaryGroupToken;subtree"  
Set objRecordSet = objCommand.Execute
  
Do Until objRecordset.EOF
    If objRecordset.Fields("primaryGroupToken") = intPrimaryGroupID Then
        WScript.Echo "Primary group:"
        WScript.Echo objRecordset.Fields("distinguishedName") &amp;amp; _
            " (primaryGroupID: " &amp;amp; intPrimaryGroupID &amp;amp; ")"
    End If
    objRecordset.MoveNext
Loop
 
objConnection.Close
</vb><vb name="List the Security Descriptor for a Group" n="43">' List the Security Descriptor for a Group


Const SE_DACL_PROTECTED = &amp;amp;H1000 
 
Set objGroup = GetObject _
    ("LDAP://cn=Scientists,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com")
 
Set objNtSecurityDescriptor = objGroup.Get("ntSecurityDescriptor")
 
intNtSecurityDescriptorControl = objNtSecurityDescriptor.Control
 
WScript.Echo "Permissions Tab"
strMessage = "Allow inheritable permissions from the parent to " &amp;amp; _
     "propogate to this object and all child objects " 
If (intNtSecurityDescriptorControl And SE_DACL_PROTECTED) Then
    Wscript.Echo strMessage &amp;amp; "is disabled."
Else
    WScript.Echo strMessage &amp;amp; "is enabled."
End If
WScript.Echo 
 
Set objDiscretionaryAcl = objNtSecurityDescriptor.DiscretionaryAcl
DisplayAceInformation objDiscretionaryAcl, "DACL"
 
Sub DisplayAceInformation(SecurityStructure, strType)
    Const ADS_ACETYPE_ACCESS_ALLOWED = &amp;amp;H0 
    Const ADS_ACETYPE_ACCESS_DENIED = &amp;amp;H1 
    Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = &amp;amp;H5 
    Const ADS_ACETYPE_ACCESS_DENIED_OBJECT = &amp;amp;H6 
    intAceCount = 0
    For Each objAce In SecurityStructure
        strTrustee = Mid(objAce.Trustee,1,12)
        If StrComp(strTrustee, "NT AUTHORITY", 1) &amp;lt;&amp;gt; 0 Then
            intAceCount = intAceCount + 1
            WScript.Echo strType &amp;amp; " permission entry: " &amp;amp; intAceCount
            WScript.Echo "Name: " &amp;amp; objAce.Trustee
 
            intAceType = objAce.AceType
            If (intAceType = ADS_ACETYPE_ACCESS_ALLOWED Or _
                intAceType = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT) Then
                WScript.Echo "Type: Allow Access"
            ElseIf (intAceType = ADS_ACETYPE_ACCESS_DENIED Or _
                intAceType = ADS_ACETYPE_ACCESS_DENIED_OBJECT) Then
                WScript.Echo "Type: Deny Acess"
            Else
                WScript.Echo "Acess Type Unknown."
            End If
            ReadBitsInAccessMask(objAce.AccessMask)
            WScript.Echo VbCr
        End If
    Next
End Sub
 
Sub ReadBitsInAccessMask(AccessMask)
    Const ADS_RIGHT_DELETE = &amp;amp;H10000
    Const ADS_RIGHT_READ_CONTROL = &amp;amp;H20000
    Const ADS_RIGHT_WRITE_DAC = &amp;amp;H40000
    Const ADS_RIGHT_WRITE_OWNER = &amp;amp;H80000
    Const ADS_RIGHT_DS_CREATE_CHILD = &amp;amp;H1
    Const ADS_RIGHT_DS_DELETE_CHILD = &amp;amp;H2
    Const ADS_RIGHT_ACTRL_DS_LIST = &amp;amp;H4
    Const ADS_RIGHT_DS_SELF = &amp;amp;H8
    Const ADS_RIGHT_DS_READ_PROP = &amp;amp;H10
    Const ADS_RIGHT_DS_WRITE_PROP = &amp;amp;H20
    Const ADS_RIGHT_DS_DELETE_TREE = &amp;amp;H40
    Const ADS_RIGHT_DS_LIST_OBJECT = &amp;amp;H80
    Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100
 
    WScript.Echo VbCrLf &amp;amp; "Standard Access Rights"
    If (AccessMask And ADS_RIGHT_DELETE) Then _
        WScript.Echo vbTab &amp;amp; "-Delete an object."
    If (AccessMask And ADS_RIGHT_READ_CONTROL) Then _
        WScript.Echo vbTab &amp;amp; "-Read permissions."
    If (AccessMask And ADS_RIGHT_WRITE_DAC) Then _
        WScript.Echo vbTab &amp;amp; "-Write permissions."
    If (AccessMask And ADS_RIGHT_WRITE_OWNER) Then _
        WScript.Echo vbTab &amp;amp; "-Modify owner."
  
    WScript.Echo VbCrLf &amp;amp; "Directory Service Specific Access Rights"
    If (AccessMask And ADS_RIGHT_DS_CREATE_CHILD) Then _
       WScript.Echo vbTab &amp;amp; "-Create child objects."
    If (AccessMask And ADS_RIGHT_DS_DELETE_CHILD) Then _
        WScript.Echo vbTab &amp;amp; "-Delete child objects."
    If (AccessMask And ADS_RIGHT_ACTRL_DS_LIST) Then _
        WScript.Echo vbTab &amp;amp; "-Enumerate an object."
    If (AccessMask And ADS_RIGHT_DS_READ_PROP) Then _
        WScript.Echo vbTab &amp;amp; "-Read the properties of an object."
    If (AccessMask And ADS_RIGHT_DS_WRITE_PROP) Then _
        WScript.Echo vbTab &amp;amp; "-Write the properties of an object."
    If (AccessMask And ADS_RIGHT_DS_DELETE_TREE) Then _
        WScript.Echo vbTab &amp;amp; "-Delete a tree of objects"
    If (AccessMask And ADS_RIGHT_DS_LIST_OBJECT) Then _
        WScript.Echo vbTab &amp;amp; "-List a tree of objects."
 
    WScript.Echo VbCrLf &amp;amp; "Control Access Rights"
    If (AccessMask And ADS_RIGHT_DS_CONTROL_ACCESS) + _
        (AccessMask And ADS_RIGHT_DS_SELF) = 0 Then
        WScript.Echo "-None"
    Else 
        If (AccessMask And ADS_RIGHT_DS_CONTROL_ACCESS) Then _
            WScript.Echo vbTab &amp;amp; "-Extended access rights."
        If (AccessMask And ADS_RIGHT_DS_SELF) Then
            WScript.Echo vbTab &amp;amp; "-Active Directory must validate a property "
            WScript.Echo vbTab &amp;amp; " write operation beyond the schema " &amp;amp; _
                "definition "
            WScript.Echo vbTab &amp;amp; " for the attribute."
      End If
    End If
End Sub
</vb><vb name="List the System Access Control List for a Group" n="44">' List the System Access Control List for a Group


Const SE_SACL_PROTECTED = &amp;amp;H2000 
Const ADS_SECURITY_INFO_OWNER = &amp;amp;H1 
Const ADS_SECURITY_INFO_GROUP = &amp;amp;H2
Const ADS_OPTION_SECURITY_MASK =&amp;amp;H3
Const ADS_SECURITY_INFO_DACL = &amp;amp;H4 
Const ADS_SECURITY_INFO_SACL = &amp;amp;H8
 
Set objGroup = GetObject _
    ("LDAP://cn=Scientists,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com")
 
objGroup.SetOption ADS_OPTION_SECURITY_MASK, ADS_SECURITY_INFO_OWNER _
    Or ADS_SECURITY_INFO_GROUP Or ADS_SECURITY_INFO_DACL _
    Or ADS_SECURITY_INFO_SACL
  
Set objNtSecurityDescriptor = objGroup.Get("ntSecurityDescriptor")
 
intNtSecurityDescriptorControl = objNtSecurityDescriptor.Control
 
WScript.Echo "Auditing Tab"
strMessage = "Allow inheritable auditing entries from" &amp;amp; _ 
    "the parent to "
strMessage = strMessage &amp;amp; "propogate to this object and all child objects "

If (intNtSecurityDescriptorControl And SE_SACL_PROTECTED) Then
    Wscript.Echo strMessage &amp;amp; "is disabled."
Else
    WScript.Echo strMessage &amp;amp; "is enabled."
End If
WScript.Echo 
 
Set objSacl = objNtSecurityDescriptor.SystemAcl
DisplayAceInformation objSacl, "SACL"
 
Sub DisplayAceInformation(SecurityStructure, strType)
    Const ADS_ACETYPE_SYSTEM_AUDIT = &amp;amp;H2 
    Const ADS_ACETYPE_SYSTEM_AUDIT_OBJECT = &amp;amp;H7 
  
    intAceCount = 0
    For Each objAce In SecurityStructure
        strTrustee = Mid(objAce.Trustee,1,12)
        If StrComp(strTrustee, "NT AUTHORITY", 1) &amp;lt;&amp;gt; 0 Then
            intAceCount = intAceCount + 1
            WScript.Echo strType &amp;amp; " permission entry: " &amp;amp; intAceCount
            WScript.Echo "Name: " &amp;amp; objAce.Trustee
 
            intAceType = objAce.AceType
            WScript.Echo "ACETYPE IS: " &amp;amp; intAceType
            If (intAceType = ADS_ACETYPE_SYSTEM_AUDIT or _
                intAceType = ADS_ACETYPE_SYSTEM_AUDIT_OBJECT) Then
                WScript.Echo "Type: Success or Failure Audit"
            Else
                WScript.Echo "Audit Type Unknown."
            End If
            ReadBitsInAccessMask(objAce.AccessMask)
            WScript.Echo 
        End If
    Next
End Sub
 
Sub ReadBitsInAccessMask(AccessMask)
    Const ADS_RIGHT_DELETE = &amp;amp;H10000
    Const ADS_RIGHT_READ_CONTROL = &amp;amp;H20000
    Const ADS_RIGHT_WRITE_DAC = &amp;amp;H40000
    Const ADS_RIGHT_WRITE_OWNER = &amp;amp;H80000
    Const ADS_RIGHT_DS_CREATE_CHILD = &amp;amp;H1
    Const ADS_RIGHT_DS_DELETE_CHILD = &amp;amp;H2
    Const ADS_RIGHT_ACTRL_DS_LIST = &amp;amp;H4
    Const ADS_RIGHT_DS_SELF = &amp;amp;H8
    Const ADS_RIGHT_DS_READ_PROP = &amp;amp;H10
    Const ADS_RIGHT_DS_WRITE_PROP = &amp;amp;H20
    Const ADS_RIGHT_DS_DELETE_TREE = &amp;amp;H40
    Const ADS_RIGHT_DS_LIST_OBJECT = &amp;amp;H80
    Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100
 
    WScript.Echo VbCrLf &amp;amp; "Standard Access Rights"
    If (AccessMask And ADS_RIGHT_DELETE) Then _
        WScript.Echo vbTab &amp;amp; "-Delete an object."
    If (AccessMask And ADS_RIGHT_READ_CONTROL) Then _
        WScript.Echo vbTab &amp;amp; "-Read permissions."
    If (AccessMask And ADS_RIGHT_WRITE_DAC) Then _
        WScript.Echo vbTab &amp;amp; "-Write permissions."
    If (AccessMask And ADS_RIGHT_WRITE_OWNER) Then _
        WScript.Echo vbTab &amp;amp; "-Modify owner."
  
    WScript.Echo VbCrLf &amp;amp; "Directory Service Specific Access Rights"
    If (AccessMask And ADS_RIGHT_DS_CREATE_CHILD) Then _
        WScript.Echo vbTab &amp;amp; "-Create child objects."
    If (AccessMask And ADS_RIGHT_DS_DELETE_CHILD) Then _
        WScript.Echo vbTab &amp;amp; "-Delete child objects."
    If (AccessMask And ADS_RIGHT_ACTRL_DS_LIST) Then _
        WScript.Echo vbTab &amp;amp; "-Enumerate an object."
    If (AccessMask And ADS_RIGHT_DS_READ_PROP) Then _
        WScript.Echo vbTab &amp;amp; "-Read the properties of an object."
    If (AccessMask And ADS_RIGHT_DS_WRITE_PROP) Then _
        WScript.Echo vbTab &amp;amp; "-Write the properties of an object."
    If (AccessMask And ADS_RIGHT_DS_DELETE_TREE) Then _
        WScript.Echo vbTab &amp;amp; "-Delete a tree of objects"
    If (AccessMask And ADS_RIGHT_DS_LIST_OBJECT) Then _
        WScript.Echo vbTab &amp;amp; "-List a tree of objects."
 
    WScript.Echo VbCrLf &amp;amp; "Control Access Rights"
    If (AccessMask And ADS_RIGHT_DS_CONTROL_ACCESS) + _
        (AccessMask And ADS_RIGHT_DS_SELF) = 0 Then
            WScript.Echo "-None"
    Else 
        If (AccessMask And ADS_RIGHT_DS_CONTROL_ACCESS) Then _
            WScript.Echo vbTab &amp;amp; "-Extended access rights."
        If (AccessMask And ADS_RIGHT_DS_SELF) Then
            WScript.Echo vbTab &amp;amp; "-Active Directory must validate a property "
            WScript.Echo vbTab &amp;amp; " write operation beyond the schema " &amp;amp; _
                "definition "
            WScript.Echo vbTab &amp;amp; " for the attribute."
        End If
    End If
End Sub
</vb><vb name="Modify Group Attributes" n="45">' Modify Group Attributes


Const ADS_PROPERTY_UPDATE = 2 

Set objGroup = GetObject _
   ("LDAP://cn=Scientists,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com") 
 
objGroup.Put "sAMAccountName", "Scientist01"
objGroup.Put "mail", "YoungRob@fabrikam.com"
objGroup.Put "info", "Use this group for official communications " &amp;amp; _
  "with scientists who are contracted to work with Contoso.com."
objGroup.PutEx ADS_PROPERTY_UPDATE, _
    "description", Array("Scientist Mailing List")
objGroup.SetInfo
</vb><vb name="Modify Group Type" n="46">' Modify Group Type


Const ADS_GROUP_TYPE_GLOBAL_GROUP = &amp;amp;h2
Const ADS_GROUP_TYPE_LOCAL_GROUP = &amp;amp;h4
Const ADS_GROUP_TYPE_UNIVERSAL_GROUP = &amp;amp;h8
Const ADS_GROUP_TYPE_SECURITY_ENABLED = &amp;amp;h80000000
 
Set objGroup = GetObject _
    ("LDAP://cn=Scientists,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com") 
 
objGroup.Put "groupType", _
    ADS_GROUP_TYPE_UNIVERSAL_GROUP + ADS_GROUP_TYPE_SECURITY_ENABLED
objGroup.SetInfo
</vb><vb name="Move a Group Within a Domain" n="47">' Move a Group Within a Domain


Set objOU = GetObject("LDAP://cn=Users,dc=NA,dc=fabrikam,dc=com")

objOU.MoveHere "LDAP://cn=atl-users,ou=HR,dc=NA,dc=fabrikam,dc=com", _
    vbNullString
</vb><vb name="Remove a User from a Group" n="48">' Remove a User from a Group


Const ADS_PROPERTY_DELETE = 4 
 
Set objGroup = GetObject _
   ("LDAP://cn=Sea-Users,cn=Users,dc=NA,dc=fabrikam,dc=com") 
 
objGroup.PutEx ADS_PROPERTY_DELETE, _
    "member",Array("cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
objGroup.SetInfo
</vb><vb name="Remove All Group Memberships for a User Account" n="49">' Remove All Group Memberships for a User Account


On Error Resume Next

Const ADS_PROPERTY_DELETE = 4
Const E_ADS_PROPERTY_NOT_FOUND  = &amp;amp;h8000500D
 
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com") 
arrMemberOf = objUser.GetEx("memberOf")
 
If Err.Number = E_ADS_PROPERTY_NOT_FOUND Then
    WScript.Echo "This account is not a member of any security groups."
    WScript.Quit
End If
 
For Each Group in arrMemberOf
    Set objGroup = GetObject("LDAP://" &amp;amp; Group) 
    objGroup.PutEx ADS_PROPERTY_DELETE, _
        "member", Array("cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
    objGroup.SetInfo
Next
</vb><vb name="Remove All the Members of a Group" n="50">' Remove All the Members of a Group


Const ADS_PROPERTY_CLEAR = 1 
 
Set objGroup = GetObject _
    ("LDAP://cn=Sea-Users,cn=Users,dc=NA,dc=fabrikam,dc=com") 
 
objGroup.PutEx ADS_PROPERTY_CLEAR, "member", 0
objGroup.SetInfo
</vb><vb name="Remove the Manager of a Group" n="51">' Remove the Manager of a Group


Const ADS_PROPERTY_CLEAR = 1 
 
Set objGroup = GetObject _
   ("LDAP://cn=Scientists,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com")

objGroup.PutEx ADS_PROPERTY_CLEAR, "managedBy", 0
objGroup.SetInfo
</vb><vb name="Replace Group Membership with All-New Members" n="52">' Replace Group Membership with All-New Members


Const ADS_PROPERTY_UPDATE = 2 
 
Set objGroup = GetObject _
    ("LDAP://cn=Scientists,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com") 
 
objGroup.PutEx ADS_PROPERTY_UPDATE, "member", _
      Array("cn=YoungRob,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com", _
          "cn=ShenAlan,ou=R&amp;amp;D,dc=NA,dc=fabrikam,dc=com")
objGroup.SetInfo
</vb></dd>
		<dd name="Monitoring" code="monitor" desc="Sample scripts for monitoring Active Directory operations, including replication and trust relationships."><vb name="Install Active Directory Database Performance Counters" n="53">' Install Active Directory Database Performance Counters


Set WshShell = WScript.CreateObject("WScript.Shell")
Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objShell = CreateObject("Shell.Application")
objFSO.CreateFolder ("C:\Performance")
Set objCopyFile = objFSO.GetFile("C:\windows\system32\esentprf.dll ")
objCopyFile.Copy ("C:\performance\esentprf.dll ") 

WshShell.RegWrite _
    "HKLM\System\CurrentControlSet\Services\Esent\Performance\Open", _
        "OpenPerformanceData", "REG_SZ"
WshShell.RegWrite _
    "HKLM\System\CurrentControlSet\Services\Esent\Performance\Collect", _
        "CollectPerformanceData", "REG_SZ"
WshShell.RegWrite _
    "HKLM\System\CurrentControlSet\Services\Esent\Performance\Close", _
        "ClosePerformanceData", "REG_SZ"
WshShell.RegWrite _
    "HKLM\System\CurrentControlSet\Services\Esent\Performance\Library", _
        "C:\Performance\Esentprf.dll", "REG_SZ"
strCommandText = "%comspec% /c lodctr.exe c:\windows\system32\esentprf.ini" 
WshShell.Run strCommandText
</vb><vb name="List Active Directory Database Replication Partners" n="54">' List Active Directory Database Replication Partners


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; _
        strComputer &amp;amp; "\root\MicrosoftActiveDirectory")

Set colReplicationOperations = objWMIService.ExecQuery _
    ("Select * from MSAD_ReplNeighbor")

For each objReplicationJob in colReplicationOperations 
    Wscript.Echo "Domain: " &amp;amp; objReplicationJob.Domain
    Wscript.Echo "Naming context DN: " &amp;amp; objReplicationJob.NamingContextDN
    Wscript.Echo "Source DSA DN: " &amp;amp; objReplicationJob.SourceDsaDN
    Wscript.Echo "Last synch result: " &amp;amp; objReplicationJob.LastSyncResult
    Wscript.Echo "Number of consecutive synchronization failures: " &amp;amp; _
        objReplicationJob.NumConsecutiveSyncFailures
Next
</vb><vb name="Configure Trust Relationship Properties" n="55">' Configure Trust Relationship Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; _
        strComputer &amp;amp; "\root\MicrosoftActiveDirectory")

Set colTrustList = objWMIService.ExecQuery _
    ("Select * from Microsoft_TrustProvider")

For Each objTrust in colTrustList
    objTrust.TrustListLifetime = 25
    objTrust.TrustStatusLifetime = 10
    objTrust.TrustCheckLevel = 1
    objTrust.Put_
Next
</vb><vb name="List Domain Information for Trust Partners" n="56">' List Domain Information for Trust Partners


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; _
        strComputer &amp;amp; "\root\MicrosoftActiveDirectory")

Set colDomainInfo = objWMIService.ExecQuery _
    ("Select * from Microsoft_LocalDomainInfo")

For each objDomain in colDomainInfo
    Wscript.Echo "DNS name: " &amp;amp; objDomain.DNSName
    Wscript.Echo "Flat name: " &amp;amp; objDomain.FlatName
    Wscript.Echo "SID: " &amp;amp; objDomain.SID
    Wscript.Echo "Tree name: " &amp;amp; objDomain.TreeName
    Wscript.Echo "Domain controller name: " &amp;amp; objDomain.DCName
Next
</vb><vb name="List Trust Relationships" n="57">' List Trust Relationships


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; _
        strComputer &amp;amp; "\root\MicrosoftActiveDirectory")

Set colTrustList = objWMIService.ExecQuery _
    ("Select * from Microsoft_DomainTrustStatus")

For each objTrust in colTrustList
    Wscript.Echo "Trusted domain: " &amp;amp; objTrust.TrustedDomain
    Wscript.Echo "Trust direction: " &amp;amp; objTrust.TrustDirection
    Wscript.Echo "Trust type: " &amp;amp; objTrust.TrustType
    Wscript.Echo "Trust attributes: " &amp;amp; objTrust.TrustAttributes
    Wscript.Echo "Trusted domain controller name: " &amp;amp; objTrust.TrustedDCName
    Wscript.Echo "Trust status: " &amp;amp; objTrust.TrustStatus
    Wscript.Echo "Trust is OK: " &amp;amp; objTrust.TrustIsOK
Next
</vb><vb name="Monitor Active Directory Database Performance" n="58">' Monitor Active Directory Database Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colDatabases = objWMIService.ExecQuery _
    ("Select * from Win32_PerfFormattedData_Esent_Database " _
        &amp;amp; "Where Name = 'NT Directory'")

For Each objADDatabase in colDatabases
    Wscript.Echo "Database cache hit percent: " &amp;amp; _
        objADDatabase.DatabaseCachePercentHit
Next
</vb><vb name="Monitor Active Directory Replication" n="59">' Monitor Active Directory Replication


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; _
        strComputer &amp;amp; "\root\MicrosoftActiveDirectory")

Set colReplicationOperations = objWMIService.ExecQuery _
        ("Select * from MSAD_ReplPendingOp")

If colReplicationOperations.Count = 0 Then
    Wscript.Echo "There are no replication jobs pending."
    Wscript.Quit
Else
    For each objReplicationJob in colReplicationOperations 
        Wscript.Echo "Serial number: " &amp;amp; objReplicationJob.SerialNumber
        Wscript.Echo "Time in queue: " &amp;amp; objReplicationJob.TimeEnqueued
        Wscript.Echo "DSA DN: " &amp;amp; objReplicationJob.DsaDN
        Wscript.Echo "DSA address: " &amp;amp; objReplicationJob.DsaAddress
        Wscript.Echo "Naming context DN: " &amp;amp; objReplicationJob.NamingContextDn
    Next
End If
</vb><vb name="Monitor Domain Controller Performance" n="60">' Monitor Domain Controller Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colDatabases = objWMIService.ExecQuery _
    ("Select * from Win32_PerfFormattedData_NTDS_NTDS")

For Each objADDatabase in colDatabases
    Wscript.Echo "DS threads in use: " &amp;amp; objADDatabase.DSThreadsInUse
    Wscript.Echo "LDAP bind time: " &amp;amp; objADDatabase.LDAPBindTime
    Wscript.Echo "LDAP client sessions: " &amp;amp; objADDatabase.LDAPClientSessions
Next
</vb><vb name="Monitor FRS Replication" n="61">' Monitor FRS Replication


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFRSSet = objWMIService.ExecQuery _   
 ("Select * from Win32_PerfFormattedData_FileReplicaConn_FileReplicaConn")

For Each objFRSInstance in colFRSSet 
    Wscript.Echo "Remote change orders received: " &amp;amp; _
        objFRSInstance.RemoteChangeOrdersReceived
    Wscript.Echo "Remote change orders sent: " &amp;amp; _
        objFRSInstance.RemoteChangeOrdersSent
    Wscript.Echo "Packets sent: " &amp;amp; objFRSInstance.PacketsSent
Next
</vb><vb name="Monitor NTDS Performance" n="62">' Monitor NTDS Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_NTDS_NTDS").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
    Wscript.Echo "Directory service threads in use: " &amp;amp; _
        objItem.DSThreadsInUse
    Wscript.Sleep 2000
    objRefresher.Refresh
    Next
Next
</vb></dd>
		<dd name="OUs" code="ous" desc="Sample scripts for managing Active Directory organizational units."><vb name="Assign a New Group Policy Link to an OU" n="63">' Assign a New Group Policy Link to an OU


On Error Resume Next

Set objContainer = GetObject _
    ("LDAP://ou=Sales,dc=NA,dc=fabrikam,dc=com") 
 
strExistingGPLink = objContainer.Get("gPLink")
 
strGPODisplayName = "Sales Policy"
strGPOLinkOptions = 2
strNewGPLink = "[" &amp;amp; GetGPOADsPath &amp;amp; ";" &amp;amp; strGPOLinkOptions &amp;amp; "]"
 
objContainer.Put "gPLink", strExistingGPLink &amp;amp; strNewGPLink
objContainer.Put "gPOptions", "0"
 
objContainer.SetInfo
 
Function GetGPOADsPath
    Set objConnection = CreateObject("ADODB.Connection")  
    objConnection.Open "Provider=ADsDSOObject;"   
 
    Set objCommand = CreateObject("ADODB.Command")
    objCommand.ActiveConnection = objConnection
 
    objCommand.CommandText = _
      "&amp;lt;LDAP://cn=Policies,cn=System,dc=NA,dc=fabrikam,dc=com&amp;gt;;;" &amp;amp; _
          "distinguishedName,displayName;onelevel"
    Set objRecordSet = objCommand.Execute
 
    Do Until objRecordSet.EOF
        If objRecordSet.Fields("displayName") = strGPODisplayName Then
          GetGPOADsPath = "LDAP://" &amp;amp; objRecordSet.Fields("distinguishedName")
          objConnection.Close
          Exit Function
        End If
        objRecordSet.MoveNext
    Loop
    objConnection.Close
End Function
</vb><vb name="Assign a New Manager to an OU" n="64">' Assign a New Manager to an OU


Set objContainer = GetObject _
  ("LDAP://ou=Sales,dc=NA,dc=fabrikam,dc=com")
 
objContainer.Put "managedBy", "cn=AkersKim,ou=Sales,dc=NA,dc=fabrikam,dc=com"
objContainer.SetInfo
</vb><vb name="Clear COM+ Attributes from a User Account" n="65">' Clear COM+ Attributes from a User Account


Const ADS_PROPERTY_CLEAR = 1 
 
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")

objUser.PutEx ADS_PROPERTY_CLEAR, "msCOM-UserPartitionSetLink", 0
objUser.SetInfo
</vb><vb name="Clear the COM+ Partition Link Set of an OU" n="66">' Clear the COM+ Partition Link Set of an OU


Const ADS_PROPERTY_CLEAR = 1 

Set objContainer = GetObject _
  ("LDAP://ou=Sales,dc=NA,dc=fabrikam,dc=com")
 
objContainer.PutEx ADS_PROPERTY_CLEAR, "msCOM-UserPartitionSetLink", 0
objContainer.SetInfo
</vb><vb name="Clear the General Properties of an OU" n="67">' Clear the General Properties of an OU


Const ADS_PROPERTY_CLEAR = 1 

Set objContainer = GetObject _
  ("LDAP://ou=Sales,dc=NA,dc=fabrikam,dc=com")
 
objContainer.PutEx ADS_PROPERTY_CLEAR, "description", 0
objContainer.PutEx ADS_PROPERTY_CLEAR, "street", 0
objContainer.PutEx ADS_PROPERTY_CLEAR, "l", 0
objContainer.PutEx ADS_PROPERTY_CLEAR, "st", 0
objContainer.PutEx ADS_PROPERTY_CLEAR, "postalCode", 0
objContainer.PutEx ADS_PROPERTY_CLEAR, "c", 0
objContainer.SetInfo
</vb><vb name="Clear the Group Policy Links Assigned to an OU" n="68">' Clear the Group Policy Links Assigned to an OU


Const ADS_PROPERTY_CLEAR = 1 
 
Set objContainer = GetObject _
    ("LDAP://ou=Sales,dc=NA,dc=fabrikam,dc=com")

objContainer.PutEx ADS_PROPERTY_CLEAR, "gPLink", 0
objContainer.PutEx ADS_PROPERTY_CLEAR, "gPOptions", 0
objContainer.SetInfo
</vb><vb name="Create an OU" n="69">' Create an OU


Set objDomain = GetObject("LDAP://dc=fabrikam,dc=com")

Set objOU = objDomain.Create("organizationalUnit", "ou=Management")
objOU.SetInfo
</vb><vb name="Create an OU in an Existing OU" n="70">' Create an OU in an Existing OU


Set objOU1 = GetObject("LDAP://ou=OU1,dc=na,dc=fabrikam,dc=com")

Set objOU2 = objOU1.Create("organizationalUnit", "ou=OU2")
objOU2.SetInfo
</vb><vb name="Delete an OU" n="71">' Delete an OU


Set objDomain = GetObject("LDAP://dc=fabrikam,dc=com")

objDomain.Delete "organizationalUnit", "ou=hr"
</vb><vb name="List COM+ Partition Information for a Domain" n="72">' List COM+ Partition Information for a Domain


Set objCOMPartitionSets = GetObject _
    ("LDAP://cn=ComPartitionSets,cn=System,dc=NA,dc=fabrikam,dc=com")
 
For Each objPartitionSet in objCOMPartitionSets
    WScript.Echo "Name: " &amp;amp; objPartitionSet.Name
Next
</vb><vb name="List COM+ Partition Sets" n="73">' List COM+ Partition Sets


Set objCOMPartitionSets = GetObject _
    ("LDAP://cn=ComPartitionSets,cn=System,dc=NA,dc=fabrikam,dc=com")
 
For Each objPartitionSet in objCOMPartitionSets
    WScript.Echo "Name: " &amp;amp; objPartitionSet.Name
Next
</vb><vb name="List Group Policy Information for an OU" n="74">' List Group Policy Information for an OU


On Error Resume Next

Set objContainer = GetObject _
    ("LDAP://ou=Sales,dc=NA,dc=fabrikam,dc=com")
 
strGpLink = objContainer.Get("gPLink")
intGpOptions = objContainer.Get("gPOptions")
 
If strGpLink &amp;lt;&amp;gt; " " Then
    arrGpLinkItems = Split(strGpLink,"]")
    For i = UBound(arrGPLinkItems) to LBound(arrGpLinkItems) + 1 Step -1
        arrGPLink = Split(arrGpLinkItems(i-1),";")
        strDNGPLink = Mid(arrGPLink(0),9)
        WScript.Echo GetGPOName
        Select Case arrGPLink(1)
        Case 0
            WScript.Echo "No Override is cleared and the GPO is enabled."
        Case 1
            WScript.Echo "No Override is cleared and the GPO is disabled."
        Case 2
            WScript.Echo "No Override is checked and the GPO is enabled."
        Case 3
            WScript.Echo "No Override is checked and the GPO is disabled."
      End Select
    Next
    WScript.Echo VbCrLf
End If
 
If intGpOptions = 1 Then
    WScript.Echo "Block Policy Inheritance is checked."
Else
    WScript.Echo "Block Policy Inheritance is not checked."
End If
    
Function GetGPOName
    Set objConnection = CreateObject("ADODB.Connection")  
    objConnection.Open "Provider=ADsDSOObject;"   
 
    Set objCommand = CreateObject("ADODB.Command")
    objCommand.ActiveConnection = objConnection
 
    objCommand.CommandText = _
        "&amp;lt;LDAP://cn=Policies,cn=System,dc=NA,dc=fabrikam,dc=com&amp;gt;;;" &amp;amp; _
            "distinguishedName,displayName;onelevel"
    Set objRecordSet = objCommand.Execute
 
    Do Until objRecordSet.EOF
        If objRecordSet.Fields("distinguishedName") = strDNGPLink Then
            GetGPOName = objRecordSet.Fields("displayName")
            objConnection.Close
            Exit Function
      End If
      objRecordSet.MoveNext
    Loop
    objConnection.Close
End Function
</vb><vb name="List the Attributes of the organizationalUnit Class" n="75">' List the Attributes of the organizationalUnit Class


Set objOrganizationalUnitClass = _
    GetObject("LDAP://schema/organizationalUnit")

Set objSchemaClass = GetObject(objOrganizationalUnitClass.Parent)
 
i = 0
WScript.Echo "Mandatory attributes:"

For Each strAttribute in objOrganizationalUnitClass.MandatoryProperties
    i= i + 1
    WScript.Echo i &amp;amp; vbTab &amp;amp; strAttribute
    Set objAttribute = objSchemaClass.GetObject("Property",  strAttribute)
    WScript.Echo " (Syntax: " &amp;amp; objAttribute.Syntax &amp;amp; ")"
    If objAttribute.MultiValued Then
        WScript.Echo " Multivalued"
    Else
        WScript.Echo " Single-valued"
    End If
Next
 
WScript.Echo VbCrLf &amp;amp; "Optional attributes:"
For Each strAttribute in objOrganizationalUnitClass.OptionalProperties
    i= i + 1
    WScript.StdOut.Write i &amp;amp; vbTab &amp;amp; strAttribute
    Set objAttribute = objSchemaClass.GetObject("Property",  strAttribute)
    Wscript.Echo " [Syntax: " &amp;amp; objAttribute.Syntax &amp;amp; "]"
    If objAttribute.MultiValued Then
        WScript.Echo " Multivalued"
    Else
        WScript.Echo " Single-valued"
    End If
Next
</vb><vb name="List the COM+ Properties of an OU" n="76">' List the COM+ Properties of an OU


On Error Resume Next

Set objContainer = GetObject _
    ("LDAP://ou=Sales,dc=NA,dc=fabrikam,dc=com")
 
strMsCOMUserPartitionSetLink = objContainer.Get("msCOM-UserPartitionSetLink")
WScript.Echo "ms-COMUserPartitionSetLink: " &amp;amp; strMsCOMUserPartitionSetLink
</vb><vb name="List the General Properties of an OU" n="77">' List the General Properties of an OU


On Error Resume Next

Set objContainer = GetObject _
  ("LDAP://ou=Sales,dc=NA,dc=fabrikam,dc=com")
 
For Each strValue in objContainer.description
  WScript.Echo "Description: " &amp;amp; strValue
Next
 
Wscript.Echo "Street Address: " &amp;amp; strStreetAddress
Wscript.Echo "Locality: " &amp;amp; 
Wscript.Echo "State/porvince: " &amp;amp; objContainer.st
Wscript.Echo "Postal Code: " &amp;amp; objContainer.postalCode
Wscript.Echo "Country: " &amp;amp; objContainer.c
</vb><vb name="List the Managed By Information for an OU" n="78">' List the Managed By Information for an OU


On Error Resume Next
 
Set objContainer = GetObject _
   ("LDAP://ou=Sales,dc=NA,dc=fabrikam,dc=com")
 
strManagedBy = objContainer.Get("managedBy")
 
If IsEmpty(strManagedBy) = TRUE Then
    WScript.Echo "No user account is assigned to manage " &amp;amp; _
        "this OU."
Else
    Set objUser = GetObject("LDAP://" &amp;amp; strManagedBy)
    WScript.Echo "Manager: " &amp;amp; objUser.streetAddress
    WScript.Echo "Office: " &amp;amp; _
      objUser.physicalDeliveryOfficeName  
    WScript.Echo "Street Address: " &amp;amp; strStreetAddress
    WScript.Echo "Locality: " &amp;amp; objUser.l
    WScript.Echo "State/province: " &amp;amp; objUser.st
    WScript.Echo "Country: " &amp;amp; objUser.c
    WScript.Echo "Telephone Number: " &amp;amp; objUser.telephoneNumber
    WScript.Echo "Fax Number: " &amp;amp; _
      objUser.facsimileTelephoneNumber
End If
</vb><vb name="List the Owner of an OU" n="79">' List the Owner of an OU


Set objContainer = GetObject _
  ("LDAP://ou=Sales,dc=NA,dc=fabrikam,dc=com")
 
Set objNtSecurityDescriptor = objContainer.Get("ntSecurityDescriptor")
 
WScript.Echo "Owner Tab"
WScript.Echo "Current owner of this item: " &amp;amp; objNtSecurityDescriptor.Owner
</vb><vb name="List the Properties of an OU Object" n="80">' List the Properties of an OU Object


Set objContainer = GetObject _
   ("GC://ou=Sales,dc=NA,dc=fabrikam,dc=com")
 
strWhenCreated = objContainer.Get("whenCreated")
strWhenChanged = objContainer.Get("whenChanged")
 
Set objUSNChanged = objContainer.Get("uSNChanged")
dblUSNChanged = _
    Abs(objUSNChanged.HighPart * 2^32 + objUSNChanged.LowPart)
 
Set objUSNCreated = objContainer.Get("uSNCreated")
dblUSNCreated = _
    Abs(objUSNCreated.HighPart * 2^32 + objUSNCreated.LowPart)
 
objContainer.GetInfoEx Array("canonicalName"), 0
arrCanonicalName = objContainer.GetEx("canonicalName")
 
WScript.Echo "CanonicalName of object:"
For Each strValue in arrCanonicalName
    WScript.Echo vbTab &amp;amp; strValue
Next
WScript.Echo 
 
WScript.Echo "Object class: " &amp;amp; objContainer.Class &amp;amp; vbCrLf
WScript.Echo "whenCreated: " &amp;amp; strWhenCreated &amp;amp; " (Created - GMT)"
WScript.Echo "whenChanged: " &amp;amp; strWhenChanged &amp;amp; " (Modified - GMT)"
WScript.Echo VbCrLf
WScript.Echo "uSNChanged: " &amp;amp; dblUSNChanged &amp;amp; " (USN Current)"
WScript.Echo "uSNCreated: " &amp;amp; dblUSNCreated &amp;amp; " (USN Original)"
</vb><vb name="List the Security Descriptor for an OU" n="81">' List the Security Descriptor for an OU


Const SE_DACL_PROTECTED = &amp;amp;H1000 
 
Set objContainer = GetObject _
  ("LDAP://ou=Sales,dc=NA,dc=fabrikam,dc=com")
 
Set objNtSecurityDescriptor = objContainer.Get("ntSecurityDescriptor")
 
intNtSecurityDescriptorControl = objNtSecurityDescriptor.Control
 
WScript.Echo "Permissions Tab"
strMessage = "Allow inheritable permissions from the parent to " &amp;amp; _
    "propogate to this object and all child objects "
If (intNtSecurityDescriptorControl And SE_DACL_PROTECTED) Then
    Wscript.Echo strMessage &amp;amp; "is disabled."
Else
    WScript.Echo strMessage &amp;amp; "is enabled."
End If
WScript.Echo 
 
Set objDiscretionaryAcl = objNtSecurityDescriptor.DiscretionaryAcl
DisplayAceInformation objDiscretionaryAcl, "DACL"
 
Sub DisplayAceInformation(SecurityStructure, strType)
    Const ADS_ACETYPE_ACCESS_ALLOWED = &amp;amp;H0 
    Const ADS_ACETYPE_ACCESS_DENIED = &amp;amp;H1 
    Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = &amp;amp;H5 
    Const ADS_ACETYPE_ACCESS_DENIED_OBJECT = &amp;amp;H6 
    intAceCount = 0
    For Each objAce In SecurityStructure
        strTrustee = Mid(objAce.Trustee,1,12)
        If StrComp(strTrustee, "NT AUTHORITY", 1) &amp;lt;&amp;gt; 0 Then
            intAceCount = intAceCount + 1
            WScript.Echo strType &amp;amp; " permission entry: " &amp;amp; intAceCount
            WScript.Echo "Name: " &amp;amp; objAce.Trustee
 
            intAceType = objAce.AceType
            If (intAceType = ADS_ACETYPE_ACCESS_ALLOWED Or _
                intAceType = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT) Then
                WScript.Echo "Type: Allow Access"
            ElseIf (intAceType = ADS_ACETYPE_ACCESS_DENIED Or _
                intAceType = ADS_ACETYPE_ACCESS_DENIED_OBJECT) Then
                WScript.Echo "Type: Deny Acess"
            Else
                WScript.Echo "Acess Type Unknown."
            End If
            ReadBitsInAccessMask(objAce.AccessMask)
            WScript.Echo VbCr
        End If
    Next
End Sub
 
Sub ReadBitsInAccessMask(AccessMask)
    Const ADS_RIGHT_DELETE = &amp;amp;H10000
    Const ADS_RIGHT_READ_CONTROL = &amp;amp;H20000
    Const ADS_RIGHT_WRITE_DAC = &amp;amp;H40000
    Const ADS_RIGHT_WRITE_OWNER = &amp;amp;H80000
    Const ADS_RIGHT_DS_CREATE_CHILD = &amp;amp;H1
    Const ADS_RIGHT_DS_DELETE_CHILD = &amp;amp;H2
    Const ADS_RIGHT_ACTRL_DS_LIST = &amp;amp;H4
    Const ADS_RIGHT_DS_SELF = &amp;amp;H8
    Const ADS_RIGHT_DS_READ_PROP = &amp;amp;H10
    Const ADS_RIGHT_DS_WRITE_PROP = &amp;amp;H20
    Const ADS_RIGHT_DS_DELETE_TREE = &amp;amp;H40
    Const ADS_RIGHT_DS_LIST_OBJECT = &amp;amp;H80
    Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100
 
    WScript.Echo VbCrLf &amp;amp; "Standard Access Rights"
    If (AccessMask And ADS_RIGHT_DELETE) Then _
        WScript.Echo vbTab &amp;amp; "-Delete an object."
    If (AccessMask And ADS_RIGHT_READ_CONTROL) Then _
        WScript.Echo vbTab &amp;amp; "-Read permissions."
    If (AccessMask And ADS_RIGHT_WRITE_DAC) Then _
        WScript.Echo vbTab &amp;amp; "-Write permissions."
    If (AccessMask And ADS_RIGHT_WRITE_OWNER) Then _
        WScript.Echo vbTab &amp;amp; "-Modify owner."
  
    WScript.Echo VbCrLf &amp;amp; "Directory Service Specific Access Rights"
    If (AccessMask And ADS_RIGHT_DS_CREATE_CHILD) Then _
      WScript.Echo vbTab &amp;amp; "-Create child objects."
    If (AccessMask And ADS_RIGHT_DS_DELETE_CHILD) Then _
        WScript.Echo vbTab &amp;amp; "-Delete child objects."
    If (AccessMask And ADS_RIGHT_ACTRL_DS_LIST) Then _
        WScript.Echo vbTab &amp;amp; "-Enumerate an object."
    If (AccessMask And ADS_RIGHT_DS_READ_PROP) Then _
        WScript.Echo vbTab &amp;amp; "-Read the properties of an object."
    If (AccessMask And ADS_RIGHT_DS_WRITE_PROP) Then _
        WScript.Echo vbTab &amp;amp; "-Write the properties of an object."
    If (AccessMask And ADS_RIGHT_DS_DELETE_TREE) Then _
        WScript.Echo vbTab &amp;amp; "-Delete a tree of objects"
    If (AccessMask And ADS_RIGHT_DS_LIST_OBJECT) Then _
        WScript.Echo vbTab &amp;amp; "-List a tree of objects."
 
    WScript.Echo VbCrLf &amp;amp; "Control Access Rights"
    If (AccessMask And ADS_RIGHT_DS_CONTROL_ACCESS) + _
        (AccessMask And ADS_RIGHT_DS_SELF) = 0 Then
          WScript.Echo "-None"
      Else 
      If (AccessMask And ADS_RIGHT_DS_CONTROL_ACCESS) Then _
          WScript.Echo vbTab &amp;amp; "-Extended access rights."
      If (AccessMask And ADS_RIGHT_DS_SELF) Then
          WScript.Echo vbTab &amp;amp; "-Active Directory must validate a property "
          WScript.Echo vbTab &amp;amp; " write operation beyond the schema definition "
          WScript.Echo vbTab &amp;amp; " for the attribute."
      End If
    End If
End Sub
</vb><vb name="List the System Access Control List of an OU" n="82">' List the System Access Control List of an OU


Const SE_SACL_PROTECTED = &amp;amp;H2000 
Const ADS_SECURITY_INFO_OWNER = &amp;amp;H1 
Const ADS_SECURITY_INFO_GROUP = &amp;amp;H2
Const ADS_OPTION_SECURITY_MASK =&amp;amp;H3
Const ADS_SECURITY_INFO_DACL = &amp;amp;H4 
Const ADS_SECURITY_INFO_SACL = &amp;amp;H8
 
Set objContainer = GetObject _
    ("LDAP://ou=Sales,dc=NA,dc=fabrikam,dc=com")
 
objContainer.SetOption ADS_OPTION_SECURITY_MASK, ADS_SECURITY_INFO_OWNER _
    Or ADS_SECURITY_INFO_GROUP Or ADS_SECURITY_INFO_DACL _
    Or ADS_SECURITY_INFO_SACL
  
Set objNtSecurityDescriptor = objContainer.Get("ntSecurityDescriptor")
 
intNtSecurityDescriptorControl = objNtSecurityDescriptor.Control
 
WScript.Echo "Auditing Tab"
strMessage = "Allow inheritable auditing entries from" &amp;amp; _ 
    "the parent to propogate to this object and all child objects "
If (intNtSecurityDescriptorControl And SE_SACL_PROTECTED) Then
    Wscript.Echo strMessage &amp;amp; "is disabled."
Else
    WScript.Echo strMessage &amp;amp; "is enabled."
End If
WScript.Echo 
 
Set objSacl = objNtSecurityDescriptor.SystemAcl
DisplayAceInformation objSacl, "SACL"
 
Sub DisplayAceInformation(SecurityStructure, strType)
    Const ADS_ACETYPE_SYSTEM_AUDIT = &amp;amp;H2 
    Const ADS_ACETYPE_SYSTEM_AUDIT_OBJECT = &amp;amp;H7 
  
    intAceCount = 0
    For Each objAce In SecurityStructure
        strTrustee = Mid(objAce.Trustee,1,12)
        If StrComp(strTrustee, "NT AUTHORITY", 1) &amp;lt;&amp;gt; 0 Then
            intAceCount = intAceCount + 1
            WScript.Echo strType &amp;amp; " permission entry: " &amp;amp; intAceCount
            WScript.Echo "Name: " &amp;amp; objAce.Trustee
 
            intAceType = objAce.AceType
            WScript.Echo "ACETYPE IS: " &amp;amp; intAceType
            If (intAceType = ADS_ACETYPE_SYSTEM_AUDIT or _
                intAceType = ADS_ACETYPE_SYSTEM_AUDIT_OBJECT) Then
                WScript.StdOut.Write "Type: Success or Failure Audit"
            Else
                WScript.StdOut.Write "Audit Type Unknown."
            End If
            ReadBitsInAccessMask(objAce.AccessMask)
            WScript.Echo 
        End If
    Next
End Sub
 
Sub ReadBitsInAccessMask(AccessMask)
    Const ADS_RIGHT_DELETE = &amp;amp;H10000
    Const ADS_RIGHT_READ_CONTROL = &amp;amp;H20000
    Const ADS_RIGHT_WRITE_DAC = &amp;amp;H40000
    Const ADS_RIGHT_WRITE_OWNER = &amp;amp;H80000
    Const ADS_RIGHT_DS_CREATE_CHILD = &amp;amp;H1
    Const ADS_RIGHT_DS_DELETE_CHILD = &amp;amp;H2
    Const ADS_RIGHT_ACTRL_DS_LIST = &amp;amp;H4
    Const ADS_RIGHT_DS_SELF = &amp;amp;H8
    Const ADS_RIGHT_DS_READ_PROP = &amp;amp;H10
    Const ADS_RIGHT_DS_WRITE_PROP = &amp;amp;H20
    Const ADS_RIGHT_DS_DELETE_TREE = &amp;amp;H40
    Const ADS_RIGHT_DS_LIST_OBJECT = &amp;amp;H80
    Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100
 
    WScript.Echo VbCrLf &amp;amp; "Standard Access Rights"
    If (AccessMask And ADS_RIGHT_DELETE) Then _
        WScript.Echo vbTab &amp;amp; "-Delete an object."
    If (AccessMask And ADS_RIGHT_READ_CONTROL) Then _
        WScript.Echo vbTab &amp;amp; "-Read permissions."
    If (AccessMask And ADS_RIGHT_WRITE_DAC) Then _
        WScript.Echo vbTab &amp;amp; "-Write permissions."
    If (AccessMask And ADS_RIGHT_WRITE_OWNER) Then _
        WScript.Echo vbTab &amp;amp; "-Modify owner."
  
    WScript.Echo VbCrLf &amp;amp; "Directory Service Specific Access Rights"
    If (AccessMask And ADS_RIGHT_DS_CREATE_CHILD) Then _
        WScript.Echo vbTab &amp;amp; "-Create child objects."
    If (AccessMask And ADS_RIGHT_DS_DELETE_CHILD) Then _
        WScript.Echo vbTab &amp;amp; "-Delete child objects."
    If (AccessMask And ADS_RIGHT_ACTRL_DS_LIST) Then _
        WScript.Echo vbTab &amp;amp; "-Enumerate an object."
    If (AccessMask And ADS_RIGHT_DS_READ_PROP) Then _
        WScript.Echo vbTab &amp;amp; "-Read the properties of an object."
    If (AccessMask And ADS_RIGHT_DS_WRITE_PROP) Then _
        WScript.Echo vbTab &amp;amp; "-Write the properties of an object."
    If (AccessMask And ADS_RIGHT_DS_DELETE_TREE) Then _
        WScript.Echo vbTab &amp;amp; "-Delete a tree of objects"
    If (AccessMask And ADS_RIGHT_DS_LIST_OBJECT) Then _
        WScript.Echo vbTab &amp;amp; "-List a tree of objects."
 
    WScript.Echo VbCrLf &amp;amp; "Control Access Rights"
    If (AccessMask And ADS_RIGHT_DS_CONTROL_ACCESS) + _
        (AccessMask And ADS_RIGHT_DS_SELF) = 0 Then
            WScript.Echo "-None"
    Else 
        If (AccessMask And ADS_RIGHT_DS_CONTROL_ACCESS) Then _
            WScript.Echo vbTab &amp;amp; "-Extended access rights."
        If (AccessMask And ADS_RIGHT_DS_SELF) Then
            WScript.Echo vbTab &amp;amp; "-Active Directory must validate a property "
            WScript.Echo vbTab &amp;amp; " write operation beyond the schema " &amp;amp; _
                "definition "
            WScript.Echo vbTab &amp;amp; " for the attribute."
        End If
    End If
End Sub
</vb><vb name="Modify the COM+ Partition Set Link of an OU" n="83">' Modify the COM+ Partition Set Link of an OU


Set objContainer = GetObject _
    ("LDAP://ou=Sales,dc=NA,dc=fabrikam,dc=com")
 
objContainer.Put "msCOM-UserPartitionSetLink", _
    "cn=PartitionSet1,cn=ComPartitionSets,cn=System,dc=NA,dc=fabrikam,dc=com"
objContainer.SetInfo
</vb><vb name="Modify the General Properties of an OU" n="84">' Modify the General Properties of an OU


Const ADS_PROPERTY_UPDATE = 2

Set objContainer = GetObject _
    ("LDAP://ou=Sales,dc=NA,dc=fabrikam,dc=com")
 
objContainer.Put "street", "Building 43" &amp;amp; vbCrLf &amp;amp; "One Microsoft Way"
objContainer.Put "l", "Redmond"
objContainer.Put "st", "Washington"
objContainer.Put "postalCode", "98053"
objContainer.Put "c", "US"
objContainer.PutEx ADS_PROPERTY_UPDATE, _
    "description", Array("Sales staff")
objContainer.SetInfo
</vb><vb name="Remove an OU Manager" n="85">' Remove an OU Manager


Const ADS_PROPERTY_CLEAR = 1 
 
Set objContainer = GetObject _
  ("LDAP://ou=Sales,dc=NA,dc=fabrikam,dc=com")

objContainer.PutEx ADS_PROPERTY_CLEAR, "managedBy", 0
objContainer.SetInfo
</vb></dd>
		<dd name="Sites and Subnets" code="sites" desc="Sample scripts for managing Active Directory sites and subnets."><vb name="Create an Active Directory Site" n="86">' Create an Active Directory Site


strSiteRDN      = "cn=Ga-Atl-Sales"
strSiteLinkRDN  = "cn=DEFAULTIPSITELINK"
strSiteLinkType = "IP"                      
 
Const ADS_PROPERTY_APPEND = 3
 
Set objRootDSE = GetObject("LDAP://RootDSE")
strConfigurationNC = objRootDSE.Get("configurationNamingContext")
strSitesContainer = "LDAP://cn=Sites," &amp;amp; strConfigurationNC
 
Set objSitesContainer = GetObject(strSitesContainer)
 
Set objSite = objSitesContainer.Create("site", strSiteRDN)
objSite.SetInfo
 
Set objLicensingSiteSettings = objSite.Create("licensingSiteSettings", _
    "cn=Licensing Site Settings")
objLicensingSiteSettings.SetInfo
 
Set objNtdsSiteSettings = objSite.Create("nTDSSiteSettings", _
     "cn=NTDS Site Settings")
objNtdsSiteSettings.SetInfo
 
Set objServersContainer = objSite.Create("serversContainer", "cn=Servers")
objServersContainer.SetInfo
 
strSiteLinkPath = "LDAP://" &amp;amp; strSiteLinkRDN &amp;amp; ",cn=" &amp;amp; strSiteLinkType &amp;amp; _
    ",cn=Inter-Site Transports,cn=Sites," &amp;amp; strConfigurationNC
 
Set objSiteLink = GetObject(strSiteLinkPath)
objSiteLink.PutEx ADS_PROPERTY_APPEND, "siteList", _
                  Array(objSite.Get("distinguishedName"))
objSiteLink.SetInfo
</vb><vb name="Create an Active Directory Site Link" n="87">' Create an Active Directory Site Link


strSite1Name    = "Ga-Atl-Sales"
strSite2Name    = "Wa-Red-Sales"
strSiteLinkRDN  = "cn=[" &amp;amp; strSite1Name &amp;amp; "][" &amp;amp; strSite2Name &amp;amp; "]"
intCost         = 100
intReplInterval = 60
strDescription  = "[" &amp;amp; strSite1Name &amp;amp; "][" &amp;amp; strSite2Name &amp;amp; "]"
 
Const ADS_PROPERTY_UPDATE = 2
 
Set objRootDSE = GetObject("LDAP://RootDSE")
strConfigurationNC = objRootDSE.Get("configurationNamingContext")
 
strSite1DN = "cn=" &amp;amp; strSite1Name &amp;amp; ",cn=Sites," &amp;amp; strConfigurationNC
strSite2DN = "cn=" &amp;amp; strSite2Name &amp;amp; ",cn=Sites," &amp;amp; strConfigurationNC
 
Set objInterSiteTransports = GetObject("LDAP://" &amp;amp; _
    "cn=IP,cn=Inter-Site Transports,cn=Sites," &amp;amp; strConfigurationNC)
 
Set objSiteLink = objInterSiteTransports.Create("siteLink", strSiteLinkRDN)
objSiteLink.Put "cost",         intCost
objSiteLink.Put "replInterval", intReplInterval
objSiteLink.Put "description",  strDescription

 
objSiteLink.PutEx ADS_PROPERTY_UPDATE, "siteList", _
                  Array(strSite1DN, strSite2DN)
objSiteLink.SetInfo
</vb><vb name="Create an Active Directory Subnet" n="88">' Create an Active Directory Subnet


strSubnetRDN     = "cn=192.168.1.0/26"
strSiteObjectRDN = "cn=Ga-Atl-Sales"
strDescription   = "192.168.1.0/255.255.255.192"
strLocation      = "USA/GA/Atlanta"
 
Set objRootDSE = GetObject("LDAP://RootDSE")
strConfigurationNC = objRootDSE.Get("configurationNamingContext")
 
strSiteObjectDN = strSiteObjectRDN &amp;amp; ",cn=Sites," &amp;amp; strConfigurationNC
 
strSubnetsContainer = "LDAP://cn=Subnets,cn=Sites," &amp;amp; strConfigurationNC
 
Set objSubnetsContainer = GetObject(strSubnetsContainer)
 
Set objSubnet = objSubnetsContainer.Create("subnet", strSubnetRDN)
objSubnet.Put "siteObject", strSiteObjectDN
objSubnet.Put "description", strDescription

objSubnet.Put "location", strLocation
objSubnet.SetInfo
</vb><vb name="Delete an Active Directory Subnet" n="89">' Delete an Active Directory Subnet


strSubnetCN = "cn=192.168.1.0/26"
 
Set objRootDSE = GetObject("LDAP://RootDSE")
strConfigurationNC = objRootDSE.Get("configurationNamingContext")
strSubnetsContainer = "LDAP://cn=Subnets,cn=Sites," &amp;amp; strConfigurationNC
 
Set objSubnetsContainer = GetObject(strSubnetsContainer)
objSubnetsContainer.Delete "subnet", strSubnetCN
</vb><vb name="List Active Directory Connections" n="90">' List Active Directory Connections


strDcRDN   = "cn=atl-dc-01"
strSiteRDN = "cn=Ga-Atl-Sales"
 
Set objRootDSE = GetObject("LDAP://RootDSE")
strConfigurationNC = objRootDSE.Get("configurationNamingContext")
 
strNtdsSettingsPath = "LDAP://cn=NTDS Settings," &amp;amp; strDcRDN &amp;amp; _
    ",cn=Servers," &amp;amp; strSiteRDN &amp;amp; ",cn=Sites," &amp;amp; strConfigurationNC
 
Set objNtdsSettings = GetObject(strNtdsSettingsPath)
 
objNtdsSettings.Filter = Array("nTDSConnection")
 
WScript.Echo strDcRDN &amp;amp; " NTDS Connection Objects" &amp;amp; vbCrLf &amp;amp; _
    String(Len(strDcRDN) + 24, "=")
 
For Each objConnection In objNtdsSettings
    WScript.Echo "Name:      " &amp;amp; objConnection.Name
    WScript.Echo "Enabled:   " &amp;amp; objConnection.enabledConnection
    WScript.Echo "From:      " &amp;amp; Split(objConnection.fromServer, ",")(1)
    WScript.Echo "Options:   " &amp;amp; objConnection.Options
    WScript.Echo "Transport: " &amp;amp; Split(objConnection.transportType, ",")(0)
    WScript.Echo "Naming Contexts"
    WScript.Echo "---------------"
    For Each objDNWithBin In objConnection.GetEx("ms-DS-ReplicatesNCReason")
        Wscript.Echo objDNWithBin.DNString
    Next
    WScript.Echo
Next
</vb><vb name="List Active Directory Sites" n="91">' List Active Directory Sites


Set objRootDSE = GetObject("LDAP://RootDSE")
strConfigurationNC = objRootDSE.Get("configurationNamingContext")
 
strSitesContainer = "LDAP://cn=Sites," &amp;amp; strConfigurationNC
Set objSitesContainer = GetObject(strSitesContainer)
objSitesContainer.Filter = Array("site")
 
For Each objSite In objSitesContainer
    WScript.Echo "Name: " &amp;amp; objSite.Name
Next
</vb><vb name="List All Domain Controllers" n="92">' List All Domain Controllers


Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand = CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCOmmand.ActiveConnection = objConnection
 
objCommand.CommandText = _
    "Select distinguishedName from " &amp;amp; _
        "'LDAP://cn=Configuration,DC=fabrikam,DC=com' " _
            &amp;amp; "where objectClass='nTDSDSA'" 
objCommand.Properties("Page Size") = 1000
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 

Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst
 
Do Until objRecordSet.EOF
    Wscript.Echo "Computer Name: " &amp;amp; _
        objRecordSet.Fields("distinguishedName").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="List Servers in an Active Directory Site" n="93">' List Servers in an Active Directory Site


strSiteRDN = "cn=Ga-Atl-Sales"
 
Set objRootDSE = GetObject("LDAP://RootDSE")
strConfigurationNC = objRootDSE.Get("configurationNamingContext")
 
strServersPath = "LDAP://cn=Servers," &amp;amp; strSiteRDN &amp;amp; ",cn=Sites," &amp;amp; _
    strConfigurationNC
Set objServersContainer = GetObject(strServersPath)
 
For Each objServer In objServersContainer
    WScript.Echo "Name: " &amp;amp; objServer.Name
Next
</vb><vb name="List the Protocols Over Which a Bridgehead Server Replicates" n="94">' List the Protocols Over Which a Bridgehead Server Replicates


On Error Resume Next
   
Set objServer = GetObject _
    ("LDAP://CN=SEA-DC-01,CN=Servers,CN=Default-First-Site-Name,"  &amp;amp; _
        " CN=Sites,CN=Configuration,DC=fabrikam,DC=com")
 
dnBHTList = objServer.GetEx("bridgeheadTransportList")
 
WScript.Echo "Bridge Head Transport List:"
WScript.Echo "This multi-valued attribute lists the protocol" &amp;amp; _
    "transports over which this BridgeHead Server replicates"
For Each dnValue in dnBHTList
    WScript.Echo "Value: " &amp;amp; dnValue
Next
</vb><vb name="List the Site Name for a  Domain Controller" n="95">' List the Site Name for a  Domain Controller


strDcName = "atl-dc-01"
Set objADSysInfo = CreateObject("ADSystemInfo")

strDcSiteName = objADSysInfo.GetDCSiteName(strDcName)
WScript.Echo "DC Site Name: " &amp;amp; strDcSiteName
</vb><vb name="List the Site Name for the Local Computer" n="96">' List the Site Name for the Local Computer


Set objADSysInfo = CreateObject("ADSystemInfo")

WScript.Echo "Current site name: " &amp;amp; objADSysInfo.SiteName
</vb><vb name="List the Subnets in all Active Directory Sites" n="97">' List the Subnets in all Active Directory Sites


Set objRootDSE = GetObject("LDAP://RootDSE")
strConfigurationNC = objRootDSE.Get("configurationNamingContext")
 
strSubnetsContainer = "LDAP://cn=Subnets,cn=Sites," &amp;amp; strConfigurationNC
 
Set objSubnetsContainer = GetObject(strSubnetsContainer)
 
objSubnetsContainer.Filter = Array("subnet")
 
Set objHash = CreateObject("Scripting.Dictionary")
 
For Each objSubnet In objSubnetsContainer
    objSubnet.GetInfoEx Array("siteObject"), 0
    strSiteObjectDN = objSubnet.Get("siteObject")
    strSiteObjectName = Split(Split(strSiteObjectDN, ",")(0), "=")(1)
 
    If objHash.Exists(strSiteObjectName) Then
        objHash(strSiteObjectName) = objHash(strSiteObjectName) &amp;amp; "," &amp;amp; _
            Split(objSubnet.Name, "=")(1)
    Else
        objHash.Add strSiteObjectName, Split(objSubnet.Name, "=")(1)
    End If
Next
 
For Each strKey In objHash.Keys
    WScript.Echo strKey &amp;amp; "," &amp;amp; objHash(strKey)
Next
</vb><vb name="List the Subnets in an Active Directory Site" n="98">' List the Subnets in an Active Directory Site


strSiteRDN = "cn=Ga-Atl-Sales"
 
Set objRootDSE = GetObject("LDAP://RootDSE")
strConfigurationNC = objRootDSE.Get("configurationNamingContext")
 
strSitePath = "LDAP://" &amp;amp; strSiteRDN &amp;amp; ",cn=Sites," &amp;amp; strConfigurationNC
 
Set objSite = GetObject(strSitePath)
 
objSite.GetInfoEx Array("siteObjectBL"), 0
arrSiteObjectBL = objSite.GetEx("siteObjectBL")
 
WScript.Echo strSiteRDN &amp;amp; " Subnets" &amp;amp; vbCrLf &amp;amp; _
    String(Len(strSiteRDN) + 8, "-")
 
For Each strSiteObjectBL In arrSiteObjectBL
    WScript.Echo Split(Split(strSiteObjectBL, ",")(0), "=")(1)
Next
</vb><vb name="List Your Domain Controller" n="99">' List Your Domain Controller


Set objDomain = GetObject("LDAP://rootDse")

objDC = objDomain.Get("dnsHostName")
Wscript.Echo "Authenticating domain controller:" &amp;amp; objDC
</vb><vb name="Move a Domain Controller to a New Active Directory Site" n="100">' Move a Domain Controller to a New Active Directory Site


strSourceSiteRDN = "cn=Default-First-Site-Name"
strTargetSiteRDN = "cn=Ga-Atl-Sales"
strDcRDN         = "cn=atl-dc-01"
 
Set objRootDSE = GetObject("LDAP://RootDSE")
strConfigurationNC = objRootDSE.Get("configurationNamingContext")
 
strDcPath = "LDAP://" &amp;amp; strDcRDN &amp;amp; ",cn=Servers," &amp;amp; strSourceSiteRDN &amp;amp; _
    ",cn=Sites," &amp;amp; strConfigurationNC
 
strTargetSitePath = "LDAP://cn=Servers," &amp;amp; strTargetSiteRDN &amp;amp; _
    ",cn=Sites," &amp;amp; strConfigurationNC
 
Set objTargetSite = GetObject(strTargetSitePath)
objTargetSite.MoveHere strDcPath, strDcRDN
</vb><vb name="Rename an Active Directory Site" n="101">' Rename an Active Directory Site


strOldSiteRDN = "cn=Default-First-Site-Name"
strNewSiteRDN = "cn=Ga-Atl-Sales"
 
Set objRootDSE = GetObject("LDAP://RootDSE")
strConfigurationNC = objRootDSE.Get("configurationNamingContext")
 
strSitesContainer = "LDAP://cn=Sites," &amp;amp; strConfigurationNC
strOldSitePath = "LDAP://" &amp;amp; strOldSiteRDN &amp;amp; ",cn=Sites," &amp;amp; strConfigurationNC
 
Set objSitesContainer = GetObject(strSitesContainer)
objSitesContainer.MoveHere strOldSitePath, strNewSiteRDN
</vb><vb name="Verify that a Domain Controller is in a Site" n="102">' Verify that a Domain Controller is in a Site


strDcName = "atl-dc-01"
strSiteName = "ga-atl-sales"
 
Set objADSysInfo = CreateObject("ADSystemInfo")
strDcSiteName = objADSysInfo.GetDCSiteName(strDcName)
 
If UCase(strSiteName) = UCase(strDcSiteName) Then
    WScript.Echo "TRUE: " &amp;amp; strDcName &amp;amp; " is in site " &amp;amp; strSiteName
Else
    WScript.Echo "FALSE: " &amp;amp; strDcName &amp;amp; " is NOT in site " &amp;amp; strSiteName
End If
</vb></dd>
		<dd name="User Accounts" code="users" desc="Sample scripts for managing Active Directory user accounts, user passwords, and user account status.">
			<dd name="Modifying User Account Properties" code="modify" desc="Sample scripts for modifying Active Directory user account properties."><vb name="Add a Route to the Dial-In Properties of a User Account" n="103">' Add a Route to the Dial-In Properties of a User Account


Const ADS_PROPERTY_APPEND = 3 
 
Set objUser = GetObject _
   ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com") 
objUser.PutEx ADS_PROPERTY_APPEND, _
    "msRASSavedFramedRoute", _
        Array("128.168.0.0/15 0.0.0.0 5") 
objUser.PutEx ADS_PROPERTY_APPEND, _
    "msRADIUSFramedRoute", _
        Array("128.168.0.0/15 0.0.0.0 5")
objUser.SetInfo
</vb><vb name="Add Additional postOfficeBox Information for a User Account" n="104">' Add Additional postOfficeBox Information for a User Account


Const ADS_PROPERTY_APPEND = 3 
 
Set objUser = GetObject _
   ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com") 

objUser.PutEx ADS_PROPERTY_APPEND, "postOfficeBox", Array("2225","2226")
objUser.SetInfo
</vb><vb name="Add an Additional Home Phone Number to a User Account" n="105">' Add an Additional Home Phone Number to a User Account


Const ADS_PROPERTY_APPEND = 3 
 
Set objUser = GetObject _
   ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com") 

objUser.PutEx ADS_PROPERTY_APPEND, "otherHomePhone", Array("(425) 555-0116")
objUser.SetInfo
</vb><vb name="Add an Additional URL to a User Account" n="106">' Add an Additional URL to a User Account


Const ADS_PROPERTY_APPEND = 3 
 
Set objUser = GetObject _
    ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com") 
 
objUser.PutEx ADS_PROPERTY_APPEND, _
    "url", Array("http://www.fabrikam.com/policy")
objUser.SetInfo
</vb><vb name="Assign the Primary Group for a User" n="107">' Assign the Primary Group for a User


Const ADS_PROPERTY_APPEND = 3
 
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
Set objGroup = GetObject _
    ("LDAP://cn=MgmtUniversal,ou=Management,dc=NA,dc=fabrikam,dc=com")
objGroup.GetInfoEx Array("primaryGroupToken"), 0
intPrimaryGroupToken = objGroup.Get("primaryGroupToken")
 
objGroup.PutEx ADS_PROPERTY_APPEND, _
    "member", Array("cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
objGroup.SetInfo
objUser.Put "primaryGroupID", intPrimaryGroupToken
objUser.SetInfo
</vb><vb name="Clearing User Account Address Attributes" n="108">' Clearing User Account Address Attributes


Const ADS_PROPERTY_CLEAR = 1 

Set objUser = GetObject _
   ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com") 
 
objUser.PutEx ADS_PROPERTY_CLEAR, "streetAddress", 0
objUser.PutEx ADS_PROPERTY_CLEAR, "c", 0
objUser.SetInfo
</vb><vb name="Copy a Published Certificate to a User Account" n="109">' Copy a Published Certificate to a User Account


On Error Resume Next

Const ADS_PROPERTY_UPDATE = 2 
 
Set objUserTemplate = _
    GetObject("LDAP://cn=userTemplate,OU=Management,dc=NA,dc=fabrikam,dc=com")
arrUserCertificates = objUserTemplate.GetEx("userCertificate")
 
Set objUser = _
    GetObject("LDAP://cn=MyerKen,OU=Management,dc=NA,dc=fabrikam,dc=com")
objUser.PutEx ADS_PROPERTY_UPDATE, "userCertificate", arrUserCertificates
objUser.SetInfo
</vb><vb name="Delete a Calling Station ID from a User Account" n="110">' Delete a Calling Station ID from a User Account


Const ADS_PROPERTY_DELETE = 4 
 
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com") 

objUser.PutEx ADS_PROPERTY_DELETE, _
    "msNPSavedCallingStationID", Array("555-0111")
objUser.PutEx ADS_PROPERTY_DELETE, _
    "msNPCallingStationID", Array("555-0111")
objUser.SetInfo
</vb><vb name="Delete a Post Office Box from a User Account" n="111">' Delete a Post Office Box from a User Account


Const ADS_PROPERTY_DELETE = 4 
 
Set objUser = GetObject _
   ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com") 
 
objUser.PutEx ADS_PROPERTY_DELETE, "postOfficeBox", Array("2224")
objUser.SetInfo
</vb><vb name="Delete Address Page Information for a User Account" n="112">' Delete Address Page Information for a User Account


Const ADS_PROPERTY_CLEAR = 1 
 
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com") 

objUser.PutEx ADS_PROPERTY_CLEAR, "c", 0
objUser.PutEx ADS_PROPERTY_CLEAR, "postOfficeBox", 0
objUser.SetInfo
</vb><vb name="Delete All Department and Direct Report Information from a User Account" n="113">' Delete All Department and Direct Report Information from a User Account


On Error Resume Next

Const E_ADS_PROPERTY_NOT_FOUND  = &amp;amp;h8000500D
Const ADS_PROPERTY_CLEAR = 1 

Set objUser = GetObject _
   ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com") 
objUser.PutEx ADS_PROPERTY_CLEAR, "department", 0
objUser.SetInfo
 
arrDirectReports = objUser.GetEx("directReports")
If Err.Number = E_ADS_PROPERTY_NOT_FOUND Then
    WScript.Quit
Else
    For Each strValue in arrDirectReports
        Set objUserSource = GetObject("LDAP://" &amp;amp; strValue)
        objUserSource.PutEx ADS_PROPERTY_CLEAR, "manager", 0
        objUserSource.SetInfo
    Next
End If
</vb><vb name="Delete All Dial-In Properties for a User Account" n="114">' Delete All Dial-In Properties for a User Account


Const ADS_PROPERTY_CLEAR = 1
 
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
  
objUser.PutEx ADS_PROPERTY_CLEAR, "msNPAllowDialin", 0
objUser.PutEx ADS_PROPERTY_CLEAR, "msNPCallingStationID", 0
objUser.PutEx ADS_PROPERTY_CLEAR, "msNPSavedCallingStationID", 0
objUser.PutEx ADS_PROPERTY_CLEAR, "msRADIUSServiceType", 0
objUser.PutEx ADS_PROPERTY_CLEAR, "msRADIUSCallbackNumber", 0
objUser.PutEx ADS_PROPERTY_CLEAR, "msRASSavedCallbackNumber", 0
objUser.PutEx ADS_PROPERTY_CLEAR, "msRADIUSFramedIPAddress", 0
objUser.PutEx ADS_PROPERTY_CLEAR, "msRASSavedFramedIPAddress", 0 
objUser.PutEx ADS_PROPERTY_CLEAR, "msRADIUSFramedRoute", 0  
objUser.PutEx ADS_PROPERTY_CLEAR, "msRASSavedFramedRoute", 0
objUser.SetInfo
</vb><vb name="Delete All Published Certificates from a User Account" n="115">' Delete All Published Certificates from a User Account


Const ADS_PROPERTY_CLEAR = 1 

Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")

objUser.PutEx ADS_PROPERTY_CLEAR, "userCertificate", 0
objUser.SetInfo
</vb><vb name="Delete an otherMobile Phone Number" n="116">' Delete an otherMobile Phone Number


Const ADS_PROPERTY_DELETE = 4
 
Set objUser = GetObject _
    ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com") 
 
objUser.PutEx ADS_PROPERTY_DELETE, _
    "otherMobile", Array("(425) 555-3334") 
objUser.SetInfo
</vb><vb name="Delete Published Certificates from a User Account" n="117">' Delete Published Certificates from a User Account


On Error Resume Next

Const ADS_PROPERTY_DELETE = 4 
 
Set objUserTemplate = _
    GetObject("LDAP://cn=userTemplate,OU=Management,dc=NA,dc=fabrikam,dc=com")
arrUserCertificates = objUserTemplate.GetEx("userCertificate")
 
Set objUser = _
    GetObject("LDAP://cn=MyerKen,OU=Management,dc=NA,dc=fabrikam,dc=com")

objUser.PutEx ADS_PROPERTY_DELETE, "userCertificate", arrUserCertificates
objUser.SetInfo
</vb><vb name="Delete Selected Attributes from a User Account" n="118">' Delete Selected Attributes from a User Account


Const ADS_PROPERTY_DELETE = 4
 
Set objUser = GetObject _
   ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com") 
 
objUser.PutEx ADS_PROPERTY_DELETE, _
   "otherTelephone", Array("(425) 555-1213") 
objUser.PutEx ADS_PROPERTY_DELETE, "initials", Array("E.")
objUser.SetInfo
</vb><vb name="Delete Selected User Account Attributes" n="119">' Delete Selected User Account Attributes


Const ADS_PROPERTY_CLEAR = 1 
 
Set objUser = GetObject _
   ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com") 
 
objUser.PutEx ADS_PROPERTY_CLEAR, "initials", 0
objUser.PutEx ADS_PROPERTY_CLEAR, "otherTelephone", 0
objUser.SetInfo
</vb><vb name="Delete User Account Telephone Attributes" n="120">' Delete User Account Telephone Attributes


Const ADS_PROPERTY_CLEAR = 1 
 
Set objUser = GetObject _
   ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com") 
 
objUser.PutEx ADS_PROPERTY_CLEAR, "info", 0
objUser.PutEx ADS_PROPERTY_CLEAR, "otherPager", 0
objUser.SetInfo
</vb><vb name="Disable the Smartcard Required Attribute for a User Account" n="121">' Disable the Smartcard Required Attribute for a User Account


Const ADS_UF_SMARTCARD_REQUIRED = &amp;amp;h40000 

Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
intUAC = objUser.Get("userAccountControl")
 
If (intUAC AND ADS_UF_SMARTCARD_REQUIRED) &amp;lt;&amp;gt; 0 Then
    objUser.Put "userAccountControl", intUAC XOR ADS_UF_SMARTCARD_REQUIRED
    objUser.SetInfo
End If
</vb><vb name="Enable a User to Log on at Any Time" n="122">' Enable a User to Log on at Any Time


Const ADS_PROPERTY_CLEAR = 1 

Set objUser = GetObject _
  ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
objUser.PutEx ADS_PROPERTY_CLEAR, "logonHours", 0
objUser.SetInfo
</vb><vb name="Modify Account Page Information for a User Account" n="123">' Modify Account Page Information for a User Account


Set objUser = GetObject _
  ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
objUser.Put "userPrincipalName", "MyerKen@fabrikam.com"
objUser.Put "sAMAccountName", "MyerKen01"
objUser.Put "userWorkstations","wks1,wks2,wks3"
objUser.SetInfo
</vb><vb name="Modify Address Page Information for a User Account" n="124">' Modify Address Page Information for a User Account


Const ADS_PROPERTY_UPDATE = 2

Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com") 
 
objUser.Put "streetAddress", "Building 43" &amp;amp; vbCrLf &amp;amp; "One Microsoft Way"
objUser.Put "l", "Redmond"
objUser.Put "st", "Washington"
objUser.Put "postalCode", "98053"
objUser.Put "c", "US"
objUser.PutEx ADS_PROPERTY_UPDATE, _
    "postOfficeBox", Array("2222", "2223", "2224")
objUser.SetInfo
</vb><vb name="Modify COM+ Information for a User Account" n="125">' Modify COM+ Information for a User Account


Set objUser = GetObject _
  ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
objUser.Put "msCOM-UserPartitionSetLink", _
  "cn=PartitionSet1,cn=ComPartitionSets,cn=System,dc=NA,dc=fabrikam,dc=com"
objUser.SetInfo
</vb><vb name="Modify Dial-In Properties for a User Account" n="126">' Modify Dial-In Properties for a User Account


Const ADS_PROPERTY_UPDATE = 2
 
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
objUser.Put "msNPAllowDialin", TRUE
objUser.PutEx ADS_PROPERTY_UPDATE, _
    "msNPSavedCallingStationID", Array("555-0100", "555-0111")
objUser.PutEx ADS_PROPERTY_UPDATE, _
    "msNPCallingStationID", Array("555-0100", "555-0111")
objUser.Put "msRADIUSServiceType", 4
objUser.Put "msRADIUSCallbackNumber", "555-0112" 
objUser.Put "msRASSavedFramedIPAddress", 167903442
objUser.Put "msRADIUSFramedIPAddress", 167903442 'value of 10.2.0.210
objUser.PutEx ADS_PROPERTY_UPDATE, _
    "msRASSavedFramedRoute", _
        Array("10.1.0.0/16 0.0.0.0 1", "192.168.1.0/24 0.0.0.0 3")
objUser.PutEx ADS_PROPERTY_UPDATE, _
    "msRADIUSFramedRoute", _
        Array("10.1.0.0/16 0.0.0.0 1", "192.168.1.0/24 0.0.0.0 3")
objUser.SetInfo
</vb><vb name="Modify General User Account Attributes" n="127">' Modify General User Account Attributes


Const ADS_PROPERTY_UPDATE = 2 
Set objUser = GetObject _
   ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com") 
 
objUser.Put "givenName", "Ken"
objUser.Put "initials", "E."
objUser.Put "sn", "Myer"
objUser.Put "displayName", "Myer, Ken"
objUser.Put "physicalDeliveryOfficeName", "Room 4358" 
objUser.Put "telephoneNumber", "(425) 555-1211"
objUser.Put "mail", "myerken@fabrikam.com"
objUser.Put "wWWHomePage", "http://www.fabrikam.com"  
objUser.PutEx ADS_PROPERTY_UPDATE, _
    "description", Array("Management staff")
objUser.PutEx ADS_PROPERTY_UPDATE, _
    "otherTelephone", Array("(800) 555-1212", "(425) 555-1213")  
objUser.PutEx ADS_PROPERTY_UPDATE, _
     "url", Array("http://www.fabrikam.com/management")
objUser.SetInfo
</vb><vb name="Modify Organization Properties for a User Account" n="128">' Modify Organization Properties for a User Account


Set objUser = GetObject _
    ("LDAP://cn=Myerken,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
objUser.Put "title", "Manager"
objUser.Put "department", "Executive Management Team"
objUser.Put "company", "Fabrikam"
objUser.Put "manager", _
    "cn=AckermanPilar,OU=Management,dc=NA,dc=fabrikam,dc=com"   
objUser.SetInfo

Set objUser01 = GetObject _
    ("LDAP://cn=LewJudy,OU=Sales,dc=NA,dc=fabrikam,dc=com")
Set objUser02 = GetObject _
    ("LDAP://cn=AckersKim,OU=Sales,dc=NA,dc=fabrikam,dc=com")

objUser01.Put "manager", objUser.Get("distinguishedName")
objUser02.Put "manager", objUser.Get("distinguishedName")   
objUser01.SetInfo
objUser02.SetInfo
</vb><vb name="Modify User Account Address Attributes" n="129">' Modify User Account Address Attributes


Set objUser = GetObject _
    ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com") 
 
objUser.Put "streetAddress", "Building 43" &amp;amp; _
    VbCrLf &amp;amp; "One Microsoft Way"
objUser.Put "l", "Redmond"
objUser.Put "st", "Washington"
objUser.Put "postalCode", "98053"
objUser.Put "c", "US"
objUser.Put "postOfficeBox", "2222"
objUser.SetInfo
</vb><vb name="Modify User Account General Properties" n="130">' Modify User Account General Properties


Set objUser = GetObject _
  ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com")
 
objUser.Put "userPrincipalName", "MyerKen@fabrikam.com"
objUser.Put "sAMAccountName", "MyerKen01"
objUser.Put "userWorkstations", "wks1,wks2,wks3"
objUser.SetInfo
</vb><vb name="Modify User Account Telephone Numbers" n="131">' Modify User Account Telephone Numbers


Const ADS_PROPERTY_UPDATE = 2 
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com") 
 
objUser.Put "homePhone", "(425) 555-0100"
objUser.Put "pager", "(425) 555-0101"
objUser.Put "mobile", "(425) 555-0102"
objUser.Put "facsimileTelephoneNumber", "(425) 555-0103"   
objUser.Put "ipPhone", "5555"
objUser.Put "info", "Please do not call this user account" &amp;amp; _
    " at home unless there is a work-related emergency. Call" &amp;amp; _
    " this user's mobile phone before calling the pager number."
objUser.PutEx ADS_PROPERTY_UPDATE, "otherHomePhone", Array("(425) 555-0110")
objUser.PutEx ADS_PROPERTY_UPDATE, "otherPager", Array("(425) 555-0111")
objUser.PutEx ADS_PROPERTY_UPDATE, _
    "otherMobile", Array("(425) 555-0112", "(425) 555-0113")
objUser.PutEx ADS_PROPERTY_UPDATE, _
    "otherFacsimileTelephoneNumber", Array("(425) 555-0114")
objUser.PutEx ADS_PROPERTY_UPDATE, "otherIpPhone", Array("5556")
objUser.SetInfo
</vb><vb name="Modify User Profile Paths" n="132">' Modify User Profile Paths


Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
strCurrentProfilePath = objUser.Get("profilePath")
intStringLen = Len(strCurrentProfilePath)
intStringRemains = intStringLen - 11
strRemains = Mid(strCurrentProfilePath, 12, intStringRemains)
strNewProfilePath = "\\fabrikam" &amp;amp; strRemains
objUser.Put "profilePath", strNewProfilePath
objUser.SetInfo
</vb><vb name="Modify User Profile Properties" n="133">' Modify User Profile Properties



Set objUser = GetObject _
  ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com")
 
objUser.Put "profilePath", "\\sea-dc-01\Profiles\myerken"
objUser.Put "scriptPath", "logon.bat"
objUser.Put "homeDirectory", "\\sea-dc-01\HomeFolders\myerken"
objUser.Put "homeDrive", "H:"
objUser.SetInfo
</vb><vb name="Modify User Telephone Properties" n="134">' Modify User Telephone Properties


Const ADS_PROPERTY_UPDATE = 2 

Set objUser = GetObject _
   ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com") 
 
objUser.Put "homePhone", "(425) 555-1111"
objUser.Put "pager", "(425) 555-2222"
objUser.Put "mobile", "(425) 555-3333"
objUser.Put "facsimileTelephoneNumber", "(425) 555-4444"   
objUser.Put "ipPhone", "5555"
objUser.Put "info", "Please do not call this user account" &amp;amp; _
  " at home unless there is a work-related emergency. Call" &amp;amp; _
  " this user's mobile phone before calling the pager number"
objUser.PutEx ADS_PROPERTY_UPDATE, _
    "otherHomePhone", Array("(425) 555-1112")
objUser.PutEx ADS_PROPERTY_UPDATE, _
    "otherPager", Array("(425) 555-2223")
objUser.PutEx ADS_PROPERTY_UPDATE, _
    "otherMobile", Array("(425) 555-3334", "(425) 555-3335")
objUser.PutEx ADS_PROPERTY_UPDATE, _
    "otherFacsimileTelephoneNumber", Array("(425) 555-4445")
objUser.PutEx ADS_PROPERTY_UPDATE, _
    "otherIpPhone", Array("6666")
objUser.SetInfo
</vb><vb name="Require a User to Logon on Using a Smartcard" n="135">' Require a User to Logon on Using a Smartcard


Const ADS_UF_SMARTCARD_REQUIRED = &amp;amp;h40000 

Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
intUAC = objUser.Get("userAccountControl")
 
If (intUAC AND ADS_UF_SMARTCARD_REQUIRED) = 0 Then
    objUser.Put "userAccountControl", intUAC XOR ADS_UF_SMARTCARD_REQUIRED
    objUser.SetInfo
End If
</vb></dd>
			<dd name="Passwords and Password Properties" code="pwds" desc="Sample scripts for managing user account passwords and password properties."><vb name="Assign a Password to a User" n="136">' Assign a Password to a User


Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=management,dc=fabrikam,dc=com")

objUser.SetPassword "i5A2sj*!"
</vb><vb name="Change the Password for a User" n="137">' Change the Password for a User


Set objUser = GetObject _
    ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com")

objUser.ChangePassword "i5A2sj*!", "jl3R86df"
</vb><vb name="Create a Non-Expiring Password" n="138">' Create a Non-Expiring Password


Const ADS_UF_DONT_EXPIRE_PASSWD = &amp;amp;h10000
 
Set objUser = GetObject _
    ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com")
intUAC = objUser.Get("userAccountControl")
 
If ADS_UF_DONT_EXPIRE_PASSWD AND intUAC Then
    Wscript.Echo "Already enabled"
Else
    objUser.Put "userAccountControl", intUAC XOR _
        ADS_UF_DONT_EXPIRE_PASSWD
    objUser.SetInfo
    WScript.Echo "Password never expires is now enabled"
End If
</vb><vb name="Enable Users to Change Their Passwords" n="139">' Enable Users to Change Their Passwords


Const ADS_ACETYPE_ACCESS_DENIED_OBJECT = &amp;amp;H6
Const CHANGE_PASSWORD_GUID  = _
    "{ab721a53-1e2f-11d0-9819-00aa0040529b}"
 
Set objUser = GetObject _
    ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com")
Set objSD   = objUser.Get("nTSecurityDescriptor")
Set objDACL = objSD.DiscretionaryAcl
arrTrustees = Array("nt authority\self", "everyone")
 
For Each strTrustee In arrTrustees
    For Each ace In objDACL
        If(LCase(ace.Trustee) = strTrustee) Then
            If((ace.AceType = ADS_ACETYPE_ACCESS_DENIED_OBJECT) And _
               (LCase(ace.ObjectType) = CHANGE_PASSWORD_GUID)) Then
                   objDACL.RemoveAce ace
            End If
        End If
    Next
Next
 
objUser.Put "nTSecurityDescriptor", objSD
objUser.SetInfo
</vb><vb name="List Domain Password Policy Settings" n="140">' List Domain Password Policy Settings


Const MIN_IN_DAY = 1440
Const SEC_IN_MIN = 60
 
Set objDomain = GetObject("WinNT://fabrikam")
Set objAdS = GetObject("LDAP://dc=fabrikam,dc=com")
 
intMaxPwdAgeSeconds = objDomain.Get("MaxPasswordAge")
intMinPwdAgeSeconds = objDomain.Get("MinPasswordAge")
intLockOutObservationWindowSeconds = objDomain.Get("LockoutObservationInterval")
intLockoutDurationSeconds = objDomain.Get("AutoUnlockInterval")
intMinPwdLength = objAds.Get("minPwdLength")
 
intPwdHistoryLength = objAds.Get("pwdHistoryLength")
intPwdProperties = objAds.Get("pwdProperties")
intLockoutThreshold = objAds.Get("lockoutThreshold")
intMaxPwdAgeDays = _
  ((intMaxPwdAgeSeconds/SEC_IN_MIN)/MIN_IN_DAY) &amp;amp; " days"
intMinPwdAgeDays = _
  ((intMinPwdAgeSeconds/SEC_IN_MIN)/MIN_IN_DAY) &amp;amp; " days"
intLockOutObservationWindowMinutes = _
  (intLockOutObservationWindowSeconds/SEC_IN_MIN) &amp;amp; " minutes"
 
If intLockoutDurationSeconds &amp;lt;&amp;gt; -1 Then
  intLockoutDurationMinutes = _
(intLockOutDurationSeconds/SEC_IN_MIN) &amp;amp; " minutes"
Else
  intLockoutDurationMinutes = _
    "Administrator must manually unlock locked accounts"
End If
 
WScript.Echo "maxPwdAge = " &amp;amp; intMaxPwdAgeDays
WScript.Echo "minPwdAge = " &amp;amp; intMinPwdAgeDays
WScript.Echo "minPwdLength = " &amp;amp; intMinPwdLength
WScript.Echo "pwdHistoryLength = " &amp;amp; intPwdHistoryLength
WScript.Echo "pwdProperties = " &amp;amp; intPwdProperties
WScript.Echo "lockOutThreshold = " &amp;amp; intLockoutThreshold
WScript.Echo "lockOutObservationWindow = " &amp;amp; intLockOutObservationWindowMinutes
WScript.Echo "lockOutDuration = " &amp;amp; intLockoutDurationMinutes
</vb><vb name="List Domain Password Property Attributes" n="141">' List Domain Password Property Attributes


Set objHash = CreateObject("Scripting.Dictionary")
 
objHash.Add "DOMAIN_PASSWORD_COMPLEX", &amp;amp;h1
objHash.Add "DOMAIN_PASSWORD_NO_ANON_CHANGE", &amp;amp;h2
objHash.Add "DOMAIN_PASSWORD_NO_CLEAR_CHANGE", &amp;amp;h4
objHash.Add "DOMAIN_LOCKOUT_ADMINS", &amp;amp;h8
objHash.Add "DOMAIN_PASSWORD_STORE_CLEARTEXT", &amp;amp;h16
objHash.Add "DOMAIN_REFUSE_PASSWORD_CHANGE", &amp;amp;h32
 
Set objDomain = GetObject("LDAP://dc=fabrikam,dc=com")
 
intPwdProperties = objDomain.Get("PwdProperties")
WScript.Echo "Password Properties = " &amp;amp; intPwdProperties
 
For Each Key In objHash.Keys
    If objHash(Key) And intPwdProperties Then 
        WScript.Echo Key &amp;amp; " is enabled"
    Else
        WScript.Echo Key &amp;amp; " is disabled"
    End If
Next
</vb><vb name="List Password Attributes for a User Account" n="142">' List Password Attributes for a User Account


Const ADS_UF_PASSWORD_EXPIRED = &amp;amp;h800000
Const ADS_ACETYPE_ACCESS_DENIED_OBJECT = &amp;amp;H6
Const CHANGE_PASSWORD_GUID = "{ab721a53-1e2f-11d0-9819-00aa0040529b}"
 
Set objHash = CreateObject("Scripting.Dictionary")
objHash.Add "ADS_UF_PASSWD_NOTREQD", &amp;amp;h00020
objHash.Add "ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED", &amp;amp;h0080
objHash.Add "ADS_UF_DONT_EXPIRE_PASSWD", &amp;amp;h10000
 
Set objUser = GetObject _
    ("LDAP://CN=MyerKen,OU=management,DC=Fabrikam,DC=com")
intUserAccountControl = objUser.Get("userAccountControl")
 
Set objUserNT = GetObject("WinNT://fabrikam/myerken")
intUserFlags = objUserNT.Get("userFlags")
 
If ADS_UF_PASSWORD_EXPIRED And intUserFlags Then
    blnExpiredFlag = True
    Wscript.Echo "ADS_UF_PASSWORD_EXPIRED is enabled"
Else
    Wscript.Echo "ADS_UF_PASSWORD_EXPIRED is disabled"
End If
 
For Each Key In objHash.Keys
    If objHash(Key) And intUserAccountControl Then 
        WScript.Echo Key &amp;amp; " is enabled"
    Else
        WScript.Echo Key &amp;amp; " is disabled"
  End If
Next
 
Set objSD = objUser.Get("nTSecurityDescriptor")
Set objDACL = objSD.DiscretionaryAcl

For Each Ace In objDACL
    If ((Ace.AceType = ADS_ACETYPE_ACCESS_DENIED_OBJECT) And _
        (LCase(Ace.ObjectType) = CHANGE_PASSWORD_GUID)) Then
            blnACEPresent = True
    End If
Next

If blnACEPresent Then
    Wscript.Echo "ADS_UF_PASSWD_CANT_CHANGE is enabled"
Else
    Wscript.Echo "ADS_UF_PASSWD_CANT_CHANGE is disabled"
End If
 
If blnExpiredFlag = True Then 
    Wscript.echo "pwdLastSet is null"
Else 
    Wscript.echo "pwdLastSet is " &amp;amp; objUser.PasswordLastChanged
End If
</vb><vb name="List When a Password Expires" n="143">' List When a Password Expires


Const SEC_IN_DAY = 86400
Const ADS_UF_DONT_EXPIRE_PASSWD = &amp;amp;h10000
 
Set objUserLDAP = GetObject _
  ("LDAP://CN=myerken,OU=management,DC=fabrikam,DC=com")
intCurrentValue = objUserLDAP.Get("userAccountControl")
 
If intCurrentValue and ADS_UF_DONT_EXPIRE_PASSWD Then
    Wscript.Echo "The password does not expire."
Else
    dtmValue = objUserLDAP.PasswordLastChanged 
    Wscript.Echo "The password was last changed on " &amp;amp; _
        DateValue(dtmValue) &amp;amp; " at " &amp;amp; TimeValue(dtmValue) &amp;amp; VbCrLf &amp;amp; _
            "The difference between when the password was last set" &amp;amp;  _
                "and today is " &amp;amp; int(now - dtmValue) &amp;amp; " days"
    intTimeInterval = int(now - dtmValue)
  
    Set objDomainNT = GetObject("WinNT://fabrikam")
    intMaxPwdAge = objDomainNT.Get("MaxPasswordAge")
    If intMaxPwdAge &amp;lt; 0 Then
        WScript.Echo "The Maximum Password Age is set to 0 in the " &amp;amp; _
            "domain. Therefore, the password does not expire."
    Else
        intMaxPwdAge = (intMaxPwdAge/SEC_IN_DAY)
        Wscript.Echo "The maximum password age is " &amp;amp; intMaxPwdAge &amp;amp; " days"
        If intTimeInterval &amp;gt;= intMaxPwdAge Then
          Wscript.Echo "The password has expired."
        Else
          Wscript.Echo "The password will expire on " &amp;amp; _
              DateValue(dtmValue + intMaxPwdAge) &amp;amp; " (" &amp;amp; _
                  int((dtmValue + intMaxPwdAge) - now) &amp;amp; " days from today" &amp;amp; _
                      ")."
        End If
    End If
End If
</vb><vb name="List When a Password was Last Changed" n="144">' List When a Password was Last Changed


Set objUser = GetObject _
    ("LDAP://CN=myerken,OU=management,DC=Fabrikam,DC=com")

dtmValue = objUser.PasswordLastChanged
WScript.Echo "Password last changed: " &amp;amp; dtmValue
</vb><vb name="Prevent Passwords from Being Stored Using Reversible Encrypted Text" n="145">' Prevent Passwords from Being Stored Using Reversible Encrypted Text


Const ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED = &amp;amp;H80
 
Set objUser = GetObject _
    ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com")
intUAC = objUser.Get("userAccountControl")
 
If intUAC AND _
    ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED Then
        objUser.Put "userAccountControl", intUAC XOR _
            ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED
        objUser.SetInfo
End If
</vb><vb name="Prevent Users From Changing Their Passwords" n="146">' Prevent Users From Changing Their Passwords


Const ADS_ACETYPE_ACCESS_DENIED_OBJECT = &amp;amp;H6
Const ADS_ACEFLAG_OBJECT_TYPE_PRESENT = &amp;amp;H1
Const CHANGE_PASSWORD_GUID = "{ab721a53-1e2f-11d0-9819-00aa0040529b}"
Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100
 
Set objUser = GetObject _
    ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com")
Set objSD = objUser.Get("ntSecurityDescriptor")
Set objDACL = objSD.DiscretionaryAcl
arrTrustees = array("nt authority\self", "EVERYONE")
 
For Each strTrustee in arrTrustees
    Set objACE = CreateObject("AccessControlEntry")
    objACE.Trustee = strTrustee
    objACE.AceFlags = 0
    objACE.AceType = ADS_ACETYPE_ACCESS_DENIED_OBJECT
    objACE.Flags = ADS_ACEFLAG_OBJECT_TYPE_PRESENT
    objACE.ObjectType = CHANGE_PASSWORD_GUID
    objACE.AccessMask = ADS_RIGHT_DS_CONTROL_ACCESS
    objDACL.AddAce objACE
Next
 
objSD.DiscretionaryAcl = objDACL
objUser.Put "nTSecurityDescriptor", objSD
objUser. SetInfo
</vb><vb name="Require Users to Change Their Password" n="147">' Require Users to Change Their Password


Set objUser = GetObject _
    ("LDAP://CN=myerken,OU=management,DC=Fabrikam,DC=com")

objUser.Put "pwdLastSet", 0
objUser.SetInfo
</vb><vb name="Verify Whether Users Can Change Their Passwords" n="148">' Verify Whether Users Can Change Their Passwords


Const ADS_ACETYPE_ACCESS_DENIED_OBJECT = &amp;amp;H6
Const CHANGE_PASSWORD_GUID  = _
   "{ab721a53-1e2f-11d0-9819-00aa0040529b}"

Set objUser = GetObject _
  ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com")
Set objSD = objUser.Get("nTSecurityDescriptor")
Set objDACL = objSD.DiscretionaryAcl

For Each Ace In objDACL
    If ((Ace.AceType = ADS_ACETYPE_ACCESS_DENIED_OBJECT) And _
        (LCase(Ace.ObjectType) = CHANGE_PASSWORD_GUID)) Then
            blnEnabled = True
    End If
Next

If blnEnabled Then
    WScript.Echo "The user cannot change his or her password."
Else
    WScript.Echo "The user can change his or her password."
End If
</vb></dd>
			<dd name="Retrieving User Account Properties" code="list" desc="Sample scripts for retrieving property values for Active Directory user accounts."><vb name="List Account Page Information for a User Account" n="149">' List Account Page Information for a User Account


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://cn=Myerken,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
WScript.Echo "User Principal Name: " &amp;amp; objUser.userPrincipalName
WScript.Echo "SAM Account Name: " &amp;amp; objUser.sAMAccountName
WScript.Echo "User Workstations: " &amp;amp; objUser.userWorkstations

Set objDomain = GetObject("LDAP://dc=NA,dc=fabrikam,dc=com")
WScript.Echo "Domain controller: " &amp;amp; objDomain.dc
</vb><vb name="List Address Page Information for a User Account" n="150">' List Address Page Information for a User Account


On Error Resume Next
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
WScript.Echo "Street Address: " &amp;amp; objUser.streetAddress
WScript.Echo "Locality: " &amp;amp; objUser.l
WScript.Echo "State/province: " &amp;amp; objUser.st
WScript.Echo "Postal Code: " &amp;amp; objUser.postalCode
WScript.Echo "Country: " &amp;amp; objUser.c
 
WScript.Echo "Post Office Boxes:"
For Each strValue in objUser.postOfficeBox
    WScript.echo vbTab &amp;amp; vbTab &amp;amp; strValue
Next
</vb><vb name="List All Telephone Settings for a User Account" n="151">' List All Telephone Settings for a User Account


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
WScript.Echo "Home Phone: " &amp;amp; objUser.homePhone
WScript.Echo "Pager: " &amp;amp; objUser.pager
WScript.Echo "Mobile phone: " &amp;amp; objUser.mobile
WScript.Echo " IP Phone: " &amp;amp; objUser.ipPhone
WScript.Echo "Information: " &amp;amp; objUser.info
WScript.Echo " Fax Number: " &amp;amp; objUser.facsimileTelephoneNumber
 
WScript.Echo "Other Home Phone:"
For Each strValue in objUser.otherHomePhone
    WScript.Echo strValue
Next
 
WScript.Echo "Other Pager:"
For Each strValue in objUser.otherPager
    WScript.Echo strValue
Next
 
WScript.Echo "oOther Mobile Phone:"
For Each strValue in objUser.otherMobile
    WScript.Echo strValue
Next
 
WScript.Echo "Other IP Phone:"
For Each strValue in objUser.otherIpPhone
    WScript.Echo strValue
Next
 
WScript.Echo "Other Fax Number:"
For Each strValue in objUser.otherFacsimileTelephoneNumber
    WScript.Echo strValue
Next
</vb><vb name="List All the Attributes of the User Class" n="152">' List All the Attributes of the User Class


Set objUserClass = GetObject("LDAP://schema/user")
Set objSchemaClass = GetObject(objUserClass.Parent)
 
i = 0
WScript.Echo "Mandatory attributes:"
For Each strAttribute in objUserClass.MandatoryProperties
    i= i + 1
    WScript.Echo i &amp;amp; vbTab &amp;amp; strAttribute
    Set objAttribute = objSchemaClass.GetObject("Property",  strAttribute)
    WScript.Echo " (Syntax: " &amp;amp; objAttribute.Syntax &amp;amp; ")"
    If objAttribute.MultiValued Then
        WScript.Echo " Multivalued"
    Else
        WScript.Echo " Single-valued"
    End If
Next
 
WScript.Echo VbCrLf &amp;amp; "Optional attributes:"
For Each strAttribute in objUserClass.OptionalProperties
    i=i + 1
    WScript.Echo i &amp;amp; vbTab &amp;amp; strAttribute
    Set objAttribute = objSchemaClass.GetObject("Property",  strAttribute)
    WScript.Echo " [Syntax: " &amp;amp; objAttribute.Syntax &amp;amp; "]"
    If objAttribute.MultiValued Then
        WScript.Echo " Multivalued"
    Else
        WScript.Echo " Single-valued"
    End If
Next
</vb><vb name="List Allowed User Logon Hours" n="153">' List Allowed User Logon Hours


On Error Resume Next
Dim arrLogonHoursBytes(20)
Dim arrLogonHoursBits(167)
arrDayOfWeek = Array _
    ("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat")
 
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
arrLogonHours = objUser.Get("logonHours")
 
For i = 1 To LenB(arrLogonHours)
    arrLogonHoursBytes(i-1) = AscB(MidB(arrLogonHours, i, 1))
    WScript.Echo "MidB returns: " &amp;amp; MidB(arrLogonHours, i, 1)
    WScript.Echo "arrLogonHoursBytes: " &amp;amp; arrLogonHoursBytes(i-1)
    wscript.echo vbcrlf
Next
 
intCounter = 0
intLoopCounter = 0
WScript.echo "Day  Byte 1   Byte 2   Byte 3"
For Each LogonHourByte In arrLogonHoursBytes
    arrLogonHourBits = GetLogonHourBits(LogonHourByte)
 
    If intCounter = 0 Then
        WScript.STDOUT.Write arrDayOfWeek(intLoopCounter) &amp;amp; Space(2)
        intLoopCounter = intLoopCounter + 1
    End If
 
    For Each LogonHourBit In arrLogonHourBits
        WScript.STDOUT.Write LogonHourBit
        intCounter = 1 + intCounter
 
        If intCounter = 8 or intCounter = 16 Then
            Wscript.STDOUT.Write Space(1)
        End If
        
        If intCounter = 24 Then
            WScript.echo vbCr
            intCounter = 0
        End If 
    Next
Next
 
Function GetLogonHourBits(x)
    Dim arrBits(7)
    For i = 7 to 0 Step -1
        If x And 2^i Then
            arrBits(i) = 1
        Else
            arrBits(i) = 0
        End If
    Next
    GetLogonHourBits = arrBits
End Function
</vb><vb name="List Audit Permissions for a User Account" n="154">' List Audit Permissions for a User Account


Const SE_SACL_PROTECTED = &amp;amp;H2000 
Const ADS_SECURITY_INFO_OWNER = &amp;amp;H1 
Const ADS_SECURITY_INFO_GROUP = &amp;amp;H2
Const ADS_OPTION_SECURITY_MASK =&amp;amp;H3
Const ADS_SECURITY_INFO_DACL = &amp;amp;H4 
Const ADS_SECURITY_INFO_SACL = &amp;amp;H8
 
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
objUser.SetOption ADS_OPTION_SECURITY_MASK, ADS_SECURITY_INFO_OWNER _
    Or ADS_SECURITY_INFO_GROUP Or ADS_SECURITY_INFO_DACL _
        Or ADS_SECURITY_INFO_SACL
  
Set objNtSecurityDescriptor = objUser.Get("ntSecurityDescriptor")
 
intNtSecurityDescriptorControl = objNtSecurityDescriptor.Control
 
WScript.Echo "Auditing Tab"
strMessage = "Allow inheritable auditing entries from" &amp;amp; _ 
    "the parent to propogate to this object and all child objects "
If (intNtSecurityDescriptorControl And SE_SACL_PROTECTED) Then
    Wscript.Echo strMessage &amp;amp; "is disabled."
Else
    WScript.Echo strMessage &amp;amp; "is enabled."
End If
WScript.Echo 
 
Set objSacl = objNtSecurityDescriptor.SystemAcl
DisplayAceInformation objSacl, "SACL"
 
Sub DisplayAceInformation(SecurityStructure, strType)
    Const ADS_ACETYPE_SYSTEM_AUDIT = &amp;amp;H2 
    Const ADS_ACETYPE_SYSTEM_AUDIT_OBJECT = &amp;amp;H7 
  
    intAceCount = 0
    For Each objAce In SecurityStructure
        strTrustee = Mid(objAce.Trustee,1,12)
        If StrComp(strTrustee, "NT AUTHORITY", 1) &amp;lt;&amp;gt; 0 Then
            intAceCount = intAceCount + 1
            WScript.Echo strType &amp;amp; " permission entry: " &amp;amp; intAceCount
            WScript.Echo "Name: " &amp;amp; objAce.Trustee
 
            intAceType = objAce.AceType
            WScript.Echo "ACETYPE IS: " &amp;amp; intAceType
            If (intAceType = ADS_ACETYPE_SYSTEM_AUDIT or _
                intAceType = ADS_ACETYPE_SYSTEM_AUDIT_OBJECT) Then
                WScript.Echo "Type: Success or Failure Audit"
            Else
                WScript.Echo "Audit Type Unknown."
            End If
            ReadBitsInAccessMask(objAce.AccessMask)
            WScript.Echo 
        End If
    Next
End Sub
 
Sub ReadBitsInAccessMask(AccessMask)
    Const ADS_RIGHT_DELETE = &amp;amp;H10000
    Const ADS_RIGHT_READ_CONTROL = &amp;amp;H20000
    Const ADS_RIGHT_WRITE_DAC = &amp;amp;H40000
    Const ADS_RIGHT_WRITE_OWNER = &amp;amp;H80000
    Const ADS_RIGHT_DS_CREATE_CHILD = &amp;amp;H1
    Const ADS_RIGHT_DS_DELETE_CHILD = &amp;amp;H2
    Const ADS_RIGHT_ACTRL_DS_LIST = &amp;amp;H4
    Const ADS_RIGHT_DS_SELF = &amp;amp;H8
    Const ADS_RIGHT_DS_READ_PROP = &amp;amp;H10
    Const ADS_RIGHT_DS_WRITE_PROP = &amp;amp;H20
    Const ADS_RIGHT_DS_DELETE_TREE = &amp;amp;H40
    Const ADS_RIGHT_DS_LIST_OBJECT = &amp;amp;H80
    Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100
 
    WScript.Echo VbCrLf &amp;amp; "Standard Access Rights"
    If (AccessMask And ADS_RIGHT_DELETE) Then _
        WScript.Echo vbTab &amp;amp; "-Delete an object."
    If (AccessMask And ADS_RIGHT_READ_CONTROL) Then _
        WScript.Echo vbTab &amp;amp; "-Read permissions."
    If (AccessMask And ADS_RIGHT_WRITE_DAC) Then _
        WScript.Echo vbTab &amp;amp; "-Write permissions."
    If (AccessMask And ADS_RIGHT_WRITE_OWNER) Then _
        WScript.Echo vbTab &amp;amp; "-Modify owner."
  
    WScript.Echo VbCrLf &amp;amp; "Directory Service Specific Access Rights"
    If (AccessMask And ADS_RIGHT_DS_CREATE_CHILD) Then _
        WScript.Echo vbTab &amp;amp; "-Create child objects."
    If (AccessMask And ADS_RIGHT_DS_DELETE_CHILD) Then _
        WScript.Echo vbTab &amp;amp; "-Delete child objects."
    If (AccessMask And ADS_RIGHT_ACTRL_DS_LIST) Then _
        WScript.Echo vbTab &amp;amp; "-Enumerate an object."
    If (AccessMask And ADS_RIGHT_DS_READ_PROP) Then _
        WScript.Echo vbTab &amp;amp; "-Read the properties of an object."
    If (AccessMask And ADS_RIGHT_DS_WRITE_PROP) Then _
        WScript.Echo vbTab &amp;amp; "-Write the properties of an object."
    If (AccessMask And ADS_RIGHT_DS_DELETE_TREE) Then _
        WScript.Echo vbTab &amp;amp; "-Delete a tree of objects"
    If (AccessMask And ADS_RIGHT_DS_LIST_OBJECT) Then _
        WScript.Echo vbTab &amp;amp; "-List a tree of objects."
 
    WScript.Echo VbCrLf &amp;amp; "Control Access Rights"
    If (AccessMask And ADS_RIGHT_DS_CONTROL_ACCESS) + _
        (AccessMask And ADS_RIGHT_DS_SELF) = 0 Then
        WScript.Echo "-None"
    Else 
        If (AccessMask And ADS_RIGHT_DS_CONTROL_ACCESS) Then _
            WScript.Echo vbTab &amp;amp; "-Extended access rights."
            If (AccessMask And ADS_RIGHT_DS_SELF) Then
                WScript.Echo vbTab &amp;amp; "-Active Directory must validate " &amp;amp; _
                    "a property "
                WScript.Echo vbTab &amp;amp; " write operation beyond the " &amp;amp; _
                    "schema definition "
                WScript.Echo vbTab &amp;amp; " for the attribute."
        End If
    End If
End Sub
</vb><vb name="List COM+ Information for a User Account" n="155">' List COM+ Information for a User Account


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")

WScript.Echo "COM User Partition Set Link: " &amp;amp; _
    objUser.msCOM-UserPartitionSetLink
</vb><vb name="List Object Page Information for a User Account" n="156">' List Object Page Information for a User Account


Set objUser = GetObject _
    ("GC://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
strWhenCreated = objUser.Get("whenCreated")
strWhenChanged = objUser.Get("whenChanged")
 
Set objUSNChanged = objUser.Get("uSNChanged")
dblUSNChanged = _
    Abs(objUSNChanged.HighPart * 2^32 + objUSNChanged.LowPart)
 
Set objUSNCreated = objUser.Get("uSNCreated")
dblUSNCreated = _
    Abs(objUSNCreated.HighPart * 2^32 + objUSNCreated.LowPart)
 
objUser.GetInfoEx Array("canonicalName"), 0
arrCanonicalName = objUser.GetEx("canonicalName")
 
WScript.echo "Canonical Name of object:"
For Each strValue in arrCanonicalName
    WScript.Echo vbTab &amp;amp; strValue
Next
WScript.Echo 
 
WScript.Echo "Object class: " &amp;amp; objUser.Class
WScript.echo "When Created: " &amp;amp; strWhenCreated &amp;amp; " (Created - GMT)"
WScript.echo "When Changed: " &amp;amp; strWhenChanged &amp;amp; " (Modified - GMT)"
WScript.Echo 
WScript.Echo "USN Changed: " &amp;amp; dblUSNChanged &amp;amp; " (USN Current)"
WScript.Echo "USN Created: " &amp;amp; dblUSNCreated &amp;amp; " (USN Original)"
</vb><vb name="List Organization Information for a User Account" n="157">' List Organization Information for a User Account


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com")

WScript.Echo "Title: " &amp;amp; objUser.title
WScript.Echo "Department: " &amp;amp; objUser.department
WScript.Echo "Company: " &amp;amp; objUser.company
WScript.Echo "Manager: " &amp;amp; objUser.manager
 
For Each strValue in objUser.directReports
    WScript.Echo "Direct Reports: " &amp;amp; strValue
Next
</vb><vb name="List Published Certificates for a User Account" n="158">' List Published Certificates for a User Account


On Error Resume Next

Const E_ADS_PROPERTY_NOT_FOUND  = &amp;amp;h8000500D
Const ForWriting = 2
Const WshRunning = 0
 
Set objUser = GetObject _
    ("GC://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
objUser.GetInfoEx Array("userCertificate"), 0
arrUserCertificates = objUser.GetEx("userCertificate")
 
If Err.Number = E_ADS_PROPERTY_NOT_FOUND Then
    WScript.Echo "No assigned certificates"
    WScript.Quit
Else
    Set objShell = CreateObject("WScript.Shell")
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    strPath = "." 
    intFileCounter = 0
 
    For Each arrUserCertificate in arrUserCertificates
        strFileName = "file" &amp;amp; intFileCounter
        strFullName = objFSO.BuildPath(strPath, strFileName)
        Set objFile = objFSO.OpenTextFile(strFullName, ForWriting, True)
        
        For i = 1 To LenB(arrUserCertificate)
            ReDim Preserve arrUserCertificatesChar(i - 1)
            arrUserCertificatesChar(i-1) = _
                Hex(AscB(MidB(arrUserCertificate, i, 3)))
        Next
                
        intCounter=0
        For Each HexVal in arrUserCertificatesChar
            intCounter=intCounter + 1
            If Len(HexVal) = 1 Then 
                objFile.Write(0 &amp;amp; HexVal &amp;amp; " ")
            Else
                objFile.Write(HexVal &amp;amp; " ")
            End If
        Next
        objFile.Close
        Set objFile = Nothing
  
        Set objExecCmd1 = objShell.Exec _
            ("certutil -decodeHex " &amp;amp; strFileName &amp;amp; " " &amp;amp; strFileName &amp;amp; ".cer")
        Do While objExecCmd1.Status = WshRunning
            WScript.Sleep 100
        Loop
        Set objExecCmd1 = Nothing
 
        Set objExecCmd2 = objShell.Exec("certutil " &amp;amp; strFileName &amp;amp; ".cer")
        Set objStdOut = objExecCmd2.StdOut
        Set objExecCmd2 = Nothing
      
        WScript.Echo VbCrLf &amp;amp; "Certificate " &amp;amp; intFileCounter + 1
        While Not objStdOut.AtEndOfStream
            strLine = objStdOut.ReadLine
            If InStr(strLine, "Issuer:") Then
                WScript.Echo Trim(strLine)
                WScript.Echo vbTab &amp;amp; Trim(objStdOut.ReadLine)
            End If
            If InStr(strLine, "Subject:") Then
                Wscript.Echo Trim(strLine)
                WScript.Echo vbTab &amp;amp; Trim(objStdOut.ReadLine)
            End If
            If InStr(strLine, "NotAfter:") Then
                strLine = Trim(strLine)
                WScript.Echo "Expires:"
                Wscript.Echo vbTab &amp;amp; Mid(strLine, 11)
            End If
        Wend
 
        objFSO.DeleteFile(strFullName)
        objFSO.DeleteFile(strPath &amp;amp; "\" &amp;amp; strFileName &amp;amp; ".cer") 
  
        intFileCounter = intFileCounter + 1
    Next
End If
</vb><vb name="List Security Permissions for a User Account" n="159">' List Security Permissions for a User Account


Const SE_DACL_PROTECTED = &amp;amp;H1000 
 
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
Set objNtSecurityDescriptor = objUser.Get("ntSecurityDescriptor")
intNtSecurityDescriptorControl = objNtSecurityDescriptor.Control
 
WScript.Echo "Permissions Tab"
strMessage = "Allow inheritable permissions from the parent to " &amp;amp; _
    "propogate to this object and all child objects "
If (intNtSecurityDescriptorControl And SE_DACL_PROTECTED) Then
    Wscript.Echo strMessage &amp;amp; "is disabled."
Else
    WScript.Echo strMessage &amp;amp; "is enabled."
End If
WScript.Echo 
 
Set objDiscretionaryAcl = objNtSecurityDescriptor.DiscretionaryAcl
DisplayAceInformation objDiscretionaryAcl, "DACL"
 
Sub DisplayAceInformation(SecurityStructure, strType)
    Const ADS_ACETYPE_ACCESS_ALLOWED = &amp;amp;H0 
    Const ADS_ACETYPE_ACCESS_DENIED = &amp;amp;H1 
    Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = &amp;amp;H5 
    Const ADS_ACETYPE_ACCESS_DENIED_OBJECT = &amp;amp;H6 
    intAceCount = 0
    For Each objAce In SecurityStructure
        strTrustee = Mid(objAce.Trustee,1,12)
        If StrComp(strTrustee, "NT AUTHORITY", 1) &amp;lt;&amp;gt; 0 Then
            intAceCount = intAceCount + 1
            WScript.Echo strType &amp;amp; " permission entry: " &amp;amp; intAceCount
            WScript.Echo "Name: " &amp;amp; objAce.Trustee
 
            intAceType = objAce.AceType
            If (intAceType = ADS_ACETYPE_ACCESS_ALLOWED Or _
                intAceType = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT) Then
                WScript.Echo "Type: Allow Access"
            ElseIf (intAceType = ADS_ACETYPE_ACCESS_DENIED Or _
                intAceType = ADS_ACETYPE_ACCESS_DENIED_OBJECT) Then
                WScript.Echo "Type: Deny Acess"
            Else
                WScript.Echo "Acess Type Unknown."
            End If
            ReadBitsInAccessMask(objAce.AccessMask)
            WScript.Echo 
        End If
    Next
End Sub
 
Sub ReadBitsInAccessMask(AccessMask)
    Const ADS_RIGHT_DELETE = &amp;amp;H10000
    Const ADS_RIGHT_READ_CONTROL = &amp;amp;H20000
    Const ADS_RIGHT_WRITE_DAC = &amp;amp;H40000
    Const ADS_RIGHT_WRITE_OWNER = &amp;amp;H80000
    Const ADS_RIGHT_DS_CREATE_CHILD = &amp;amp;H1
    Const ADS_RIGHT_DS_DELETE_CHILD = &amp;amp;H2
    Const ADS_RIGHT_ACTRL_DS_LIST = &amp;amp;H4
    Const ADS_RIGHT_DS_SELF = &amp;amp;H8
    Const ADS_RIGHT_DS_READ_PROP = &amp;amp;H10
    Const ADS_RIGHT_DS_WRITE_PROP = &amp;amp;H20
    Const ADS_RIGHT_DS_DELETE_TREE = &amp;amp;H40
    Const ADS_RIGHT_DS_LIST_OBJECT = &amp;amp;H80
    Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100
 
    WScript.Echo VbCrLf &amp;amp; "Standard Access Rights"
    If (AccessMask And ADS_RIGHT_DELETE) Then _
        WScript.Echo vbTab &amp;amp; "-Delete an object."
    If (AccessMask And ADS_RIGHT_READ_CONTROL) Then _
        WScript.Echo vbTab &amp;amp; "-Read permissions."
    If (AccessMask And ADS_RIGHT_WRITE_DAC) Then _
        WScript.Echo vbTab &amp;amp; "-Write permissions."
    If (AccessMask And ADS_RIGHT_WRITE_OWNER) Then _
        WScript.Echo vbTab &amp;amp; "-Modify owner."
  
    WScript.Echo VbCrLf &amp;amp; "Directory Service Specific Access Rights"
    If (AccessMask And ADS_RIGHT_DS_CREATE_CHILD) Then _
        WScript.Echo vbTab &amp;amp; "-Create child objects."
    If (AccessMask And ADS_RIGHT_DS_DELETE_CHILD) Then _
        WScript.Echo vbTab &amp;amp; "-Delete child objects."
    If (AccessMask And ADS_RIGHT_ACTRL_DS_LIST) Then _
        WScript.Echo vbTab &amp;amp; "-Enumerate an object."
    If (AccessMask And ADS_RIGHT_DS_READ_PROP) Then _
        WScript.Echo vbTab &amp;amp; "-Read the properties of an object."
    If (AccessMask And ADS_RIGHT_DS_WRITE_PROP) Then _
        WScript.Echo vbTab &amp;amp; "-Write the properties of an object."
    If (AccessMask And ADS_RIGHT_DS_DELETE_TREE) Then _
        WScript.Echo vbTab &amp;amp; "-Delete a tree of objects"
    If (AccessMask And ADS_RIGHT_DS_LIST_OBJECT) Then _
        WScript.Echo vbTab &amp;amp; "-List a tree of objects."
 
    WScript.Echo VbCrLf &amp;amp; "Control Access Rights"
    If (AccessMask And ADS_RIGHT_DS_CONTROL_ACCESS) + _
        (AccessMask And ADS_RIGHT_DS_SELF) = 0 Then
            WScript.Echo "-None"
    Else 
        If (AccessMask And ADS_RIGHT_DS_CONTROL_ACCESS) Then _
            WScript.Echo vbTab &amp;amp; "-Extended access rights."
        If (AccessMask And ADS_RIGHT_DS_SELF) Then
            WScript.Echo vbTab &amp;amp; "-Active Directory must validate a property "
            WScript.Echo vbTab &amp;amp; " write operation beyond the schema " &amp;amp; _
                "definition "
            WScript.Echo vbTab &amp;amp; " for the attribute."
        End If
    End If
End Sub
</vb><vb name="List the Dial-In Property Configuration Settings for a User Account" n="160">' List the Dial-In Property Configuration Settings for a User Account


On Error Resume Next

Const E_ADS_PROPERTY_NOT_FOUND  = &amp;amp;h8000500D

Const FourthOctet = 1
Const ThirdOctet = 256
Const SecondOctet = 65536
Const FirstOctet = 16777216
 
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
blnMsNPAllowDialin = objUser.Get("msNPAllowDialin")
WScript.Echo "Remote Access Permission (Dial-in or VPN)"
If Err.Number = E_ADS_PROPERTY_NOT_FOUND Then
    WScript.Echo "Control access through Remote Access Policy"
    Err.Clear
Else
    If blnMsNPAllowDialin = True Then
        WScript.Echo "Allow access (msNPAllowDialin)"
    Else
        WScript.Echo "Deny access (msNPAllowDialin)"
    End If
End If
WScript.Echo 
 
arrMsNPSavedCallingStationID = objUser.GetEx("msNPSavedCallingStationID")
If Err.Number = E_ADS_PROPERTY_NOT_FOUND Then
    WScript.Echo "No Caller-ID specified."
    Err.Clear
Else
    WScript.Echo "Verify Caller ID (msNPSavedCallingStationID): "
    For Each strValue in arrMsNPSavedCallingStationID
        WScript.echo strValue
    Next
  
    objUser.GetEx "msNPCallingStationID"
    If Err.Number = E_ADS_PROPERTY_NOT_FOUND Then
        WScript.Echo "Calling station ID(s) specified but not assigned."
        Err.Clear
    Else
        WScript.echo "Calling station ID(s) assigned."
    End If
  
End If
WScript.Echo 
 
intMsRADIUSServiceType = objUser.Get("msRADIUSServiceType")
WScript.Echo "Callback Options"
If Err.Number = E_ADS_PROPERTY_NOT_FOUND Then
    WScript.Echo "No Callback"
    Err.Clear
Else
    strMsRADIUSCallbackNumber = objUser.Get("msRADIUSCallbackNumber")
    If Err.Number = E_ADS_PROPERTY_NOT_FOUND Then
        WScript.Echo "Set by caller (Routing and Remote Access Service only)"
        Err.Clear
  
    strMsRASSavedCallbackNumber = objUser.Get("msRASSavedCallbackNumber")
    If Err.Number &amp;lt;&amp;gt; E_ADS_PROPERTY_NOT_FOUND Then
        WScript.Echo "Unused value of " &amp;amp; strMsRASSavedCallbackNumber &amp;amp; _
            " appears in the Always Callback to field."
    Else
        Err.Clear
    End If  
Else
    WScript.Echo "Always Callback to: " &amp;amp; _
        strMsRADIUSCallbackNumber &amp;amp; " (msRADIUSCallbackNumber)"
    End If
End If   
WScript.Echo
 
intMsRASSavedFramedIPAddress = objUser.Get("msRASSavedFramedIPAddress")
If Err.Number = E_ADS_PROPERTY_NOT_FOUND Then
    WScript.Echo "No static IP address assigned."
    Err.Clear
Else
    If sgn(intMsRASSavedFramedIPAddress) = -1 Then
        intIP = intMsRASSavedFramedIPAddress
        WScript.StdOut.Write 256 + (int(intIP/FirstOctet)) &amp;amp; "."
        intFirstRemainder = intIP mod FirstOctet
        WScript.StdOut.Write 256 + (int(intFirstRemainder/SecondOctet)) &amp;amp; "."
        intSecondRemainder = intFirstRemainder mod SecondOctet
        WScript.StdOut.Write 256 + (int(intSecondRemainder/ThirdOctet)) &amp;amp; "."
        intThirdRemainder = intSecondRemainder mod ThirdOctet
        WScript.Echo 256 + (int(intThirdRemainder/FourthOctet))
    Else
        intIP = intMsRASSavedFramedIPAddress
        WScript.StdOut.Write  int(intIP/FirstOctet) &amp;amp; "."
        intFirstRemainder = intIP mod FirstOctet
        WScript.StdOut.Write  int(intFirstRemainder/SecondOctet) &amp;amp; "."
        intSecondRemainder = intFirstRemainder mod SecondOctet
        WScript.StdOut.Write  int(intSecondRemainder/ThirdOctet) &amp;amp; "."
        intThirdRemainder = intSecondRemainder mod ThirdOctet
        WScript.Echo int(intThirdRemainder/FourthOctet)
    End If
    
    objUser.Get "msRADIUSFramedIPAddress"
    If Err.Number = E_ADS_PROPERTY_NOT_FOUND Then
        WScript.Echo "Static IP address specified but not assigned."
        Err.Clear
    Else
        WScript.Echo "Static IP Address assigned."
    End If
 
End If
WScript.Echo 
 
arrMsRASSavedFramedRoute = objUser.GetEx("msRASSavedFramedRoute")
If Err.Number = E_ADS_PROPERTY_NOT_FOUND Then
    WScript.Echo "No static Routes specified."
    Err.Clear
Else
    WScript.echo "Static Routes (msRASSavedFramedRoute):"
    WScript.Echo vbTab &amp;amp; "CIDR 0.0.0.0 Metric"
    For Each strValue in arrMsRASSavedFramedRoute
        WScript.echo vbTab &amp;amp; strValue
    Next
  
    objUser.GetEx "msRADIUSFramedRoute"
    If Err.Number = E_ADS_PROPERTY_NOT_FOUND Then
        WScript.Echo "Static Routes specified but not assigned."
        Err.Clear
    Else
        WScript.echo "Static Routes assigned."
    End If
End If
</vb><vb name="List User Account Account Page Properties" n="161">' List User Account Account Page Properties


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com")
 
WScript.Echo "User Principal Name: " &amp;amp; objUser.userPrincipalName
WScript.Echo "SAM Account Name: " &amp;amp; objUser.sAMAccountName
WScript.Echo "User Workstations: " &amp;amp; objUser.userWorkstations

Set objDomain = GetObject("LDAP://dc=fabrikam,dc=com")
WScript.Echo "Domain controller: " &amp;amp; objDomain.dc
</vb><vb name="List User Account Address Page Attributes" n="162">' List User Account Address Page Attributes


On Error Resume Next
 
Set objUser = GetObject _
  ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com")
 
WScript.Echo "Street Address: " &amp;amp; objUser.streetAddress
WScript.Echo "Post Office Box: " &amp;amp; objUser.postOfficeBox
WScript.Echo "Locality: " &amp;amp; objUser.l
WScript.Echo "Street: " &amp;amp; objUser.st
WScript.Echo "Postal Code: " &amp;amp; objUser.postalCode
WScript.Echo "Country: " &amp;amp; objUser.c
</vb><vb name="List User Account General Page Properties" n="163">' List User Account General Page Properties


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com")


WScript.Echo "First Name: " &amp;amp; objUser.givenName
WScript.Echo "Initials: " &amp;amp; objUser.initials
WScript.Echo "Last Name: " &amp;amp; objUser.sn
WScript.Echo "Display Name: " &amp;amp; objUser.displayName
WScript.Echo "Office: " &amp;amp; _
    objUser.physicalDeliveryOfficeName
WScript.Echo "Telephone Number: " &amp;amp; objUser.telephoneNumber
WScript.Echo "Email: " &amp;amp; objUser.mail
WScript.Echo "Home Page: " &amp;amp; 
 
For Each strValue in objUser.description
    WScript.Echo "Description: " &amp;amp; strValue
Next

For Each strValue in objUser.otherTelephone
    WScript.Echo "Other Telephone: " &amp;amp; strValue
Next

For Each strValue in objUser.url
    WScript.Echo "URL: " &amp;amp; strValue
Next
</vb><vb name="List User Profile Properties" n="164">' List User Profile Properties


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com")
 
Wscript.Echo "Profile Path: " &amp;amp; objUser.ProfilePath
Wscript.Echo "Script Path: " &amp;amp; objUser.ScriptPath
Wscript.Echo "Home Directory: " &amp;amp; objUser.HomeDirectory
Wscript.Echo "Home Drive: " &amp;amp; objUser.HomeDrive
</vb><vb name="List userAccountControl Values for an Active Directory User Account" n="165">' List userAccountControl Values for an Active Directory User Account


Set objHash = CreateObject("Scripting.Dictionary")
 
objHash.Add "ADS_UF_SMARTCARD_REQUIRED", &amp;amp;h40000 
objHash.Add "ADS_UF_TRUSTED_FOR_DELEGATION", &amp;amp;h80000 
objHash.Add "ADS_UF_NOT_DELEGATED", &amp;amp;h100000 
objHash.Add "ADS_UF_USE_DES_KEY_ONLY", &amp;amp;h200000 
objHash.Add "ADS_UF_DONT_REQUIRE_PREAUTH", &amp;amp;h400000 
 
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
intUAC = objUser.Get("userAccountControl")
 
If objUser.IsAccountLocked = True Then
    Wscript.Echo "ADS_UF_LOCKOUT is enabled"
Else
    Wscript.Echo "ADS_UF_LOCKOUT is disabled"
End If
wscript.echo VBCRLF
 
For Each Key In objHash.Keys
    If objHash(Key) And intUAC Then 
        Wscript.Echo Key &amp;amp; " is enabled"
    Else
        Wscript.Echo Key &amp;amp; " is disabled"
  End If
Next
</vb><vb name="Search for a User Account in Active Directory" n="166">' Search for a User Account in Active Directory


strUserName = "kenmyer"
dtStart = TimeValue(Now())
Set objConnection = CreateObject("ADODB.Connection")
objConnection.Open "Provider=ADsDSOObject;"
 
Set objCommand = CreateObject("ADODB.Command")
objCommand.ActiveConnection = objConnection
 
objCommand.CommandText = _
    "&amp;lt;LDAP://dc=fabrikam,dc=com&amp;gt;;(&amp;amp;(objectCategory=User)" &amp;amp; _
         "(samAccountName=" &amp;amp; strUserName &amp;amp; "));samAccountName;subtree"
  
Set objRecordSet = objCommand.Execute
 
If objRecordset.RecordCount = 0 Then
    WScript.Echo "sAMAccountName: " &amp;amp; strUserName &amp;amp; " does not exist."
Else
    WScript.Echo strUserName &amp;amp; " exists."
End If
 
objConnection.Close
</vb></dd>
			<dd name="User Account Management" code="manage" desc="Sample scripts for carrying out Active Directory user account management tasks such as creating and deleting accounts."><vb name="Copy a Published Certificate to a User Account" n="167">' Copy a Published Certificate to a User Account


On Error Resume Next

Const ADS_PROPERTY_APPEND = 3 
 
Set objUserTemplate = _
    GetObject("LDAP://cn=userTemplate,OU=Management,dc=NA,dc=fabrikam,dc=com")
arrUserCertificates = objUserTemplate.GetEx("userCertificate")
 
Set objUser = _
    GetObject("LDAP://cn=MyerKen,OU=Management,dc=NA,dc=fabrikam,dc=com")
objUser.PutEx ADS_PROPERTY_APPEND, "userCertificate", arrUserCertificates
objUser.SetInfo
</vb><vb name="Copy Allowed Logon Hours from One Account to Another" n="168">' Copy Allowed Logon Hours from One Account to Another


On Error Resume Next

Set objUserTemplate = _
    GetObject("LDAP://cn=userTemplate,OU=Management,dc=NA,dc=fabrikam,dc=com")
arrLogonHours = objUserTemplate.Get("logonHours")
 
Set objUser = _
    GetObject("LDAP://cn=MyerKen,OU=Management,dc=NA,dc=fabrikam,dc=com")
objUser.Put "logonHours", arrLogonHours
objUser.SetInfo
</vb><vb name="Create 1000 Sample User Accounts" n="169">' Create 1000 Sample User Accounts


Set objRootDSE = GetObject("LDAP://rootDSE")

Set objContainer = GetObject("LDAP://cn=Users," &amp;amp; _
    objRootDSE.Get("defaultNamingContext"))
 
For i = 1 To 1000
    Set objLeaf = objContainer.Create("User", "cn=UserNo" &amp;amp; i)
    objLeaf.Put "sAMAccountName", "UserNo" &amp;amp; i
    objLeaf.SetInfo
Next
 
WScript.Echo "1000 Users created."
</vb><vb name="Create a Contact in Active Directory" n="170">' Create a Contact in Active Directory


Set objOU = GetObject("LDAP://OU=management,dc=fabrikam,dc=com")

Set objUser = objOU.Create("contact", "cn=MyerKen")
objUser.SetInfo
</vb><vb name="Create a User Account" n="171">' Create a User Account


Set objOU = GetObject("LDAP://OU=management,dc=fabrikam,dc=com")

Set objUser = objOU.Create("User", "cn=MyerKen")
objUser.Put "sAMAccountName", "myerken"
objUser.SetInfo
</vb><vb name="Create a User Account and Add it to a Group and an OU" n="172">' Create a User Account and Add it to a Group and an OU


Set objDomain = GetObject("LDAP://dc=fabrikam,dc=com")
Set objOU = objDomain.Create("organizationalUnit", "ou=Management")
objOU.SetInfo
 
Set objOU = GetObject("LDAP://OU=Management,dc=fabrikam,dc=com")
Set objUser = objOU.Create("User", "cn= AckermanPilar")
objUser.Put "sAMAccountName", "AckermanPila"
objUser.SetInfo
 
Set objOU = GetObject("LDAP://OU=Management,dc=fabrikam,dc=com")
Set objGroup = objOU.Create("Group", "cn=atl-users")
objGroup.Put "sAMAccountName", "atl-users"
objGroup.SetInfo
 
objGroup.Add objUser.ADSPath
</vb><vb name="Delete a User Account from Active Directory" n="173">' Delete a User Account from Active Directory


Set objOU = GetObject("LDAP://ou=hr,dc=fabrikam,dc=com")

objOU.Delete "user", "cn=MyerKen"
</vb><vb name="List the Owner of a User Account" n="174">' List the Owner of a User Account


Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
Set objNtSecurityDescriptor = objUser.Get("ntSecurityDescriptor")
WScript.Echo "Owner Tab"
WScript.Echo "Current owner of this item: " &amp;amp; objNtSecurityDescriptor.Owner
</vb><vb name="Modify the UPN Suffixes Defined in the Forest" n="175">' Modify the UPN Suffixes Defined in the Forest


Const ADS_PROPERTY_APPEND = 3 

Set objPartitions = GetObject _
    ("LDAP://cn=Partitions,cn=Configuration,dc=fabrikam,dc=com")
 
objPartitions.PutEx ADS_PROPERTY_APPEND, _
    "upnSuffixes", Array("sa.fabrikam.com","corp.fabrikam.com")
objPartitions.SetInfo
</vb><vb name="Move a User Account" n="176">' Move a User Account


Set objOU = GetObject("LDAP://ou=sales,dc=na,dc=fabrikam,dc=com")

objOU.MoveHere _
    "LDAP://cn=BarrAdam,OU=hr,dc=na,dc=fabrikam,dc=com", vbNullString
</vb><vb name="Move a User Account to a New Domain" n="177">' Move a User Account to a New Domain


Set objOU = GetObject("LDAP://ou=management,dc=na,dc=fabrikam,dc=com")

objOU.MoveHere _
    "LDAP://cn=AckermanPilar,OU=management,dc=fabrikam,dc=com", vbNullString
</vb><vb name="Set a User Account So It Never Expires" n="178">' Set a User Account So It Never Expires


Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")

objUser.AccountExpirationDate = "01/01/1970"
objUser.SetInfo
</vb></dd>
			<dd name="User Account Status" code="status" desc="Sample scripts for carrying out such tasks as enabling and disabling Active Directory user accounts and working with account expiration properties."><vb name="Disable a User Account" n="179">' Disable a User Account


Const ADS_UF_ACCOUNTDISABLE = 2
 
Set objUser = GetObject _
("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com")
intUAC = objUser.Get("userAccountControl")
 
objUser.Put "userAccountControl", intUAC OR ADS_UF_ACCOUNTDISABLE
objUser.SetInfo
</vb><vb name="Enable a User Account" n="180">' Enable a User Account


Set objUser = GetObject _
  ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com")

objUser.AccountDisabled = FALSE
objUser.SetInfo
</vb><vb name="List All the Disabled User Accounts in Active Directory" n="181">' List All the Disabled User Accounts in Active Directory


Const ADS_UF_ACCOUNTDISABLE = 2
 
Set objConnection = CreateObject("ADODB.Connection")
objConnection.Open "Provider=ADsDSOObject;"
Set objCommand = CreateObject("ADODB.Command")
objCommand.ActiveConnection = objConnection
objCommand.CommandText = _
    "&amp;lt;GC://dc=fabrikam,dc=com&amp;gt;;(objectCategory=User)" &amp;amp; _
        ";userAccountControl,distinguishedName;subtree"  
Set objRecordSet = objCommand.Execute
 
intCounter = 0
Do Until objRecordset.EOF
    intUAC=objRecordset.Fields("userAccountControl")
    If intUAC AND ADS_UF_ACCOUNTDISABLE Then
        WScript.echo objRecordset.Fields("distinguishedName") &amp;amp; " is disabled"
        intCounter = intCounter + 1
    End If
    objRecordset.MoveNext
Loop
 
WScript.Echo VbCrLf &amp;amp; "A total of " &amp;amp; intCounter &amp;amp; " accounts are disabled."
 
objConnection.Close
</vb><vb name="List the Date That a User Account Expires" n="182">' List the Date That a User Account Expires


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")

dtmAccountExpiration = objUser.AccountExpirationDate 
 
If Err.Number = -2147467259 Or dtmAccountExpiration = "1/1/1970" Then
    WScript.Echo "No account expiration date specified"
Else
    WScript.Echo "Account expiration date: " &amp;amp; objUser.AccountExpirationDate
End If
</vb><vb name="List the Status of a User" n="183">' List the Status of a User


Set objUser = GetObject _
  ("LDAP://cn=myerken,ou=management,dc=fabrikam,dc=com")
 
If objUser.AccountDisabled = FALSE Then
      WScript.Echo "The account is enabled."
Else
      WScript.Echo "The account is disabled."
End If
</vb><vb name="Modify the Expiration Date for a User Account" n="184">' Modify the Expiration Date for a User Account


Set objUser = GetObject _
  ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")

objUser.AccountExpirationDate = "03/30/2005"
objUser.SetInfo
</vb><vb name="Unlock a User Account" n="185">' Unlock a User Account


Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")

objUser.IsAccountLocked = False
objUser.SetInfo
</vb></dd>
		</dd>
	</dd>
	<dd name="Applications" code="apps" desc="Sample scripts for managing software and applications on servers and client computers.">
		<dd name="Server Applications" code="server" desc="Sample scripts for managing applications typically installed on Windows servers.">
			<dd name="Fax Server" code="fax" desc="Sample scripts for managing the Windows Fax Server."><vb name="List Fax Server Activity Logging Options" n="186">' List Fax Server Activity Logging Options


Set objFaxServer = CreateObject("FaxComEx.FaxServer")
objFaxServer.Connect "atl-dc-02"

Set objFaxLoggingOptions = objFaxServer.LoggingOptions
Set objFaxActivityLogging = objFaxLoggingOptions.ActivityLogging
Wscript.Echo "Database path: " &amp;amp; _
    objFaxActivityLogging.DatabasePath
Wscript.Echo "Log incoming: " &amp;amp; _
    objFaxActivityLogging.LogIncoming
Wscript.Echo "Log outgoing: " &amp;amp; _
    objFaxActivityLogging.LogOutgoing
</vb><vb name="List Fax Server Device Information" n="187">' List Fax Server Device Information


Set objFaxServer = CreateObject("FaxComEx.FaxServer")
objFaxServer.Connect "atl-dc-02"

Set colDevices = objFaxServer.GetDevices()

For Each objFaxDevice in colDevices
    Wscript.Echo "ID: " &amp;amp; objFaxDevice.ID
    Wscript.Echo "CSID: " &amp;amp; objFaxDevice.CSID
    Wscript.Echo "Description: " &amp;amp; objFaxDevice.Description
    Wscript.Echo "Device name: " &amp;amp; objFaxDevice.DeviceName
    Wscript.Echo "Powered off: " &amp;amp; objFaxDevice.PoweredOff
    Wscript.Echo "Provider unique name: " &amp;amp; _
        objFaxDevice.ProviderUniqueName
    Wscript.Echo "Receive mode: " &amp;amp; objFaxDevice.ReceiveMode
    Wscript.Echo "Receiving now: " &amp;amp; objFaxDevice.ReceivingNow
    Wscript.Echo "Ringing now: " &amp;amp; objFaxDevice.RingingNow
    Wscript.Echo "Rings before answer: " &amp;amp; _
        objFaxDevice.RingsBeforeAnswer
    Wscript.Echo "Send enabled: " &amp;amp; objFaxDevice.SendEnabled
    Wscript.Echo "Sending now: " &amp;amp; objFaxDevice.SendingNow
    Wscript.Echo "TSID: " &amp;amp; objFaxDevice.TSID
Next
</vb><vb name="List Fax Server Device Providers" n="188">' List Fax Server Device Providers


Set objFaxServer = CreateObject("FaxComEx.FaxServer")
objFaxServer.Connect "atl-dc-02"

Set objDeviceProviders = objFaxServer.GetDeviceProviders

For Each objFaxDeviceProvider in objDeviceProviders
    Wscript.Echo "Debug: " &amp;amp; objFaxDeviceProvider.Debug
    Wscript.Echo "Friendly name: " &amp;amp; objFaxDeviceProvider.FriendlyName
    Wscript.Echo "Image name: " &amp;amp; objFaxDeviceProvider.ImageName
    Wscript.Echo "Initialization error code: " &amp;amp; _
        objFaxDeviceProvider.InitErrorCode
    Wscript.Echo "Major build: " &amp;amp; objFaxDeviceProvider.MajorBuild
    Wscript.Echo "Minor build: " &amp;amp; objFaxDeviceProvider.MinorBuild
    Wscript.Echo "Major version: " &amp;amp; objFaxDeviceProvider.MajorVersion
    Wscript.Echo "Minor version: " &amp;amp; objFaxDeviceProvider.MinorVersion
    Wscript.Echo "Status: " &amp;amp; objFaxDeviceProvider.Status
    Wscript.Echo "TAPI provider name: " &amp;amp; objFaxDeviceProvider.TAPIProviderName
    Wscript.Echo "Unique name: " &amp;amp; objFaxDeviceProvider.UniqueName
Next
</vb><vb name="List Fax Server Event Logging Options" n="189">' List Fax Server Event Logging Options


Set objFaxServer = CreateObject("FaxComEx.FaxServer")
objFaxServer.Connect "atl-dc-02"

Set objFaxLoggingOptions = objFaxServer.LoggingOptions

Set objFaxEventLogging = objFaxLoggingOptions.EventLogging
Wscript.Echo "General events level: " &amp;amp; _
    objFaxEventLogging.GeneralEventsLevel
Wscript.Echo "Inbound events level: " &amp;amp; _
    objFaxEventLogging.InboundEventsLevel
Wscript.Echo "Initialization events level: " &amp;amp; _
    objFaxEventLogging.InitEventsLevel
Wscript.Echo "Outbound events level: " &amp;amp; _
    objFaxEventLogging.OutboundEventsLevel
</vb><vb name="List Fax Server Incoming Archive Information" n="190">' List Fax Server Incoming Archive Information


Set objFaxServer = CreateObject("FaxComEx.FaxServer")
objFaxServer.Connect "atl-dc-02"

Set objFolder = objFaxServer.Folders

Set objIncomingArchive = objFolder.IncomingArchive
Wscript.Echo "Age limit: " &amp;amp; objIncomingArchive.AgeLimit
Wscript.Echo "Archive folder: " &amp;amp; objIncomingArchive.ArchiveFolder
Wscript.Echo "High quota watermark: " &amp;amp; objIncomingArchive.HighQuotaWatermark
Wscript.Echo "Low quota watermark: " &amp;amp; objIncomingArchive.LowQuotaWatermark
Wscript.Echo "Size low: " &amp;amp; objIncomingArchive.SizeLow
Wscript.Echo "Size high: " &amp;amp; objIncomingArchive.SizeHigh
Wscript.Echo "Size quota warning: " &amp;amp; objIncomingArchive.SizeQuotaWarning
Wscript.Echo "Use archive: " &amp;amp; objIncomingArchive.UseArchive
</vb><vb name="List Fax Server Incoming Queue Information" n="191">' List Fax Server Incoming Queue Information


Set objFaxServer = CreateObject("FaxComEx.FaxServer")
objFaxServer.Connect "atl-dc-02"

Set objFolder = objFaxServer.Folders

Set objIncomingQueue = objFolder.IncomingQueue
Wscript.Echo "Blocked: " &amp;amp; objIncomingQueue.Blocked
</vb><vb name="List Fax Server Information" n="192">' List Fax Server Information


Set objFaxServer = CreateObject("FaxComEx.FaxServer")
objFaxServer.Connect "atl-dc-02"

Wscript.Echo "API version: " &amp;amp; objFaxServer.APIVersion
Wscript.Echo "Major build: " &amp;amp; objFaxServer.MajorBuild
Wscript.Echo "Minor build: " &amp;amp; objFaxServer.MinorBuild
Wscript.Echo "Major version: " &amp;amp; objFaxServer.MajorVersion
Wscript.Echo "Minor version: " &amp;amp; objFaxServer.MinorVersion
Wscript.Echo "Server name: " &amp;amp; objFaxServer.ServerName
</vb><vb name="List Fax Server Outgoing Archive Information" n="193">' List Fax Server Outgoing Archive Information


Set objFaxServer = CreateObject("FaxComEx.FaxServer")
objFaxServer.Connect "atl-dc-02"

Set objFolder = objFaxServer.Folders
Set objOutgoingArchive = objFolder.OutgoingArchive

Wscript.Echo "Age limikt: " &amp;amp; objOutgoingArchive.AgeLimit
Wscript.Echo "Archive folder: " &amp;amp; objOutgoingArchive.ArchiveFolder
Wscript.Echo "High quota watermark: " &amp;amp; objOutgoingArchive.HighQuotaWatermark
Wscript.Echo "Low quota watermark: " &amp;amp; objOutgoingArchive.LowQuotaWatermark
Wscript.Echo "Size low: " &amp;amp; objOutgoingArchive.SizeLow
Wscript.Echo "Size high: " &amp;amp; objOutgoingArchive.SizeHigh
Wscript.Echo "Size quota warning: " &amp;amp; objOutgoingArchive.SizeQuotaWarning
Wscript.Echo "Use archive: " &amp;amp; objOutgoingArchive.UseArchive
</vb><vb name="List Fax Server Outgoing Queue Information" n="194">' List Fax Server Outgoing Queue Information


Set objFaxServer = CreateObject("FaxComEx.FaxServer")
objFaxServer.Connect "atl-dc-02"

Set objFolder = objFaxServer.Folders
Set objOutgoingQueue = objFolder.OutgoingQueue

Wscript.Echo "Age limit: " &amp;amp; objOutgoingQueue.AgeLimit
Wscript.Echo "Allow personal cover pages: " &amp;amp; _
    objOutgoingQueue.AllowPersonalCoverPages
Wscript.Echo "Blocked: " &amp;amp; objOutgoingQueue.Blocked
Wscript.Echo "Branding: " &amp;amp; objOutgoingQueue.Branding
Wscript.Echo "Discount rate end: " &amp;amp; objOutgoingQueue.DiscountRateEnd
Wscript.Echo "Discount rate start: " &amp;amp; objOutgoingQueue.DiscountRateStart
Wscript.Echo "Paused: " &amp;amp; objOutgoingQueue.Paused
Wscript.Echo "Retries: " &amp;amp; objOutgoingQueue.Retries
Wscript.Echo "Retry delay: " &amp;amp; objOutgoingQueue.RetryDelay
Wscript.Echo "Use Device TSID: " &amp;amp; objOutgoingQueue.UseDeviceTSID
</vb><vb name="List Fax Server Receipt Options" n="195">' List Fax Server Receipt Options


Set objFaxServer = CreateObject("FaxComEx.FaxServer")
objFaxServer.Connect "atl-dc-02"

Set objReceiptOptions = objFaxServer.ReceiptOptions

Wscript.Echo "Allowed receipts: " &amp;amp; _
    objReceiptOptions.AllowedReceipts
Wscript.Echo "Authentication type: " &amp;amp; _
    objReceiptOptions.AuthenticationType
Wscript.Echo "SMTP password: " &amp;amp; objReceiptOptions.SMTPPassword
Wscript.Echo "SMTP port: " &amp;amp; objReceiptOptions.SMTPPort
Wscript.Echo "SMTP sender: " &amp;amp; objReceiptOptions.SMTPSender
Wscript.Echo "SMTP server: " &amp;amp; objReceiptOptions.SMTPServer
Wscript.Echo "SMTP user: " &amp;amp; objReceiptOptions.SMTPUser
Wscript.Echo "Use for inbound routing: " &amp;amp; _
    objReceiptOptions.UseForInboundRouting
</vb><vb name="List Fax Server Security Information" n="196">' List Fax Server Security Information


Set objFaxServer = CreateObject("FaxComEx.FaxServer")
objFaxServer.Connect "atl-dc-02"

Set objSecurity = objFaxServer.Security

Wscript.Echo "Security descriptor: " &amp;amp; objSecurity.Descriptor
Wscript.Echo "Granted rights: " &amp;amp; objSecurity.GrantedRights
Wscript.Echo "Information type: " &amp;amp; objSecurity.InformationType
</vb><vb name="Monitor Fax Server Activity" n="197">' Monitor Fax Server Activity


Set objFaxServer = CreateObject("FaxComEx.FaxServer")
objFaxServer.Connect "atl-dc-02"

Set objfaxActivity = objFaxServer.Activity

Wscript.Echo "Incoming messages: " &amp;amp; objFaxActivity.IncomingMessages
Wscript.Echo "Outgoing messages: " &amp;amp; objFaxActivity.OutgoingMessages
Wscript.Echo "Queued messages: " &amp;amp; objFaxActivity.QueuedMessages
Wscript.Echo "Routing messages: " &amp;amp; objFaxActivity.RoutingMessages
</vb></dd>
			<dd name="Indexing Server" code="index" desc="Sample scripts for managing the Microsoft Indexing Service."><vb name="Configuring the Indexing Service to Autostart" n="198">' Configuring the Indexing Service to Autostart


On Error Resume Next

Set objAdminIS = CreateObject("Microsoft.ISAdm")
objAdminIS.EnableCI(True)
</vb><vb name="Create an Indexing Service Catalog" n="199">' Create an Indexing Service Catalog


On Error Resume Next

Set objAdminIS = CreateObject("Microsoft.ISAdm")
objAdminIS.Stop()

Set objCatalog = objAdminIS.AddCatalog("Script Catalog","c:\scripts")
objAdminIS.Start()
</vb><vb name="Create an Indexing Service Scope" n="200">' Create an Indexing Service Scope


On Error Resume Next

Set objAdminIS = CreateObject("Microsoft.ISAdm")
Set objCatalog = objAdminIS.GetCatalogByName("Script Catalog")
Set objScope = objCatalog.AddScope("c:\scripts\Indexing Server", False)
objScope.Alias = "Script scope"
objScope.Path = "c:\scripts"
</vb><vb name="Delete an Indexing Service Catalog" n="201">' Delete an Indexing Service Catalog


On Error Resume Next

Set objAdminIS = CreateObject("Microsoft.ISAdm")
objAdminIS.Stop()
errResult = objAdminIS.RemoveCatalog("Script Catalog", True)
objAdminIS.Start()
</vb><vb name="Delete an Indexing Service Scope" n="202">' Delete an Indexing Service Scope


On Error Resume Next

Set objAdminIS = CreateObject("Microsoft.ISAdm")
Set objCatalog = objAdminIS.GetCatalogByName("Script Catalog")
objCatalog.RemoveScope("c:\scripts")
</vb><vb name="List Indexing Service Catalogs" n="203">' List Indexing Service Catalogs


On Error Resume Next

Set objAdminIS = CreateObject("Microsoft.ISAdm")
objCatalog = objAdminIS.FindFirstCatalog()
If (objCatalog) Then
    Set objCatAdm = objAdminIS.GetCatalog()
    Wscript.Echo "Catalog location: " &amp;amp; objCatAdm.CatalogLocation
    Wscript.Echo "Catalog name: " &amp;amp; objCatAdm.CatalogName
    If (objAdminIS.IsRunning) Then 
        Wscript.Echo "Is stopped: " &amp;amp; objCatAdm.IsCatalogStopped
        Wscript.Echo "Is paused: " &amp;amp; objCatAdm.IsCatalogPaused
        Wscript.Echo "Is running: " &amp;amp; objCatAdm.IsCatalogRunning
        Wscript.Echo "Delayed filter count: " &amp;amp; objCatAdm.DelayedFilterCount
        Wscript.Echo "Documents to filter: " &amp;amp; objCatAdm.DocumentsToFilter
        Wscript.Echo "Filtered document count: " &amp;amp; _
            objCatAdm.FilteredDocumentCount
        Wscript.Echo "Fresh test count: " &amp;amp; objCatAdm.FreshTestCount
        Wscript.Echo "Index size: " &amp;amp; objCatAdm.IndexSize
        Wscript.Echo "Percent merge complete: " &amp;amp; objCatAdm.PctMergeComplete
        Wscript.Echo "Pending scan count: " &amp;amp; objCatAdm.PendingScanCount
        Wscript.Echo "Persistent index count: " &amp;amp; _
            objCatAdm.PersistentIndexCount
        Wscript.Echo "Query count: " &amp;amp; objCatAdm.QueryCount
        Wscript.Echo "State info: " &amp;amp; objCatAdm.StateInfo
        Wscript.Echo "Total document count: " &amp;amp; objCatAdm.TotalDocumentCount
        Wscript.Echo "Unique key count: " &amp;amp; objCatAdm.UniqueKeyCount
        Wscript.Echo "Word list count: " &amp;amp; objCatAdm.WordListCount
    End If 
End If
 
Do
    objCatalog = objAdminIS.FindNextCatalog()
    If (objCatalog) Then
        Set objCatAdm = objAdminIS.GetCatalog()
        Wscript.Echo "Catalog location: " &amp;amp; objCatAdm.CatalogLocation
        Wscript.Echo "Catalog name: " &amp;amp; objCatAdm.CatalogName
    If (objAdminIS.IsRunning) Then 
        Wscript.Echo "Is stopped: " &amp;amp; objCatAdm.IsCatalogStopped
        Wscript.Echo "Is paused: " &amp;amp; objCatAdm.IsCatalogPaused
        Wscript.Echo "Is running: " &amp;amp; objCatAdm.IsCatalogRunning
        Wscript.Echo "Delayed filter count: " &amp;amp; objCatAdm.DelayedFilterCount
        Wscript.Echo "Documents to filter: " &amp;amp; objCatAdm.DocumentsToFilter
        Wscript.Echo "Filtered document count: " &amp;amp; _
            objCatAdm.FilteredDocumentCount
        Wscript.Echo "Fresh test count: " &amp;amp; objCatAdm.FreshTestCount
        Wscript.Echo "Index size: " &amp;amp; objCatAdm.IndexSize
        Wscript.Echo "Percent merge complete: " &amp;amp; objCatAdm.PctMergeComplete
        Wscript.Echo "Pending scan count: " &amp;amp; objCatAdm.PendingScanCount
        Wscript.Echo "Persistent index count: " &amp;amp; _
            objCatAdm.PersistentIndexCount
        Wscript.Echo "Query count: " &amp;amp; objCatAdm.QueryCount
        Wscript.Echo "State info: " &amp;amp; objCatAdm.StateInfo
        Wscript.Echo "Total document count: " &amp;amp; objCatAdm.TotalDocumentCount
        Wscript.Echo "Unique key count: " &amp;amp; objCatAdm.UniqueKeyCount
        Wscript.Echo "Word list count: " &amp;amp; objCatAdm.WordListCount
        End If 
    Else
        Exit Do
   End If
Loop
</vb><vb name="List Indexing Service Scopes" n="204">' List Indexing Service Scopes


On Error Resume Next

Set objAdminIS = CreateObject("Microsoft.ISAdm")
objCatalog = objAdminIS.FindFirstCatalog()
If (objCatalog) Then
    Set objCatAdm = objAdminIS.GetCatalog()
    Set objScopeAdm = objCatAdm.GetScope()
    Wscript.Echo "Alias: " &amp;amp; objScopeAdm.Alias
    Wscript.Echo "Exclude scope: " &amp;amp; objScopeAdm.ExcludeScope
    Wscript.Echo "Logon: " &amp;amp; objScopeAdm.Logon
    Wscript.Echo "Path: " &amp;amp; objScopeAdm.Path
    Wscript.Echo "Virtual scope: " &amp;amp; objScopeAdm.VirtualScope
End If
 
Do
    objCatalog = objAdminIS.FindNextCatalog()
    If (objCatalog) Then
        Set objCatAdm = objAdminIS.GetCatalog()
        Set objScopeAdm = objCatAdm.GetScope()
        Wscript.Echo "Alias: " &amp;amp; objScopeAdm.Alias
        Wscript.Echo "Exclude scope: " &amp;amp; objScopeAdm.ExcludeScope
        Wscript.Echo "Logon: " &amp;amp; objScopeAdm.Logon
        Wscript.Echo "Path: " &amp;amp; objScopeAdm.Path
        Wscript.Echo "Virtual scope: " &amp;amp; objScopeAdm.VirtualScope
    Else
        Exit Do
    End If
Loop
</vb><vb name="List Specific Files Included in the Indexing Service" n="205">' List Specific Files Included in the Indexing Service


On Error Resume Next

Set objConnection = CreateObject("ADODB.Connection")
objConnection.ConnectionString = "provider=msidxs;"
objConnection.Properties("Data Source") = "Script Catalog"
objConnection.Open
 
Set objCommand = CreateObject("ADODB.Command")
 
strQuery = "Select Filename from Scope()"
 
Set objRecordSet = objConnection.Execute(strQuery)
 
Do While Not objRecordSet.EOF
    Wscript.Echo objRecordSet("Filename")
    objRecordSet.MoveNext
Loop
</vb><vb name="List the State of the Indexing Service" n="206">' List the State of the Indexing Service


On Error Resume Next

Set objAdminIS = CreateObject("Microsoft.ISAdm")
Wscript.Echo "Is running: " &amp;amp; objAdminIS.IsRunning
Wscript.Echo "Is paused: " &amp;amp; objAdminIS.IsPaused
Wscript.Echo "Computer name: " &amp;amp; objAdminIS.MachineName
</vb><vb name="Monitor Indexing Service Filter Performance" n="207">' Monitor Indexing Service Filter Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService, " &amp;amp; _
    "Win32_PerfFormattedData_ContentFilter_IndexingServiceFilter").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Binding Time in Milliseconds: " &amp;amp; _
            objItem.Bindingtimemsec
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Indexing Speed, Megabytes Per Hour: " &amp;amp; _
            objItem.IndexingspeedMBPerhr
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Total Indexing Speed, Megabytes Per Hour: " &amp;amp; _
            objItem.TotalindexingspeedMBPerhr
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Indexing Service Performance" n="208">' Monitor Indexing Service Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService," &amp;amp; _
    "Win32_PerfFormattedData_ContentIndex_IndexingService").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Deferred for Indexing: " &amp;amp; objItem.Deferredforindexing
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Files to be Indexed: " &amp;amp; objItem.Filestobeindexed
        Wscript.Echo "Index Size in Megabytes: " &amp;amp; objItem.IndexsizeMB
        Wscript.Echo "Merge Progress: " &amp;amp; objItem.Mergeprogress
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Number of Documents Indexed: " &amp;amp; _
            objItem.Numberdocumentsindexed
        Wscript.Echo "Running Queries: " &amp;amp; objItem.Runningqueries
        Wscript.Echo "Saved Indexes: " &amp;amp; objItem.Savedindexes
        Wscript.Echo "Total Number of Documents: " &amp;amp; _
            objItem.TotalNumberdocuments
        Wscript.Echo "Total Number of Queries: " &amp;amp; objItem.TotalNumberofqueries
        Wscript.Echo "Unique Keys: " &amp;amp; objItem.Uniquekeys
        Wscript.Echo "Word Lists: " &amp;amp; objItem.Wordlists
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Pause the Indexing Service" n="209">' Pause the Indexing Service


On Error Resume Next

Set objAdminIS = CreateObject("Microsoft.ISAdm")
objAdminIS.Pause()
</vb><vb name="Resume the Indexing Service" n="210">' Resume the Indexing Service


On Error Resume Next

Set objAdminIS = CreateObject("Microsoft.ISAdm")
objAdminIS.Continue()
</vb><vb name="Search for Files Using the Indexing Service" n="211">' Search for Files Using the Indexing Service


On Error Resume Next

Set objConnection = CreateObject("ADODB.Connection")
objConnection.ConnectionString = "provider=msidxs;"
objConnection.Properties("Data Source") = "Script Catalog"
objConnection.Open
 
Set objCommand = CreateObject("ADODB.Command")
 
strQuery = "Select Filename, Size, Contents from Scope() Where " _
    &amp;amp; "Contains('Win32_NetworkAdapterConfiguration')"
 
Set objRecordSet = objConnection.Execute(strQuery)
 
Do While Not objRecordSet.EOF
    Wscript.Echo objRecordSet("Filename"), objRecordSet("Size")
    objRecordSet.MoveNext
Loop
</vb><vb name="Search Indexing Server Using a Predefined Query" n="212">' Search Indexing Server Using a Predefined Query


On Error Resume Next

Set objConnection = CreateObject("ADODB.Connection")
objConnection.ConnectionString = "provider=msidxs;"
objConnection.Properties("Data Source") = "Script Catalog"
objConnection.Open
 
Set objCommand = CreateObject("ADODB.Command")
 
strQuery = "Create View #AllProps as Select * from Scope()"
 
Set objRecordSet = objConnection.Execute("Select * from Extended_FileInfo")
 
Do While Not objRecordSet.EOF
    Wscript.Echo objRecordSet("Filename") &amp;amp; ", " &amp;amp; objRecordSet("Size") &amp;amp; _
        ", " &amp;amp; objRecordSet("DocAuthor")
    objRecordSet.MoveNext
Loop
</vb><vb name="Search the Indexing Service Using a Free Text Search" n="213">' Search the Indexing Service Using a Free Text Search


On Error Resume Next

Set objConnection = CreateObject("ADODB.Connection")
objConnection.ConnectionString = "provider=msidxs;"
objConnection.Properties("Data Source") = "Script Catalog"
objConnection.Open
 
Set objCommand = CreateObject("ADODB.Command")
 
strQuery = "Select Filename, Size, Contents from Scope() Where " _
    &amp;amp; "Freetext('Win32_NetworkAdapterConfiguration')"
 
Set objRecordSet = objConnection.Execute(strQuery)
 
Do While Not objRecordSet.EOF
    Wscript.Echo objRecordSet("Filename"), objRecordSet("Size")
    objRecordSet.MoveNext
Loop
</vb><vb name="Start the Indexing Service" n="214">' Start the Indexing Service


On Error Resume Next

Set objAdminIS = CreateObject("Microsoft.ISAdm")
objAdminIS.Start()
</vb><vb name="Stop the Indexing Service" n="215">' Stop the Indexing Service


On Error Resume Next

Set objAdminIS = CreateObject("Microsoft.ISAdm")
objAdminIS.Stop()
</vb></dd>
		</dd>
		<dd name="Client Applications" code="user" desc="Sample scripts for managing software on user computers, including scripts for installing, updating, and deleting software installed using Windows Installer."><vb name="Delete Software" n="216">' Delete Software


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colSoftware = objWMIService.ExecQuery _
    ("Select * from Win32_Product Where Name = 'Personnel database'")

For Each objSoftware in colSoftware
    objSoftware.Uninstall()
Next
</vb><vb name="Install Software on a Remote Computer" n="217">' Install Software on a Remote Computer


Const wbemImpersonationLevelDelegate = 4

Set objWbemLocator = CreateObject("WbemScripting.SWbemLocator")
Set objConnection = objwbemLocator.ConnectServer _
    ("WebServer", "root\cimv2", "fabrikam\administrator", _
         "password", , "kerberos:WebServer")
objConnection.Security_.ImpersonationLevel = wbemImpersonationLevelDelegate

Set objSoftware = objConnection.Get("Win32_Product")
errReturn = objSoftware.Install("\\atl-dc-02\scripts\1561_lab.msi",,True)
</vb><vb name="Install Software on the Local Computer" n="218">' Install Software on the Local Computer


Const ALL_USERS = True

Set objService = GetObject("winmgmts:")
Set objSoftware = objService.Get("Win32_Product")
errReturn = objSoftware.Install("c:\scripts\database.msi", , ALL_USERS)
</vb><vb name="List Information About the Binary Files Used by an Application" n="219">' List Information About the Binary Files Used by an Application


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_Binary")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Product Code: " &amp;amp; objItem.ProductCode
    Wscript.Echo
Next
</vb><vb name="List Installed or Advertised Components and Applications" n="220">' List Installed or Advertised Components and Applications


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_ApplicationService")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Start Mode: " &amp;amp; objItem.StartMode
    Wscript.Echo
Next
</vb><vb name="List Installed Software" n="221">' List Installed Software


Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objTextFile = objFSO.CreateTextFile("c:\scripts\software.tsv", True)

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colSoftware = objWMIService.ExecQuery _
    ("Select * from Win32_Product")

objTextFile.WriteLine "Caption" &amp;amp; vbtab &amp;amp; _
    "Description" &amp;amp; vbtab &amp;amp; "Identifying Number" &amp;amp; vbtab &amp;amp; _
    "Install Date" &amp;amp; vbtab &amp;amp; "Install Location" &amp;amp; vbtab &amp;amp; _
    "Install State" &amp;amp; vbtab &amp;amp; "Name" &amp;amp; vbtab &amp;amp; _ 
    "Package Cache" &amp;amp; vbtab &amp;amp; "SKU Number" &amp;amp; vbtab &amp;amp; "Vendor" &amp;amp; vbtab _
        &amp;amp; "Version" 

For Each objSoftware in colSoftware
    objTextFile.WriteLine objSoftware.Caption &amp;amp; vbtab &amp;amp; _
    objSoftware.Description &amp;amp; vbtab &amp;amp; _
    objSoftware.IdentifyingNumber &amp;amp; vbtab &amp;amp; _
    objSoftware.InstallDate2 &amp;amp; vbtab &amp;amp; _
    objSoftware.InstallLocation &amp;amp; vbtab &amp;amp; _
    objSoftware.InstallState &amp;amp; vbtab &amp;amp; _
    objSoftware.Name &amp;amp; vbtab &amp;amp; _
    objSoftware.PackageCache &amp;amp; vbtab &amp;amp; _
    objSoftware.SKUNumber &amp;amp; vbtab &amp;amp; _
    objSoftware.Vendor &amp;amp; vbtab &amp;amp; _
    objSoftware.Version
Next
objTextFile.Close
</vb><vb name="List Installed Software Features" n="222">' List Installed Software Features


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFeatures = objWMIService.ExecQuery _
    ("Select * from Win32_SoftwareFeature")

For Each objFeature in colfeatures
    Wscript.Echo "Accesses: " &amp;amp; objFeature.Accesses
    Wscript.Echo "Attributes: " &amp;amp; objFeature.Attributes
    Wscript.Echo "Caption: " &amp;amp; objFeature.Caption
    Wscript.Echo "Description: " &amp;amp; objFeature.Description
    Wscript.Echo "Identifying Number: " &amp;amp; objFeature.IdentifyingNumber
    Wscript.Echo "Install Date: " &amp;amp; objFeature.InstallDate
    Wscript.Echo "Install State: " &amp;amp; objFeature.InstallState
    Wscript.Echo "Last Use: " &amp;amp; objFeature.LastUse
    Wscript.Echo "Name: " &amp;amp; objFeature.Name
    Wscript.Echo "Product Name: " &amp;amp; objFeature.ProductName
    Wscript.Echo "Vendor: " &amp;amp; objFeature.Vendor
    Wscript.Echo "Version: " &amp;amp; objFeature.Version
Next
</vb><vb name="List Microsoft Product IDs" n="223">' List Microsoft Product IDs


Set objMSInfo = CreateObject("MsPIDinfo.MsPID")
colMSApps = objMSInfo.GetPIDInfo()

For Each strApp in colMSApps
    Wscript.Echo strApp
Next
</vb><vb name="List the Codec Files on a Computer" n="224">' List the Codec Files on a Computer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_CodecFile")

For Each objItem in colItems
    Wscript.Echo "Access Mask: " &amp;amp; objItem.AccessMask
    Wscript.Echo "Archive: " &amp;amp; objItem.Archive
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    strCreationDate = WMIDateStringToDate(objItem.CreationDate)
    Wscript.Echo "Creation Date: " &amp;amp; strCreationdate
    Wscript.Echo "Drive: " &amp;amp; objItem.Drive
    Wscript.Echo "Eight Dot Three File Name: " &amp;amp; _
        objItem.EightDotThreeFileName
    Wscript.Echo "Extension: " &amp;amp; objItem.Extension
    Wscript.Echo "File Name: " &amp;amp; objItem.FileName
    Wscript.Echo "File Size: " &amp;amp; objItem.FileSize
    Wscript.Echo "File Type: " &amp;amp; objItem.FileType
    Wscript.Echo "File System Name: " &amp;amp; objItem.FSName
    Wscript.Echo "Group: " &amp;amp; objItem.Group
    Wscript.Echo "Hidden: " &amp;amp; objItem.Hidden
    strInstallDate = WMIDateStringToDate(objItem.InstallDate)
    Wscript.Echo "Last Accessed: " &amp;amp; strLastAccessed
    strLastModified = WMIDateStringToDate(objItem.LastModified)
    Wscript.Echo "Last Modified: " &amp;amp; strLastModified
    Wscript.Echo "Manufacturer: " &amp;amp; objItem.Manufacturer
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Path: " &amp;amp; objItem.Path
    Wscript.Echo "Version: " &amp;amp; objItem.Version
Next
 
Function WMIDateStringToDate(dtmDate)
    WMIDateStringToDate = CDate(Mid(dtmDate, 5, 2) &amp;amp; "/" &amp;amp; _
        Mid(dtmDate, 7, 2) &amp;amp; "/" &amp;amp; Left(dtmDate, 4) _
            &amp;amp; " " &amp;amp; Mid (dtmDate, 9, 2) &amp;amp; ":" &amp;amp; _
                Mid(dtmDate, 11, 2) &amp;amp; ":" &amp;amp; Mid(dtmDate, _
                    13, 2))
End Function
</vb><vb name="Upgrade Software" n="225">' Upgrade Software


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colSoftware = objWMIService.ExecQuery _
    ("Select * from Win32__Product Where Name = 'Personnel Database'")

For Each objSoftware in colSoftware
    errReturn = objSoftware.Upgrade("c:\scripts\database2.msi")
Next
</vb><vb name="List All Installed Software" n="226">' List All Installed Software



Const HKLM = &amp;amp;H80000002 'HKEY_LOCAL_MACHINE
strComputer = "."
strKey = "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\"
strEntry1a = "DisplayName"
strEntry1b = "QuietDisplayName"
strEntry2 = "InstallDate"
strEntry3 = "VersionMajor"
strEntry4 = "VersionMinor"
strEntry5 = "EstimatedSize"

Set objReg = GetObject("winmgmts://" &amp;amp; strComputer &amp;amp; _
 "/root/default:StdRegProv")
objReg.EnumKey HKLM, strKey, arrSubkeys
WScript.Echo "Installed Applications" &amp;amp; VbCrLf
For Each strSubkey In arrSubkeys
  intRet1 = objReg.GetStringValue(HKLM, strKey &amp;amp; strSubkey, _
   strEntry1a, strValue1)
  If intRet1 &amp;lt;&amp;gt; 0 Then
    objReg.GetStringValue HKLM, strKey &amp;amp; strSubkey, _
     strEntry1b, strValue1
  End If
  If strValue1 &amp;lt;&amp;gt; "" Then
    WScript.Echo VbCrLf &amp;amp; "Display Name: " &amp;amp; strValue1
  End If
  objReg.GetStringValue HKLM, strKey &amp;amp; strSubkey, _
   strEntry2, strValue2
  If strValue2 &amp;lt;&amp;gt; "" Then
    WScript.Echo "Install Date: " &amp;amp; strValue2
  End If
  objReg.GetDWORDValue HKLM, strKey &amp;amp; strSubkey, _
   strEntry3, intValue3
  objReg.GetDWORDValue HKLM, strKey &amp;amp; strSubkey, _
   strEntry4, intValue4
  If intValue3 &amp;lt;&amp;gt; "" Then
     WScript.Echo "Version: " &amp;amp; intValue3 &amp;amp; "." &amp;amp; intValue4
  End If
  objReg.GetDWORDValue HKLM, strKey &amp;amp; strSubkey, _
   strEntry5, intValue5
  If intValue5 &amp;lt;&amp;gt; "" Then
    WScript.Echo "Estimated Size: " &amp;amp; Round(intValue5/1024, 3) &amp;amp; " megabytes"
  End If
Next
</vb></dd>
	</dd>
	<dd name="Desktop Management" code="desktop" desc="Sample scripts for managing such things as desktop settings, computer startup and shutdown, and System Restore.">
		<dd name="Basic Computer Information" code="info" desc="Sample scripts for retrieving computer system information."><vb name="List Local Computer Information" n="227">' List Local Computer Information


Set objComputer = CreateObject("Shell.LocalMachine")

Wscript.Echo "Computer name: " &amp;amp; objComputer.MachineName
Wscript.Echo "Shutdown allowed: " &amp;amp; objComputer.IsShutdownAllowed
Wscript.Echo "Friendly UI enabled: " &amp;amp; objComputer.IsFriendlyUIEnabled
Wscript.Echo "Guest access mode: " &amp;amp; objComputer.IsGuestAccessMode
Wscript.Echo "Guest account enabled: " &amp;amp; _
    objComputer.IsGuestEnabled(0)
Wscript.Echo "Multiple users enabled: " &amp;amp; _
    objComputer.IsMultipleUsersEnabled
Wscript.Echo "Offline files enabled: " &amp;amp; _
    objComputer.IsOfflineFilesEnabled
Wscript.Echo "Remote connections enabled: " &amp;amp; _
    objComputer.IsRemoteConnectionsEnabled
Wscript.Echo "Undock enabled: " &amp;amp; objComputer.IsUndockEnabled
</vb><vb name="Verify That SQL Server is Installed on a Computer" n="228">' Verify That SQL Server is Installed on a Computer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServices = objWMIService.ExecQuery _
    ("Select * from Win32_Service Where Name = 'MSSQLServer'")

If colServices.Count &amp;gt; 0 Then
    For Each objService in colServices
        Wscript.Echo "SQL Server is " &amp;amp; objService.State &amp;amp; "."
    Next
Else
    Wscript.Echo "SQL Server is not installed on this computer."
End If
</vb><vb name="List Processor Information" n="229">' List Processor Information



strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\CIMV2")
Set colCSes = objWMIService.ExecQuery("SELECT * FROM Win32_ComputerSystem")
For Each objCS In colCSes
  WScript.Echo "Computer Name: " &amp;amp; objCS.Name
  WScript.Echo "System Type: " &amp;amp; objCS.SystemType
  WScript.Echo "Number Of Processors: " &amp;amp; objCS.NumberOfProcessors
Next
Set colProcessors = objWMIService.ExecQuery("Select * from Win32_Processor")
For Each objProcessor in colProcessors
  WScript.Echo "Manufacturer: " &amp;amp; objProcessor.Manufacturer
  WScript.Echo "Name: " &amp;amp; objProcessor.Name
  WScript.Echo "Description: " &amp;amp; objProcessor.Description
  WScript.Echo "Processor ID: " &amp;amp; objProcessor.ProcessorID
  WScript.Echo "Address Width: " &amp;amp; objProcessor.AddressWidth
  WScript.Echo "Data Width: " &amp;amp; objProcessor.DataWidth
  WScript.Echo "Family: " &amp;amp; objProcessor.Family
  WScript.Echo "Maximum Clock Speed: " &amp;amp; objProcessor.MaxClockSpeed
Next
</vb><vb name="List Physical and Virtual Memory Information" n="230">' List Physical and Virtual Memory Information



strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\CIMV2")
Set colCSItems = objWMIService.ExecQuery("SELECT * FROM Win32_ComputerSystem")
For Each objCSItem In colCSItems
  WScript.Echo "Total Physical Memory: " &amp;amp; objCSItem.TotalPhysicalMemory
Next
Set colOSItems = objWMIService.ExecQuery("SELECT * FROM Win32_OperatingSystem")
For Each objOSItem In colOSItems
  WScript.Echo "Free Physical Memory: " &amp;amp; objOSItem.FreePhysicalMemory
  WScript.Echo "Total Virtual Memory: " &amp;amp; objOSItem.TotalVirtualMemorySize
  WScript.Echo "Free Virtual Memory: " &amp;amp; objOSItem.FreeVirtualMemory
  WScript.Echo "Total Visible Memory Size: " &amp;amp; objOSItem.TotalVisibleMemorySize
Next
</vb><vb name="List Domain or Workgroup Information" n="231">' List Domain or Workgroup Information

' Windows 2000 : Yes (except for 2 properties noted below)
' Windows NT 4.0 : Yes (except for 2 properties noted below)


strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\CIMV2")
Set colItems = objWMIService.ExecQuery("SELECT * FROM Win32_ComputerSystem")
For Each objItem In colItems
  WScript.Echo "Computer Name: " &amp;amp; objItem.Name
  WScript.Echo "Name Format: " &amp;amp; objItem.NameFormat
  WScript.Echo "Domain: " &amp;amp; objItem.Domain
  WScript.Echo "Part Of Domain: " &amp;amp; objItem.PartOfDomain 'post-Windows 2000 only
  WScript.Echo "Workgroup: " &amp;amp; objItem.Workgroup 'post-Windows 2000 only
  Select Case objItem.DomainRole
    Case 0 strDomainRole = "Standalone Workstation"
    Case 1 strDomainRole = "Member Workstation"
    Case 2 strDomainRole = "Standalone Server"
    Case 3 strDomainRole = "Member Server"
    Case 4 strDomainRole = "Backup Domain Controller"
    Case 5 strDomainRole = "Primary Domain Controller"
  End Select
  WScript.Echo "Domain Role: " &amp;amp; strDomainRole
  strRoles = Join(objItem.Roles, ",")
  WScript.Echo "Roles: " &amp;amp; strRoles
  WScript.Echo "Network Server Mode Enabled: " &amp;amp; _
   objItem.NetworkServerModeEnabled
Next
</vb><vb name="List System Locations" n="232">' List System Locations



strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\CIMV2")
Set colOSItems = objWMIService.ExecQuery("SELECT * FROM Win32_OperatingSystem")
For Each objOSItem In colOSItems
  WScript.Echo "Boot Device: " &amp;amp; objOSItem.BootDevice
  WScript.Echo "System Device: " &amp;amp; objOSItem.SystemDevice
  WScript.Echo "System Drive: " &amp;amp; objOSItem.SystemDrive
  WScript.Echo "Windows Directory: " &amp;amp; objOSItem.WindowsDirectory
  WScript.Echo "System Directory: " &amp;amp; objOSItem.SystemDirectory
Next
</vb><vb name="List Power Management Information" n="233">' List Power Management Information



strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\CIMV2")
Set colItems = objWMIService.ExecQuery("SELECT * FROM Win32_ComputerSystem")
For Each objItem In colItems
  If Not IsNull(objItem.PowerManagementCapabilities) Then
    strPowerManagementCapabilities = _
     Join(objItem.PowerManagementCapabilities, ",")
  End If
  WScript.Echo "PowerManagementCapabilities: " &amp;amp; _
   strPowerManagementCapabilities
  WScript.Echo "PowerManagementSupported: " &amp;amp; objItem.PowerManagementSupported
  Select Case objItem.PowerState
    Case 0 strPowerState = "Unknown"
    Case 1 strPowerState = "Full Power"
    Case 2 strPowerState = "Power Save - Low Power Mode"
    Case 3 strPowerState = "Power Save - Standby"
    Case 4 strPowerState = "Power Save - Unknown"
    Case 5 strPowerState = "Power Cycle"
    Case 6 strPowerState = "Power Off"
    Case 7 strPowerState = "Power Save - Warning"
  End Select
  WScript.Echo "PowerState: " &amp;amp; strPowerState
  Select Case objItem.PowerSupplyState
    Case 1 strPowerSupplyState = "Other"
    Case 2 strPowerSupplyState = "Unknown"
    Case 3 strPowerSupplyState = "Safe"
    Case 4 strPowerSupplyState = "Warning"
    Case 5 strPowerSupplyState = "Critical"
    Case 6 strPowerSupplyState = "Non-recoverable"
  End Select
  WScript.Echo "PowerSupplyState: " &amp;amp; strPowerSupplyState
Next
</vb><vb name="List Local Users and Owner" n="234">' List Local Users and Owner



strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\CIMV2")
Set colCSItems = objWMIService.ExecQuery("SELECT * FROM Win32_ComputerSystem")
For Each objCSItem In colCSItems
  WScript.Echo "User Name: " &amp;amp; objCSItem.UserName
  WScript.Echo "Primary Owner Name: " &amp;amp; objCSItem.PrimaryOwnerName
  WScript.Echo "Primary Owner Contact: " &amp;amp; objCSItem.PrimaryOwnerContact
Next
Set colOSItems = objWMIService.ExecQuery("SELECT * FROM Win32_OperatingSystem")
For Each objOSItem In colOSItems
  WScript.Echo "Registered User: " &amp;amp; objOSItem.RegisteredUser
  WScript.Echo "Number Of Users: " &amp;amp; objOSItem.NumberOfUsers
  WScript.Echo "Number Of Licensed Users: " &amp;amp; objOSItem.NumberOfLicensedUsers
Next
</vb><vb name="List Computer Manufacturer and Model" n="235">' List Computer Manufacturer and Model



strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\CIMV2")
Set colItems = objWMIService.ExecQuery("SELECT * FROM Win32_ComputerSystem")
For Each objItem In colItems
  WScript.Echo "Name: " &amp;amp; objItem.Name
  WScript.Echo "Manufacturer: " &amp;amp; objItem.Manufacturer
  WScript.Echo "Model: " &amp;amp; objItem.Model
Next
</vb><vb name="List Locale and Language Information" n="236">' List Locale and Language Information



strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\CIMV2")
Set colItems = objWMIService.ExecQuery("SELECT * FROM Win32_OperatingSystem")
For Each objItem In colItems
  WScript.Echo "Country Code: " &amp;amp; objItem.CountryCode
  WScript.Echo "Locale: " &amp;amp; objItem.Locale
  WScript.Echo "OS Language: " &amp;amp; objItem.OSLanguage
  WScript.Echo "Code Set: " &amp;amp; objItem.CodeSet
Next
</vb><vb name="List Operating System and Service Pack Information" n="237">' List Operating System and Service Pack Information



strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
 &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
 
Set colOSes = objWMIService.ExecQuery("Select * from Win32_OperatingSystem")
For Each objOS in colOSes
  Wscript.Echo "Computer Name: " &amp;amp; objOS.CSName
  Wscript.Echo "Caption: " &amp;amp; objOS.Caption 'Name
  Wscript.Echo "Version: " &amp;amp; objOS.Version 'Version &amp;amp; build
  Wscript.Echo "Build Number: " &amp;amp; objOS.BuildNumber 'Build
  Wscript.Echo "Build Type: " &amp;amp; objOS.BuildType
  Wscript.Echo "OS Type: " &amp;amp; objOS.OSType
  Wscript.Echo "Other Type Description: " &amp;amp; objOS.OtherTypeDescription
  WScript.Echo "Service Pack: " &amp;amp; objOS.ServicePackMajorVersion &amp;amp; "." &amp;amp; _
   objOS.ServicePackMinorVersion
Next
</vb></dd>
		<dd name="Internet Explorer" code="ie" desc="Sample scripts for managing and configuring Internet Explorer settings."><vb name=" Verify Whether Internet Explorer Enhanced Security is Enabled for the Logged-on User" n="238">'  Verify Whether Internet Explorer Enhanced Security is Enabled for the Logged-on User


On Error Resume Next

Const HKEY_CURRENT_USER = &amp;amp;H80000001

strComputer = "."
Set objReg = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; _
        "\root\default:StdRegProv")

strKeyPath = "SOFTWARE\Microsoft\Windows\CurrentVersion\Internet " _
    &amp;amp; "Settings\ZoneMap"
strValueName = "IEHarden"
objReg.GetDWORDValue HKEY_CURRENT_USER,strKeyPath,strValueName,intHarden
 
If intHarden = 1 Then
    Wscript.Echo "IE hardening is turned on for the current user."
Else
    Wscript.Echo "IE hardening is not turned on for the current user."
End If
</vb><vb name="Add a Web Site to the Favorites Menu" n="239">' Add a Web Site to the Favorites Menu


Const ADMINISTRATIVE_TOOLS = 6

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(ADMINISTRATIVE_TOOLS) 
Set objFolderItem = objFolder.Self     

Set objShell = WScript.CreateObject("WScript.Shell")
strDesktopFld = objFolderItem.Path
Set objURLShortcut = objShell.CreateShortcut(strDesktopFld &amp;amp; "\MSDN.url")
objURLShortcut.TargetPath = "http://msdn.microsoft.com"
objURLShortcut.Save
</vb><vb name="Add Sites to an Internet Explorer Security Zone" n="240">' Add Sites to an Internet Explorer Security Zone


On Error Resume Next

Const HKEY_CURRENT_USER = &amp;amp;H80000001

strComputer = "."
Set objReg = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; _
        "\root\default:StdRegProv")

strKeyPath = "Software\Microsoft\Windows\CurrentVersion\Internet Settings\" _
    &amp;amp; "ZoneMap\ESCDomains\Contoso.com"
objReg.CreateKey HKEY_CURRENT_USER,strKeyPath
strValueName = "http"
dwValue = 2
objReg.SetDWORDValue HKEY_CURRENT_USER,strKeyPath,strValueName,dwValue

strKeyPath = "Software\Microsoft\Windows\CurrentVersion\Internet Settings\" _
    &amp;amp; "ZoneMap\ESCDomains\BenefitsWeb"
objReg.CreateKey HKEY_CURRENT_USER,strKeyPath
strValueName = "*"
dwValue = 1
objReg.SetDWORDValue HKEY_CURRENT_USER,strKeyPath,strValueName,dwValue
</vb><vb name="Delete a Site from an Internet Explorer Security Zone" n="241">' Delete a Site from an Internet Explorer Security Zone


On Error Resume Next

Const HKEY_CURRENT_USER = &amp;amp;H80000001

strComputer = "."
Set objReg = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; _
        "\root\default:StdRegProv")

strKeyPath = "Software\Microsoft\Windows\CurrentVersion\Internet Settings\" _
    &amp;amp; "ZoneMap\ESCDomains\Contoso.com"
objReg.DeleteKey HKEY_CURRENT_USER, strKeyPath
</vb><vb name="Delete an Allowed Protocol from an Internet Explorer Security Zone Site" n="242">' Delete an Allowed Protocol from an Internet Explorer Security Zone Site


On Error Resume Next

Const HKEY_CURRENT_USER = &amp;amp;H80000001

strComputer = "."

Set objReg = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; _
        "\root\default:StdRegProv")

strKeyPath = "Software\Microsoft\Windows\CurrentVersion\Internet Settings\" _
    &amp;amp; "ZoneMap\ESCDomains\Finance"
strDWORDValueName = "http"

objReg.DeleteValue HKEY_CURRENT_USER,strKeyPath,strDWORDValueName
</vb><vb name="List  Internet Explorer Connection Summary Information" n="243">' List  Internet Explorer Connection Summary Information


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\cimv2\Applications\MicrosoftIE")

Set colIESettings = objWMIService.ExecQuery _
    ("Select * from MicrosoftIE_ConnectionSummary")

For Each strIESetting in colIESettings
    Wscript.Echo "Connection preference: " &amp;amp; _
        strIESetting.ConnectionPreference
    Wscript.Echo "HTTP 1.1. enabled: " &amp;amp; strIESetting.EnableHTTP11
    Wscript.Echo "Proxy HTTP 1.1. enabled: " &amp;amp; strIESetting.ProxyHTTP11
Next
</vb><vb name="List Audited Internet Explorer Events from the Security Log" n="244">' List Audited Internet Explorer Events from the Security Log


On Error Resume Next

strComputer = "."
Set dtmDate = CreateObject("WbemScripting.SWbemDateTime")
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{(Security)}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colLoggedEvents = objWMIService.ExecQuery _
        ("SELECT * FROM Win32_NTLogEvent WHERE Logfile = 'Security' AND " _
            &amp;amp; "EventCode = '560'")

For Each objEvent in colLoggedEvents
    errResult = _
        InStr(objEvent.Message,"\REGISTRY\MACHINE\SOFTWARE\Microsoft\") 
    If errResult &amp;lt;&amp;gt; 0 Then
        Select Case objEvent.EventType
            Case 4 strEventType = "Success"
            Case 5 strEventType = "Failure"
        End Select
        Wscript.Echo objEvent.User
        dtmDate.Value = objEvent.TimeWritten
        dtmTimeWritten = dtmDate.GetVarDate
        Wscript.Echo "Time written: " &amp;amp; dtmTimeWritten
        Wscript.Echo strEventType
        Wscript.Echo "Record number: " &amp;amp; objEvent.RecordNumber &amp;amp; VbCrLf
        Wscript.Echo objEvent.Message
        Wscript.Echo 
    End If
Next
</vb><vb name="List Internet Explorer Cache Settings" n="245">' List Internet Explorer Cache Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\cimv2\Applications\MicrosoftIE")

Set colIESettings = objWMIService.ExecQuery _
    ("Select * from MicrosoftIE_Cache")

For Each strIESetting in colIESettings
    Wscript.Echo "Page refresh type: " &amp;amp; strIESetting.PageRefreshType
    Wscript.Echo "Temporary Internet files folder: " &amp;amp; _
        strIESetting.TempInternetFilesFolder
Next
</vb><vb name="List Internet Explorer COM Object Settings" n="246">' List Internet Explorer COM Object Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\cimv2\Applications\MicrosoftIE")

Set colIESettings = objWMIService.ExecQuery _
    ("Select * from MicrosoftIE_Object")

For Each strIESetting in colIESettings
    Wscript.Echo "Code base: " &amp;amp; strIESetting.CodeBase
    Wscript.Echo "Program file: " &amp;amp; strIESetting.ProgramFile
    Wscript.Echo "Status: " &amp;amp; strIESetting.Status
Next
</vb><vb name="List Internet Explorer Connection Settings" n="247">' List Internet Explorer Connection Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\cimv2\Applications\MicrosoftIE")

Set colIESettings = objWMIService.ExecQuery _
    ("Select * from MicrosoftIE_ConnectionSettings")

For Each strIESetting in colIESettings
    Wscript.Echo "Allow Internet programs: " &amp;amp; _
        strIESetting.AllowInternetPrograms
    Wscript.Echo "Autoconfiguration URL: " &amp;amp; strIESetting.AutoConfigURL
    Wscript.Echo "Auto disconnect: " &amp;amp; strIESetting.AutoDisconnect
    Wscript.Echo "Autoconfiguration proxy detection mode: " &amp;amp; _
        strIESetting.AutoProxyDetectMode
    Wscript.Echo "Data encryption: " &amp;amp; strIESetting.DataEncryption
    Wscript.Echo "Default: " &amp;amp; strIESetting.Default
    Wscript.Echo "Default gateway: " &amp;amp; strIESetting.DefaultGateway
    Wscript.Echo "Dialup server: " &amp;amp; strIESetting.DialUpServer
    Wscript.Echo "Disconnect idle time: " &amp;amp; strIESetting.DisconnectIdleTime
    Wscript.Echo "Encrypted password: " &amp;amp; strIESetting.EncryptedPassword
    Wscript.Echo "IP address: " &amp;amp; strIESetting.IPAddress
    Wscript.Echo "IP header compression: " &amp;amp; _
        strIESetting.IPHeaderCompression
    Wscript.Echo "Modem: " &amp;amp; strIESetting.Modem
    Wscript.Echo "Name: " &amp;amp; strIESetting.Name
    Wscript.Echo "Network logon: " &amp;amp; strIESetting.NetworkLogon
    Wscript.Echo "Network protocols: " &amp;amp; strIESetting.NetworkProtocols
    Wscript.Echo "Primary DNS server: " &amp;amp; strIESetting.PrimaryDNS
    Wscript.Echo "Primary WINS server: " &amp;amp; strIESetting.PrimaryWINS
    Wscript.Echo "Proxy: " &amp;amp; strIESetting.Proxy
    Wscript.Echo "Proxy override: " &amp;amp; strIESetting.ProxyOverride
    Wscript.Echo "Proxy server: " &amp;amp; strIESetting.ProxyServer
    Wscript.Echo "Redial attempts: " &amp;amp; strIESetting.RedialAttempts
    Wscript.Echo "Redial wait: " &amp;amp; strIESetting.RedialWait
    Wscript.Echo "Script fileame: " &amp;amp; strIESetting.ScriptFileName
    Wscript.Echo "Secondary DNS server: " &amp;amp; strIESetting.SecondaryDNS
    Wscript.Echo "Secondary WINS server: " &amp;amp; strIESetting.SecondaryWINS
    Wscript.Echo "Server assigned IP address: " &amp;amp; _
        strIESetting.ServerAssignedIPAddress
    Wscript.Echo "Server assigned name server: " &amp;amp; _
        strIESetting.ServerAssignedNameServer
    Wscript.Echo "Software compression: " &amp;amp; strIESetting.SoftwareCompression
Next
</vb><vb name="List Internet Explorer File Version Information" n="248">' List Internet Explorer File Version Information


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\cimv2\Applications\MicrosoftIE")

Set colIESettings = objWMIService.ExecQuery _
    ("Select * from MicrosoftIE_FileVersion")

For Each strIESetting in colIESettings
    Wscript.Echo "Company: " &amp;amp; strIESetting.Company
    Wscript.Echo "Date: " &amp;amp; strIESetting.Date
    Wscript.Echo "File name: " &amp;amp; strIESetting.File
    Wscript.Echo "Path: " &amp;amp; strIESetting.Path
    Wscript.Echo "File size: " &amp;amp; strIESetting.Size
    Wscript.Echo "Version: " &amp;amp; strIESetting.Version
Next
</vb><vb name="List Internet Explorer LAN Settings" n="249">' List Internet Explorer LAN Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\cimv2\Applications\MicrosoftIE")

Set colIESettings = objWMIService.ExecQuery _
    ("Select * from MicrosoftIE_LANSettings")

For Each strIESetting in colIESettings
    Wscript.Echo "Autoconfiguration proxy: " &amp;amp; strIESetting.AutoConfigProxy
    Wscript.Echo "Autoconfiguration URL: " &amp;amp; strIESetting.AutoConfigURL
    Wscript.Echo "Autoconfiguration Proxy detection mode: " &amp;amp; _
        strIESetting.AutoProxyDetectMode
    Wscript.Echo "Proxy: " &amp;amp; strIESetting.Proxy
    Wscript.Echo "Proxy override: " &amp;amp; strIESetting.ProxyOverride
    Wscript.Echo "Proxy server: " &amp;amp; strIESetting.ProxyServer
Next
</vb><vb name="List Internet Explorer Security Setting Values" n="250">' List Internet Explorer Security Setting Values


On Error Resume Next

Const HKEY_CURRENT_USER = &amp;amp;H80000001

strComputer = "."
strEntry = "1400"

Set objReg = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; _
        "\root\default:StdRegProv")

strKeyPath = "Software\Microsoft\Windows\CurrentVersion\Internet Settings\" _
    &amp;amp; "Zones\1"
objReg.GetDWORDValue HKEY_CURRENT_USER, strKeyPath, strEntry, dwValue

Select Case dwValue
    Case 0 strSetting = "Enabled"
    Case 1 strSetting = "Prompt"
    case 3 strSetting = "Disabled"
End Select

Wscript.Echo "Allow scripting: " &amp;amp; strSetting
</vb><vb name="List Internet Explorer Security Zone Settings" n="251">' List Internet Explorer Security Zone Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\cimv2\Applications\MicrosoftIE")

Set colIESettings = objWMIService.ExecQuery _
    ("Select * from MicrosoftIE_Security")

For Each strIESetting in colIESettings
    Wscript.Echo "Zone name: " &amp;amp; strIESetting.Zone
    Wscript.Echo "Security level: " &amp;amp; strIESetting.Level
Next
</vb><vb name="List Internet Explorer Summary Settings" n="252">' List Internet Explorer Summary Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\cimv2\Applications\MicrosoftIE")

Set colIESettings = objWMIService.ExecQuery _
    ("Select * from MicrosoftIE_Summary")

For Each strIESetting in colIESettings
    Wscript.Echo "Active printer: " &amp;amp; strIESetting.ActivePrinter
    Wscript.Echo "Build: " &amp;amp; strIESetting.Build
    Wscript.Echo "Cipher strength: " &amp;amp; strIESetting.CipherStrength
    Wscript.Echo "Content advisor: " &amp;amp; strIESetting.ContentAdvisor
    Wscript.Echo "IE Administration Kit installed: " &amp;amp; _
        strIESetting.IEAKInstall
    Wscript.Echo "Language: " &amp;amp; strIESetting.Language
    Wscript.Echo "Name: " &amp;amp; strIESetting.Name
    Wscript.Echo "Path: " &amp;amp; strIESetting.Path
    Wscript.Echo "Product ID: " &amp;amp; strIESetting.ProductID
    Wscript.Echo "Version: " &amp;amp; strIESetting.Version
Next
</vb><vb name="List Sites in Internet Explorer Security Zones" n="253">' List Sites in Internet Explorer Security Zones


On Error Resume Next

Const HKEY_CURRENT_USER = &amp;amp;H80000001

strComputer = "."

Set objReg = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; _
        "\root\default:StdRegProv")

strKeyPath = "Software\Microsoft\Windows\CurrentVersion\Internet Settings\" _
    &amp;amp; "ZoneMap\ESCDomains"
objReg.EnumKey HKEY_CURRENT_USER, strKeyPath, arrSubKeys

For Each subkey In arrSubKeys
    strNewPath = strKeyPath &amp;amp; "\" &amp;amp; subkey
    ShowSubkeys
Next

Sub ShowSubkeys
    arrPath = Split(strNewPath, "\")
    intSiteName = Ubound(arrPath)
    strSiteName = arrPath(intSiteName)
    objReg.EnumValues HKEY_CURRENT_USER, strNewPath, arrEntries, arrValueTypes

    If Not IsArray(arrEntries) Then
        arrPath = Split(strNewPath, "\")
        intSiteName = Ubound(arrPath)
        strSiteName = arrPath(intSiteName)
        Wscript.Echo strsitename
            objReg.EnumKey HKEY_CURRENT_USER, strNewPath, arrSubKeys2

        For Each subkey In arrSubKeys2
            strNewPath2 = strNewPath &amp;amp; "\" &amp;amp; subkey
            arrPath = Split(strNewPath2, "\")
            intSiteName = Ubound(arrPath)
            strSiteName = arrPath(intSiteName)
            objReg.EnumValues HKEY_CURRENT_USER, strNewPath2, arrEntries2,_
                arrValueTypes

            For i = 0 to Ubound(arrEntries2)
                objReg.GetDWORDValue HKEY_CURRENT_USER, strNewPath2, _
                    arrEntries2(i),dwValue
            Next

            Select Case dwValue
                Case 0 strZone = "My Computer"
                Case 1 strZone = "Local Intranet zone"
                Case 2 strZone = "Trusted Sites Zone"
                Case 3 strZone = "Internet Zone"
                Case 4 strZone = "Restricted Sites Zone"   
            End Select

            Wscript.Echo vbtab &amp;amp; strSiteName &amp;amp; " -- " &amp;amp; strZone
       Next
    End If

    For i = 0 to Ubound(arrEntries)
        objReg.GetDWORDValue HKEY_CURRENT_USER, strNewPath, _
            arrEntries(i),dwValue
    Next
        
    Select Case dwValue
        Case 0 strZone = "My Computer"
        Case 1 strZone = "Local Intranet zone"
        Case 2 strZone = "Trusted Sites Zone"
        Case 3 strZone = "Internet Zone"
        Case 4 strZone = "Restricted Sites Zone"   
    End Select

    Wscript.Echo strSiteName &amp;amp; " -- " &amp;amp; strZone

End Sub
</vb><vb name="Modify Advanced Internet Explorer Settings" n="254">' Modify Advanced Internet Explorer Settings


On Error Resume Next

Const HKEY_CURRENT_USER = &amp;amp;H80000001

strComputer = "."
strValue = "no"

Set objReg = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; _
        "\root\default:StdRegProv")

strKeyPath = "Software\Microsoft\Internet Explorer\Main"
objReg.SetStringValue HKEY_CURRENT_USER, strKeyPath, _
    "NotifyDownloadComplete",strValue
</vb><vb name="Modify Internet Explorer Advanced Settings" n="255">' Modify Internet Explorer Advanced Settings


On Error Resume Next

Const HKEY_CURRENT_USER = &amp;amp;H80000001

strComputer = "."
strEntry = "DisplayTrustAlertDlg"

Set objReg = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; _
        "\root\default:StdRegProv")

strKeyPath = "Software\Microsoft\Internet Explorer\Main"
objReg.GetDWORDValue HKEY_CURRENT_USER, strKeyPath, strEntry ,dwValue

If dwValue = 1 Then
    Wscript.Echo "Enhanced security dialog box is displayed." 
Else
    Wscript.Echo "Enhanced security dialog box is not displayed." 
End If
</vb><vb name="Modify Internet Explorer Security Settings" n="256">' Modify Internet Explorer Security Settings


On Error Resume Next

Const HKEY_CURRENT_USER = &amp;amp;H80000001

strComputer = "."

Set objReg = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; _
        "\root\default:StdRegProv")

strKeyPath = "Software\Microsoft\Windows\CurrentVersion\Internet Settings\" _
    &amp;amp; "Zones\1"
strEntryName = "1400"
dwvalue = 0
objReg.SetDWORDValue HKEY_CURRENT_USER, strKeyPath, strEntryName,dwValue
</vb><vb name="Monitor Internet Explorer Security Changes" n="257">' Monitor Internet Explorer Security Changes


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{"{impersonationLevel=impersonate,(Security)}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\cimv2")

Set colMonitoredEvents = objWMIService.ExecNotificationQuery _    
    ("SELECT * FROM __InstanceCreationEvent WHERE TargetInstance ISA " _
        &amp;amp; "'Win32_NTLogEvent' AND TargetInstance.EventCode = '560' AND " _
            &amp;amp; "TargetInstance.Logfile = 'Security' GROUP WITHIN 2")
Do
    Set objLatestEvent = colMonitoredEvents.NextEvent
        strAlertToSend = "Internet Explorer security settings have been " &amp;amp; _
            "changed."
        Wscript.Echo strAlertToSend
Loop
</vb><vb name="Verify Internet Explorer Enhanced Security Configuration Status" n="258">' Verify Internet Explorer Enhanced Security Configuration Status


On Error Resume Next

Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

strComputer = "."
Set objReg = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; _
        "\root\default:StdRegProv")

strKeyPath = "SOFTWARE\Microsoft\Active Setup\Installed Components\" _
    &amp;amp; "{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
strValueName = "IsInstalled"
objReg.GetDWORDValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName,intAdmin
 
strKeyPath = "SOFTWARE\Microsoft\Active Setup\Installed Components\" _
    &amp;amp; "{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}"
strValueName = "IsInstalled"
objReg.GetDWORDValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName,intUsers

strConfiguration = intAdmin &amp;amp; intUsers
Select Case strConfiguration
    Case "00"
        Wscript.Echo "The use of Internet Explorer is not restricted on " _
            &amp;amp; "this server."
    Case "01"
        Wscript.Echo "The use of Internet Explorer is restricted for the " _
           &amp;amp; "administrators group on this server. The use of Internet " _
           &amp;amp; "Explorer is not restricted for any other user group."
    Case "10"
        Wscript.Echo "The use of Internet Explorer is not restricted for the" _
            &amp;amp; " administrators group on this server. The use of Internet " _
            &amp;amp; "Explorer is restricted for any other user group."
    Case "11"
        Wscript.Echo "The use of Internet Explorer is restricted for all " _
            &amp;amp; "user groups on this server."
End Select
</vb><vb name="List Items in the Temporary Internet Files Folder" n="259">' List Items in the Temporary Internet Files Folder


Const TEMPORARY_INTERNET_FILES = &amp;amp;H20&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(TEMPORARY_INTERNET_FILES)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List the Items in the Internet Explorer History Folder" n="260">' List the Items in the Internet Explorer History Folder


Const LOCAL_SETTINGS_HISTORY = &amp;amp;H22&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(LOCAL_SETTINGS_HISTORY)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List the Path to the Internet Explorer Folder" n="261">' List the Path to the Internet Explorer Folder


Const INTERNET_EXPLORER = &amp;amp;H1&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(INTERNET_EXPLORER)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path
</vb><vb name="List Items in the Internet Favorites Folder" n="262">' List Items in the Internet Favorites Folder


Const FAVORITES = &amp;amp;H6&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(FAVORITES)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Internet Cookies Folder" n="263">' List Items in the Internet Cookies Folder


Const COOKIES = &amp;amp;H21&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(COOKIES)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb></dd>
		<dd name="Logon Sessions" code="logon" desc="Sample scripts for retrieving information about computer logon sessions, including identifying the user logged on to a remote computer."><vb name="List Logon Session Information" n="264">' List Logon Session Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_LogonSession")

For Each objItem in colItems
    Wscript.Echo "Authentication Package: " &amp;amp; objItem.AuthenticationPackage
    Wscript.Echo "Logon ID: " &amp;amp; objItem.LogonId
    Wscript.Echo "Logon Type: " &amp;amp; objItem.LogonType
    Wscript.Echo "Start Time: " &amp;amp; objItem.StartTime
    Wscript.Echo
Next
</vb><vb name="List the User Logged on to a Remote Computer" n="265">' List the User Logged on to a Remote Computer


strComputer = "atl-ws-o1"
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2") 

Set colComputer = objWMIService.ExecQuery _
    ("Select * from Win32_ComputerSystem")
 
For Each objComputer in colComputer
    Wscript.Echo "Logged-on user: " &amp;amp; objComputer.UserName
Next
</vb><vb name="List User Passport Information" n="266">' List User Passport Information


Set objUser = CreateObject("UserAccounts.PassportManager")
Wscript.Echo "Current Passport: " &amp;amp; objUser.CurrentPassport
Wscript.Echo "Member services URL: " &amp;amp; objUser.MemberServicesURL
</vb></dd>
		<dd name="Special Folders" code="special" desc="Sample scripts for finding the path to, and working with, special folders such as My Documents, My Pictures, and the Windows Desktop."><vb name="List Items in the Startup Folder" n="267">' List Items in the Startup Folder


Const STARTUP = &amp;amp;H7&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(STARTUP)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Start Menu Folder" n="268">' List Items in the Start Menu Folder


Const START_MENU = &amp;amp;Hb&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(START_MENU)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the SendTo Folder" n="269">' List Items in the SendTo Folder


Const SENDTO = &amp;amp;H9&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(SENDTO)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Recycle Bin Folder" n="270">' List Items in the Recycle Bin Folder


Const RECYCLE_BIN = &amp;amp;Ha&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(RECYCLE_BIN)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Programs Folder" n="271">' List Items in the Programs Folder


Const PROGRAMS = &amp;amp;H2&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(PROGRAMS)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Program Files Folder" n="272">' List Items in the Program Files Folder


Const PROGRAM_FILES = &amp;amp;H26&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(PROGRAM_FILES)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Print Neighborhood Folder" n="273">' List Items in the Print Neighborhood Folder


Const PRINTHOOD = &amp;amp;H1b&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(PRINTHOOD)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Printers and Faxes Folder" n="274">' List Items in the Printers and Faxes Folder


Const PRINTERS_AND_FAXES = &amp;amp;H4&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(PRINTERS_AND_FAXES)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Network Connections Folder" n="275">' List Items in the Network Connections Folder


Const NETWORK_CONNECTIONS = &amp;amp;H31&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(NETWORK_CONNECTIONS)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List the Items in the Network Neighborhood Folder" n="276">' List the Items in the Network Neighborhood Folder


Const NETHOOD = &amp;amp;H13&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(NETHOOD)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the My Videos Folder" n="277">' List Items in the My Videos Folder


Const MY_VIDEOS = &amp;amp;He&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(MY_VIDEOS)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List the Items in the My Recent Documents Folder" n="278">' List the Items in the My Recent Documents Folder


Const MY_RECENT_DOCUMENTS = &amp;amp;H8&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(MY_RECENT_DOCUMENTS)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List the Items in the My Pictures Folder" n="279">' List the Items in the My Pictures Folder


Const MY_PICTURES = &amp;amp;H27&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(MY_PICTURES)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the My Network Places Folder" n="280">' List Items in the My Network Places Folder


Const MY_NETWORK_PLACES = &amp;amp;H12&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(MY_NETWORK_PLACES)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the My Music Folder" n="281">' List Items in the My Music Folder


Const MY_MUSIC = &amp;amp;Hd&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(MY_MUSIC)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the My Documents Folder" n="282">' List Items in the My Documents Folder


Const MY_DOCUMENTS = &amp;amp;H5&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(MY_DOCUMENTS)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the My Computer Folder" n="283">' List Items in the My Computer Folder


Const MY_COMPUTER = &amp;amp;H11&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(MY_COMPUTER)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Temporary Internet Files Folder" n="284">' List Items in the Temporary Internet Files Folder


Const TEMPORARY_INTERNET_FILES = &amp;amp;H20&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(TEMPORARY_INTERNET_FILES)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List the Items in the Internet Explorer History Folder" n="285">' List the Items in the Internet Explorer History Folder


Const LOCAL_SETTINGS_HISTORY = &amp;amp;H22&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(LOCAL_SETTINGS_HISTORY)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Local Application Data Folder" n="286">' List Items in the Local Application Data Folder


Const LOCAL_APPLICATION_DATA = &amp;amp;H1c&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(LOCAL_APPLICATION_DATA)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List the Path to the Internet Explorer Folder" n="287">' List the Path to the Internet Explorer Folder


Const INTERNET_EXPLORER = &amp;amp;H1&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(INTERNET_EXPLORER)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path
</vb><vb name="List Items in the Fonts Folder" n="288">' List Items in the Fonts Folder


Const FONTS = &amp;amp;H14&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(FONTS)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Internet Favorites Folder" n="289">' List Items in the Internet Favorites Folder


Const FAVORITES = &amp;amp;H6&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(FAVORITES)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Desktop Folder" n="290">' List Items in the Desktop Folder


Const DESKTOP = &amp;amp;H10&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(DESKTOP)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Internet Cookies Folder" n="291">' List Items in the Internet Cookies Folder


Const COOKIES = &amp;amp;H21&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(COOKIES)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Control Panel Folder" n="292">' List Items in the Control Panel Folder


Const CONTROL_PANEL = &amp;amp;H3&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(CONTROL_PANEL)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Common Files Folder" n="293">' List Items in the Common Files Folder


Const COMMON_FILES = &amp;amp;H2b&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(COMMON_FILES)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Application Data Folder" n="294">' List Items in the Application Data Folder


Const APPLICATION_DATA = &amp;amp;H1a&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(APPLICATION_DATA)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the All Users Startup Folder" n="295">' List Items in the All Users Startup Folder


Const ALL_USERS_STARTUP = &amp;amp;H18&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(ALL_USERS_STARTUP)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the All Users Start Menu Folder" n="296">' List Items in the All Users Start Menu Folder


Const ALL_USERS_START_MENU = &amp;amp;H16&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(ALL_USERS_START_MENU)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the All Users Programs Folder" n="297">' List Items in the All Users Programs Folder


Const ALL_USERS_PROGRAMS = &amp;amp;H17&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(ALL_USERS_PROGRAMS)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the All Users Desktop Folder" n="298">' List Items in the All Users Desktop Folder


Const ALL_USERS_DESKTOP = &amp;amp;H19&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(ALL_USERS_DESKTOP)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the All Users Application Data Folder" n="299">' List Items in the All Users Application Data Folder


Const ALL_USERS_APPLICATION_DATA = &amp;amp;H23&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(ALL_USERS_APPLICATION_DATA)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Administrative Tools Folder" n="300">' List Items in the Administrative Tools Folder


Const ADMINISTRATIVE_TOOLS = &amp;amp;H2f&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(ADMINISTRATIVE_TOOLS)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Windows Folder" n="301">' List Items in the Windows Folder


Const WINDOWS = &amp;amp;H24&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(WINDOWS)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the User Profile Folder" n="302">' List Items in the User Profile Folder


Const USER_PROFILE = &amp;amp;H28&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(USER_PROFILE)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the Templates Folder" n="303">' List Items in the Templates Folder


Const TEMPLATES = &amp;amp;H15&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(TEMPLATES)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb><vb name="List Items in the System32 Folder" n="304">' List Items in the System32 Folder


Const SYSTEM32 = &amp;amp;H25&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(SYSTEM32)
Set objFolderItem = objFolder.Self
Wscript.Echo objFolderItem.Path

Set colItems = objFolder.Items
For Each objItem in colItems
    Wscript.Echo objItem.Name
Next
</vb></dd>
		<dd name="Startup and Shutdown" code="state" desc="Sample scripts for managing Windows startup settings and for shutting down computers."><vb name="List Computer Startup Commands" n="305">' List Computer Startup Commands


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colStartupCommands = objWMIService.ExecQuery _
    ("Select * from Win32_StartupCommand")

For Each objStartupCommand in colStartupCommands
    Wscript.Echo "Command: " &amp;amp; objStartupCommand.Command
    Wscript.Echo "Description: " &amp;amp; objStartupCommand.Description
    Wscript.Echo "Location: " &amp;amp; objStartupCommand.Location
    Wscript.Echo "Name: " &amp;amp; objStartupCommand.Name
    Wscript.Echo "Setting ID: " &amp;amp; objStartupCommand.SettingID
    Wscript.Echo "User: " &amp;amp; objStartupCommand.User
Next
</vb><vb name="List Computer Startup Options" n="306">' List Computer Startup Options


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colStartupCommands = objWMIService.ExecQuery _
    ("Select * from Win32_ComputerSystem")

For Each objStartupCommand in colStartupCommands
    Wscript.Echo "Reset Boot Enabled: " &amp;amp; _
        objStartupCommand.AutomaticResetBootOption
    Wscript.Echo "Reset Boot Possible: " &amp;amp; _
        objStartupCommand.AutomaticResetCapability
    Wscript.Echo "Boot State: " &amp;amp; objStartupCommand.BootupState
    Wscript.Echo "Startup Delay: " &amp;amp; objStartupCommand.SystemStartupDelay
    For i = 0 to Ubound(objStartupCommand.SystemStartupOptions)
        Wscript.Echo "Startup Options: " &amp;amp; _
            objStartupCommand.SystemStartupOptions(i)
    Next
    Wscript.Echo "Startup Setting: " &amp;amp; _
        objStartupCommand.SystemStartupSetting
Next
</vb><vb name="List Recovery Configuration Options" n="307">' List Recovery Configuration Options


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colRecoveryOptions = objWMIService.ExecQuery _
    ("Select * from Win32_OSRecoveryConfiguration")

For Each objOption in colRecoveryOptions 
    Wscript.Echo "Auto reboot: " &amp;amp; objOption.AutoReboot
    Wscript.Echo "Debug File Path: " &amp;amp; objOption.DebugFilePath
    Wscript.Echo "Debug Info Type: " &amp;amp; objOption.DebugInfoType
    Wscript.Echo "Kernel Dump Only: " &amp;amp; objOption.KernelDumpOnly
    Wscript.Echo "Name: " &amp;amp; objOption.Name
    Wscript.Echo "Overwrite Existing Debug File: " &amp;amp; _
        objOption.OverwriteExistingDebugFile
    Wscript.Echo "Send Administrative Alert: " &amp;amp; objOption.SendAdminAlert
    Wscript.Echo "Write Debug Information: " &amp;amp; objOption.WriteDebugInfo
    Wscript.Echo "Write to System Log: " &amp;amp; objOption.WriteToSystemLog
Next
</vb><vb name="List the Boot Configuration Properties of a Computer" n="308">' List the Boot Configuration Properties of a Computer


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_BootConfiguration")

For Each objItem in colItems
    Wscript.Echo "Boot Directory: " &amp;amp; objItem.BootDirectory
    Wscript.Echo "Configuration Path: " &amp;amp; objItem.ConfigurationPath
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Last Drive: " &amp;amp; objItem.LastDrive
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Scratch Directory: " &amp;amp; objItem.ScratchDirectory
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Temp Directory: " &amp;amp; objItem.TempDirectory
Next
</vb><vb name="Modify Recovery Configuration Options" n="309">' Modify Recovery Configuration Options


Const COMPLETE_MEMORY_DUMP = 1

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colRecoveryOptions = objWMIService.ExecQuery _
    ("Select * from Win32_OSRecoveryConfiguration")

For Each objOption in colRecoveryOptions 
    objOption.DebugInfoType = COMPLETE_MEMORY_DUMP
    objOption.DebugFilePath = "c:\scripts\memory.dmp"
    objOption.OverWriteExistingDebugFile = False
    objOption.Put_
Next
</vb><vb name="Modify System Startup Delay" n="310">' Modify System Startup Delay


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colStartupCommands = objWMIService.ExecQuery _
    ("Select * from Win32_ComputerSystem")

For Each objStartupCommand in colStartupCommands
    objStartupCommand.SystemStartupDelay = 10
    objStartupCommand.Put_
Next
</vb><vb name="Restart a Computer" n="311">' Restart a Computer


strComputer = "atl-dc-01"
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate,(Shutdown)}!\\" &amp;amp; _
        strComputer &amp;amp; "\root\cimv2")

Set colOperatingSystems = objWMIService.ExecQuery _
    ("Select * from Win32_OperatingSystem")

For Each objOperatingSystem in colOperatingSystems
    objOperatingSystem.Reboot()
Next
</vb><vb name="Shut Down a Computer" n="312">' Shut Down a Computer


strComputer = "."
Set objWMIService = GetObject_
    ("winmgmts:{impersonationLevel=impersonate,(Shutdown)}\\" &amp;amp; _
        strComputer &amp;amp; "\root\cimv2")

Set colOperatingSystems = objWMIService.ExecQuery _
    ("Select * from Win32_OperatingSystem")
 
For Each objOperatingSystem in colOperatingSystems
    objOperatingSystem.Win32Shutdown(1)
Next
</vb></dd>
		<dd name="System Restore" code="restore" desc="Sample scripts for managing System Restore settings."><vb name="Conduct a System Restore" n="313">' Conduct a System Restore


Const RESTORE_POINT = 20
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\default")

Set objItem = objWMIService.Get("SystemRestore")
errResults = objItem.Restore(RESTORE_POINT)
</vb><vb name="Create a System Restore Point" n="314">' Create a System Restore Point


CONST DEVICE_DRIVER_INSTALL = 10
CONST BEGIN_SYSTEM_CHANGE = 100

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\default")

Set objItem = objWMIService.Get("SystemRestore")
errResults = objItem.CreateRestorePoint _
    ("Scripted restore", DEVICE_DRIVER_INSTALL, BEGIN_SYSTEM_CHANGE)
</vb><vb name="Disable Full System Restore" n="315">' Disable Full System Restore


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\default")

Set objItem = objWMIService.Get("SystemRestore")
errResults = objItem.Disable("")
</vb><vb name="Enable Full System Restore" n="316">' Enable Full System Restore


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\default")

Set objItem = objWMIService.Get("SystemRestore")
errResults = objItem.Enable("")
</vb><vb name="List All Existing Restore Points" n="317">' List All Existing Restore Points


Set dtmConvertedDate = CreateObject("WbemScripting.SWbemDateTime")
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\default")

Set colItems = objWMIService.ExecQuery("Select * from SystemRestore")
If colItems.Count = 0 Then
    WScript.Echo "No restore point in system."
Else
    For Each objItem in colItems
        Wscript.Echo "Name: " &amp;amp; objItem.Description
        Wscript.Echo "Number: " &amp;amp; objItem.SequenceNumber
        Select Case objItem.RestorePointType
      Case 0 strRestoreType = "Application installation"
            Case 1 strRestoreType = "Application uninstall"
            Case 6 strRestoreType = "Restore"
            Case 7 strRestoreType = "Checkpoint"
            Case 10 strRestoreType = "Device drive installation"
            Case 11 strRestoreType = "First run"
            Case 12 strRestoreType = "Modify settings"
            Case 13 strRestoreType = "Cancelled operation"
            Case 14 strRestoreType = "Backup recovery"
            Case Else strRestoreType = "Unknown"
        End Select
        Wscript.Echo "Restore Point Type: " &amp;amp; strRestoreType
 
        dtmConvertedDate.Value = objItem.CreationTime
        dtmCreationTime = dtmConvertedDate.GetVarDate
        Wscript.Echo "Time: " &amp;amp; dtmCreationTime
     Next
End If
</vb><vb name="List System Restore Configuration Values" n="318">' List System Restore Configuration Values


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\default")

Set colItems = objWMIService.ExecQuery("Select * from SystemRestoreConfig")

For Each objItem in colItems
    Wscript.Echo "Disk Percent: " &amp;amp; objItem.DiskPercent
    Wscript.Echo "Global Interval (in seconds): " &amp;amp; objItem.RPGlobalInterval 
    Wscript.Echo "Life Interval (in seconds): " &amp;amp; objItem.RPLifeInterval
    If objItem.RPSessionInterval = 0 Then
        Wscript.Echo "Session Interval: Feature not enabled." 
    Else
        Wscript.Echo "Session Interval (in seconds): " &amp;amp; _
            objItem.RPSessionInterval
    End If
Next
</vb><vb name="List the Results of the Last System Restore" n="319">' List the Results of the Last System Restore


strComputer = "."
 
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\default")

Set objItem = objWMIService.Get("SystemRestore")
errResults = objItem.GetLastRestoreStatus()
 
Select Case errResults
    Case 0 strRestoreStatus = "The last restore failed."
    Case 1 strRestoreStatus = "The last restore was successful."
    Case 2 strRestoreStatus = "The last restore was interrupted."
End Select
 
Wscript.Echo strRestoreStatus
</vb><vb name="Modify System Restore Configuration Values" n="320">' Modify System Restore Configuration Values


Const GLOBAL_INTERVAL_IN_SECONDS = 100000
Const LIFE_INTERVAL_IN_SECONDS = 8000000
Const SESSION_INTERVAL_IN_SECONDS = 500000
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\default")

Set objItem = objWMIService.Get("SystemRestoreConfig='SR'")
objItem.DiskPercent = 10
objItem.RPGlobalInterval = GLOBAL_INTERVAL_IN_SECONDS
objItem.RPLifeInterval = LIFE_INTERVAL_IN_SECONDS
objItem.RPSessionInterval = SESSION_INTERVAL_IN_SECONDS
objItem.Put_
</vb></dd>
		<dd name="Windows Activation" code="activate" desc="Sample scripts for managing Windows Activation, including scripts for activating Windows both online and offline."><vb name="Activate Windows Offline" n="321">' Activate Windows Offline


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colWindowsProducts = objWMIService.ExecQuery _
    ("Select * from Win32_WindowsProductActivation")

For Each objWindowsProduct in colWindowsProducts
    objWindowsProduct.ActivateOffline("1234-1234")
Next
</vb><vb name="Activate Windows Online" n="322">' Activate Windows Online


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colWindowsProducts = objWMIService.ExecQuery _
    ("Select * from Win32_WindowsProductActivation")

For Each objWindowsProduct in colWindowsProducts
    objWindowsProduct.ActivateOnline()
Next
</vb><vb name="List Windows Product Activation Status" n="323">' List Windows Product Activation Status


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colWPA = objWMIService.ExecQuery _
    ("Select * from Win32_WindowsProductActivation")

For Each objWPA in colWPA
    Wscript.Echo "Activation Required: " &amp;amp; objWPA.ActivationRequired
    Wscript.Echo "Description: " &amp;amp; objWPA.Description
    Wscript.Echo "Product ID: " &amp;amp; objWPA.ProductID
    Wscript.Echo "Remaining Evaluation Period: " &amp;amp; _
        objWPA.RemainingEvaluationPeriod
    Wscript.Echo "Remaining Grace Period: " &amp;amp; objWPA.RemainingGracePeriod
    Wscript.Echo "Server Name: " &amp;amp; objWPA.ServerName
Next
</vb><vb name="Suppress Windows Activation Notices" n="324">' Suppress Windows Activation Notices


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colWPASettings = objWMIService.ExecQuery _
    ("Select * from Win32_WindowsProductActivation")
 
For Each objWPASetting in colWPASettings
    objWPASetting.SetNotification(0)
Next
</vb></dd>
		<dd name="Windows and Windows Explorer Settings" code="explorer" desc="Sample scripts for configuring Windows and Windows Explorer settings."><vb name="Add &quot;Command Prompt Here&quot; to Windows Explorer" n="325">' Add "Command Prompt Here" to Windows Explorer


Set objShell = CreateObject("WScript.Shell")
 
objShell.RegWrite "HKCR\Folder\Shell\MenuText\Command\", _
    "cmd.exe /k cd " &amp;amp; chr(34) &amp;amp; "%1" &amp;amp; chr(34)
objShell.RegWrite "HKCR\Folder\Shell\MenuText\", "Command Prompt Here"
</vb><vb name="Add a Template to the Windows Explorer New Menu" n="326">' Add a Template to the Windows Explorer New Menu


Set objShell = WScript.CreateObject("WScript.Shell")
objShell.RegWrite "HKCR\.VBS\ShellNew\FileName","template.vbs"
</vb><vb name="List Desktop Settings" n="327">' List Desktop Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_Desktop")

For Each objItem in colItems
    Wscript.Echo "Border Width: " &amp;amp; objItem.BorderWidth
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Cool Switch: " &amp;amp; objItem.CoolSwitch
    Wscript.Echo "Cursor Blink Rate: " &amp;amp; objItem.CursorBlinkRate
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Drag Full Windows: " &amp;amp; objItem.DragFullWindows
    Wscript.Echo "Grid Granularity: " &amp;amp; objItem.GridGranularity
    Wscript.Echo "Icon Spacing: " &amp;amp; objItem.IconSpacing
    Wscript.Echo "Icon Title Face Name: " &amp;amp; objItem.IconTitleFaceName
    Wscript.Echo "Icon Title Size: " &amp;amp; objItem.IconTitleSize
    Wscript.Echo "Icon Title Wrap: " &amp;amp; objItem.IconTitleWrap
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Pattern: " &amp;amp; objItem.Pattern
    Wscript.Echo "Screen Saver Active: " &amp;amp; objItem.ScreenSaverActive
    Wscript.Echo "Screen Saver Executable: " &amp;amp; _
        objItem.ScreenSaverExecutable
    Wscript.Echo "Screen Saver Secure: " &amp;amp; objItem.ScreenSaverSecure
    Wscript.Echo "Screen Saver Timeout: " &amp;amp; objItem.ScreenSaverTimeout
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Wallpaper: " &amp;amp; objItem.Wallpaper
    Wscript.Echo "Wallpaper Stretched: " &amp;amp; objItem.WallpaperStretched
    Wscript.Echo "Wallpaper Tiled: " &amp;amp; objItem.WallpaperTiled
Next
</vb><vb name="List Environment Variables on a Computer" n="328">' List Environment Variables on a Computer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_Environment")

For Each objItem in colItems
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "System Variable: " &amp;amp; objItem.SystemVariable
    Wscript.Echo "User Name: " &amp;amp; objItem.UserName
    Wscript.Echo "Variable Value: " &amp;amp; objItem.VariableValue
Next
</vb><vb name="List Installed Administrative Tools" n="329">' List Installed Administrative Tools


Const ADMINISTRATIVE_TOOLS = &amp;amp;H2f&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(ADMINISTRATIVE_TOOLS) 
Set objTools = objFolder.Items

For i = 0 to objTools.Count - 1
    Wscript.Echo objTools.Item(i)
Next
</vb><vb name="List Path to the My Pictures Folders" n="330">' List Path to the My Pictures Folders


Const MY_PICTURES = &amp;amp;H27&amp;amp;
Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(MY_PICTURES) 
Set objFolderItem = objFolder.Self      
Wscript.Echo objFolderItem.Name &amp;amp; ": " &amp;amp; objFolderItem.Path
</vb><vb name="List Shortcuts on a Computer" n="331">' List Shortcuts on a Computer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_ShortcutFile")

For Each objItem in colItems
    strCreationDate = WMIDateStringToDate(objItem.CreationDate)
    Wscript.Echo "Creation Date: " &amp;amp; strCreationDate
    Wscript.Echo "Drive: " &amp;amp; objItem.Drive
    Wscript.Echo "Eight Dot Three File Name: " &amp;amp; _
        objItem.EightDotThreeFileName
    Wscript.Echo "Extension: " &amp;amp; objItem.Extension
    Wscript.Echo "File Name: " &amp;amp; objItem.FileName
    Wscript.Echo "File Size: " &amp;amp; objItem.FileSize
    Wscript.Echo "File Type: " &amp;amp; objItem.FileType
    Wscript.Echo "File System Name: " &amp;amp; objItem.FSName
    Wscript.Echo "Hidden: " &amp;amp; objItem.Hidden
    strLastAccessed = WMIDateStringToDate(objItem.LastAccessed)
    Wscript.Echo "Last Accessed: " &amp;amp; strLastAccessed
    strLastModified = WMIDateStringToDate(objItem.LastModified)
    Wscript.Echo "Last Modified: " &amp;amp; strLastModified
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Path: " &amp;amp; objItem.Path
    Wscript.Echo "Target: " &amp;amp; objItem.Target
Next
 
Function WMIDateStringToDate(dtmDate)
    WMIDateStringToDate = CDate(Mid(dtmDate, 5, 2) &amp;amp; "/" &amp;amp; _
        Mid(dtmDate, 7, 2) &amp;amp; "/" &amp;amp; Left(dtmDate, 4) _
            &amp;amp; " " &amp;amp; Mid (dtmDate, 9, 2) &amp;amp; ":" &amp;amp; _
                Mid(dtmDate, 11, 2) &amp;amp; ":" &amp;amp; Mid(dtmDate, _
                    13, 2))
End Function
</vb><vb name="List Start Menu Items" n="332">' List Start Menu Items


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_LogicalProgramGroupItem")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List Start Menu Program Groups" n="333">' List Start Menu Program Groups


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_ProgramGroup")

For Each objItem in colItems
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Group Name: " &amp;amp; objItem.GroupName
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "User Name: " &amp;amp; objItem.UserName
    Wscript.Echo
Next
</vb><vb name="Rename the My Computer Icon on the Local Computer" n="334">' Rename the My Computer Icon on the Local Computer


Const MY_COMPUTER = &amp;amp;H11&amp;amp;

Set objNetwork = CreateObject("Wscript.Network")
objComputerName = objNetwork.ComputerName
Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(MY_COMPUTER) 
Set objFolderItem = objFolder.Self
objFolderItem.Name = objComputerName
</vb><vb name="Verify the Scripting Environment on the Local Computer" n="335">' Verify the Scripting Environment on the Local Computer


On Error Resume Next
 
Const MAXIMIZE_WINDOW = 3
 
strComputer = "."  
strNamespace = "\root\cimv2" 
blnWSHUpToDate = False
blnWMIUpToDate = False
blntADSIUpToDate = False
 

strWshHost = GetWshHost
ChangeToCscript(strWshHost)
    
Set objWMIService = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" _
    &amp;amp; strComputer &amp;amp; strNamespace)
 
If Err.Number &amp;lt;&amp;gt; 0 Then
    WScript.Echo "Error 0x" &amp;amp; hex(Err.Number) &amp;amp; " " &amp;amp; _
        Err.Description &amp;amp; ". " &amp;amp; VbCrLf &amp;amp; _
            "Unable to connect to WMI. WMI may not be installed."
    Err.Clear
    WScript.Quit
End If
   
 

intOSVer = GetOSVer
blnWSHUpToDate = GetWSHVer(intOSVer, strWshHost)
blnWMIUpToDate = GetWMIVer(intOSVer)
blnADSIUpToDate = GetADSIVer(intOSVer)
 
ListUpToDate blnWSHUpToDate, blnWMIUpToDate, blnADSIUpToDate
 

Function GetWshHost()
 
   strErrorMessage = "Could not determine default script host."
   strFullName = WScript.FullName
 
    If Err.Number &amp;lt;&amp;gt; 0 Then
        WScript.Echo "Error 0x" &amp;amp; hex(Err.Number) &amp;amp; " " &amp;amp; _
            Err.Description &amp;amp; ". " &amp;amp; VbCrLf &amp;amp; strErrorMessage
        Err.Clear
        Exit Function
    End If
   
    If IsNull(strFullName) Then
        WScript.Echo strErrorMessage
        Exit Function
   End If
 
    strWshHost = Right(LCase(strFullName), 11)
    If Not((strWshHost = "wscript.exe") Or  (strWshHost = "cscript.exe")) Then
        WScript.Echo strErrorMessage
        Exit Function
    End If
   
   GetWshHost = strWshHost
 
End Function
 
Sub ChangeToCscript(strWshHost)
 
 
   If strWshHost = "wscript.exe" Then
      Set objShell = CreateObject("WScript.Shell")
          objShell.Run _
              "%comspec% /k ""cscript //h:cscript&amp;amp;&amp;amp;cscript scriptenv.vbs""", _
                  MAXIMIZE_WINDOW
       If Err.Number &amp;lt;&amp;gt; 0 Then
           WScript.Echo "Error 0x" &amp;amp; hex(Err.Number) &amp;amp; " occurred. " &amp;amp; _
           Err.Description &amp;amp; ". " &amp;amp; VbCrLf &amp;amp; _
               "Could not change the default script host to Cscript."
           Err.Clear
           WScript.Quit
       End If
       WScript.Quit
    End If
 
End Sub
 

Function GetOSVer()
 
    intOSType = 0
    intOSVer = 0
    strOSVer = ""
 
    Set colOperatingSystems = objWMIService.ExecQuery _
      ("Select * from Win32_OperatingSystem")
 
    For Each objOperatingSystem In colOperatingSystems
        Wscript.Echo vbCrLf &amp;amp; "Operating System" &amp;amp; vbCrLf &amp;amp; _
            "================" &amp;amp; vbCrLf &amp;amp; _
            "Caption:           " &amp;amp; objOperatingSystem.Caption &amp;amp; VbCrLf &amp;amp; _
            "OSType:            " &amp;amp; objOperatingSystem.OSType &amp;amp; VbCrLf &amp;amp; _
            "Version:           " &amp;amp; objOperatingSystem.Version &amp;amp; VbCrLf &amp;amp; _
            "Service Pack:      " &amp;amp; _
            objOperatingSystem.ServicePackMajorVersion &amp;amp; _
                "." &amp;amp; objOperatingSystem.ServicePackMinorVersion &amp;amp; VbCrLf &amp;amp; _
                    "Windows Directory: " &amp;amp; _
                        objOperatingSystem.WindowsDirectory &amp;amp; VbCrLf
            intOSType = objOperatingSystem.OSType
            strOSVer = Left(objOperatingSystem.Version, 3)
    Next
 
    Select Case intOSType
        Case 16 'Windows 95
            intOSVer = 1
        Case 17 'Windows 98
            intOSVer = 2
        Case 18
         Select Case strOSVer
             Case 4.0
                 intOSVer = 4 'Windows NT 4.0
             Case 5.0
                 intOSVer = 5 'Windows 2000
             Case 5.1
                 intOSVer = 6 'Windows XP
             Case 5.2
                 intOSVer = 7 'Windows Server 2003
                Case Else
                    intOSVer = 0 'Older or newer version
                End Select
       Case Else
            intOSVer = 0 'Older or newer version
    End Select
 
    GetOSVer = intOSVer
      
End Function
 
 
Function GetWSHVer(intOSVer, strWshHost)
 
    Wscript.Echo "Windows Script Host" &amp;amp; vbCrLf &amp;amp; _
                 "==================="
 
If Not strWshHost = "" Then
    strVersion = WScript.Version
    strBuild = WScript.BuildVersion
    Wscript.Echo _
      "WSH Default Script Host: " &amp;amp; strWshHost &amp;amp; VbCrLf &amp;amp; _
      "WSH Path:                " &amp;amp; WScript.FullName &amp;amp; VbCrLf &amp;amp; _
      "WSH Version &amp;amp; Build:     " &amp;amp; strVersion &amp;amp; "." &amp;amp; strBuild &amp;amp; VbCrLf
Else
      Wscript.Echo "WSH information cannot be retrieved."
End If
     
    sngWSHVer = CSng(strVersion)
    intBuild = CInt(strBuild)
 
    If (sngWSHVer &amp;gt;= 5.6 And intBuild &amp;gt;= 8515) Then
        GetWSHVer = True
   Else
       GetWSHVer = False
    End If
 
End Function
 

Function GetWMIVer(intOSVer)
 
    dblBuildVersion = 0
 
    If (intOSVer &amp;gt;= 1 And intOSVer &amp;lt;= 5) Then
        strWmiVer = "1.5"
    ElseIf intOSVer = 6 Then
        strWmiVer = "5.1"
    ElseIf intOSVer = 7 Then
        strWmiVer = "5.2"
    Else
        strWmiVer = "?.?"
    End If
 
    Set colWMISettings = objWMIService.ExecQuery _
      ("Select * from Win32_WMISetting")
 
    For Each objWMISetting In colWMISettings
        Wscript.Echo "Windows Management Instrumentation" &amp;amp; vbCrLf &amp;amp; _
                     "==================================" &amp;amp; vbCrLf &amp;amp; _
          "WMI Version &amp;amp; Build:         " &amp;amp; _
          strWmiVer &amp;amp; "." &amp;amp; objWMISetting.BuildVersion &amp;amp; vbCrLf &amp;amp; _
          "Default scripting namespace: " &amp;amp; _
          objWMISetting.ASPScriptDefaultNamespace &amp;amp; vbCrLf
        dblBuildVersion = CDbl(objWMISetting.BuildVersion)
    Next
 
    If (intOSVer = 7 And dblBuildVersion &amp;gt;= 3790.0000) Or _
      (intOSVer = 6 And dblBuildVersion &amp;gt;= 2600.0000) Or _
      (intOSVer &amp;lt;= 5 And dblBuildVersion &amp;gt;= 1085.0005) _
      Then
        GetWMIVer = True
     Else
          GetWMIVer = False
    End If
 
End Function
 
Function GetADSIVer(intOSVer)
 
    Wscript.Echo "Active Directory Service Interfaces" &amp;amp; VbCrLf &amp;amp; _
                 "===================================" &amp;amp; vbCrLf
 
    Set objShell = CreateObject("WScript.Shell")
    strAdsiVer = _
    objShell.RegRead("HKLM\SOFTWARE\Microsoft\Active Setup\Installed " &amp;amp; _
        "Components\{E92B03AB-B707-11d2-9CBD-0000F87A369E}\Version")
 
    If strAdsiVer = vbEmpty Then
        strAdsiVer = _
            objShell.RegRead("HKLM\SOFTWARE\Microsoft\ADs\Providers\LDAP")
        If strAdsiVer = vbEmpty Then
            strAdsiVer = "ADSI is not installed."
        Else
            strAdsiVer = "2.0"
        End If
    ElseIf Left(strAdsiVer, 3) = "5,0" Then
      If intOSVer = 5 Then
          strAdsiVer = "5.0.2195"
      ElseIf intOSVer = 6 Then
          strAdsiVer = "5.1.2600"
      ElseIf intOSVer = 7 Then
          strAdsiVer = "5.2.3790"
        Else
            strAdsiVer = "?.?"
      End If
    End If
 
    WScript.Echo "ADSI Version &amp;amp; Build: " &amp;amp; strAdsiVer &amp;amp; VbCrLf
 
    If strAdsiVer &amp;lt;&amp;gt; "ADSI is not installed." Then
        Set colProvider = GetObject("ADs:")
        Wscript.Echo "ADSI Providers" &amp;amp; VbCrLf &amp;amp; _
                 "--------------"
        For Each objProvider In colProvider
            Wscript.Echo objProvider.Name
        Next
        Wscript.Echo
   End If
   
   intAdsiVer = CInt(Left(strAdsiVer, 1))
   
    If (intOSVer = 7 And intAdsiVer &amp;gt;= 5) Or _
        (intOSVer = 6 And intAdsiVer &amp;gt;= 5) Or _
        (intOSVer = 5 And intAdsiVer &amp;gt;= 5) Or _
        (intOSVer = 4 And intAdsiVer &amp;gt;= 2) Or _
        (intOSVer &amp;lt;= 3 And intAdsiVer &amp;gt;= 2) _
            Then
        GetADSIVer = True
    Else
        GetADSIVer = False
    End If
 
End Function
 
Sub ListUpToDate(blnWSHUpToDate, blnWMIUpToDate, blnADSIUpToDate)
 
    Wscript.Echo "Current Versions" &amp;amp; vbCrLf &amp;amp; _
                 "================"
 
    If blnWSHUpToDate Then
        WScript.Echo "WSH version:  most recent for OS version."
    Else
        WScript.Echo "WSH version:  not most recent for OS version."
        If intOSVer = 0 Then
            WScript.Echo "Windows Script not available for this OS"
        Else
            WScript.Echo "Get Windows Script 5.6, Build 8515"
        End If
    End If
 
    If blnWMIUpToDate Then
        WScript.Echo "WMI version:  most recent for OS version."
    Else
        WScript.Echo "WMI version:  not most recent for OS version."
        If intOSVer = 0 Then
            WScript.Echo "WMI not available for this OS"
        ElseIf intOSVer &amp;gt;= 1 And intOSVer &amp;lt;= 4 Then
            WScript.Echo "Get WMI CORE 1.5"
        Else
        End If
    End If
 
    If blnADSIUpToDate Then
        WScript.Echo "ADSI version: most recent for OS version."
    Else
        WScript.Echo "ADSI version: not most recent for OS version."
        If intOSVer = 0 Then
            WScript.Echo "ADSI not available for this OS"
        ElseIf intOSVer &amp;gt;= 1 And intOSVer &amp;lt;= 4 Then
            WScript.Echo "Get Active Directory Client Extensions"
        Else
        End If
    End If
 
End Sub
</vb></dd>
	</dd>
	<dd name="Group Policy" code="policy" desc="Sample scripts for retrieving information regarding Group Policy Objects applied to a user or computer account.">
		<vb name="Enumerating Resultant Set of Policy Scopes of Management" n="336">' Enumerating Resultant Set of Policy Scopes of Management


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\rsop\computer")

Set colItems = objWMIService.ExecQuery("Select * from RSOP_SOM")

For Each objItem in colItems
    Wscript.Echo "ID: " &amp;amp; objItem.ID
    Wscript.Echo "Blocked: " &amp;amp; objItem.Blocked
    Wscript.Echo "Blocking: " &amp;amp; objItem.Blocking
    Wscript.Echo "Reason: " &amp;amp; objItem.Reason
    Wscript.Echo "SOM Order: " &amp;amp; objItem.SOMOrder
    Wscript.Echo "Type: " &amp;amp; objItem.Type
    Wscript.Echo
Next
</vb><vb name="Enumerating Resultant Set of Policy Security Event Log Settings -- Boolean" n="337">' Enumerating Resultant Set of Policy Security Event Log Settings -- Boolean


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\rsop\computer")

Set colItems = objWMIService.ExecQuery _
    ("Select * from RSOP_SecurityEventLogSettingBoolean")

For Each objItem in colItems
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Precedence: " &amp;amp; objItem.Precedence
    Wscript.Echo "Setting: " &amp;amp; objItem.Setting
    Wscript.Echo "Type: " &amp;amp; objItem.Type
    Wscript.Echo
Next
</vb><vb name="Enumerating Resultant Set of Policy Security Event Log Settings -- Numeric" n="338">' Enumerating Resultant Set of Policy Security Event Log Settings -- Numeric


Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\rsop\computer")

Set colItems = objWMIService.ExecQuery _
    ("Select * from RSOP_SecurityEventLogSettingNumeric")

For Each objItem in colItems
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Precedence: " &amp;amp; objItem.Precedence
    Wscript.Echo "Setting: " &amp;amp; objItem.Setting
    Wscript.Echo "Type: " &amp;amp; objItem.Type
    Wscript.Echo
Next
</vb><vb name="Enumerating Resultant Set of Policy Security Settings -- Boolean" n="339">' Enumerating Resultant Set of Policy Security Settings -- Boolean


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\rsop\computer")

Set colItems = objWMIService.ExecQuery _
    ("Select * from RSOP_SecuritySettingBoolean")

For Each objItem in colItems
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Precedence: " &amp;amp; objItem.Precedence
    Wscript.Echo "Setting: " &amp;amp; objItem.Setting
    Wscript.Echo
Next
</vb><vb name="Enumerating Resultant Set of Policy Security Settings -- Numeric" n="340">' Enumerating Resultant Set of Policy Security Settings -- Numeric


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\rsop\computer")

Set colItems = objWMIService.ExecQuery _
    ("Select * from RSOP_SecuritySettingNumeric")

For Each objItem in colItems
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Precedence: " &amp;amp; objItem.Precedence
    Wscript.Echo "Setting: " &amp;amp; objItem.Setting
    Wscript.Echo
Next
</vb><vb name="Enumerating Resultant Set of Policy System Services" n="341">' Enumerating Resultant Set of Policy System Services


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\rsop\computer")

Set colItems = objWMIService.ExecQuery("Select * from RSOP_SystemService")

For Each objItem in colItems
    Wscript.Echo "Service: " &amp;amp; objItem.Service
    Wscript.Echo "Precedence: " &amp;amp; objItem.Precedence
    Wscript.Echo "SDDL String: " &amp;amp; objItem.SDDLString
    Wscript.Echo "Startup Mode: " &amp;amp; objItem.StartupMode
    Wscript.Echo
Next
</vb><vb name="List Resultant Set of Policy Administrative Template Files" n="342">' List Resultant Set of Policy Administrative Template Files


Set dtmConvertedDate = CreateObject("WbemScripting.SWbemDateTime")
 
strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\rsop\computer")

Set colItems = objWMIService.ExecQuery _
    ("Select * from RSOP_AdministrativeTemplateFile")

For Each objItem in colItems  
    Wscript.Echo "GPO ID: " &amp;amp; objItem.GPOID
    dtmConvertedDate.Value = objItem.LastWriteTime
    dtmCreationTime = dtmConvertedDate.GetVarDate
    Wscript.Echo "Last Write Time: " &amp;amp; dtmCreationTime 
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo
Next
</vb><vb name="List Resultant Set of Policy Audit Policies" n="343">' List Resultant Set of Policy Audit Policies


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\rsop\computer")

Set colItems = objWMIService.ExecQuery("Select * from RSOP_AuditPolicy")

For Each objItem in colItems  
    Wscript.Echo "Category: " &amp;amp; objItem.Category
    Wscript.Echo "Precedence: " &amp;amp; objItem.Precedence
    Wscript.Echo "Failure: " &amp;amp; objItem.Failure
    Wscript.Echo "Success: " &amp;amp; objItem.Success
    Wscript.Echo
Next
</vb><vb name="List Resultant Set of Policy GPOs" n="344">' List Resultant Set of Policy GPOs


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\rsop\computer")

Set colItems = objWMIService.ExecQuery("Select * from RSOP_GPO")

For Each objItem in colItems  
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "GUID Name: " &amp;amp; objItem.GUIDName
    Wscript.Echo "ID: " &amp;amp; objItem.ID
    Wscript.Echo "Access Denied: " &amp;amp; objItem.AccessDenied
    Wscript.Echo "Enabled: " &amp;amp; objItem.Enabled
    Wscript.Echo "File System path: " &amp;amp; objItem.FileSystemPath
    Wscript.Echo "Filter Allowed: " &amp;amp; objItem.FilterAllowed
    Wscript.Echo "Filter ID: " &amp;amp; objItem.FilterId
    Wscript.Echo "Version: " &amp;amp; objItem.Version
    Wscript.Echo
Next
</vb><vb name="List Resultant Set of Policy Group Policy Extension Status" n="345">' List Resultant Set of Policy Group Policy Extension Status


On Error Resume Next
Set dtmConvertedDate = CreateObject("WbemScripting.SWbemDateTime")
 
strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\rsop\computer")

Set colItems = objWMIService.ExecQuery("Select * from RSOP_ExtensionStatus")

For Each objItem in colItems  
    Wscript.Echo "Display name: " &amp;amp; objItem.DisplayName
    dtmConvertedDate.Value = objItem.BeginTime
    dtmTime = dtmConvertedDate.GetVarDate
    Wscript.Echo "Begin time: " &amp;amp; dtmTime
    dtmConvertedDate.Value = objItem.EndTime
    dtmTime = dtmConvertedDate.GetVarDate
    Wscript.Echo "End time: " &amp;amp; dtmTime
    Wscript.Echo "Error: " &amp;amp; objItem.Error
    Wscript.Echo "Extension GUID: " &amp;amp; objItem.ExtensionGuid
    Wscript.Echo "Logging Status: " &amp;amp; objItem.LoggingStatus
    Wscript.Echo
Next
</vb><vb name="List Resultant Set of Policy Group Policy Links" n="346">' List Resultant Set of Policy Group Policy Links


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\rsop\computer")

Set colItems = objWMIService.ExecQuery("Select * from RSOP_GPLink")

For Each objItem in colItems
    Wscript.Echo "GPO: " &amp;amp; objItem.GPO
    Wscript.Echo "Applied Order: " &amp;amp; objItem.AppliedOrder
    Wscript.Echo "Enabled: " &amp;amp; objItem.Enabled
    Wscript.Echo "Link Order: " &amp;amp; objItem.LinkOrder
    Wscript.Echo "No Overrride: " &amp;amp; objItem.NoOverride
    Wscript.Echo "SOM Order: " &amp;amp; objItem.SOMOrder
    Wscript.Echo
Next
</vb><vb name="List Resultant Set of Policy Policy Settings" n="347">' List Resultant Set of Policy Policy Settings


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\rsop\computer")

Set colItems = objWMIService.ExecQuery("Select * from RSOP_PolicySetting")

For Each objItem in colItems
    Wscript.Echo "GPO ID: " &amp;amp; objItem.GPOID
    Wscript.Echo "ID: " &amp;amp; objItem.ID
    Wscript.Echo "Precedence: " &amp;amp; objItem.Precedence
    Wscript.Echo "SOM ID: " &amp;amp; objItem.SOMID
    Wscript.Echo
Next
</vb><vb name="List Resultant Set of Policy User Privilege Rights" n="348">' List Resultant Set of Policy User Privilege Rights


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\rsop\computer")

Set colItems = objWMIService.ExecQuery("Select * from RSOP_UserPrivilegeRight")

For Each objItem in colItems
    For Each strAccountList in objItem.AccountList
        Wscript.Echo "Account list: " &amp;amp; strAccountList
    Next
    Wscript.Echo "Precedence: " &amp;amp; objItem.Precedence
    Wscript.Echo "User Right: " &amp;amp; objItem.UserRight
    Wscript.Echo
Next
</vb><vb name="List RSOP Application Management Policy Settings" n="349">' List RSOP Application Management Policy Settings


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\rsop\computer")

Set colItems = objWMIService.ExecQuery _
    ("Select * from RSOP_ApplicationManagementPolicySetting")

For Each objItem in colItems  
    Wscript.Echo "Allow X86 on IA64: " &amp;amp; objItem.AllowX86OnIA64
    Wscript.Echo "Application ID: " &amp;amp; objItem.ApplicationId
    Wscript.Echo "Apply Cause: " &amp;amp; objItem.ApplyCause
    Wscript.Echo "Assignment Type: " &amp;amp; objItem.AssignmentType
    Wscript.Echo "Categories: " &amp;amp; objItem.Categories
    Wscript.Echo "Demand Installable: " &amp;amp; objItem.DemandInstallable
    Wscript.Echo "Deployment Last Modify Time: " &amp;amp; _
        objItem.DeploymentLastModifyTime
    Wscript.Echo "Deployment Type: " &amp;amp; objItem.DeploymentType
    Wscript.Echo "Display in Add/Remove Programs: " &amp;amp; objItem.DisplayInARP
    Wscript.Echo "Eligibility: " &amp;amp; objItem.Eligibility
    Wscript.Echo "Entry Type: " &amp;amp; objItem.EntryType
    Wscript.Echo "ID: " &amp;amp; objItem.ID
    Wscript.Echo "Ignore Language: " &amp;amp; objItem.IgnoreLanguage
    Wscript.Echo "Installation UI: " &amp;amp; objItem.InstallationUI
    Wscript.Echo "Language ID: " &amp;amp; objItem.LanguageId
    Wscript.Echo "Language Match: " &amp;amp; objItem.LanguageMatch
    Wscript.Echo "Loss of Scope Action: " &amp;amp; objItem.LossOfScopeAction
    For Each strArchitecture in objItem.MachineArchitectures
        Wscript.Echo "Machine Architecture: " &amp;amp; strArchitecture
    Next
    Wscript.Echo "On-demand CLSID: " &amp;amp; objItem.OnDemandClsid
    Wscript.Echo "On-demand File Extension: " &amp;amp; objItem.OnDemandFileExtension
    Wscript.Echo "On-demand ProgID: " &amp;amp; objItem.OnDemandProgId
    Wscript.Echo "Package Location: " &amp;amp; objItem.PackageLocation
    Wscript.Echo "Package Type: " &amp;amp; objItem.PackageType
    Wscript.Echo "Precedence: " &amp;amp; objItem.Precedence
    Wscript.Echo "Precedence Reason: " &amp;amp; objItem.PrecedenceReason
    Wscript.Echo "Product ID: " &amp;amp; objItem.ProductId
    Wscript.Echo "Publisher: " &amp;amp; objItem.Publisher
    Wscript.Echo "Redeploy Count: " &amp;amp; objItem.RedeployCount
    Wscript.Echo "Removal Cause: " &amp;amp; objItem.RemovalCause
    Wscript.Echo "Removal Type: " &amp;amp; objItem.RemovalType
    Wscript.Echo "Removing Application: " &amp;amp; objItem.RemovingApplication
    Wscript.Echo "Replaceable Applications: " &amp;amp; objItem.ReplaceableApplications
    Wscript.Echo "Script File: " &amp;amp; objItem.ScriptFile
    Wscript.Echo "Support URL: " &amp;amp; objItem.SupportURL
    Wscript.Echo "Transforms: " &amp;amp; objItem.Transforms
    Wscript.Echo "Uninstall Unmanaged: " &amp;amp; objItem.UninstallUnmanaged
    Wscript.Echo "Upgradeable Applications: " &amp;amp; objItem.UpgradeableApplications
    Wscript.Echo "Upgrade Settings Mandatory: " &amp;amp; _
        objItem.UpgradeSettingsMandatory
    Wscript.Echo "Version Number (High): " &amp;amp; objItem.VersionNumberHi
    Wscript.Echo "Version Number (Low): " &amp;amp; objItem.VersionNumberLo
    Wscript.Echo
Next
</vb><vb name="List RSOP Sessions" n="350">' List RSOP Sessions


Set dtmConvertedDate = CreateObject("WbemScripting.SWbemDateTime")
 
strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\rsop\computer")

Set colItems = objWMIService.ExecQuery("Select * from RSOP_Session")

For Each objItem in colItems
    Wscript.Echo "ID: " &amp;amp; objItem.ID
    dtmConvertedDate.Value = objItem.CreationTime
    dtmTime = dtmConvertedDate.GetVarDate
    Wscript.Echo "Creation Time: " &amp;amp; dtmTime 
    Wscript.Echo "Flags: " &amp;amp; objItem.Flags
    For Each strSecurityGroup in objItem.SecurityGroups
        Wscript.Echo "Security group: " &amp;amp; strSecurityGroup
    Next
    Wscript.Echo "Site: " &amp;amp; objItem.Site
    Wscript.Echo "Slow Link: " &amp;amp; objItem.SlowLink
    Wscript.Echo "SOM: " &amp;amp; objItem.SOM
    Wscript.Echo "Target Name: " &amp;amp; objItem.TargetName
    Wscript.Echo "TTL (Minutes): " &amp;amp; objItem.TTLMinutes
    Wscript.Echo "Version: " &amp;amp; objItem.Version
    Wscript.Echo
Next
</vb></dd>
	<dd name="Computer Hardware" code="Hardware" desc="Sample scripts for managing and monitoring computer hardware.">
		<dd name="Basic Hardware and Firmware" code="basic" desc="Sample scripts for retrieving information about the hardware and firmware installed on a computer."><vb name="Enumerating IRQ Settings" n="351">' Enumerating IRQ Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_IRQResource")

For Each objItem in colItems
    Wscript.Echo "Availability: " &amp;amp; objItem.Availability
    Wscript.Echo "Hardware: " &amp;amp; objItem.Hardware
    Wscript.Echo "IRQ Number: " &amp;amp; objItem.IRQNumber
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Trigger Level: " &amp;amp; objItem.TriggerLevel
    Wscript.Echo "Trigger Type: " &amp;amp; objItem.TriggerType
    Wscript.Echo
Next
</vb><vb name="Enumerating Onboard Devices" n="352">' Enumerating Onboard Devices


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_OnBoardDevice")

For Each objItem in colItems
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device Type: " &amp;amp; objItem.DeviceType
    Wscript.Echo "Model: " &amp;amp; objItem.Model
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Tag: " &amp;amp; objItem.Tag
    Wscript.Echo "Version: " &amp;amp; objItem.Version
    Wscript.Echo
Next
</vb><vb name="Enumerating Processor Information" n="353">' Enumerating Processor Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_Processor")

For Each objItem in colItems
    Wscript.Echo "Address Width: " &amp;amp; objItem.AddressWidth
    Wscript.Echo "Architecture: " &amp;amp; objItem.Architecture
    Wscript.Echo "Availability: " &amp;amp; objItem.Availability
    Wscript.Echo "CPU Status: " &amp;amp; objItem.CpuStatus
    Wscript.Echo "Current Clock Speed: " &amp;amp; objItem.CurrentClockSpeed
    Wscript.Echo "Data Width: " &amp;amp; objItem.DataWidth
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "External Clock: " &amp;amp; objItem.ExtClock
    Wscript.Echo "Family: " &amp;amp; objItem.Family
    Wscript.Echo "L2 Cache Size: " &amp;amp; objItem.L2CacheSize
    Wscript.Echo "L2 Cache Speed: " &amp;amp; objItem.L2CacheSpeed
    Wscript.Echo "Level: " &amp;amp; objItem.Level
    Wscript.Echo "Load Percentage: " &amp;amp; objItem.LoadPercentage
    Wscript.Echo "Manufacturer: " &amp;amp; objItem.Manufacturer
    Wscript.Echo "Maximum Clock Speed: " &amp;amp; objItem.MaxClockSpeed
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "PNP Device ID: " &amp;amp; objItem.PNPDeviceID
    Wscript.Echo "Processor ID: " &amp;amp; objItem.ProcessorId
    Wscript.Echo "Processor Type: " &amp;amp; objItem.ProcessorType
    Wscript.Echo "Revision: " &amp;amp; objItem.Revision
    Wscript.Echo "Role: " &amp;amp; objItem.Role
    Wscript.Echo "Socket Designation: " &amp;amp; objItem.SocketDesignation
    Wscript.Echo "Status Information: " &amp;amp; objItem.StatusInfo
    Wscript.Echo "Stepping: " &amp;amp; objItem.Stepping
    Wscript.Echo "Unique Id: " &amp;amp; objItem.UniqueId
    Wscript.Echo "Upgrade Method: " &amp;amp; objItem.UpgradeMethod
    Wscript.Echo "Version: " &amp;amp; objItem.Version
    Wscript.Echo "Voltage Caps: " &amp;amp; objItem.VoltageCaps
Next
</vb><vb name="Identifying Computer Chassis Type" n="354">' Identifying Computer Chassis Type


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colChassis = objWMIService.ExecQuery _
    ("Select * from Win32_SystemEnclosure")

For Each objChassis in colChassis
    For i = Lbound(objChassis.ChassisTypes) to Ubound(objChassis.ChassisTypes)
        Wscript.Echo objChassis.ChassisTypes(i)
    Next
Next
</vb><vb name="Identifying Processor Type" n="355">' Identifying Processor Type


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colProcessors = objWMIService.ExecQuery _
    ("Select * From Win32_Processor")
 
For Each objProcessor in colProcessors
    If objProcessor.Architecture = 0 Then
        Wscript.Echo "This is an x86 computer."
    ElseIf objProcessor.Architecture = 1 Then
        Wscript.Echo "This is a MIPS computer."
    ElseIf objProcessor.Architecture = 2 Then
        Wscript.Echo "This is an Alpha computer."
    ElseIf objProcessor.Architecture = 3 Then
        Wscript.Echo "This is a PowerPC computer."
    ElseIf objProcessor.Architecture = 6 Then
        Wscript.Echo "This is an ia64 computer."
    Else
        Wcript.Echo "The computer type could not be determined."
    End If
Next
</vb><vb name="List Computer Baseboard Properties" n="356">' List Computer Baseboard Properties


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_BaseBoard")

For Each objItem in colItems
    For Each strOption in objItem.ConfigOptions
        Wscript.Echo "Configuration Option: " &amp;amp; strOption
    Next
    Wscript.Echo "Depth: " &amp;amp; objItem.Depth
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Height: " &amp;amp; objItem.Height
    Wscript.Echo "Hosting Board: " &amp;amp; objItem.HostingBoard
    Wscript.Echo "Hot Swappable: " &amp;amp; objItem.HotSwappable
    Wscript.Echo "Manufacturer: " &amp;amp; objItem.Manufacturer
    Wscript.Echo "Model: " &amp;amp; objItem.Model
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Other Identifying Information: " &amp;amp; _
        objItem.OtherIdentifyingInfo
    Wscript.Echo "Part Number: " &amp;amp; objItem.PartNumber
    Wscript.Echo "Powered-On: " &amp;amp; objItem.PoweredOn
    Wscript.Echo "Product: " &amp;amp; objItem.Product
    Wscript.Echo "Removable: " &amp;amp; objItem.Removable
    Wscript.Echo "Replaceable: " &amp;amp; objItem.Replaceable
    Wscript.Echo "Requirements Description: " &amp;amp; objItem.RequirementsDescription
    Wscript.Echo "Requires Daughterboard: " &amp;amp; objItem.RequiresDaughterBoard
    Wscript.Echo "Serial Number: " &amp;amp; objItem.SerialNumber
    Wscript.Echo "SKU: " &amp;amp; objItem.SKU
    Wscript.Echo "Slot Layout: " &amp;amp; objItem.SlotLayout
    Wscript.Echo "Special Requirements: " &amp;amp; objItem.SpecialRequirements
    Wscript.Echo "Tag: " &amp;amp; objItem.Tag
    Wscript.Echo "Version: " &amp;amp; objItem.Version
    Wscript.Echo "Weight: " &amp;amp; objItem.Weight
    Wscript.Echo "Width: " &amp;amp; objItem.Width
Next
</vb><vb name="List Computer Bus Properties" n="357">' List Computer Bus Properties


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_Bus")

For Each objItem in colItems
    Wscript.Echo "Bus Number: " &amp;amp; objItem.BusNum
    Wscript.Echo "Bus Type: " &amp;amp; objItem.BusType
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "PNP Device ID: " &amp;amp; objItem.PNPDeviceID
Next
</vb><vb name="List Motherboard Device Information" n="358">' List Motherboard Device Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_MotherboardDevice")

For Each objItem in colItems
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Primary Bus Type: " &amp;amp; objItem.PrimaryBusType
    Wscript.Echo "Secondary Bus Type: " &amp;amp; objItem.SecondaryBusType
    Wscript.Echo
Next
</vb><vb name="List SMBIOS Information" n="359">' List SMBIOS Information


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colSMBIOS = objWMIService.ExecQuery _
    ("Select * from Win32_SystemEnclosure")

For Each objSMBIOS in colSMBIOS
    Wscript.Echo "Part Number: " &amp;amp; objSMBIOS.PartNumber
    Wscript.Echo "Serial Number: " &amp;amp; objSMBIOS.SerialNumber
    Wscript.Echo "Asset Tag: " &amp;amp; objSMBIOS.SMBIOSAssetTag
Next
</vb><vb name="Retrieving BIOS Information" n="360">' Retrieving BIOS Information


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colBIOS = objWMIService.ExecQuery _
    ("Select * from Win32_BIOS")

For each objBIOS in colBIOS
    Wscript.Echo "Build Number: " &amp;amp; objBIOS.BuildNumber
    Wscript.Echo "Current Language: " &amp;amp; objBIOS.CurrentLanguage
    Wscript.Echo "Installable Languages: " &amp;amp; objBIOS.InstallableLanguages
    Wscript.Echo "Manufacturer: " &amp;amp; objBIOS.Manufacturer
    Wscript.Echo "Name: " &amp;amp; objBIOS.Name
    Wscript.Echo "Primary BIOS: " &amp;amp; objBIOS.PrimaryBIOS
    Wscript.Echo "Release Date: " &amp;amp; objBIOS.ReleaseDate
    Wscript.Echo "Serial Number: " &amp;amp; objBIOS.SerialNumber
    Wscript.Echo "SMBIOS Version: " &amp;amp; objBIOS.SMBIOSBIOSVersion
    Wscript.Echo "SMBIOS Major Version: " &amp;amp; objBIOS.SMBIOSMajorVersion
    Wscript.Echo "SMBIOS Minor Version: " &amp;amp; objBIOS.SMBIOSMinorVersion
    Wscript.Echo "SMBIOS Present: " &amp;amp; objBIOS.SMBIOSPresent
    Wscript.Echo "Status: " &amp;amp; objBIOS.Status
    Wscript.Echo "Version: " &amp;amp; objBIOS.Version
    For i = 0 to Ubound(objBIOS.BiosCharacteristics)
        Wscript.Echo "BIOS Characteristics: " &amp;amp; _
            objBIOS.BiosCharacteristics(i)
    Next
Next
</vb><vb name="Retrieving Computer Fan Information" n="361">' Retrieving Computer Fan Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_Fan")

For Each objItem in colItems
    Wscript.Echo "Active Cooling: " &amp;amp; objItem.ActiveCooling
    Wscript.Echo "Availability: " &amp;amp; objItem.Availability
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Status Information: " &amp;amp; objItem.StatusInfo
    Wscript.Echo
Next
</vb></dd>
		<dd name="Batteries and Power Supplies" code="power" desc="Sample scripts for retrieving information about batteries and power supplies installed in a computer."><vb name="List Battery Information" n="362">' List Battery Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_Battery")

For Each objItem in colItems
    Wscript.Echo "Availability: " &amp;amp; objItem.Availability
    Wscript.Echo "Battery Status: " &amp;amp; objItem.BatteryStatus
    Wscript.Echo "Chemistry: " &amp;amp; objItem.Chemistry
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Design Voltage: " &amp;amp; objItem.DesignVoltage
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Estimated Run Time: " &amp;amp; objItem.EstimatedRunTime
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Power Management Capabilities: "
    For Each objElement In objItem.PowerManagementCapabilities
        WScript.Echo vbTab &amp;amp; objElement
    Next
    Wscript.Echo "Power Management Supported: " &amp;amp; _
        objItem.PowerManagementSupported
    Wscript.Echo
Next
</vb><vb name="List Portable Battery Information" n="363">' List Portable Battery Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_PortableBattery")

For Each objItem in colItems
    Wscript.Echo "Capacity Multiplier: " &amp;amp; objItem.CapacityMultiplier
    Wscript.Echo "Chemistry: " &amp;amp; objItem.Chemistry
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Design Capacity: " &amp;amp; objItem.DesignCapacity
    Wscript.Echo "Design Voltage: " &amp;amp; objItem.DesignVoltage
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Location: " &amp;amp; objItem.Location
    dtmWMIDate = objItem.ManufactureDate
    strReturn = WMIDateStringToDate(dtmWMIDate)
    Wscript.Echo "Manufacture Date: " &amp;amp; strReturn
    Wscript.Echo "Manufacturer: " &amp;amp; objItem.Manufacturer
    Wscript.Echo "Maximum Battery Error: " &amp;amp; objItem.MaxBatteryError
    Wscript.Echo "Smart Battery Version: " &amp;amp; objItem.SmartBatteryVersion
    Wscript.Echo
Next
 
Function WMIDateStringToDate(dtmWMIDate)
    If Not IsNull(dtmWMIDate) Then
        WMIDateStringToDate = CDate(Mid(dtmWMIDate, 5, 2) &amp;amp; "/" &amp;amp; _
            Mid(dtmWMIDate, 7, 2) &amp;amp; "/" &amp;amp; Left(dtmWMIDate, 4) _
                &amp;amp; " " &amp;amp; Mid (dtmWMIDate, 9, 2) &amp;amp; ":" &amp;amp; _
                    Mid(dtmWMIDate, 11, 2) &amp;amp; ":" &amp;amp; Mid(dtmWMIDate,13, 2))
    End If
End Function
</vb></dd>
		<dd name="Memory" code="memory" desc="Sample scripts for retrieving information about the physical memory installed in a computer."><vb name="List Cache Memory Information" n="364">' List Cache Memory Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_CacheMemory")

For Each objItem in colItems
    Wscript.Echo "Access: " &amp;amp; objItem.Access
    Wscript.Echo "Additional Error Data: "
    For Each objElement In objItem.AdditionalErrorData
        WScript.Echo vbTab &amp;amp; objElement
    Next
    Wscript.Echo "Associativity: " &amp;amp; objItem.Associativity
    Wscript.Echo "Availability: " &amp;amp; objItem.Availability
    Wscript.Echo "Block Size: " &amp;amp; objItem.BlockSize
    Wscript.Echo "Cache Speed: " &amp;amp; objItem.CacheSpeed
    Wscript.Echo "Cache Type: " &amp;amp; objItem.CacheType
    Wscript.Echo "Current SRAM: "
    For Each objElement In objItem.CurrentSRAM
        WScript.Echo vbTab &amp;amp; objElement
    Next
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Error Correct Type: " &amp;amp; objItem.ErrorCorrectType
    Wscript.Echo "Installed Size: " &amp;amp; objItem.InstalledSize
    Wscript.Echo "Level: " &amp;amp; objItem.Level
    Wscript.Echo "Location: " &amp;amp; objItem.Location
    Wscript.Echo "Maximum Cache Size: " &amp;amp; objItem.MaxCacheSize
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Number Of Blocks: " &amp;amp; objItem.NumberOfBlocks
    Wscript.Echo "Status Information: " &amp;amp; objItem.StatusInfo
    Wscript.Echo "Supported SRAM: "
    For Each objElement In objItem.SupportedSRAM
        WScript.Echo vbTab &amp;amp; objElement
    Next
    Wscript.Echo "Write Policy: " &amp;amp; objItem.WritePolicy
    Wscript.Echo
Next
</vb><vb name="List Device Memory Addresses" n="365">' List Device Memory Addresses


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_DeviceMemoryAddress")

For Each objItem in colItems
    Wscript.Echo "Ending Address: " &amp;amp; objItem.EndingAddress
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Starting Address: " &amp;amp; objItem.StartingAddress
    Wscript.Echo
Next
</vb><vb name="List DMA Channel Information" n="366">' List DMA Channel Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_DMAChannel")

For Each objItem in colItems
    Wscript.Echo "Address Size: " &amp;amp; objItem.AddressSize
    Wscript.Echo "Availability: " &amp;amp; objItem.Availability
    Wscript.Echo "Byte Mode: " &amp;amp; objItem.ByteMode
    Wscript.Echo "Channel Timing: " &amp;amp; objItem.ChannelTiming
    Wscript.Echo "DMA Channel: " &amp;amp; objItem.DMAChannel
    Wscript.Echo "Maximum Transfer Size: " &amp;amp; objItem.MaxTransferSize
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Type C Timing: " &amp;amp; objItem.TypeCTiming
    Wscript.Echo "Word Mode: " &amp;amp; objItem.WordMode
    Wscript.Echo
Next
</vb><vb name="List Memory Array Information" n="367">' List Memory Array Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_MemoryArray")

For Each objItem in colItems
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Ending Address: " &amp;amp; objItem.EndingAddress
    Wscript.Echo "Starting Address: " &amp;amp; objItem.StartingAddress
    Wscript.Echo
Next
</vb><vb name="List Memory Devices" n="368">' List Memory Devices


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_MemoryDevice")

For Each objItem in colItems
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Ending Address: " &amp;amp; objItem.EndingAddress
    Wscript.Echo "Starting Address: " &amp;amp; objItem.StartingAddress
    Wscript.Echo
Next
</vb><vb name="List Physical Memory Properties" n="369">' List Physical Memory Properties


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_PhysicalMemoryArray")

For Each objItem in colItems
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Maximum Capacity: " &amp;amp; objItem.MaxCapacity
    Wscript.Echo "Memory Devices: " &amp;amp; objItem.MemoryDevices
    Wscript.Echo "Memory Error Correction: " &amp;amp; objItem.MemoryErrorCorrection
Next
</vb><vb name="List the Physical Memory Configuration" n="370">' List the Physical Memory Configuration


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_PhysicalMemory")

For Each objItem in colItems
    Wscript.Echo "Bank Label: " &amp;amp; objItem.BankLabel
    Wscript.Echo "Capacity: " &amp;amp; objItem.Capacity
    Wscript.Echo "Data Width: " &amp;amp; objItem.DataWidth
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device Locator: " &amp;amp; objItem.DeviceLocator
    Wscript.Echo "Form Factor: " &amp;amp; objItem.FormFactor
    Wscript.Echo "Hot Swappable: " &amp;amp; objItem.HotSwappable
    Wscript.Echo "Manufacturer: " &amp;amp; objItem.Manufacturer
    Wscript.Echo "Memory Type: " &amp;amp; objItem.MemoryType
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Part Number: " &amp;amp; objItem.PartNumber
    Wscript.Echo "Position In Row: " &amp;amp; objItem.PositionInRow
    Wscript.Echo "Speed: " &amp;amp; objItem.Speed
    Wscript.Echo "Tag: " &amp;amp; objItem.Tag
    Wscript.Echo "Type Detail: " &amp;amp; objItem.TypeDetail
Next
</vb></dd>
		<dd name="Monitoring" code="monitor" desc="Sample scripts for monitoring computer hardware devices."><vb name="Monitor Available Memory" n="371">' Monitor Available Memory


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set objMemory = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PerfOS_Memory").objectSet
objRefresher.Refresh

Do
    For Each intAvailableBytes in objMemory
        If intAvailableBytes.AvailableMBytes &amp;lt; 4 Then
            Wscript.Echo "Available memory has fallen below 4 megabytes."
        End If
    Next
    objRefresher.Refresh
Loop
</vb><vb name="Monitor Cache Performance" n="372">' Monitor Cache Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PerfOS_Cache").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Asynchronous Copy Reads Per Second: " &amp;amp; _
            objItem.AsyncCopyReadsPersec
        Wscript.Echo "Asynchronous Data Maps Per Second: " &amp;amp; _
            objItem.AsyncDataMapsPersec
        Wscript.Echo "Asynchronous Fast Reads Per Second: " &amp;amp; _
            objItem.AsyncFastReadsPersec
        Wscript.Echo "Asynchronous MDL Reads Per Second: " &amp;amp; _
            objItem.AsyncMDLReadsPersec
        Wscript.Echo "Asynchronous Pin Reads Per Second: " &amp;amp; _
            objItem.AsyncPinReadsPersec
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Copy Read Hits Percent: " &amp;amp; objItem.CopyReadHitsPercent
        Wscript.Echo "Copy Reads Per Second: " &amp;amp; objItem.CopyReadsPersec
        Wscript.Echo "Data Flushes Per Second: " &amp;amp; objItem.DataFlushesPersec
        Wscript.Echo "Data Flush Pages Per Second: " &amp;amp; _
            objItem.DataFlushPagesPersec
        Wscript.Echo "Data Map Hits Percent: " &amp;amp; objItem.DataMapHitsPercent
        Wscript.Echo "Data Map Pins Per Second: " &amp;amp; objItem.DataMapPinsPersec
        Wscript.Echo "Data Maps Per Second: " &amp;amp; objItem.DataMapsPersec
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Fast Read Not Possibles Per Second: " &amp;amp; _
            objItem.FastReadNotPossiblesPersec
        Wscript.Echo "Fast Read Resource Misses Per Second: " &amp;amp; _
            objItem.FastReadResourceMissesPersec
        Wscript.Echo "Fast Reads Per Second: " &amp;amp; objItem.FastReadsPersec
        Wscript.Echo "Lazy Write Flushes Per Second: " &amp;amp; _
            objItem.LazyWriteFlushesPersec
        Wscript.Echo "Lazy Write Pages Per Second: " &amp;amp; _
            objItem.LazyWritePagesPersec
        Wscript.Echo "MDL Read Hits Percent: " &amp;amp; objItem.MDLReadHitsPercent
        Wscript.Echo "MDL Reads Per Second: " &amp;amp; objItem.MDLReadsPersec
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Pin Read Hits Percent: " &amp;amp; objItem.PinReadHitsPercent
        Wscript.Echo "Pin Reads Per Second: " &amp;amp; objItem.PinReadsPersec
        Wscript.Echo "Read Aheads Per Second: " &amp;amp; objItem.ReadAheadsPersec
        Wscript.Echo "Synchronous Copy Reads Per Second: " &amp;amp; _
            objItem.SyncCopyReadsPersec
        Wscript.Echo "Synchronous Data Maps Per Second: " &amp;amp; _
            objItem.SyncDataMapsPersec
        Wscript.Echo "Synchronous Fast Reads Per Second: " &amp;amp; _
            objItem.SyncFastReadsPersec
        Wscript.Echo "Synchronous MDL Reads Per Second: " &amp;amp; _
            objItem.SyncMDLReadsPersec
        Wscript.Echo "Synchronous Pin Reads Per Second: " &amp;amp; _
            objItem.SyncPinReadsPersec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Changes in Computer Power Status" n="373">' Monitor Changes in Computer Power Status


Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colMonitoredEvents = objWMIService.ExecNotificationQuery _
    ("Select * from Win32_PowerManagementEvent")

Do
    Set strLatestEvent = colMonitoredEvents.NextEvent
    Wscript.Echo strLatestEvent.EventType
Loop
</vb><vb name="Monitor Memory Performance" n="374">' Monitor Memory Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PerfOS_Memory").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Available Bytes: " &amp;amp; objItem.AvailableBytes
        Wscript.Echo "Available Kilobytes: " &amp;amp; objItem.AvailableKBytes
        Wscript.Echo "Available Megabytes: " &amp;amp; objItem.AvailableMBytes
        Wscript.Echo "Cache Bytes: " &amp;amp; objItem.CacheBytes
        Wscript.Echo "Cache Bytes Peak: " &amp;amp; objItem.CacheBytesPeak
        Wscript.Echo "Cache Faults Per Second: " &amp;amp; objItem.CacheFaultsPersec
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Commit Limit: " &amp;amp; objItem.CommitLimit
        Wscript.Echo "Committed Bytes: " &amp;amp; objItem.CommittedBytes
        Wscript.Echo "Demand Zero Faults Per Second: " &amp;amp; _
            objItem.DemandZeroFaultsPersec
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Free System Page Table Entries: " &amp;amp; _
            objItem.FreeSystemPageTableEntries
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Page Faults Per Second: " &amp;amp; objItem.PageFaultsPersec
        Wscript.Echo "Page Reads Per Second: " &amp;amp; objItem.PageReadsPersec
        Wscript.Echo "Pages Input Per Second: " &amp;amp; objItem.PagesInputPersec
        Wscript.Echo "Pages Output Per Second: " &amp;amp; objItem.PagesOutputPersec
        Wscript.Echo "Pages Per Second: " &amp;amp; objItem.PagesPersec
        Wscript.Echo "Page Writes Per Second: " &amp;amp; objItem.PageWritesPersec
        Wscript.Echo "Percent Committed Bytes In Use: " &amp;amp; _
            objItem.PercentCommittedBytesInUse
        Wscript.Echo "Pool Nonpaged Allocations: " &amp;amp; objItem.PoolNonpagedAllocs
        Wscript.Echo "Pool Nonpaged Bytes: " &amp;amp; objItem.PoolNonpagedBytes
        Wscript.Echo "Pool Paged Allocations: " &amp;amp; objItem.PoolPagedAllocs
        Wscript.Echo "Pool Paged Bytes: " &amp;amp; objItem.PoolPagedBytes
        Wscript.Echo "Pool Paged Resident Bytes: " &amp;amp; _
            objItem.PoolPagedResidentBytes
        Wscript.Echo "System Cache Resident Bytes: " &amp;amp; _
            objItem.SystemCacheResidentBytes
        Wscript.Echo "System Code Resident Bytes: " &amp;amp; _
            objItem.SystemCodeResidentBytes
        Wscript.Echo "System Code Total Bytes: " &amp;amp; objItem.SystemCodeTotalBytes
        Wscript.Echo "System Driver Resident Bytes: " &amp;amp; _
            objItem.SystemDriverResidentBytes
        Wscript.Echo "System Driver Total Bytes: " &amp;amp; _
            objItem.SystemDriverTotalBytes
        Wscript.Echo "Transition Faults Per Second: " &amp;amp; _
            objItem.TransitionFaultsPersec
        Wscript.Echo "Write Copies Per Second: " &amp;amp; objItem.WriteCopiesPersec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Processor Performance" n="375">' Monitor Processor Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PerfOS_Processor").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "C1 Transitions Per Second: " &amp;amp; _
            objItem.C1TransitionsPersec
        Wscript.Echo "C2 Transitions Per Second: " &amp;amp; _
            objItem.C2TransitionsPersec
        Wscript.Echo "C3 Transitions Per Second: " &amp;amp; _
            objItem.C3TransitionsPersec
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "DPC Rate: " &amp;amp; objItem.DPCRate
        Wscript.Echo "DPCs Queued Per Second: " &amp;amp; objItem.DPCsQueuedPersec
        Wscript.Echo "Interrupts Per Second: " &amp;amp; objItem.InterruptsPersec
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Percent C1 Time: " &amp;amp; objItem.PercentC1Time
        Wscript.Echo "Percent C2 Time: " &amp;amp; objItem.PercentC2Time
        Wscript.Echo "Percent C3 Time: " &amp;amp; objItem.PercentC3Time
        Wscript.Echo "Percent DPC Time: " &amp;amp; objItem.PercentDPCTime
        Wscript.Echo "Percent Idle Time: " &amp;amp; objItem.PercentIdleTime
        Wscript.Echo "Percent Interrupt Time: " &amp;amp; objItem.PercentInterruptTime
        Wscript.Echo "Percent Privileged Time: " &amp;amp; _
            objItem.PercentPrivilegedTime
        Wscript.Echo "Percent Processor Time: " &amp;amp; objItem.PercentProcessorTime
        Wscript.Echo "Percent User Time: " &amp;amp; objItem.PercentUserTime
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Processor Use" n="376">' Monitor Processor Use


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.Swbemrefresher")
Set objProcessor = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PerfOS_Processor").objectSet
intThresholdViolations = 0
objRefresher.Refresh

Do
    For Each intProcessorUse in objProcessor
        If intProcessorUse.PercentProcessorTime &amp;gt; 90 Then
            intThresholdViolations = intThresholdViolations + 1
                If intThresholdViolations = 10 Then
                    intThresholdViolations = 0
                    Wscript.Echo "Processor usage threshold exceeded."
                End If
        Else
            intThresholdViolations = 0
        End If
    Next
    Wscript.Sleep 6000
    objRefresher.Refresh
Loop
</vb><vb name="Verify Computer Availability" n="377">' Verify Computer Availability


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colPingedComputers = objWMIService.ExecQuery _
    ("Select * from Win32_PingStatus Where Address = '192.168.1.37'")

For Each objComputer in colPingedComputers
    If objComputer.StatusCode = 0 Then
        Wscript.Echo "Remote computer responded."
    Else
        Wscript.Echo "Remote computer did not respond."
   End If
Next
</vb><vb name="Verify System Uptime" n="378">' Verify System Uptime


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colOperatingSystems = objWMIService.ExecQuery _
    ("Select * from Win32_OperatingSystem")
 
For Each objOS in colOperatingSystems
    dtmBootup = objOS.LastBootUpTime
    dtmLastBootupTime = WMIDateStringToDate(dtmBootup)
    dtmSystemUptime = DateDiff("h", dtmLastBootUpTime, Now)
    Wscript.Echo dtmSystemUptime 
Next
 
Function WMIDateStringToDate(dtmBootup)
    WMIDateStringToDate = CDate(Mid(dtmBootup, 5, 2) &amp;amp; "/" &amp;amp; _
        Mid(dtmBootup, 7, 2) &amp;amp; "/" &amp;amp; Left(dtmBootup, 4) _
            &amp;amp; " " &amp;amp; Mid (dtmBootup, 9, 2) &amp;amp; ":" &amp;amp; _
                Mid(dtmBootup, 11, 2) &amp;amp; ":" &amp;amp; Mid(dtmBootup,13, 2))
End Function
</vb></dd>
		<dd name="Peripherals and Devices" code="devices" desc="Sample scripts for retrieving information about peripherals and other devices installed on a computer."><vb name="List Keyboard Properties" n="379">' List Keyboard Properties


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_Keyboard")
For Each objItem in colItems
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Is Locked: " &amp;amp; objItem.IsLocked
    Wscript.Echo "Layout: " &amp;amp; objItem.Layout
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Number of Function Keys: " &amp;amp; objItem.NumberOfFunctionKeys
    Wscript.Echo "Password: " &amp;amp; objItem.Password
    Wscript.Echo "PNP Device ID: " &amp;amp; objItem.PNPDeviceID
Next
</vb><vb name="List Modem Information" n="380">' List Modem Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_POTSModem")

For Each objItem in colItems
    Wscript.Echo "Attached To: " &amp;amp; objItem.AttachedTo
    Wscript.Echo "Blind Off: " &amp;amp; objItem.BlindOff
    Wscript.Echo "Blind On: " &amp;amp; objItem.BlindOn
    Wscript.Echo "Compression Off: " &amp;amp; objItem.CompressionOff
    Wscript.Echo "Compression On: " &amp;amp; objItem.CompressionOn
    Wscript.Echo "Configuration Manager Error Code: " &amp;amp; _
        objItem.ConfigManagerErrorCode
    Wscript.Echo "Configuration Manager User Configuration: " &amp;amp; _
        objItem.ConfigManagerUserConfig
    Wscript.Echo "Configuration Dialog: " &amp;amp; objItem.ConfigurationDialog
    Wscript.Echo "Country Selected: " &amp;amp; objItem.CountrySelected
    Wscript.Echo "DCB: "
    For Each objElement In objItem.DCB
        WScript.Echo vbTab &amp;amp; objElement
    Next
    Wscript.Echo "Default: "
    For Each objElement In objItem.Default
        WScript.Echo vbTab &amp;amp; objElement
    Next
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Device Type: " &amp;amp; objItem.DeviceType
    Wscript.Echo "Driver Date: " &amp;amp; objItem.DriverDate
    Wscript.Echo "Error Control Forced: " &amp;amp; objItem.ErrorControlForced
    Wscript.Echo "Error Control Off: " &amp;amp; objItem.ErrorControlOff
    Wscript.Echo "Error Control On: " &amp;amp; objItem.ErrorControlOn
    Wscript.Echo "Flow Control Hard: " &amp;amp; objItem.FlowControlHard
    Wscript.Echo "Flow Control Off: " &amp;amp; objItem.FlowControlOff
    Wscript.Echo "Flow Control Soft: " &amp;amp; objItem.FlowControlSoft
    Wscript.Echo "Inactivity Scale: " &amp;amp; objItem.InactivityScale
    Wscript.Echo "Inactivity Timeout: " &amp;amp; objItem.InactivityTimeout
    Wscript.Echo "Index: " &amp;amp; objItem.Index
    Wscript.Echo "Maximum Baud Rate To SerialPort: " &amp;amp; _
        objItem.MaxBaudRateToSerialPort
    Wscript.Echo "Model: " &amp;amp; objItem.Model
    Wscript.Echo "Modem INF Path: " &amp;amp; objItem.ModemInfPath
    Wscript.Echo "Modem INF Section: " &amp;amp; objItem.ModemInfSection
    Wscript.Echo "Modulation Bell: " &amp;amp; objItem.ModulationBell
    Wscript.Echo "Modulation CCITT: " &amp;amp; objItem.ModulationCCITT
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "PNP Device ID: " &amp;amp; objItem.PNPDeviceID
    Wscript.Echo "Port SubClass: " &amp;amp; objItem.PortSubClass
    Wscript.Echo "Prefix: " &amp;amp; objItem.Prefix
    Wscript.Echo "Properties: "
    For Each objElement In objItem.Properties
        WScript.Echo vbTab &amp;amp; objElement
    Next
    Wscript.Echo "Provider Name: " &amp;amp; objItem.ProviderName
    Wscript.Echo "Pulse: " &amp;amp; objItem.Pulse
    Wscript.Echo "Reset: " &amp;amp; objItem.Reset
    Wscript.Echo "Responses Key Name: " &amp;amp; objItem.ResponsesKeyName
    Wscript.Echo "Speaker Mode Dial: " &amp;amp; objItem.SpeakerModeDial
    Wscript.Echo "Speaker Mode Off: " &amp;amp; objItem.SpeakerModeOff
    Wscript.Echo "Speaker Mode On: " &amp;amp; objItem.SpeakerModeOn
    Wscript.Echo "Speaker Mode Setup: " &amp;amp; objItem.SpeakerModeSetup
    Wscript.Echo "Speaker Volume High: " &amp;amp; objItem.SpeakerVolumeHigh
    Wscript.Echo "Speaker Volume Info: " &amp;amp; objItem.SpeakerVolumeInfo
    Wscript.Echo "Speaker Volume Low: " &amp;amp; objItem.SpeakerVolumeLow
    Wscript.Echo "Speaker Volume Med: " &amp;amp; objItem.SpeakerVolumeMed
    Wscript.Echo "Status Info: " &amp;amp; objItem.StatusInfo
    Wscript.Echo "Terminator: " &amp;amp; objItem.Terminator
    Wscript.Echo "Tone: " &amp;amp; objItem.Tone
    Wscript.Echo
Next
</vb><vb name="List Plug and Play Devices" n="381">' List Plug and Play Devices


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_PnPEntity")

For Each objItem in colItems
    Wscript.Echo "Class GUID: " &amp;amp; objItem.ClassGuid
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Manufacturer: " &amp;amp; objItem.Manufacturer
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "PNP Device ID: " &amp;amp; objItem.PNPDeviceID
    Wscript.Echo "Service: " &amp;amp; objItem.Service
Next
</vb><vb name="List Plug and Play Signed Drivers" n="382">' List Plug and Play Signed Drivers


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_PnPSignedDriver")

For Each objItem in colItems
    Wscript.Echo "Class Guid: " &amp;amp; objItem.ClassGuid
    Wscript.Echo "Compatability ID: " &amp;amp; objItem.CompatID
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device Class: " &amp;amp; objItem.DeviceClass
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Device Name: " &amp;amp; objItem.DeviceName
    dtmWMIDate = objItem.DriverDate
    strReturn = WMIDateStringToDate(dtmWMIDate)
    Wscript.Echo "Driver Date: " &amp;amp; strReturn
    Wscript.Echo "Driver Provider Name: " &amp;amp; objItem.DriverProviderName
    Wscript.Echo "Driver Version: " &amp;amp; objItem.DriverVersion
    Wscript.Echo "Hardware ID: " &amp;amp; objItem.HardWareID
    Wscript.Echo "INF Name: " &amp;amp; objItem.InfName
    Wscript.Echo "Is Signed: " &amp;amp; objItem.IsSigned
    Wscript.Echo "Manufacturer: " &amp;amp; objItem.Manufacturer
    Wscript.Echo "PDO: " &amp;amp; objItem.PDO
    Wscript.Echo "Signer: " &amp;amp; objItem.Signer
    Wscript.Echo
Next
 
Function WMIDateStringToDate(dtmWMIDate)
    If Not IsNull(dtmWMIDate) Then
    WMIDateStringToDate = CDate(Mid(dtmWMIDate, 5, 2) &amp;amp; "/" &amp;amp; _
         Mid(dtmWMIDate, 7, 2) &amp;amp; "/" &amp;amp; Left(dtmWMIDate, 4) _
             &amp;amp; " " &amp;amp; Mid (dtmWMIDate, 9, 2) &amp;amp; ":" &amp;amp; _
                 Mid(dtmWMIDate, 11, 2) &amp;amp; ":" &amp;amp; Mid(dtmWMIDate,13, 2))
    End If
End Function
</vb><vb name="List Pointing Device Properties" n="383">' List Pointing Device Properties


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_PointingDevice")

For Each objItem in colItems
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Device Interface: " &amp;amp; objItem.DeviceInterface
    Wscript.Echo "Double Speed Threshold: " &amp;amp; objItem.DoubleSpeedThreshold
    Wscript.Echo "Handedness: " &amp;amp; objItem.Handedness
    Wscript.Echo "Hardware Type: " &amp;amp; objItem.HardwareType
    Wscript.Echo "INF File Name: " &amp;amp; objItem.InfFileName
    Wscript.Echo "INF Section: " &amp;amp; objItem.InfSection
    Wscript.Echo "Manufacturer: " &amp;amp; objItem.Manufacturer
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Number Of Buttons: " &amp;amp; objItem.NumberOfButtons
    Wscript.Echo "PNP Device ID: " &amp;amp; objItem.PNPDeviceID
    Wscript.Echo "Pointing Type: " &amp;amp; objItem.PointingType
    Wscript.Echo "Quad Speed Threshold: " &amp;amp; objItem.QuadSpeedThreshold
    Wscript.Echo "Resolution: " &amp;amp; objItem.Resolution
    Wscript.Echo "Sample Rate: " &amp;amp; objItem.SampleRate
    Wscript.Echo "Synch: " &amp;amp; objItem.Synch
Next
</vb><vb name="List Sound Card Properties" n="384">' List Sound Card Properties


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_SoundDevice")

For Each objItem in colItems
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "DMA Buffer Size: " &amp;amp; objItem.DMABufferSize
    Wscript.Echo "Manufacturer: " &amp;amp; objItem.Manufacturer
    Wscript.Echo "MPU 401 Address: " &amp;amp; objItem.MPU401Address
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "PNP Device ID: " &amp;amp; objItem.PNPDeviceID
    Wscript.Echo "Product Name: " &amp;amp; objItem.ProductName
    Wscript.Echo "Status Information: " &amp;amp; objItem.StatusInfo
Next
</vb></dd>
		<dd name="Ports and Slots" code="ports" desc="Sample scripts for retrieving information about ports and system slots installed in a computer."><vb name="List Parallel Port Properties" n="385">' List Parallel Port Properties


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_ParallelPort")

For Each objItem in colItems
    Wscript.Echo "Availability: " &amp;amp; objItem.Availability
    For Each strCapability in objItem.Capabilities
        Wscript.Echo "Capability: " &amp;amp; strCapability
    Next
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "OS Auto Discovered: " &amp;amp; objItem.OSAutoDiscovered
    Wscript.Echo "PNP Device ID: " &amp;amp; objItem.PNPDeviceID
    Wscript.Echo "Protocol Supported: " &amp;amp; objItem.ProtocolSupported
Next
</vb><vb name="List PCMCIA Controller Information" n="386">' List PCMCIA Controller Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_PCMCIAController")

For Each objItem in colItems
    Wscript.Echo "Configuration Manager Error Code: " &amp;amp; _
        objItem.ConfigManagerErrorCode
    Wscript.Echo "Configuration Manager User Configuration: " &amp;amp; _
        objItem.ConfigManagerUserConfig
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Manufacturer: " &amp;amp; objItem.Manufacturer
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "PNP Device ID: " &amp;amp; objItem.PNPDeviceID
    Wscript.Echo "Protocol Supported: " &amp;amp; objItem.ProtocolSupported
    Wscript.Echo
Next
</vb><vb name="List Port Connector Properties" n="387">' List Port Connector Properties


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_PortConnector")

For Each objItem in colItems
    Wscript.Echo "Connector Pinout: " &amp;amp; objItem.ConnectorPinout
    For Each strConnectorType in objItem.ConnectorType
        Wscript.Echo "Connector Type: " &amp;amp; strConnectorType
    Next
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "External Reference Designator: " &amp;amp; _
        objItem.ExternalReferenceDesignator
    Wscript.Echo "Internal Reference Designator: " &amp;amp; _
        objItem.InternalReferenceDesignator
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Port Type: " &amp;amp; objItem.PortType
    Wscript.Echo "Serial Number: " &amp;amp; objItem.SerialNumber
    Wscript.Echo "Tag: " &amp;amp; objItem.Tag
    Wscript.Echo "Version: " &amp;amp; objItem.Version
Next
</vb><vb name="List Port Resource Information" n="388">' List Port Resource Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_PortResource")

For Each objItem in colItems
    Wscript.Echo "Alias: " &amp;amp; objItem.Alias
    Wscript.Echo "Ending Address: " &amp;amp; objItem.EndingAddress
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Starting Address: " &amp;amp; objItem.StartingAddress
    Wscript.Echo
Next
</vb><vb name="List Serial Port Configuration Properties" n="389">' List Serial Port Configuration Properties


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_SerialPortConfiguration")

For Each objItem in colItems
    Wscript.Echo "Abort Read Write On Error: " &amp;amp; objItem.AbortReadWriteOnError
    Wscript.Echo "Baud Rate: " &amp;amp; objItem.BaudRate
    Wscript.Echo "Binary Mode Enabled: " &amp;amp; objItem.BinaryModeEnabled
    Wscript.Echo "Bits Per Byte: " &amp;amp; objItem.BitsPerByte
    Wscript.Echo "Continue XMit On XOff: " &amp;amp; objItem.ContinueXMitOnXOff
    Wscript.Echo "CTS Outflow Control: " &amp;amp; objItem.CTSOutflowControl
    Wscript.Echo "Discard NULL Bytes: " &amp;amp; objItem.DiscardNULLBytes
    Wscript.Echo "DSR Outflow Control: " &amp;amp; objItem.DSROutflowControl
    Wscript.Echo "DSR Sensitivity: " &amp;amp; objItem.DSRSensitivity
    Wscript.Echo "DTR Flow Control Type: " &amp;amp; objItem.DTRFlowControlType
    Wscript.Echo "EOF Character: " &amp;amp; objItem.EOFCharacter
    Wscript.Echo "Error Replace Character: " &amp;amp; objItem.ErrorReplaceCharacter
    Wscript.Echo "Error Replacement Enabled: " &amp;amp; _
        objItem.ErrorReplacementEnabled
    Wscript.Echo "Event Character: " &amp;amp; objItem.EventCharacter
    Wscript.Echo "Is Busy: " &amp;amp; objItem.IsBusy
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Parity: " &amp;amp; objItem.Parity
    Wscript.Echo "Parity Check Enabled: " &amp;amp; objItem.ParityCheckEnabled
    Wscript.Echo "RTS Flow Control Type: " &amp;amp; objItem.RTSFlowControlType
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Stop Bits: " &amp;amp; objItem.StopBits
    Wscript.Echo "XOff Character: " &amp;amp; objItem.XOffCharacter
    Wscript.Echo "XOff XMit Threshold: " &amp;amp; objItem.XOffXMitThreshold
    Wscript.Echo "XOn Character: " &amp;amp; objItem.XOnCharacter
    Wscript.Echo "XOn XMit Threshold: " &amp;amp; objItem.XOnXMitThreshold
    Wscript.Echo "XOn XOff InFlow Control: " &amp;amp; objItem.XOnXOffInFlowControl
    Wscript.Echo "XOn XOff OutFlow Control: " &amp;amp; objItem.XOnXOffOutFlowControl
Next
</vb><vb name="List Serial Port Properties" n="390">' List Serial Port Properties


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_SerialPort")

For Each objItem in colItems
    Wscript.Echo "Binary: " &amp;amp; objItem.Binary
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Maximum Baud Rate: " &amp;amp; objItem.MaxBaudRate
    Wscript.Echo "Maximum Input Buffer Size: " &amp;amp; objItem.MaximumInputBufferSize
    Wscript.Echo "Maximum Output Buffer Size: " &amp;amp; _
        objItem.MaximumOutputBufferSize
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "OS Auto Discovered: " &amp;amp; objItem.OSAutoDiscovered
    Wscript.Echo "PNP Device ID: " &amp;amp; objItem.PNPDeviceID
    Wscript.Echo "Provider Type: " &amp;amp; objItem.ProviderType
    Wscript.Echo "Settable Baud Rate: " &amp;amp; objItem.SettableBaudRate
    Wscript.Echo "Settable Data Bits: " &amp;amp; objItem.SettableDataBits
    Wscript.Echo "Settable Flow Control: " &amp;amp; objItem.SettableFlowControl
    Wscript.Echo "Settable Parity: " &amp;amp; objItem.SettableParity
    Wscript.Echo "Settable Parity Check: " &amp;amp; objItem.SettableParityCheck
    Wscript.Echo "Settable RLSD: " &amp;amp; objItem.SettableRLSD
    Wscript.Echo "Settable Stop Bits: " &amp;amp; objItem.SettableStopBits
    Wscript.Echo "Supports 16-Bit Mode: " &amp;amp; objItem.Supports16BitMode
    Wscript.Echo "Supports DTRDSR: " &amp;amp; objItem.SupportsDTRDSR
    Wscript.Echo "Supports Elapsed Timeouts: " &amp;amp; _
        objItem.SupportsElapsedTimeouts
    Wscript.Echo "Supports Int Timeouts: " &amp;amp; objItem.SupportsIntTimeouts
    Wscript.Echo "Supports Parity Check: " &amp;amp; objItem.SupportsParityCheck
    Wscript.Echo "Supports RLSD: " &amp;amp; objItem.SupportsRLSD
    Wscript.Echo "Supports RTSCTS: " &amp;amp; objItem.SupportsRTSCTS
    Wscript.Echo "Supports Special Characters: " &amp;amp; _
        objItem.SupportsSpecialCharacters
    Wscript.Echo "Supports XOn XOff: " &amp;amp; objItem.SupportsXOnXOff
    Wscript.Echo "Supports XOn XOff Setting: " &amp;amp; objItem.SupportsXOnXOffSet
Next
</vb><vb name="List System Slot Properties" n="391">' List System Slot Properties


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_SystemSlot")

For Each objItem in colItems
    For Each strConnectorPinout in objItem.ConnectorPinout
        Wscript.Echo "Connector Pinout: " &amp;amp; strConnectorPinout 
    Next
    Wscript.Echo "Connector Type: " &amp;amp; objItem.ConnectorType
    Wscript.Echo "Current Usage: " &amp;amp; objItem.CurrentUsage
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Height Allowed: " &amp;amp; objItem.HeightAllowed
    Wscript.Echo "Length Allowed: " &amp;amp; objItem.LengthAllowed
    Wscript.Echo "Manufacturer: " &amp;amp; objItem.Manufacturer
    Wscript.Echo "Maximum Data Width: " &amp;amp; objItem.MaxDataWidth
    Wscript.Echo "Model: " &amp;amp; objItem.Model
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Number: " &amp;amp; objItem.Number
    Wscript.Echo "PME Signal: " &amp;amp; objItem.PMESignal
    Wscript.Echo "Shared: " &amp;amp; objItem.Shared
    Wscript.Echo "Slot Designation: " &amp;amp; objItem.SlotDesignation
    Wscript.Echo "Supports Hot Plug: " &amp;amp; objItem.SupportsHotPlug
    Wscript.Echo "Tag: " &amp;amp; objItem.Tag
    Wscript.Echo "Thermal Rating: " &amp;amp; objItem.ThermalRating
    For Each strVccVoltageSupport in objItem.VccMixedVoltageSupport
        Wscript.Echo "VCC Mixed Voltage Support: " &amp;amp; strVccVoltageSupport 
    Next 
    Wscript.Echo "Version: " &amp;amp; objItem.Version
    For Each strVppVoltageSupport in objItem.VppMixedVoltageSupport
        Wscript.Echo "VPP Mixed Voltage Support: " &amp;amp; strVppVoltageSupport 
    Next 
Next
</vb></dd>
		<dd name="Video and Display" code="display" desc="Sample scripts for retrieving information about video controllers, display cards, and monitors installed on a computer."><vb name="List All Possible Video Controller Resolutions" n="392">' List All Possible Video Controller Resolutions


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from CIM_VideoControllerResolution")

For Each objItem in colItems
    Wscript.Echo "Horizontal Resolution: " &amp;amp; objItem.HorizontalResolution
    Wscript.Echo "Number Of Colors: " &amp;amp; objItem.NumberOfColors
    Wscript.Echo "Refresh Rate: " &amp;amp; objItem.RefreshRate
    Wscript.Echo "Scan Mode: " &amp;amp; objItem.ScanMode
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Vertical Resolution: " &amp;amp; objItem.VerticalResolution
    Wscript.Echo
Next
</vb><vb name="List Current Display Configuration Values" n="393">' List Current Display Configuration Values


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_DisplayConfiguration")

For Each objItem in colItems
    Wscript.Echo "Bits Per Pel: " &amp;amp; objItem.BitsPerPel
    Wscript.Echo "Device Name: " &amp;amp; objItem.DeviceName
    Wscript.Echo "Display Flags: " &amp;amp; objItem.DisplayFlags
    Wscript.Echo "Display Frequency: " &amp;amp; objItem.DisplayFrequency
    Wscript.Echo "Driver Version: " &amp;amp; objItem.DriverVersion
    Wscript.Echo "Log Pixels: " &amp;amp; objItem.LogPixels
    Wscript.Echo "Pels Height: " &amp;amp; objItem.PelsHeight
    Wscript.Echo "Pels Width: " &amp;amp; objItem.PelsWidth
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Specification Version: " &amp;amp; objItem.SpecificationVersion
    Wscript.Echo
Next
</vb><vb name="List Desktop Monitor Properties" n="394">' List Desktop Monitor Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_DesktopMonitor")

For Each objItem in colItems
    Wscript.Echo "Availability: " &amp;amp; objItem.Availability
    Wscript.Echo "Bandwidth: " &amp;amp; objItem.Bandwidth
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Display Type: " &amp;amp; objItem.DisplayType
    Wscript.Echo "Is Locked: " &amp;amp; objItem.IsLocked
    Wscript.Echo "Monitor Manufacturer: " &amp;amp; objItem.MonitorManufacturer
    Wscript.Echo "Monitor Type: " &amp;amp; objItem.MonitorType
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Pixels Per X Logical Inch: " &amp;amp; objItem.PixelsPerXLogicalInch
    Wscript.Echo "Pixels Per Y Logical Inch: " &amp;amp; objItem.PixelsPerYLogicalInch
    Wscript.Echo "PNP Device ID: " &amp;amp; objItem.PNPDeviceID
    Wscript.Echo "Screen Height: " &amp;amp; objItem.ScreenHeight
    Wscript.Echo "Screen Width: " &amp;amp; objItem.ScreenWidth
Next
</vb><vb name="List Video Adapter Information" n="395">' List Video Adapter Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_DisplayControllerConfiguration")

For Each objItem in colItems
    Wscript.Echo "Bits Per Pixel: " &amp;amp; objItem.BitsPerPixel
    Wscript.Echo "Color Planes: " &amp;amp; objItem.ColorPlanes
    Wscript.Echo "Device Entries in a Color Table: " &amp;amp; _
        objItem.DeviceEntriesInAColorTable
    Wscript.Echo "Device Specific Pens: " &amp;amp; objItem.DeviceSpecificPens
    Wscript.Echo "Horizontal Resolution: " &amp;amp; objItem.HorizontalResolution
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Refresh Rate: " &amp;amp; objItem.RefreshRate
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Vertical Resolution: " &amp;amp; objItem.VerticalResolution
    Wscript.Echo "Video Mode: " &amp;amp; objItem.VideoMode
    Wscript.Echo
Next
</vb><vb name="List Video Controller Properties" n="396">' List Video Controller Properties


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_VideoController")

For Each objItem in colItems
    For Each strCapability in objItem.AcceleratorCapabilities
        Wscript.Echo "Accelerator Capability: " &amp;amp; strCapability
    Next
    Wscript.Echo "Adapter Compatibility: " &amp;amp; objItem.AdapterCompatibility
    Wscript.Echo "Adapter DAC Type: " &amp;amp; objItem.AdapterDACType
    Wscript.Echo "Adapter RAM: " &amp;amp; objItem.AdapterRAM
    Wscript.Echo "Availability: " &amp;amp; objItem.Availability
    Wscript.Echo "Color Table Entries: " &amp;amp; objItem.ColorTableEntries
    Wscript.Echo "Current Bits Per Pixel: " &amp;amp; objItem.CurrentBitsPerPixel
    Wscript.Echo "Current Horizontal Resolution: " &amp;amp; _
        objItem.CurrentHorizontalResolution
    Wscript.Echo "Current Number of Colors: " &amp;amp; objItem.CurrentNumberOfColors
    Wscript.Echo "Current Number of Columns: " &amp;amp; objItem.CurrentNumberOfColumns
    Wscript.Echo "Current Number of Rows: " &amp;amp; objItem.CurrentNumberOfRows
    Wscript.Echo "Current Refresh Rate: " &amp;amp; objItem.CurrentRefreshRate
    Wscript.Echo "Current Scan Mode: " &amp;amp; objItem.CurrentScanMode
    Wscript.Echo "Current Vertical Resolution: " &amp;amp; _
        objItem.CurrentVerticalResolution
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Device Specific Pens: " &amp;amp; objItem.DeviceSpecificPens
    Wscript.Echo "Dither Type: " &amp;amp; objItem.DitherType
    Wscript.Echo "Driver Date: " &amp;amp; objItem.DriverDate
    Wscript.Echo "Driver Version: " &amp;amp; objItem.DriverVersion
    Wscript.Echo "ICM Intent: " &amp;amp; objItem.ICMIntent
    Wscript.Echo "ICM Method: " &amp;amp; objItem.ICMMethod
    Wscript.Echo "INF Filename: " &amp;amp; objItem.InfFilename
    Wscript.Echo "INF Section: " &amp;amp; objItem.InfSection
    Wscript.Echo "Installed Display Drivers: " &amp;amp; _
        objItem.InstalledDisplayDrivers
    Wscript.Echo "Maximum Memory Supported: " &amp;amp; objItem.MaxMemorySupported
    Wscript.Echo "Maximum Number Controlled: " &amp;amp; objItem.MaxNumberControlled
    Wscript.Echo "Maximum Refresh Rate: " &amp;amp; objItem.MaxRefreshRate
    Wscript.Echo "Minimum Refresh Rate: " &amp;amp; objItem.MinRefreshRate
    Wscript.Echo "Monochrome: " &amp;amp; objItem.Monochrome
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Number of Color Planes: " &amp;amp; objItem.NumberOfColorPlanes
    Wscript.Echo "Number of Video Pages: " &amp;amp; objItem.NumberOfVideoPages
    Wscript.Echo "PNP Device ID: " &amp;amp; objItem.PNPDeviceID
    Wscript.Echo "Reserved System Palette Entries: " &amp;amp; _
        objItem.ReservedSystemPaletteEntries
    Wscript.Echo "Specification Version: " &amp;amp; objItem.SpecificationVersion
    Wscript.Echo "System Palette Entries: " &amp;amp; objItem.SystemPaletteEntries
    Wscript.Echo "Video Architecture: " &amp;amp; objItem.VideoArchitecture
    Wscript.Echo "Video Memory Type: " &amp;amp; objItem.VideoMemoryType
    Wscript.Echo "Video Mode: " &amp;amp; objItem.VideoMode
    Wscript.Echo "Video Mode Description: " &amp;amp; objItem.VideoModeDescription
    Wscript.Echo "Video Processor: " &amp;amp; objItem.VideoProcessor
Next
</vb></dd>
	</dd>
	<dd name="Internet Information Server (IIS)" code="iis" desc="Sample scripts for managing Internet Information Server.">
		<dd name="IIS 5.x" code="iis5x" desc="Sample scripts for managing Internet Information Server 5.0 and 5.1.">
			<dd name="Applications and Application Pools" code="apps" desc="Sample scripts for creating, deleting, and modifying application and application pools for Internet Information Server 5.0 and 5.1."><vb name="Create an Application in a Web Directory" n="397">' Create an Application in a Web Directory


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254/root/aspnet_client_folder")

objIIS.AppCreate(False)
</vb><vb name="Create an Out-of-Process Application in a Web Directory" n="398">' Create an Out-of-Process Application in a Web Directory


Const OUT_OF_PROCESS = 1
 
strComputer = objNetwork.ComputerName
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254/root/aspnet_client_folder")

objIIS.AppCreate2 OUT_OF_PROCESS
</vb><vb name="Delete a Web Directory Application" n="399">' Delete a Web Directory Application


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254/root/aspnet_client_folder")

objIIS.AppDelete
</vb><vb name="Delete an Out-of-Process Web Application" n="400">' Delete an Out-of-Process Web Application


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254/root/aspnet_client_folder")

objIIS.AppDeleteRecursive
</vb><vb name="Disable a Web Directory Application" n="401">' Disable a Web Directory Application


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254/root/aspnet_client_folder")

objIIS.AppDisable
</vb><vb name="Disable an Out-of-Process Web Application" n="402">' Disable an Out-of-Process Web Application


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254/root/aspnet_client_folder")

objIIS.AppDisableRecursive
</vb><vb name="Enable a Web Directory Application" n="403">' Enable a Web Directory Application


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254/root/aspnet_client_folder")

objIIS.AppEnable
</vb><vb name="Enable an Out-of-Process Web Application" n="404">' Enable an Out-of-Process Web Application


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254/root/aspnet_client_folder")

objIIS.AppEnableRecursive
</vb><vb name="List Applications in an Application Pool" n="405">' List Applications in an Application Pool


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/AppPools/MSSharePointAppPool")
arrApps = objIIS.EnumAppsInPool
 
For i = 0 to Ubound(arrApps)
    Wscript.Echo arrApps(i)
Next
</vb><vb name="Recycle an Application Pool" n="406">' Recycle an Application Pool


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/AppPools/MSSharePointAppPool")

objIIS.Recycle
</vb><vb name="Restart a Web Directory Application" n="407">' Restart a Web Directory Application


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254/root/aspnet_client_folder")

objIIS.ASPAppRestart
</vb><vb name="Start an Application Pool" n="408">' Start an Application Pool


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/AppPools/MSSharePointAppPool")

objIIS.Start
</vb><vb name="Stop an Application Pool" n="409">' Stop an Application Pool


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/AppPools/MSSharePointAppPool")

objIIS.Stop
</vb><vb name="Unload an Application from a Web Directory" n="410">' Unload an Application from a Web Directory


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254/root/aspnet_client_folder")

objIIS.AppUnload
</vb><vb name="Unload an Out-of-Process Web Application" n="411">' Unload an Out-of-Process Web Application


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254/root/aspnet_client_folder")

objIIS.AppUnloadRecursive
</vb><vb name="Verify the Status of a Web Directory Application" n="412">' Verify the Status of a Web Directory Application


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254/root/aspnet_client_folder")
strStatus = objIIS.AppGetStatus2
 
If strStatus = 2 Then
    Wscript.Echo "The application is running."
ElseIf strStatus = 3 Then
    Wscript.Echo "The application is stopped."
Else
    Wscript.Echo "The status of this application could not be determined."
End If
</vb></dd>
			<dd name="Basic Administration" code="admin" desc="Sample scripts for basic administration (such as backing up and restoring the metabase) of Internet Information Server 5.0 and 5.1."><vb name="Back Up the Metabase" n="413">' Back Up the Metabase


Const MD_BACKUP_HIGHEST_VERSION = &amp;amp;HFFFFFFFF
Const MD_BACKUP_OVERWRITE = 1

strComputer = "LocalHost"
Set objComputer = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "")
objComputer.Backup "ScriptedBackup", MD_BACKUP_HIGHEST_VERSION,_
     MD_BACKUP_OVERWRITE
</vb><vb name="Back Up the Metabase Using a Password" n="414">' Back Up the Metabase Using a Password


Const MD_BACKUP_HIGHEST_VERSION = &amp;amp;HFFFFFFFE 
Const MD_BACKUP_OVERWRITE = 1

strComputer = "LocalHost"
Set objComputer = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "")
objComputer.BackupWithPassword "ScriptedBackup", _
    MD_BACKUP_HIGHEST_VERSION, MD_BACKUP_OVERWRITE, "ie456@k"
</vb><vb name="Delete a Backup" n="415">' Delete a Backup


Const BACKUP_VERSION = 0

strComputer = "LocalHost"
Set objComputer = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "")
objComputer.DeleteBackup "ADSIBackup", BACKUP_VERSION
</vb><vb name="Enumerate Backups" n="416">' Enumerate Backups


On Error Resume Next

Const MD_BACKUP_NO_MORE_BACKUPS = &amp;amp;H80070103
 
strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "")
intIndex = 0

Do While True
    strName = ""
    objIIS.EnumBackups strName, intIndex, strVersion, _
        strLocation, strDateTime
    If (Err.Number &amp;lt;&amp;gt; 0) Then
        If (Err.Number = MD_BACKUP_NO_MORE_BACKUPS) Then
            Exit Do
        End If
    End If       
       
    WScript.Echo "Name: " &amp;amp; strName
    Wscript.Echo "Version Number: " &amp;amp; strVersion 
    Wscript.Echo "Backup Location: " &amp;amp; strLocation
    Wscript.Echo "Backup Date: " &amp;amp; strDateTime
    Wscript.Echo
        
    intIndex = intIndex + 1
Loop
</vb><vb name="Enumerate Filter Load Order" n="417">' Enumerate Filter Load Order


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/Filters")

Wscript.Echo "Filter Load Order: " &amp;amp; objIIS.FilterLoadOrder
</vb><vb name="Enumerate IIS Class Members" n="418">' Enumerate IIS Class Members


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC")

For Each objItem in objIIS
    If objItem.class = "IIsWebServer" Then
        Wscript.Echo objItem.Name
    End If
Next
 
Wscript.Echo
 
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/MSFTPSVC")
For Each objItem in objIIS
    If objItem.class = "IIsFtpServer" Then
        Wscript.Echo objItem.Name
    End If
Next
 
Wscript.Echo
 
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/NNTPSVC")
For Each objItem in objIIS
    If objItem.class = "IIsNntpServer" Then
        Wscript.Echo objItem.Name
    End If
Next
 
Wscript.Echo
 
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/SMTPSVC")
For Each objItem in objIIS
    If objItem.class = "IIsSmtpServer" Then
        Wscript.Echo objItem.Name
    End If
Next
</vb><vb name="Enumerate IIS Filters" n="419">' Enumerate IIS Filters


strComputer = "LocalHost"
Set colFilters = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/Filters")
 
For Each objFilter in colFilters
    Wscript.Echo "Name: " &amp;amp; objFilter.Name
    Wscript.Echo "Filter Description: " &amp;amp; objFilter.FilterDescription
    Wscript.Echo "Filter Path: " &amp;amp; objFilter.FilterPath
    Wscript.Echo "Filter Enabled: " &amp;amp; objFilter.FilterEnabled
    Wscript.Echo "Filter State: " &amp;amp; objFilter.FilterState
    Wscript.Echo "Filter Flags: " &amp;amp; objFilter.FilterFlags
    Wscript.Echo
Next
</vb><vb name="Enumerate Log Modules" n="420">' Enumerate Log Modules


strComputer = "LocalHost"
Set colLogs = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/Logging")
 
For Each objLog in colLogs
    Wscript.Echo "Name: " &amp;amp; objLog.Name
Next
</vb><vb name="Enumerate MIME Maps" n="421">' Enumerate MIME Maps


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/MimeMap")
arrMaps = objIIS.GetEx("MimeMap")
 
For i = 0 to Ubound(arrMaps)
    Wscript.Echo "Extension: " &amp;amp; arrMaps(i).Extension
    Wscript.Echo "Type: " &amp;amp; arrMaps(i).MimeType
    Wscript.Echo 
Next
</vb><vb name="List IIS Bandwidth Information" n="422">' List IIS Bandwidth Information


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "")

Wscript.Echo "Maximum Bandwidth: " &amp;amp; objIIS.MaxBandwidth
Wscript.Echo "Maximum Bandwidth Blocked: " &amp;amp; objIIS.MaxBandwidthBlocked
</vb><vb name="Modify an IIS Filter Setting Metabase Property" n="423">' Modify an IIS Filter Setting Metabase Property


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/Filters/Compression")\

objIIS.FilterEnabled = FALSE
objIIS.SetInfo
</vb><vb name="Restore a Metabase Backup" n="424">' Restore a Metabase Backup


Const MD_BACKUP_HIGHEST_VERSION = &amp;amp;HFFFFFFFE 

strComputer = "LocalHost"
Set objComputer = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "")

objComputer.Restore "ScriptedBackup", MD_BACKUP_HIGHEST_VERSION, 0
</vb><vb name="Restore a Metabase Using a Password" n="425">' Restore a Metabase Using a Password


Const MD_BACKUP_HIGHEST_VERSION = &amp;amp;HFFFFFFFE 

strComputer = "LocalHost"
Set objComputer = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "")

objComputer.RestoreWithPassword "ScriptedBackup", _
    MD_BACKUP_HIGHEST_VERSION, 0, " ie456@k"
</vb></dd>
			<dd name="Compression" code="compress" desc="Sample scripts for managing file compression on Internet Information Server 5.0 and 5.1."><vb name="Add a File Extension to the IIS Compression Scheme" n="426">' Add a File Extension to the IIS Compression Scheme


Const ADS_PROPERTY_UPDATE = 2
 
strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/Filters/Compression/gzip")
arrExtensions = objIIS.HcFileExtensions
i = Ubound(arrExtensions)
i = i + 1
 
Redim Preserve arrExtensions(i)
arrExtensions(i) = "hta"
 
objIIS.PutEx ADS_PROPERTY_UPDATE, "HcFileExtensions", arrExtensions
objIIS.SetInfo
</vb><vb name="List FTP Server Properties" n="427">' List FTP Server Properties


On Error Resume Next

strComputer = "LocalHost"
Set objServer = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/MSFTPSVC/1")
 
Wscript.Echo "Access Flags" &amp;amp; objServer.AccessFlags
script.Echo "Connection Timeout: " &amp;amp; objServer.ConnectionTimeout
Wscript.Echo "Default Logon Domain: " &amp;amp; objServer.DefaultLogonDomain
Wscript.Echo "Allow Anonymous: " &amp;amp; objServer.AllowAnonymous
Wscript.Echo "Disable SOcket Pooling: " &amp;amp; _
    objServer.DisableSocketPooling
Wscript.Echo "Anonymous Only: " &amp;amp; objServer.AnonymousOnly
Wscript.Echo "Don't Log: " &amp;amp; objServer.DontLog
Wscript.Echo "Anonymous Password Synch: " &amp;amp; _
    objServer.AnonymousPasswordSync
Wscript.Echo "Exit Message: " &amp;amp; objServer.ExitMessage
Wscript.Echo "Anonymous User Name: " &amp;amp; objServer.AnonymousUserName
Wscript.Echo "FTP Directory Browse Show Long Date: " &amp;amp; _
    objServer.FtpDirBrowseShowLongDate
Wscript.Echo "Anonymous User Password: " &amp;amp; _
    objServer.AnonymousUserPass
For Each strMessage in objServer.GreetingMessage
    Wscript.Echo "Greeting Message: " &amp;amp; strMessage
Next
Wscript.Echo "Log Anonymous: " &amp;amp; objServer.LogAnonymous
Wscript.Echo "Log Ext File Flags: " &amp;amp; objServer.LogExtFileFlags
Wscript.Echo "Log File Directory: " &amp;amp; objServer.LogFileDirectory
Wscript.Echo "Log File Local Time Rollover: " &amp;amp; _
    objServer.LogFileLocaltimeRollover
Wscript.Echo "Log File Period: " &amp;amp; objServer.LogFilePeriod
Wscript.Echo "Log File Truncate Size: " &amp;amp; _
    objServer.LogFileTruncateSize
Wscript.Echo "Log Non-Anonymous: " &amp;amp; objServer.LogNonAnonymous
Wscript.Echo "Log ODBC Data Source: " &amp;amp; _
    objServer.LogOdbcDataSource
Wscript.Echo "Log ODBC Password: " &amp;amp; objServer.LogOdbcPassword
Wscript.Echo "Log ODBC Table Name: " &amp;amp; objServer.LogOdbcTableName
Wscript.Echo "Log ODNC User Name: " &amp;amp; objServer.LogOdbcUserName
Wscript.Echo "Log Plugin Clsid: " &amp;amp; objServer.LogPluginClsid
Wscript.Echo "Log Type: " &amp;amp; objServer.LogType  
Wscript.Echo "Maximum Client Message: " &amp;amp; _
    objServer.MaxClientsMessage
Wscript.Echo "Maximum Connections: " &amp;amp; objServer.MaxConnections
Wscript.Echo "Server Comment: " &amp;amp; objServer.ServerComment
Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
    objServer.MaxEndpointConnections
Wscript.Echo "Server Listen backlog: " &amp;amp; _
    objServer.ServerListenBacklog
Wscript.Echo "MS-DOS Directory Output: " &amp;amp; _
    objServer.MSDOSDirOutput
Wscript.Echo "Server Listen Timeout: " &amp;amp; _
    objServer.ServerListenTimeout
Wscript.Echo "Realm: " &amp;amp; objServer.Realm
Wscript.Echo "Server Size: " &amp;amp; objServer.ServerSize
Wscript.Echo "Server Autostart: " &amp;amp; objServer.ServerAutoStart
Wscript.Echo "Server State: " &amp;amp; objServer.ServerState
</vb><vb name="List IIS Compression Scheme Information" n="428">' List IIS Compression Scheme Information


On Error Resume Next
 
strComputer = "LocalHost"
Set colSchemes = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/Filters/Compression")
 
For Each objItem in colSchemes
    If objItem.Name &amp;lt;&amp;gt; "Parameters" Then
        wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Compression DLL: " &amp;amp; objItem.HcCompressionDll
        Wscript.Echo "Create Flags: " &amp;amp; objItem.HcCreateFlags
        Wscript.Echo "Do Dynamic Compression: " &amp;amp;  _
            objItem.HcDoDynamicCompression
        Wscript.Echo "Do Static Compression: " &amp;amp;  _
            objItem.HcDoStaticCompression
        Wscript.Echo "Do On-Demand Compression: " &amp;amp;  _
            objItem.HcDoOnDemandCompression
        Wscript.Echo "Dynamic Compression Level: " &amp;amp;  _
            objItem.HcDynamicCompressionLevel
        For Each strExtension in objItem.HcFileExtensions
            Wscript.Echo "File Extensions: " &amp;amp; strExtension
        Next
        Wscript.Echo "On-Demand Compression Level: " &amp;amp;  _
            objItem.HcOnDemandCompLevel
        Wscript.Echo "Priority: " &amp;amp; objItem.HcPriority
        For Each strExtension in objItem.HcScriptFileExtensions
            Wscript.Echo "Script File Extensions: " &amp;amp; strExtension
        Next
        Wscript.Echo
    End If
Next
</vb><vb name="List IIS Compression Schemes Information" n="429">' List IIS Compression Schemes Information


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/Filters/Compression/Parameters")
 
Wscript.Echo "Cache Control Header: " &amp;amp; objIIS.HcCacheControlHeader
Wscript.Echo "Compression Buffer Size: " &amp;amp; objIIS.HcCompressionBufferSize
Wscript.Echo "Compression Directory: " &amp;amp; objIIS.HcCompressionDirectory
Wscript.Echo "Do Disk Space Limiting: " &amp;amp; objIIS.HcDoDiskSpaceLimiting
Wscript.Echo "Do Dynamic Compression: " &amp;amp; objIIS.HcDoDynamicCompression
Wscript.Echo "Do On-Demand Compression: " &amp;amp; objIIS.HcDoOnDemandCompression
Wscript.Echo "Do Static Compression: " &amp;amp; objIIS.HcDoStaticCompression
Wscript.Echo "Expires Header: " &amp;amp; objIIS.HcExpiresHeader
Wscript.Echo "Files Deleted Per Disk Free: " &amp;amp;  _
    objIIS.HcFilesDeletedPerDiskFree
Wscript.Echo "I/O Buffer Size: " &amp;amp; objIIS.HcIoBufferSize
Wscript.Echo "Maximum Disk Space Usage: " &amp;amp; objIIS.HcMaxDiskSpaceUsage
Wscript.Echo "Maximum Queue Length: " &amp;amp; objIIS.HcMaxQueueLength
Wscript.Echo "Minimum File Size for Compression: " &amp;amp;  _
    objIIS.HcMinFileSizeForComp
Wscript.Echo "No Compression for HTTP 1.0: " &amp;amp;  _
    objIIS.HcNoCompressionForHttp10
Wscript.Echo "No Compression for Proxies: " &amp;amp;  _
    objIIS.HcNoCompressionForProxies
Wscript.Echo "No Compression for Range: " &amp;amp;  _
    objIIS.HcNoCompressionForRange
Wscript.Echo "Send Cache Headers: " &amp;amp; objIIS.HcSendCacheHeaders
</vb><vb name="Modify a Compression Schemes Metabase Property" n="430">' Modify a Compression Schemes Metabase Property


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; _
    "/W3SVC/Filters/Compression/Parameters")

objIIS.HcSendCacheHeaders = TRUE
objIIS.SetInfo
</vb></dd>
			<dd name="FTP Sites" code="ftp" desc="Sample scripts for managing FTP sites on Internet Information Server 5.0 and 5.1."><vb name="Continue a Paused FTP Server" n="431">' Continue a Paused FTP Server


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/MSFTPSVC/1")

objIIS.Continue
</vb><vb name="List FTP Log Modules" n="432">' List FTP Log Modules


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/MSFTPSVC/Info")

Wscript.Echo "Log Module List: " &amp;amp; objIIS.LogModuleList
</vb><vb name="List FTP Service Properties" n="433">' List FTP Service Properties


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/MSFTPSVC")
 
Wscript.Echo "Access Flags: " &amp;amp; objIIS.AccessFlags
Wscript.Echo "Directory levels to Scan: " &amp;amp; objIIS.DirectoryLevelsToScan
Wscript.Echo "Disable Socket Pooling: " &amp;amp; objIIS.DisableSocketPooling
Wscript.Echo "Allow Anonymous: " &amp;amp; objIIS.AllowAnonymous
Wscript.Echo "Don't Log: " &amp;amp; objIIS.DontLog
Wscript.Echo "Anonymous Only: " &amp;amp; objIIS.AnonymousOnly
Wscript.Echo "Exit Message: " &amp;amp; objIIS.ExitMessage
Wscript.Echo "Anonymous Password Sync: " &amp;amp; objIIS.AnonymousPasswordSync
Wscript.Echo "FTP Directory Browse Show Long Date: " &amp;amp; _
    objIIS.FtpDirBrowseShowLongDate
Wscript.Echo "Anonymous User Name: " &amp;amp; objIIS.AnonymousUserName
For Each strGreeting in objIIS.GreetingMessage
    Wscript.Echo "Greeting Message: " &amp;amp; strGreeting
Next
Wscript.Echo "Anonymous User Password: " &amp;amp; objIIS.AnonymousUserPass
Wscript.Echo "Connection Timeout: " &amp;amp; objIIS.ConnectionTimeout
Wscript.Echo "Log Ext File Flags: " &amp;amp; objIIS.LogExtFileFlags
Wscript.Echo "Log ODBC Data Source: " &amp;amp; objIIS.LogOdbcDataSource
Wscript.Echo "Log Anonymous: " &amp;amp; objIIS.LogAnonymous
Wscript.Echo "Log ODBC Password: " &amp;amp; objIIS.LogOdbcPassword
Wscript.Echo "Log File Directory: " &amp;amp; objIIS.LogFileDirectory
Wscript.Echo "Log ODBC Table Name: " &amp;amp; objIIS.LogOdbcTableName
Wscript.Echo "Log File Local Time Rollover: " &amp;amp; _
    objIIS.LogFileLocaltimeRollover
Wscript.Echo "Log ODBC User Name: " &amp;amp; objIIS.LogOdbcUserName
Wscript.Echo "Log File Period: " &amp;amp; objIIS.LogFilePeriod
Wscript.Echo "Log Plugin Clsid: " &amp;amp; objIIS.LogPluginClsid
Wscript.Echo "Log File Truncate Size: " &amp;amp; objIIS.LogFileTruncateSize
Wscript.Echo "Log Type: " &amp;amp; objIIS.LogType
Wscript.Echo "Log Non-Anonymous Message: " &amp;amp; objIIS.LogNonAnonymous
Wscript.Echo "Maximum Clients Message: " &amp;amp; objIIS.MaxClientsMessage
Wscript.Echo "Maximum Connections: " &amp;amp; objIIS.MaxConnections
Wscript.Echo "Server Comment: " &amp;amp; objIIS.ServerComment
Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; objIIS.MaxEndpointConnections
Wscript.Echo "Server Listen Backlog: " &amp;amp; objIIS.ServerListenBacklog
Wscript.Echo "MS-DOS Directory Output: " &amp;amp; objIIS.MSDOSDirOutput
Wscript.Echo "Server Listen Timeout: " &amp;amp; objIIS.ServerListenTimeout
Wscript.Echo "Realm: " &amp;amp; objIIS.Realm
Wscript.Echo "Server Size: " &amp;amp; objIIS.ServerSize
Wscript.Echo "Server AutoStart: " &amp;amp; objIIS.ServerAutoStart
</vb><vb name="List FTP Virtual Directory Properties" n="434">' List FTP Virtual Directory Properties


strComputer = "LocalHost"
Set objDirectory = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/MSFTPSVC/1012388136/root")
 
Wscript.Echo "Access Flags: " &amp;amp; objDirectory.AccessFlags
Wscript.Echo "Don't Log: " &amp;amp; objDirectory.DontLog
Wscript.Echo "Path: " &amp;amp; objDirectory.Path
Wscript.Echo "UNC Password: " &amp;amp; objDirectory.UNCPassword
Wscript.Echo "FTP Directory Browse Show Long Date: " &amp;amp;  _
    objDirectory.FtpDirBrowseShowLongDate
Wscript.Echo "UNC User Name: " &amp;amp; objDirectory.UNCUserName
</vb><vb name="Modify an FTP Server Metabase Property" n="435">' Modify an FTP Server Metabase Property


On Error Resume Next
 
strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/MSFTPSVC/1")

objIIS.DontLog = TRUE
objIIS.SetInfo
</vb><vb name="Modify an FTP Service Metabase Property" n="436">' Modify an FTP Service Metabase Property


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/MSFTPSVC")

objIIS.AllowAnonymous = FALSE
objIIS.SetInfo
</vb><vb name="Modify an FTP Virtual Directory Metabase Property" n="437">' Modify an FTP Virtual Directory Metabase Property


strComputer = "LocalHost"
Set objDirectory = GetObject("IIS://" &amp;amp; strComputer &amp;amp; _
    "/MSFTPSVC/1012388136/root")

objDirectory.FtpDirBrowseShowLongDate = TRUE
objDirectory.SetInfo
</vb><vb name="Pause an FTP Server" n="438">' Pause an FTP Server


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/MSFTPSVC/1")

objIIS.Pause
</vb><vb name="Start an FTP Server" n="439">' Start an FTP Server


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/MSFTPSVC/1")

objIIS.Start
</vb><vb name="Stop an FTP Server" n="440">' Stop an FTP Server


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/MSFTPSVC/1")

objIIS.Stop
</vb></dd>
			<dd name="Web Sites" code="web" desc="Sample scripts for managing Web sites on Internet Information Server 5.0 and 5.1."><vb name="Continue a Paused a Web Server" n="441">' Continue a Paused a Web Server


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254")

objIIS.Continue
</vb><vb name="List the Properties of a Virtual Directory" n="442">' List the Properties of a Virtual Directory


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/1/ROOT/Printers")
 
Wscript.Echo "Access Flags: " &amp;amp; objIIS.AccessFlags
Wscript.Echo "ASP Errors to NT Log: " &amp;amp; objIIS.AspErrorsToNTLog
Wscript.Echo "Access SSL Flags: " &amp;amp; objIIS.AccessSSLFlags
Wscript.Echo "ASP Exception Catch Enabled: " &amp;amp; _
    objIIS.AspExceptionCatchEnable
Wscript.Echo "Anonymous Password Sync: " &amp;amp; objIIS.AnonymousPasswordSync
Wscript.Echo "ASP Log Error Requests: " &amp;amp; objIIS.AspLogErrorRequests
Wscript.Echo "Anonymous User name: " &amp;amp; objIIS.AnonymousUserName
Wscript.Echo "ASP Processor Thread MAximum: " &amp;amp; _
    objIIS.AspProcessorThreadMax
Wscript.Echo "Anonymous User Password: " &amp;amp; objIIS.AnonymousUserPass
Wscript.Echo "ASP Queue Connection Test Time: " &amp;amp; _
    objIIS.AspQueueConnectionTestTime
Wscript.Echo "Application Allow Client Debugging: " &amp;amp; _
    objIIS.AppAllowClientDebug
Wscript.Echo "ASP Queue Timeout: " &amp;amp; objIIS.AspQueueTimeout
Wscript.Echo "Application Allow Debugging: " &amp;amp; objIIS.AppAllowDebugging
Wscript.Echo "ASP Request Queue Maximum: " &amp;amp; objIIS.AspRequestQueueMax
Wscript.Echo "Application Friendly Name: " &amp;amp; objIIS.AppFriendlyName
Wscript.Echo "ASP Script Engine Cache Maximum: " &amp;amp; _
    objIIS.AspScriptEngineCacheMax
Wscript.Echo "Application Isolated: " &amp;amp; objIIS.AppIsolated
Wscript.Echo "ASP Script Error Message: " &amp;amp; objIIS.AspScriptErrorMessage
Wscript.Echo "Application OOP Recover Limit: " &amp;amp; _
    objIIS.AppOopRecoverLimit
Wscript.Echo "ASP Script Error Sent to Browser: " &amp;amp; _
    objIIS.AspScriptErrorSentToBrowser
Wscript.Echo "Application Package ID: " &amp;amp; objIIS.AppPackageID
Wscript.Echo "ASP Script File Cache Size: " &amp;amp; objIIS.AspScriptFileCacheSize
Wscript.Echo "Application Package Name: " &amp;amp; objIIS.AppPackageName
Wscript.Echo "ASP Script Language: " &amp;amp; objIIS.AspScriptLanguage
Wscript.Echo "Application Root: " &amp;amp; objIIS.AppRoot
Wscript.Echo "ASP Script Timeout: " &amp;amp; objIIS.AspScriptTimeout
Wscript.Echo "Application WAM Clsid: " &amp;amp; objIIS.AppWamClsid
Wscript.Echo "ASP Session Maximum: " &amp;amp; objIIS.AspSessionMax
Wscript.Echo "ASP Allow Out-of-Process Components: " &amp;amp; _
    objIIS.AspAllowOutOfProcComponents
Wscript.Echo "ASP Session Timeout: " &amp;amp; objIIS.AspSessionTimeout
Wscript.Echo "ASP Allow Session State: " &amp;amp; objIIS.AspAllowSessionState
Wscript.Echo "ASP Buffering On: " &amp;amp; objIIS.AspBufferingOn
Wscript.Echo "ASP Codepage: " &amp;amp; objIIS.AspCodepage
Wscript.Echo "ASP Enable Application Restart: " &amp;amp; _
    objIIS.AspEnableApplicationRestart
Wscript.Echo "ASP Enable ASP HTML Fallback: " &amp;amp; _
    objIIS.AspEnableAspHtmlFallback
Wscript.Echo "ASP Enable Chunked Encoding: " &amp;amp; objIIS.AspEnableChunkedEncoding
Wscript.Echo "ASP Enabled Parent Paths: " &amp;amp; objIIS.AspEnableParentPaths
Wscript.Echo "ASP Track Threading Model: " &amp;amp; objIIS.AspTrackThreadingModel
Wscript.Echo "ASP Enable Typelib Cache: " &amp;amp; objIIS.AspEnableTypelibCache
Wscript.Echo "Authentication Flags: " &amp;amp; objIIS.AuthFlags
For Each strError in objIIS.HttpErrors
    Wscript.Echo "HTTP Error: " &amp;amp; strError
Next
Wscript.Echo "Authentication Persistence: " &amp;amp; objIIS.AuthPersistence
Wscript.Echo "HTTP Expires: " &amp;amp; objIIS.HttpExpires
Wscript.Echo "Cache Control Custom: " &amp;amp; objIIS.CacheControlCustom
For Each strPics in objIIS.HttpPics
    Wscript.Echo "HTTP Pic: " &amp;amp; strPics
Next
Wscript.Echo "Cache Control Maximum Age: " &amp;amp; objIIS.CacheControlMaxAge
Wscript.Echo "HTTP Redirect: " &amp;amp; objIIS.HttpRedirect
Wscript.Echo "Cache Control No Cache: " &amp;amp; objIIS.CacheControlNoCache
Wscript.Echo "Cache ISAPI: " &amp;amp; objIIS.CacheISAPI
Wscript.Echo "Logon Method: " &amp;amp; objIIS.LogonMethod
Wscript.Echo "Content Indexed: " &amp;amp; objIIS.ContentIndexed
For Each strMap in objIIS.MimeMap
    Wscript.Echo "MIME Map: " &amp;amp; strMao
Next
Wscript.Echo "Create CGI with New Console: " &amp;amp; _
    objIIS.CreateCGIWithNewConsole
Wscript.Echo "Path: " &amp;amp; objIIS.Path
Wscript.Echo "Create Process as User: " &amp;amp; objIIS.CreateProcessAsUser
Wscript.Echo "Pool IDC Timeout: " &amp;amp; objIIS.PoolIdcTimeout
Wscript.Echo "Default Document: " &amp;amp; objIIS.DefaultDoc
Wscript.Echo "Default Document Footer: " &amp;amp; objIIS.DefaultDocFooter
Wscript.Echo "Realm: " &amp;amp; objIIS.Realm
Wscript.Echo "Default Logon Domain: " &amp;amp; objIIS.DefaultLogonDomain
For Each strHeader in objIIS.RedirectHeaders
    Wscript.Echo "Redirect Header: " &amp;amp; strHeader
Next
Wscript.Echo "Directory Browse Flags: " &amp;amp; objIIS.DirBrowseFlags
For Each strScriptMap in objIIS.ScriptMaps
    Wscript.Echo "Script Map: " &amp;amp; strScriptMap
Next
Wscript.Echo "Don't Log: " &amp;amp; objIIS.DontLog
Wscript.Echo "SSI Exec Disable: " &amp;amp; objIIS.SSIExecDisable
Wscript.Echo "Enable Document Footer: " &amp;amp; objIIS.EnableDocFooter
Wscript.Echo "Enable Reverse DNS: " &amp;amp; objIIS.EnableReverseDns
Wscript.Echo "UNC Password: " &amp;amp; objIIS.UNCPassword
For Each strHeader in objIIS.HttpCustomHeaders
    Wscript.Echo "HTTP Custom Header: " &amp;amp; strHeader
Next
Wscript.Echo "UNC User Name: " &amp;amp; objIIS.UNCUserName
Wscript.Echo "Upload Read-Ahead Size: " &amp;amp; objIIS.UploadReadAheadSize
</vb><vb name="List the Properties of a Web Directory" n="443">' List the Properties of a Web Directory


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/1/ROOT/aspnet_client")
 
Wscript.Echo "Acces Flags: " &amp;amp; objIIS.AccessFlags
Wscript.Echo "ASP Errors to NT log: " &amp;amp; objIIS.AspErrorsToNTLog
Wscript.Echo "Access SSL Flags: " &amp;amp; objIIS.AccessSSLFlags
Wscript.Echo "ASP Exception catch Enabled: " &amp;amp; _
    objIIS.AspExceptionCatchEnable
Wscript.Echo "Anonymous Password Synch: " &amp;amp; objIIS.AnonymousPasswordSync
Wscript.Echo "ASP Log Error Requests: " &amp;amp; objIIS.AspLogErrorRequests
Wscript.Echo "Anonymous user Name: " &amp;amp; objIIS.AnonymousUserName
Wscript.Echo "ASP Processor Thread Maximum: " &amp;amp; _
    objIIS.AspProcessorThreadMax
Wscript.Echo "Anonymous User Password: " &amp;amp; objIIS.AnonymousUserPass
Wscript.Echo "ASP Queue Connection Test Time: " &amp;amp; _
    objIIS.AspQueueConnectionTestTime
Wscript.Echo "ASP Allow Client Debugging: " &amp;amp; objIIS.AppAllowClientDebug
Wscript.Echo "ASP Queue Timeout: " &amp;amp; objIIS.AspQueueTimeout
Wscript.Echo "Application Allow Debugging: " &amp;amp; objIIS.AppAllowDebugging
Wscript.Echo "ASP Request Queue Maximum: " &amp;amp; objIIS.AspRequestQueueMax
Wscript.Echo "Application Friendly Name: " &amp;amp; objIIS.AppFriendlyName
Wscript.Echo "ASP Script Engine cache Maximum: " &amp;amp; _
    objIIS.AspScriptEngineCacheMax
Wscript.Echo "Application Isolated: " &amp;amp; objIIS.AppIsolated
Wscript.Echo "ASP Script Error Message: " &amp;amp; objIIS.AspScriptErrorMessage
Wscript.Echo "Application OOP Recover Limit: " &amp;amp; objIIS.AppOopRecoverLimit
Wscript.Echo "ASP Script Error Sent to Browser: " &amp;amp; _
    objIIS.AspScriptErrorSentToBrowser
Wscript.Echo "Application Package ID: " &amp;amp; objIIS.AppPackageID
Wscript.Echo "ASP Script File Cache Size: " &amp;amp; objIIS.AspScriptFileCacheSize
Wscript.Echo "Application Package Name: " &amp;amp; objIIS.AppPackageName
Wscript.Echo "ASP Script Language: " &amp;amp; objIIS.AspScriptLanguage
Wscript.Echo "Application Root: " &amp;amp; objIIS.AppRoot
Wscript.Echo "ASP Script Timeout: " &amp;amp; objIIS.AspScriptTimeout
Wscript.Echo "Application WAM Clsid: " &amp;amp; objIIS.AppWamClsid
Wscript.Echo "ASP Session Maximum: " &amp;amp; objIIS.AspSessionMax
Wscript.Echo "ASP Allow Out-of-Process Components: " &amp;amp; _
    objIIS.AspAllowOutOfProcComponents
Wscript.Echo "ASP Session Timeout: " &amp;amp; objIIS.AspSessionTimeout
Wscript.Echo "ASP Allow Session State: " &amp;amp; objIIS.AspAllowSessionState
Wscript.Echo "ASP Buffering On: " &amp;amp; objIIS.AspBufferingOn
Wscript.Echo "ASP Codepage: " &amp;amp; objIIS.AspCodepage
Wscript.Echo "ASP Enable Application Restart: " &amp;amp; _
    objIIS.AspEnableApplicationRestart
Wscript.Echo "ASP Enable ASP HTML Fallback: " &amp;amp; _
    objIIS.AspEnableAspHtmlFallback
Wscript.Echo "ASP Enable Chunked Encoding: " &amp;amp; _
    objIIS.AspEnableChunkedEncoding
Wscript.Echo "ASP Enable Parent Paths: " &amp;amp; objIIS.AspEnableParentPaths
Wscript.Echo "ASP Track Threading Model: " &amp;amp; _
    objIIS.AspTrackThreadingModel
Wscript.Echo "ASP Enable Typelib Cache: " &amp;amp; _
    objIIS.AspEnableTypelibCache
Wscript.Echo "Authentication Flags: " &amp;amp; objIIS.AuthFlags
For Each strHeader in objIIS.HttpCustomHeaders
    Wscript.Echo "HTTP Custom Header: " &amp;amp; strHeader
Next
Wscript.Echo "Authentication Persistence: " &amp;amp; objIIS.AuthPersistence
For Each strError in objIIS.HttpErrors
    Wscript.Echo "HTTP Error: " &amp;amp; strError
Next
Wscript.Echo "Cache Control Custom: " &amp;amp; objIIS.CacheControlCustom
Wscript.Echo "HTTP Expires: " &amp;amp; objIIS.HttpExpires
Wscript.Echo "Cache Control Maximum Age: " &amp;amp; _
    objIIS.CacheControlMaxAge
For Each strPics in objIIS.HttpPics
    Wscript.Echo "HTTP Pic: " &amp;amp; strPics
Next
Wscript.Echo "Cache Control No Cache: " &amp;amp; _
    objIIS.CacheControlNoCache
Wscript.Echo "HTTP Redirect: " &amp;amp; objIIS.HttpRedirect
Wscript.Echo "Cache ISAPI: " &amp;amp; objIIS.CacheISAPI
Wscript.Echo "Content Indexed: " &amp;amp; objIIS.ContentIndexed
Wscript.Echo "Logon Method: " &amp;amp; objIIS.LogonMethod
Wscript.Echo "Create CGI With New Console: " &amp;amp; _
    objIIS.CreateCGIWithNewConsole
For Each strMap in objIIS.MimeMap
    Wscript.Echo "MIME Map: " &amp;amp; strMap
Next
Wscript.Echo "Create Process as User: " &amp;amp; objIIS.CreateProcessAsUser
Wscript.Echo "Pool IDC Timeout: " &amp;amp; objIIS.PoolIdcTimeout
Wscript.Echo "Default Document: " &amp;amp; objIIS.DefaultDoc
Wscript.Echo "Default Document Footer: " &amp;amp; objIIS.DefaultDocFooter
Wscript.Echo "Realm: " &amp;amp; objIIS.Realm
Wscript.Echo "Default Logon Domain: " &amp;amp; objIIS.DefaultLogonDomain
For Each strHeader in objIIS.RedirectHeaders
    Wscript.Echo "Redirect Header: " &amp;amp; strHeader
Next
Wscript.Echo "Directory Browse Flags: " &amp;amp; objIIS.DirBrowseFlags
For Each strMap in objIIS.ScriptMaps
    Wscript.Echo "Script Map: " &amp;amp; strMap
Next
Wscript.Echo "Don't Log: " &amp;amp; objIIS.DontLog
Wscript.Echo "SSI Exec Disable: " &amp;amp; objIIS.SSIExecDisable
Wscript.Echo "Enable Document Footer: " &amp;amp; objIIS.EnableDocFooter
Wscript.Echo "Enable Reverse DNS: " &amp;amp; objIIS.EnableReverseDns
Wscript.Echo "Upload Read-Ahead Size: " &amp;amp; objIIS.UploadReadAheadSize
</vb><vb name="List Web File Property Values" n="444">' List Web File Property Values


On Error Resume Next
 
strComputer = "LocalHost"
Set objX = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254/root/iisstart.htm")

If Err.Number &amp;lt;&amp;gt; 0 Then
    Set objIIS = GetObject _
        ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254/root")
    Set objFile = objIIS.Create("IIsWebFile", "iisstart.htm")
    objFile.SetInfo
    objIIS.SetInfo
End If
 
Set objFile = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254/root/iisstart.htm")
 
Wscript.Echo "Access Execute: " &amp;amp; objFile.AccessExecute
Wscript.Echo "Access Flags: " &amp;amp; objFile.AccessFlags
Wscript.Echo "Access No Physical Directory : " &amp;amp; _ 
    objFile.AccessNoPhysicalDir
Wscript.Echo "Access No Remote Execute: " &amp;amp; _ 
    objFile.AccessNoRemoteExecute
Wscript.Echo "Access No Remote Read: " &amp;amp; objFile.AccessNoRemoteRead
Wscript.Echo "Access No Remote Script: " &amp;amp; _ 
    objFile.AccessNoRemoteScript
Wscript.Echo "Access No Remote Write: " &amp;amp; objFile.AccessNoRemoteWrite
Wscript.Echo "Access Read: " &amp;amp; objFile.AccessRead
Wscript.Echo "Access Script: " &amp;amp; objFile.AccessScript
Wscript.Echo "Access Source: " &amp;amp; objFile.AccessSource
Wscript.Echo "Access SSL: " &amp;amp; objFile.AccessSSL
Wscript.Echo "Access SSL 128: " &amp;amp; objFile.AccessSSL128
Wscript.Echo "Access SSL Flags: " &amp;amp; objFile.AccessSSLFlags
Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _ 
    objFile.AccessSSLMapCert
Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _ 
    objFile.AccessSSLNegotiateCert
Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _ 
    objFile.AccessSSLRequireCert
Wscript.Echo "Access Write: " &amp;amp; objFile.AccessWrite
For Each strACL in objFile.AdminACLBin
    Wscript.Echo "Admin ACL Bin: " &amp;amp; strACL
Next
Wscript.Echo "Anonymous Password Sync: " &amp;amp; _ 
    objFile.AnonymousPasswordSync
Wscript.Echo "Anonymous User Name: " &amp;amp; objFile.AnonymousUserName
Wscript.Echo "Anonymous User Password: " &amp;amp; objFile.AnonymousUserPass
Wscript.Echo "Authentication Anonymous: " &amp;amp; objFile.AuthAnonymous
Wscript.Echo "Authentication Basic: " &amp;amp; objFile.AuthBasic
Wscript.Echo "Authentication Flags: " &amp;amp; objFile.AuthFlags
Wscript.Echo "Authentication MD5: " &amp;amp; objFile.AuthMD5
Wscript.Echo "Authentication NTLM: " &amp;amp; objFile.AuthNTLM
Wscript.Echo "Authentication Passport: " &amp;amp; objFile.AuthPassport
Wscript.Echo "Authentication Persistence: " &amp;amp; objFile.AuthPersistence
Wscript.Echo "Authentication Persist Single Request: " &amp;amp; _ 
    objFile.AuthPersistSingleRequest
Wscript.Echo "Az Enable: " &amp;amp; objFile.AzEnable
Wscript.Echo "Az Impersonation Level: " &amp;amp; _ 
    objFile.AzImpersonationLevel
Wscript.Echo "Az Scope Name: " &amp;amp; objFile.AzScopeName
Wscript.Echo "Az Store Name: " &amp;amp; objFile.AzStoreName
Wscript.Echo "Cache Control Custom: " &amp;amp; objFile.CacheControlCustom
Wscript.Echo "Cache Control Maximum Age: " &amp;amp; _ 
    objFile.CacheControlMaxAge
Wscript.Echo "Cache Control No Cache: " &amp;amp; objFile.CacheControlNoCache
Wscript.Echo "CGI Timeout: " &amp;amp; objFile.CGITimeout
Wscript.Echo "Create CGI With New Console: " &amp;amp; _ 
    objFile.CreateCGIWithNewConsole
Wscript.Echo "Create Process As User: " &amp;amp; objFile.CreateProcessAsUser
Wscript.Echo "Default Doc Footer: " &amp;amp; objFile.DefaultDocFooter
Wscript.Echo "Default Logon Domain: " &amp;amp; objFile.DefaultLogonDomain
Wscript.Echo "Disable Static File Cache: " &amp;amp; _ 
    objFile.DisableStaticFileCache
Wscript.Echo "Do Dynamic Compression: " &amp;amp; _ 
    objFile.DoDynamicCompression
Wscript.Echo "Don't Log: " &amp;amp; objFile.DontLog
Wscript.Echo "Do Static Compression: " &amp;amp; objFile.DoStaticCompression
Wscript.Echo "Enable Doc Footer: " &amp;amp; objFile.EnableDocFooter
Wscript.Echo "Enable Reverse Dns: " &amp;amp; objFile.EnableReverseDns
For Each strHeader in objFile.HttpCustomHeaders
    Wscript.Echo "Http Custom Header: " &amp;amp; strHeader
Next
For Each strError in objFile.HttpErrors
    Wscript.Echo "Http Error: " &amp;amp; strError
Next
Wscript.Echo "Http Expires: " &amp;amp; objFile.HttpExpires
For Each strPic in objFile.HttpPics
    Wscript.Echo "Http Pic: " &amp;amp; strPic
Next
Wscript.Echo "Http Redirect: " &amp;amp; objFile.HttpRedirect
Wscript.Echo "Logon Method: " &amp;amp; objFile.LogonMethod
Wscript.Echo "Maximum Request Entity Allowed: " &amp;amp; _ 
    objFile.MaxRequestEntityAllowed
For Each strMap in objFile.MimeMap
    Wscript.Echo "Mime Map: " &amp;amp; strMap
Next
Wscript.Echo "Name: " &amp;amp; objFile.Name
Wscript.Echo "NT Authentication Providers: " &amp;amp; _ 
    objFile.NTAuthenticationProviders
Wscript.Echo "Passport Requires AD Mapping: " &amp;amp; _ 
    objFile.PassportRequireADMapping
Wscript.Echo "Pool IDC Timeout: " &amp;amp; objFile.PoolIdcTimeout
Wscript.Echo "Realm: " &amp;amp; objFile.Realm
For Each strHeader in objFile.RedirectHeaders
     Wscript.Echo "Redirect Header: " &amp;amp; strHeader
Next
For Each strMap in objFile.ScriptMaps
    Wscript.Echo "Script Map: " &amp;amp; strMap
Next
Wscript.Echo "SSI Exec Disable: " &amp;amp; objFile.SSIExecDisable
Wscript.Echo "Upload Read Ahead Size: " &amp;amp; objFile._ 
    UploadReadAheadSize
Wscript.Echo "Use Digest SSP: " &amp;amp; objFile.UseDigestSSP
</vb><vb name="List Web Server Configuration Information" n="445">' List Web Server Configuration Information


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/INFO")
Wscript.Echo "Admin Server: " &amp;amp; objIIS.AdminServer
Wscript.Echo "Log Module List: " &amp;amp; objIIS.LogModuleList
For Each strDescription in objIIS.CustomErrorDescriptions
    Wscript.Echo "Custom Error Description: " &amp;amp; strDescription
Next
Wscript.Echo "Server Configuration Flags: " &amp;amp; objIIS.ServerConfigFlags
</vb><vb name="List Web Server Information" n="446">' List Web Server Information


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/1")
 
Wscript.Echo "Access Flags: " &amp;amp; objIIS.AccessFlags
Wscript.Echo "ASP Enable Parent Paths: " &amp;amp; objIIS.AspEnableParentPaths
Wscript.Echo "Access SSL Flags: " &amp;amp; objIIS.AccessSSLFlags
Wscript.Echo "ASP Enable Typelib Cache: " &amp;amp; objIIS.AspEnableTypelibCache
Wscript.Echo "ASP Errors to NT Log: " &amp;amp; objIIS.AspErrorsToNTLog
Wscript.Echo "Allow Keep Alive: " &amp;amp; objIIS.AllowKeepAlive
Wscript.Echo "ASP Exception Catch Enabled: " &amp;amp; _
    objIIS.AspExceptionCatchEnable
Wscript.Echo "Allow Path for Script Mappings: " &amp;amp; _
    objIIS.AllowPathInfoForScriptMappings
Wscript.Echo "ASP Log Error Requests: " &amp;amp; objIIS.AspLogErrorRequests
Wscript.Echo "Anonymous Passwoprd Sync: " &amp;amp; objIIS.AnonymousPasswordSync
Wscript.Echo "ASP Processor Thread Maximum: " &amp;amp; _
    objIIS.AspProcessorThreadMax
Wscript.Echo "Anonymous User Name: " &amp;amp; objIIS.AnonymousUserName
Wscript.Echo "ASP Queue Connection Test Time: " &amp;amp; _
    objIIS.AspQueueConnectionTestTime
Wscript.Echo "Anonymous User Password: " &amp;amp; objIIS.AnonymousUserPass
Wscript.Echo "ASP Queue Timeout: " &amp;amp; objIIS.AspQueueTimeout
Wscript.Echo "Application Allow Client Debugging: " &amp;amp; _
    objIIS.AppAllowClientDebug
Wscript.Echo "ASP Request Queue Maximum: " &amp;amp; objIIS.AspRequestQueueMax
Wscript.Echo "Application Allow Debugging: " &amp;amp; objIIS.AppAllowDebugging
Wscript.Echo "ASP Script Engine Cache maximum: " &amp;amp; _
    objIIS.AspScriptEngineCacheMax
Wscript.Echo "Application Friendly Name: " &amp;amp; objIIS.AppFriendlyName
Wscript.Echo "ASP Script Error Sent to Browser: " &amp;amp; _
    objIIS.AspScriptErrorSentToBrowser
Wscript.Echo "Application Isolated: " &amp;amp; objIIS.AppIsolated
Wscript.Echo "ASP Script File Cache Size: " &amp;amp; _
    objIIS.AspScriptFileCacheSize
Wscript.Echo "Application OOP Recover Limit: " &amp;amp; _
    objIIS.AppOopRecoverLimit
Wscript.Echo "ASP Script Language: " &amp;amp; objIIS.AspScriptLanguage
Wscript.Echo "Application pPackage ID: " &amp;amp; objIIS.AppPackageID
Wscript.Echo "ASP Session Maximum: " &amp;amp; objIIS.AspSessionMax
Wscript.Echo "Application Package Name: " &amp;amp; objIIS.AppPackageName
Wscript.Echo "ASP Script Timeout: " &amp;amp; objIIS.AspScriptTimeout
Wscript.Echo "Application Root: " &amp;amp; objIIS.AppRoot
Wscript.Echo "ASP Session Timeout: " &amp;amp; objIIS.AspSessionTimeout
Wscript.Echo "Application WAM Clsid: " &amp;amp; objIIS.AppWamClsid
Wscript.Echo "ASP Allow Out-of-Process Components: " &amp;amp; _
    objIIS.AspAllowOutOfProcComponents
Wscript.Echo "ASP Allow Session State: " &amp;amp; objIIS.AspAllowSessionState
Wscript.Echo "ASP Buffering On: " &amp;amp; objIIS.AspBufferingOn
Wscript.Echo "ASP Codepage: " &amp;amp; objIIS.AspCodepage
Wscript.Echo "ASP Enable Application Restart: " &amp;amp; _
    objIIS.AspEnableApplicationRestart
Wscript.Echo "ASP Enable ASP HTML Fallback: " &amp;amp; _
    objIIS.AspEnableAspHtmlFallback
Wscript.Echo "ASP Track Threading Model: " &amp;amp; _
    objIIS.AspTrackThreadingModel
Wscript.Echo "ASP Enable Chunck Encoding: " &amp;amp; _
    objIIS.AspEnableChunkedEncoding
Wscript.Echo "Authentication Flags: " &amp;amp; objIIS.AuthFlags
Wscript.Echo "Create Process as User: " &amp;amp; objIIS.CreateProcessAsUser
Wscript.Echo "Authentication Persistence: " &amp;amp; objIIS.AuthPersistence
Wscript.Echo "Default Document: " &amp;amp; objIIS.DefaultDoc
Wscript.Echo "Cache Control Custom: " &amp;amp; objIIS.CacheControlCustom
Wscript.Echo "Default Document Footer: " &amp;amp; objIIS.DefaultDocFooter
Wscript.Echo "Cache Control Maximum Age: " &amp;amp; objIIS.CacheControlMaxAge
Wscript.Echo "Default Logon Domain: " &amp;amp; objIIS.DefaultLogonDomain
Wscript.Echo "Cache Control No Cache: " &amp;amp; objIIS.CacheControlNoCache
Wscript.Echo "Directory Browse Flags: " &amp;amp; objIIS.DirBrowseFlags
Wscript.Echo "Cache ISAPI: " &amp;amp; objIIS.CacheISAPI
Wscript.Echo "Disable Socket Pooling: " &amp;amp; objIIS.DisableSocketPooling
Wscript.Echo "CGI Timeout: " &amp;amp; objIIS.CGITimeout
Wscript.Echo "Don't Log: " &amp;amp; objIIS.DontLog
Wscript.Echo "Connection Timeout: " &amp;amp; objIIS.ConnectionTimeout
Wscript.Echo "Enable Document Footer: " &amp;amp; objIIS.EnableDocFooter
Wscript.Echo "Enable Reverse DNS: " &amp;amp; objIIS.EnableReverseDns
Wscript.Echo "FrontPage Web: " &amp;amp; objIIS.FrontPageWeb
For Each strHeader in objIIS.HttpCustomHeaders
    Wscript.Echo "HTTP Custom Header: " &amp;amp; strHeader
Next
For Each strError in objIIS.HttpErrors
    Wscript.Echo "HTTP Error: " &amp;amp; strError
Next
Wscript.Echo "HTTP Expires: " &amp;amp; objIIS.HttpExpires
For Each strPic in objIIS.HttpPics
    Wscript.Echo "HTTP Pics: " &amp;amp; strPic
Next
Wscript.Echo "Create CGI With new Console: " &amp;amp; _
    objIIS.CreateCGIWithNewConsole
Wscript.Echo "Log Ext File Flags: " &amp;amp; objIIS.LogExtFileFlags
Wscript.Echo "Log ODBC Password: " &amp;amp; objIIS.LogOdbcPassword
Wscript.Echo "Log File Directory: " &amp;amp; objIIS.LogFileDirectory
Wscript.Echo "Log ODBC Table Name: " &amp;amp; objIIS.LogOdbcTableName
Wscript.Echo "Log File Local Time Rollover: " &amp;amp; _
    objIIS.LogFileLocaltimeRollover
Wscript.Echo "Log ODBC User name: " &amp;amp; objIIS.LogOdbcUserName
Wscript.Echo "Log File Period: " &amp;amp; objIIS.LogFilePeriod
Wscript.Echo "Logon Method: " &amp;amp; objIIS.LogonMethod
Wscript.Echo "Log File Truncate Size: " &amp;amp; _
    objIIS.LogFileTruncateSize
Wscript.Echo "Log Plugin Clsid: " &amp;amp; objIIS.LogPluginClsid
Wscript.Echo "Log ODBC Data Source: " &amp;amp; objIIS.LogOdbcDataSource
Wscript.Echo "Log Type: " &amp;amp; objIIS.LogType     
Wscript.Echo "Maximum Bandwidth: " &amp;amp; objIIS.MaxBandwidth
For Each strHeader in objIIS.RedirectHeaders
    Wscript.Echo "Redirect Header: " &amp;amp; strHeader
Next
Wscript.Echo "Maximum Bandwidth Blocked: " &amp;amp; _
    objIIS.MaxBandwidthBlocked
For Each strMap in objIIS.ScriptMaps
    Wscript.Echo "Script Map: " &amp;amp; strMap
Next
Wscript.Echo "Maximum Connections: " &amp;amp; objIIS.MaxConnections
For Each strBinding in objIIS.SecureBindings
    Wscript.Echo "Secure Binding: " &amp;amp; strBinding
Next
Wscript.Echo "Maximum Endpoints: " &amp;amp; objIIS.MaxEndpointConnections
Wscript.Echo "Server AutoStart: " &amp;amp; objIIS.ServerAutoStart
For Each strMap in objIIS.MimeMap
    Wscript.Echo "MIME Map: " &amp;amp; strMap
Next
For Each strBinding in objIIS.ServerBindings
    Wscript.Echo "Server Binding: " &amp;amp; strBinding
Next
Wscript.Echo "Server Comment: " &amp;amp; objIIS.ServerComment
Wscript.Echo "Server Listen Backlog: " &amp;amp; objIIS.ServerListenBacklog
Wscript.Echo "NT Authentication Providers: " &amp;amp; o_
    bjIIS.NTAuthenticationProviders
Wscript.Echo "Server Listen Timeout: " &amp;amp; objIIS.ServerListenTimeout
Wscript.Echo "Password Cache TTL: " &amp;amp; objIIS.PasswordCacheTTL
Wscript.Echo "Server Size: " &amp;amp; objIIS.ServerSize
Wscript.Echo "Password Change Flags: " &amp;amp; objIIS.PasswordChangeFlags
Wscript.Echo "Server State: " &amp;amp; objIIS.ServerState
Wscript.Echo "Password Expire Pre-Notify Days: " &amp;amp; _
    objIIS.PasswordExpirePrenotifyDays
Wscript.Echo "SSI Exec Disable: " &amp;amp; objIIS.SSIExecDisable
Wscript.Echo "Pool IDC Timeout: " &amp;amp; objIIS.PoolIdcTimeout
Wscript.Echo "Process NTCR If Logged On: " &amp;amp; _
    objIIS.ProcessNTCRIfLoggedOn
Wscript.Echo "Upload Read-Ahead Size: " &amp;amp; _
    objIIS.UploadReadAheadSize
Wscript.Echo "Realm: " &amp;amp; objIIS.Realm
</vb><vb name="List Web Service Property Values" n="447">' List Web Service Property Values


strComputer = "LocalHost"
 
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC")
 
Wscript.Echo "Access Flags: " &amp;amp; objIIS.AccessFlags
Wscript.Echo "ASP Enable Typelib Cache: " &amp;amp; _
    objIIS.AspEnableTypelibCache
Wscript.Echo "Access SSL Flags: " &amp;amp; objIIS.AccessSSLFlags
Wscript.Echo "ASP Errors to NT Log: " &amp;amp; objIIS.AspErrorsToNTLog
Wscript.Echo "ASP Exception Catch Enabled: " &amp;amp; _
    objIIS.AspExceptionCatchEnable
Wscript.Echo "Allow Path Information for Script Mappings: " &amp;amp; _
    objIIS.AllowPathInfoForScriptMappings
Wscript.Echo "ASP Log Error Requests: " &amp;amp; objIIS.AspLogErrorRequests
Wscript.Echo "Anonymous Password Synch: " &amp;amp; objIIS.AnonymousPasswordSync
Wscript.Echo "ASP Processor Thread Maximum: " &amp;amp; _
    objIIS.AspProcessorThreadMax
Wscript.Echo "Anonynmous User Name: " &amp;amp; objIIS.AnonymousUserName
Wscript.Echo "ASP Queue Connection Test Time: " &amp;amp; _
    objIIS.AspQueueConnectionTestTime
Wscript.Echo "Anonymous User Password: " &amp;amp; objIIS.AnonymousUserPass
Wscript.Echo "ASP Queue Timeout: " &amp;amp; objIIS.AspQueueTimeout
Wscript.Echo "Application Allow Client Debugging: " &amp;amp; _
    objIIS.AppAllowClientDebug
Wscript.Echo "ASP Request Queue Maximum: " &amp;amp; objIIS.AspRequestQueueMax
Wscript.Echo "Application Allow Debugging: " &amp;amp; objIIS.AppAllowDebugging
Wscript.Echo "ASP Script Engine Cache Maximum: " &amp;amp; _
    objIIS.AspScriptEngineCacheMax
Wscript.Echo "Application Friendly Name: " &amp;amp; objIIS.AppFriendlyName
Wscript.Echo "ASP Script Error Message: " &amp;amp; objIIS.AspScriptErrorMessage
Wscript.Echo "Application Isolated: " &amp;amp; objIIS.AppIsolated
Wscript.Echo "ASP Script Error Sent to Browser: " &amp;amp; _
    objIIS.AspScriptErrorSentToBrowser
Wscript.Echo "Application Package ID: " &amp;amp; objIIS.AppPackageID
Wscript.Echo "ASP Script File Cache Size: " &amp;amp; objIIS.AspScriptFileCacheSize
Wscript.Echo "Application Package Name: " &amp;amp; objIIS.AppPackageName
Wscript.Echo "ASP Script Language: " &amp;amp; objIIS.AspScriptLanguage
Wscript.Echo "Application Root: " &amp;amp; objIIS.AppRoot
Wscript.Echo "ASP Session Maximum: " &amp;amp; objIIS.AspSessionMax
Wscript.Echo "Application WAM Clsid: " &amp;amp; objIIS.AppWamClsid
Wscript.Echo "ASP Script Timeout: " &amp;amp; objIIS.AspScriptTimeout
Wscript.Echo "ASP Allow Out-of-Process Components: " &amp;amp; _
    objIIS.AspAllowOutOfProcComponents
Wscript.Echo "ASP Session Timeout: " &amp;amp; objIIS.AspSessionTimeout
Wscript.Echo "ASP Allow Session State: " &amp;amp; objIIS.AspAllowSessionState
Wscript.Echo "ASP Buffering On: " &amp;amp; objIIS.AspBufferingOn
Wscript.Echo "ASP Codepage: " &amp;amp; objIIS.AspCodepage
Wscript.Echo "ASP Enable Application Restart: " &amp;amp; _
    objIIS.AspEnableApplicationRestart
Wscript.Echo "ASP Enable ASP HTML Fallback: " &amp;amp; _
    objIIS.AspEnableAspHtmlFallback
Wscript.Echo "ASP Enabled Chunked Encoding: " &amp;amp; _
    objIIS.AspEnableChunkedEncoding
Wscript.Echo "ASP Enable parent Paths: " &amp;amp; objIIS.AspEnableParentPaths
Wscript.Echo "ASP Track Threading Model: " &amp;amp; objIIS.AspTrackThreadingModel    
Wscript.Echo "Authentication Flags: " &amp;amp; objIIS.AuthFlags
Wscript.Echo "Default Document: " &amp;amp; objIIS.DefaultDoc
Wscript.Echo "Authentication Persistence: " &amp;amp; objIIS.AuthPersistence
Wscript.Echo "Default Document Footer: " &amp;amp; objIIS.DefaultDocFooter
Wscript.Echo "Cache Control Custom: " &amp;amp; objIIS.CacheControlCustom
Wscript.Echo "Default Logon Domain: " &amp;amp; objIIS.DefaultLogonDomain
Wscript.Echo "Cache Control Maximum Age: " &amp;amp; objIIS.CacheControlMaxAge
Wscript.Echo "Directory Browse Flags: " &amp;amp; objIIS.DirBrowseFlags
Wscript.Echo "Cache Control No Cache: " &amp;amp; objIIS.CacheControlNoCache
Wscript.Echo "Directory Levels to Scan: " &amp;amp; objIIS.DirectoryLevelsToScan
Wscript.Echo "Cache ISAPI: " &amp;amp; objIIS.CacheISAPI
Wscript.Echo "Disable Socket Pooling: " &amp;amp; objIIS.DisableSocketPooling
Wscript.Echo "Content Indexed: " &amp;amp; objIIS.ContentIndexed
Wscript.Echo "Don't Log: " &amp;amp; objIIS.DontLog
Wscript.Echo "Connection Timeout: " &amp;amp; objIIS.ConnectionTimeout
Wscript.Echo "Enable Document Footer: " &amp;amp; objIIS.EnableDocFooter
Wscript.Echo "Enable Reverse DNS: " &amp;amp; objIIS.EnableReverseDns
For Each strError in objIIS.HttpErrors
    Wscript.Echo "HTTP Error: " &amp;amp; strError
Next
Wscript.Echo "HTTP Expires: " &amp;amp; objIIS.HttpExpires
For Each strPic in objIIS.HttpPics
    Wscript.Echo "HTTP Pic: " &amp;amp; strPic.Name
Next
Wscript.Echo "Create CGI with New Console: " &amp;amp; _
    objIIS.CreateCGIWithNewConsole
Wscript.Echo "Create Process as User: " &amp;amp; objIIS.CreateProcessAsUser
For Each strApp in objIIS.InProcessIsapiApps
    Wscript.Echo "In-Process ISAPI Application: " &amp;amp; strApp
Next
Wscript.Echo "Log Ext File Flags: " &amp;amp; objIIS.LogExtFileFlags
Wscript.Echo "Log ODBC Password: " &amp;amp; objIIS.LogOdbcPassword
Wscript.Echo "Log File Directory: " &amp;amp; objIIS.LogFileDirectory
Wscript.Echo "Log ODBC Table Name: " &amp;amp; objIIS.LogOdbcTableName
Wscript.Echo "Log File Local Time Rollover: " &amp;amp; _
    objIIS.LogFileLocaltimeRollover
Wscript.Echo "Log ODBC User Name: " &amp;amp; objIIS.LogOdbcUserName
Wscript.Echo "Log File Period: " &amp;amp; objIIS.LogFilePeriod
Wscript.Echo "Logon Method: " &amp;amp; objIIS.LogonMethod
Wscript.Echo "Log File Truncate Size: " &amp;amp; objIIS.LogFileTruncateSize
Wscript.Echo "Log Plugin Clsid: " &amp;amp; objIIS.LogPluginClsid
Wscript.Echo "Log ODBC Data Source: " &amp;amp; objIIS.LogOdbcDataSource
Wscript.Echo "Log Type: " &amp;amp; objIIS.LogType     
For Each strMap in objIIS.ScriptMaps
    Wscript.Echo "Script Map: " &amp;amp; strMap
Next
Wscript.Echo "Maximum Connections: " &amp;amp; objIIS.MaxConnections
Wscript.Echo "Server AutoStart: " &amp;amp; objIIS.ServerAutoStart
Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
    objIIS.MaxEndpointConnections
For Each strBinding in objIIS.ServerBindings
    Wscript.Echo "Server Binding: " &amp;amp; strBinding.Name
Next
Wscript.Echo "Server Comments: " &amp;amp; objIIS.ServerComment
Wscript.Echo "Server Listen Backlog: " &amp;amp; objIIS.ServerListenBacklog
Wscript.Echo "NT Authentication Providers: " &amp;amp; _
    objIIS.NTAuthenticationProviders
Wscript.Echo "Server Listen Timeout: " &amp;amp; objIIS.ServerListenTimeout
Wscript.Echo "Password Cache Time-to-Live: " &amp;amp; _
    objIIS.PasswordCacheTTL
Wscript.Echo "Server Size: " &amp;amp; objIIS.ServerSize
Wscript.Echo "Password Change Flags: " &amp;amp; objIIS.PasswordChangeFlags
Wscript.Echo "SSI Exec Disable: " &amp;amp; objIIS.SSIExecDisable
Wscript.Echo "Password Expire Pre-Notify Days: " &amp;amp; _
    objIIS.PasswordExpirePrenotifyDays
Wscript.Echo "SSL Use DS Mapper: " &amp;amp; objIIS.SslUseDsMapper
Wscript.Echo "Pool IDC Timeout: " &amp;amp; objIIS.PoolIdcTimeout
Wscript.Echo "Process NTCR if Logged On: " &amp;amp; _
    objIIS.ProcessNTCRIfLoggedOn
Wscript.Echo "Upload Read-Ahead Size: " &amp;amp; _
    objIIS.UploadReadAheadSize
Wscript.Echo "Realm: " &amp;amp; objIIS.Realm
Wscript.Echo "WAM User Name: " &amp;amp; objIIS.WAMUserName
For Each strHeader in objIIS.RedirectHeaders
    Wscript.Echo "Redirect Header: " &amp;amp; strHeader.Name
Next
Wscript.Echo "WAM User Password: " &amp;amp; objIIS.WAMUserPass
</vb><vb name="Modify a Web Directory Metabase Property" n="448">' Modify a Web Directory Metabase Property


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/1/ROOT/aspnet_client")

objIIS.DefaultDocFooter = "footer.htm"
objIIS.SetInfo
</vb><vb name="Modify a Web Server Metabase Property" n="449">' Modify a Web Server Metabase Property


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/1")

objIIS.PasswordExpirePrenotifyDays = 10
objIIS.SetInfo
</vb><vb name="Modify a Web Service Metabase Property" n="450">' Modify a Web Service Metabase Property


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC")
objIIS.ConnectionTimeout = 60
objIIS.SetInfo
</vb><vb name="Modify a Web Virtual Directory Metabase Property" n="451">' Modify a Web Virtual Directory Metabase Property


strComputer = "LocalHost"
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/1/ROOT/Printers")

objIIS.EnableReverseDns = TRUE
objIIS.SetInfo
</vb><vb name="Pause a Web Server" n="452">' Pause a Web Server


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254")

objIIS.Pause
</vb><vb name="Start a Web Server" n="453">' Start a Web Server


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254")

objIIS.Start
</vb><vb name="Stop a Web Server" n="454">' Stop a Web Server


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254")

objIIS.Stop
</vb><vb name="V erify Web Server Status" n="455">' V erify Web Server Status


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254")
intStatus = objIIS.Status
 
Select Case intStatus
    Case 1 Wscript.Echo "The Web server is starting."
    Case 2 Wscript.Echo "The Web server is running."
    Case 3 Wscript.Echo "The Web server is stopping."
    Case 4 Wscript.Echo "The Web server is stopped."
    Case 5 Wscript.Echo "The Web server is pausing."
    Case 6 Wscript.Echo "The Web server is paused."
    Case 7 Wscript.Echo "The Web server is continuing."
End Select
</vb></dd>
		</dd>
		<dd name="IIS 6.0" code="iis6" desc="Sample scripts for managing Internet Information Server 6.0.">
			<dd name="Applications and Application Pools" code="apps" desc="Sample scripts for creating, deleting, and modifying application and application pools for Internet Information Server 6.0."><vb name="Modify Application Configuration Cache Options" n="456">' Modify Application Configuration Cache Options


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")

For Each objItem in colItems
    objItem.AspDiskTemplateCacheDirectory = "C:\Cache"
    objItem.AspMaxDiskTemplateCacheFiles = 5000
    objItem.AspScriptEngineCacheMax = 250
    objItem.AspScriptFileCacheSize = 500
    objItem.Put_
Next
</vb><vb name="Modify Application Configuration Debugging Options" n="457">' Modify Application Configuration Debugging Options


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")

For Each objItem in colItems
    objItem.AppAllowClientDebug = True
    objItem.AppAllowDebugging = True
    objItem.AspScriptErrorMessage = "Sorry, an error has occurred."
    objItem.AspScriptErrorSentToBrowser = True
    objItem.Put_
Next
</vb><vb name="Modify Application Pools Health Properties" n="458">' Modify Application Pools Health Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsApplicationPoolsSetting")

For Each objItem in colItems
    objItem.PingingEnabled = True
    objItem.PingInterval = 60
    objItem.RapidFailProtection = True
    objItem.RapidFailProtectionInterval = 10
    objItem.RapidFailProtectionMaxCrashes = 10
    objItem.ShutdownTimeLimit = 120
    objItem.StartupTimeLimit = 120
    objItem.Put_
Next
</vb><vb name="Modify Application Pools Identity Properties" n="459">' Modify Application Pools Identity Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsApplicationPoolsSetting")

For Each objItem in colItems
    objItem.WAMUserName = "TestUser"
    objItem.WAMUserPass = "ur^354Hdf"
    objItem.Put_
Next
</vb><vb name="Modify Application Pools Performance Properties" n="460">' Modify Application Pools Performance Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsApplicationPoolsSetting")

For Each objItem in colItems
    objItem.AppPoolQueueLength = 5000
    objItem.CPUAction = 1
    objItem.CPULimit = 50000
    objItem.CPUResetInterval= 30
    objItem.IdleTimeout = 30
    objItem.MaxProcesses = 2
    objItem.Put_
Next
</vb><vb name="Modify Application Pools Recycling Properties" n="461">' Modify Application Pools Recycling Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsApplicationPoolsSetting")

For Each objItem in colItems
    objItem.PeriodicRestartMemory = 1000000
    objItem.PeriodicRestartPrivateMemory = 1000000
    objItem.PeriodicRestartRequests = 5
    objItem.PeriodicRestartTime = 3480
    objItem.Put_
Next
</vb><vb name="Recycle an Application Pool" n="462">' Recycle an Application Pool


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsApplicationPool Where Name = " &amp;amp; _
        "'W3SVC/AppPools/MSSharePointAppPool'")

For Each objItem in colItems
    objItem.Recycle
Next
</vb><vb name="Restart an Application in a Virtual Directory" n="463">' Restart an Application in a Virtual Directory


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebVirtualDir Where Name = " &amp;amp; _
        "'W3SVC/1/ROOT/tsweb'")

For Each objItem in colItems
   objItem.ASPAppRestart
Next
</vb><vb name="Restart an Application in a Web Directory" n="464">' Restart an Application in a Web Directory


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebDirectory Where Name = " &amp;amp; _
        "'W3SVC/2142295254/root/aspnet_client_folder'")

For Each objItem in colItems
   objItem.ASPAppRestart
Next
</vb><vb name="Start an Application Pool" n="465">' Start an Application Pool


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsApplicationPool Where Name = " &amp;amp; _
        "'W3SVC/AppPools/MSSharePointAppPool'")

For Each objItem in colItems
    objItem.Start
Next
</vb><vb name="Stop an Application Pool" n="466">' Stop an Application Pool


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsApplicationPool Where Name = " &amp;amp; _
        "'W3SVC/AppPools/MSSharePointAppPool'")

For Each objItem in colItems
    objItem.Stop
Next
</vb><vb name="Unload an Application from a Web Directory" n="467">' Unload an Application from a Web Directory


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebDirectory Where Name = " &amp;amp; _
        "'W3SVC/2142295254/root/aspnet_client_folder'")

For Each objItem in colItems
   objItem.AppUnload(True)
Next
</vb><vb name="Unload an Application in a Virtual Directory" n="468">' Unload an Application in a Virtual Directory


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebVirtualDir Where Name = " &amp;amp; _
        "'W3SVC/1/ROOT/tsweb'")

For Each objItem in colItems
   objItem.AppUnload(True)
Next
</vb><vb name="Verify the Status of a Web Directory Application" n="469">' Verify the Status of a Web Directory Application


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebDirectory Where Name = " &amp;amp; _
        "'W3SVC/2142295254/root/aspnet_client_folder'")

For Each objItem in colItems
    strStatus = objItem.AppGetStatus
    If strStatus = 2 Then
        Wscript.Echo "The application is running."
    ElseIf strStatus = 3 Then
        Wscript.Echo "The application is stopped."
    Else
        Wscript.Echo _
            "The status could not be determined."
    End If
Next
</vb><vb name="Verify the Status of an Application in a Virtual Directory" n="470">' Verify the Status of an Application in a Virtual Directory


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebVirtualDir Where Name = " &amp;amp; _
        "'W3SVC/1/ROOT/tsweb'")

For Each objItem in colItems
    strStatus = objItem.AppGetStatus
    If strStatus = 2 Then
        Wscript.Echo "The application is running."
    ElseIf strStatus = 3 Then
        Wscript.Echo "The application is stopped."
    Else
        Wscript.Echo _
            "The status could not be determined."
    End If
Next
</vb><vb name="List Application Configuration Cache Options" n="471">' List Application Configuration Cache Options


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")

For Each objItem in colItems
    Wscript.Echo "ASP Disk Template Cache Directory: " &amp;amp; _
        objItem.AspDiskTemplateCacheDirectory
    Wscript.Echo "ASP Maximum Disk Template Cache Files: " &amp;amp; _
        objItem.AspMaxDiskTemplateCacheFiles
    Wscript.Echo "ASP Script Engine Cache Maximum: " &amp;amp; _
        objItem.AspScriptEngineCacheMax
    Wscript.Echo "ASP Script File Cache Size: " &amp;amp; _
        objItem.AspScriptFileCacheSize
Next
</vb><vb name="List Application Configuration Debugging Options" n="472">' List Application Configuration Debugging Options


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")

For Each objItem in colItems
    Wscript.Echo "Application Allow Client Debug: " &amp;amp; _
        objItem.AppAllowClientDebug
    Wscript.Echo "Application Allow Debugging: " &amp;amp; _
        objItem.AppAllowDebugging
   Wscript.Echo "ASP Script Error Message: " &amp;amp; _
        objItem.AspScriptErrorMessage
    Wscript.Echo "ASP Script Error Sent To Browser: " &amp;amp; _
        objItem.AspScriptErrorSentToBrowser
Next
</vb><vb name="List Application Configuration Mappings" n="473">' List Application Configuration Mappings


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")

For Each objItem in colItems
    Wscript.Echo "Cache ISAPI: " &amp;amp; objItem.CacheISAPI
    For i = 0 to Ubound(objItem.ScriptMaps)
        Wscript.Echo "Extension: " &amp;amp; objItem.ScriptMaps(i).Extensions
        Wscript.Echo "Included Verbs: " &amp;amp; _
            objItem.ScriptMaps(i).IncludedVerbs
        Wscript.Echo "Script Processor: " &amp;amp; _
            objItem.ScriptMaps(i).ScriptProcessor
        Wscript.Echo
    Next
Next
</vb><vb name="List Application Configuration Options" n="474">' List Application Configuration Options


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")

For Each objItem in colItems
    Wscript.Echo "ASP Allow Session State: " &amp;amp; _
        objItem.AspAllowSessionState
    Wscript.Echo "ASP Buffering On: " &amp;amp; objItem.AspBufferingOn
    Wscript.Echo "ASP Enable Parent Paths: " &amp;amp; _
        objItem.AspEnableParentPaths
    Wscript.Echo "ASP Enable Sxs: " &amp;amp; objItem.AspEnableSxs
    Wscript.Echo "ASP Script Language: " &amp;amp; objItem.AspScriptLanguage
    Wscript.Echo "ASP Script Timeout: " &amp;amp; objItem.AspScriptTimeout
    Wscript.Echo "ASP Session Timeout: " &amp;amp; objItem.AspSessionTimeout
    Wscript.Echo "ASP Sxs Name: " &amp;amp; objItem.AspSxsName
Next
</vb><vb name="List Application Extension Mappings" n="475">' List Application Extension Mappings


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServerSetting")

For Each objItem in colItems
    For i = 0 to Ubound(objItem.ScriptMaps)
        Wscript.Echo "Extension: " &amp;amp; objItem.ScriptMaps(i).Extensions
        Wscript.Echo "Included Verbs: " &amp;amp; _
            objItem.ScriptMaps(i).IncludedVerbs
        Wscript.Echo "Script Processor: " &amp;amp; _
            objItem.ScriptMaps(i).ScriptProcessor
        Wscript.Echo
    Next
Next
</vb><vb name="List Application Pool Setting Information" n="476">' List Application Pool Setting Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsApplicationPoolSetting")

For Each objItem in colItems
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Application Pool AutoStart: " &amp;amp; _
        objItem.AppPoolAutoStart
    Wscript.Echo "Application Pool Command: " &amp;amp; objItem.AppPoolCommand
    Wscript.Echo "Application Pool Identity Type: " &amp;amp; _
        objItem.AppPoolIdentityType
    Wscript.Echo "Application Pool Queue Length: " &amp;amp; _
        objItem.AppPoolQueueLength
    Wscript.Echo "Application Pool Recycle Configuration Change: " &amp;amp; _
        objItem.AppPoolRecycleConfigChange
    Wscript.Echo "Application Pool Recycle ISAPI Unhealthy: " &amp;amp; _
        objItem.AppPoolRecycleIsapiUnhealthy
    Wscript.Echo "Application Pool Recycle Memory: " &amp;amp; _
        objItem.AppPoolRecycleMemory
    Wscript.Echo "Application Pool Recycle On-Demand: " &amp;amp; _
        objItem.AppPoolRecycleOnDemand
    Wscript.Echo "Application Pool Recycle Private Memory: " &amp;amp; _
        objItem.AppPoolRecyclePrivateMemory
    Wscript.Echo "Application Pool Recycle Requests: " &amp;amp; _
        objItem.AppPoolRecycleRequests
    Wscript.Echo "Application Pool Recycle Schedule: " &amp;amp; _
        objItem.AppPoolRecycleSchedule
    Wscript.Echo "Application Pool Recycle Time: " &amp;amp; _
        objItem.AppPoolRecycleTime
    Wscript.Echo "Application Pool State: " &amp;amp; objItem.AppPoolState
    Wscript.Echo "AutoShutdown Application Pool Exe: " &amp;amp; _
        objItem.AutoShutdownAppPoolExe
    Wscript.Echo "AutoShutdown Application Pool Parameters: " &amp;amp; _
        objItem.AutoShutdownAppPoolParams
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "CPU Action: " &amp;amp; objItem.CPUAction
    Wscript.Echo "CPU Limit: " &amp;amp; objItem.CPULimit
    Wscript.Echo "CPU Reset Interval: " &amp;amp; objItem.CPUResetInterval
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Disallow Overlapping Rotation: " &amp;amp; _
        objItem.DisallowOverlappingRotation
    Wscript.Echo "Disallow Rotation On Configuration Change: " &amp;amp; _
        objItem.DisallowRotationOnConfigChange
    Wscript.Echo "Idle Timeout: " &amp;amp; objItem.IdleTimeout
    Wscript.Echo "Load Balancer Capabilities: " &amp;amp; _
        objItem.LoadBalancerCapabilities
    Wscript.Echo "Log Event On Recycle: " &amp;amp; objItem.LogEventOnRecycle
    Wscript.Echo "Logon Method: " &amp;amp; objItem.LogonMethod
    Wscript.Echo "Maximum Processes: " &amp;amp; objItem.MaxProcesses
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Orphan Action Exe: " &amp;amp; objItem.OrphanActionExe
    Wscript.Echo "Orphan Action Parameters: " &amp;amp; objItem.OrphanActionParams
    Wscript.Echo "Orphan Worker Process: " &amp;amp; objItem.OrphanWorkerProcess
    Wscript.Echo "Periodic Restart Memory: " &amp;amp; objItem.PeriodicRestartMemory
    Wscript.Echo "Periodic Restart Private Memory: " &amp;amp; _
        objItem.PeriodicRestartPrivateMemory
    Wscript.Echo "Periodic Restart Requests: " &amp;amp; _
        objItem.PeriodicRestartRequests
    For Each strSchedule in objItem.PeriodicRestartSchedule
        Wscript.Echo "Periodic Restart Schedule: " &amp;amp; strSchedule
    Next
    Wscript.Echo "Periodic Restart Time: " &amp;amp; objItem.PeriodicRestartTime
    Wscript.Echo "Pinging Enabled: " &amp;amp; objItem.PingingEnabled
    Wscript.Echo "Ping Interval: " &amp;amp; objItem.PingInterval
    Wscript.Echo "Ping Response Time: " &amp;amp; objItem.PingResponseTime
    Wscript.Echo "Rapid Fail Protection: " &amp;amp; objItem.RapidFailProtection
    Wscript.Echo "Rapid Fail Protection Interval: " &amp;amp; _
        objItem.RapidFailProtectionInterval
    Wscript.Echo "Rapid Fail Protection Maximum Crashes: " &amp;amp; _
        objItem.RapidFailProtectionMaxCrashes
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Shutdown Time Limit: " &amp;amp; objItem.ShutdownTimeLimit
    Wscript.Echo "SMP Affinitized: " &amp;amp; objItem.SMPAffinitized
    Wscript.Echo "SMP Processor Affinity Mask: " &amp;amp; _
        objItem.SMPProcessorAffinityMask
    Wscript.Echo "Startup Time Limit: " &amp;amp; objItem.StartupTimeLimit
    Wscript.Echo "WAM User Name: " &amp;amp; objItem.WAMUserName
    Wscript.Echo "WAM User Password: " &amp;amp; objItem.WAMUserPass
    Wscript.Echo "Win32 Error: " &amp;amp; objItem.Win32Error
Next
</vb><vb name="List Application Pools Health Properties" n="477">' List Application Pools Health Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")
Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsApplicationPoolsSetting")

For Each objItem in colItems
    Wscript.Echo "Pinging Enabled: " &amp;amp; objItem.PingingEnabled
    Wscript.Echo "Ping Interval: " &amp;amp; objItem.PingInterval
    Wscript.Echo "Rapid Fail Protection: " &amp;amp; _
        objItem.RapidFailProtection
    Wscript.Echo "Rapid Fail Protection Interval: " &amp;amp; _
        objItem.RapidFailProtectionInterval
    Wscript.Echo "Rapid Fail Protection Maximum Crashes: " &amp;amp; _
        objItem.RapidFailProtectionMaxCrashes
    Wscript.Echo "Shutdown Time Limit: " &amp;amp; objItem.ShutdownTimeLimit
    Wscript.Echo "Startup Time Limit: " &amp;amp; objItem.StartupTimeLimit
Next
</vb><vb name="List Application Pools Identity Properties" n="478">' List Application Pools Identity Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")
Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsApplicationPoolsSetting")

For Each objItem in colItems
    Wscript.Echo "WAM User Name: " &amp;amp; objItem.WAMUserName
    Wscript.Echo "WAM User Password: " &amp;amp; objItem.WAMUserPass
Next
</vb><vb name="List Application Pools Performance Properties" n="479">' List Application Pools Performance Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsApplicationPoolsSetting")

For Each objItem in colItems
    Wscript.Echo "Application Pool Queue Length: " &amp;amp; _
        objItem.AppPoolQueueLength
    Wscript.Echo "CPU Action: " &amp;amp; objItem.CPUAction
    Wscript.Echo "CPU Limit: " &amp;amp; objItem.CPULimit
    Wscript.Echo "CPU Reset Interval: " &amp;amp; objItem.CPUResetInterval
    Wscript.Echo "Idle Timeout: " &amp;amp; objItem.IdleTimeout
    Wscript.Echo "Max Processes: " &amp;amp; objItem.MaxProcesses
Next
</vb><vb name="List Application Pools Recycling Properties" n="480">' List Application Pools Recycling Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsApplicationPoolsSetting")

For Each objItem in colItems
    Wscript.Echo "Periodic Restart Memory: " &amp;amp; _
        objItem.PeriodicRestartMemory
    Wscript.Echo "Periodic Restart PrivateMemory: " &amp;amp; _
        objItem.PeriodicRestartPrivateMemory
    Wscript.Echo "Periodic Restart Requests: " &amp;amp; _
        objItem.PeriodicRestartRequests
    For Each strSchedule in objItem.PeriodicRestartSchedule
        Wscript.Echo "Periodic Restart Schedule: " &amp;amp; strSchedule
    Next
    Wscript.Echo "Periodic Restart Time: " &amp;amp; _
        objItem.PeriodicRestartTime
Next
</vb><vb name="List Application Pools Setting Information" n="481">' List Application Pools Setting Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsApplicationPoolsSetting")

For Each objItem in colItems
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Application Pool AutoStart: " &amp;amp; _
        objItem.AppPoolAutoStart
    Wscript.Echo "Application Pool Identity Type: " &amp;amp; _
        objItem.AppPoolIdentityType
    Wscript.Echo "Application Pool Queue Length: " &amp;amp; _
        objItem.AppPoolQueueLength
    Wscript.Echo "Application Pool Recycle Configuration Change: " &amp;amp; _
        objItem.AppPoolRecycleConfigChange
    Wscript.Echo "Application Pool Recycle ISAPI Unhealthy: " &amp;amp; _
        objItem.AppPoolRecycleIsapiUnhealthy
    Wscript.Echo "Application Pool Recycle Memory: " &amp;amp; _
        objItem.AppPoolRecycleMemory
    Wscript.Echo "Application Pool Recycle On-Demand: " &amp;amp; _
        objItem.AppPoolRecycleOnDemand
    Wscript.Echo "Application Pool Recycle Private Memory: " &amp;amp; _
        objItem.AppPoolRecyclePrivateMemory
    Wscript.Echo "Application Pool Recycle Requests: " &amp;amp; _
        objItem.AppPoolRecycleRequests
    Wscript.Echo "Application Pool Recycle Schedule: " &amp;amp; _
        objItem.AppPoolRecycleSchedule
    Wscript.Echo "Application Pool Recycle Time: " &amp;amp; _
        objItem.AppPoolRecycleTime
    Wscript.Echo "AutoShutdown Application Pool Exe: " &amp;amp; _
        objItem.AutoShutdownAppPoolExe
    Wscript.Echo "AutoShutdown Application Pool Parameters: " &amp;amp; _
        objItem.AutoShutdownAppPoolParams
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "CPU Action: " &amp;amp; objItem.CPUAction
    Wscript.Echo "CPU Limit: " &amp;amp; objItem.CPULimit
    Wscript.Echo "CPU Reset Interval: " &amp;amp; objItem.CPUResetInterval
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Disallow Overlapping Rotation: " &amp;amp; _
        objItem.DisallowOverlappingRotation
    Wscript.Echo "Disallow Rotation On Configuration Change: " &amp;amp; _
        objItem.DisallowRotationOnConfigChange
    Wscript.Echo "Idle Timeout: " &amp;amp; objItem.IdleTimeout
    Wscript.Echo "Load Balancer Capabilities: " &amp;amp; _
        objItem.LoadBalancerCapabilities
    Wscript.Echo "Log Event On Recycle: " &amp;amp; objItem.LogEventOnRecycle
    Wscript.Echo "Logon Method: " &amp;amp; objItem.LogonMethod
    Wscript.Echo "Maximum Processes: " &amp;amp; objItem.MaxProcesses
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Orphan Action Exe: " &amp;amp; objItem.OrphanActionExe
    Wscript.Echo "Orphan Action Parameters: " &amp;amp; _
        objItem.OrphanActionParams
    Wscript.Echo "Orphan Worker Process: " &amp;amp; _
        objItem.OrphanWorkerProcess
    Wscript.Echo "Periodic Restart Memory: " &amp;amp; _
        objItem.PeriodicRestartMemory
    Wscript.Echo "Periodic Restart PrivateMemory: " &amp;amp; _
        objItem.PeriodicRestartPrivateMemory
    Wscript.Echo "Periodic Restart Requests: " &amp;amp; _
        objItem.PeriodicRestartRequests
    For Each strSchedule in objItem.PeriodicRestartSchedule
        Wscript.Echo "Periodic Restart Schedule: " &amp;amp; strSchedule
    Next
    Wscript.Echo "Periodic Restart Time: " &amp;amp; objItem.PeriodicRestartTime
    Wscript.Echo "Pinging Enabled: " &amp;amp; objItem.PingingEnabled
    Wscript.Echo "Ping Interval: " &amp;amp; objItem.PingInterval
    Wscript.Echo "Ping Response Time: " &amp;amp; objItem.PingResponseTime
    Wscript.Echo "Rapid Fail Protection: " &amp;amp; objItem.RapidFailProtection
    Wscript.Echo "Rapid Fail Protection Interval: " &amp;amp; _
        objItem.RapidFailProtectionInterval
    Wscript.Echo "Rapid Fail Protection Maximum Crashes: " &amp;amp; _
        objItem.RapidFailProtectionMaxCrashes
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Shutdown Time Limit: " &amp;amp; objItem.ShutdownTimeLimit
    Wscript.Echo "SMP Affinitized: " &amp;amp; objItem.SMPAffinitized
    Wscript.Echo "SMP Processor Affinity Mask: " &amp;amp; _
        objItem.SMPProcessorAffinityMask
    Wscript.Echo "Startup Time Limit: " &amp;amp; objItem.StartupTimeLimit
    Wscript.Echo "WAM User Name: " &amp;amp; objItem.WAMUserName
    Wscript.Echo "WAM User Password: " &amp;amp; objItem.WAMUserPass
    Wscript.Echo "Win32 Error: " &amp;amp; objItem.Win32Error
Next
</vb><vb name="List Applications in an Application Pool" n="482">' List Applications in an Application Pool


strComputer = "."

Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsApplicationPool Where Name = " &amp;amp; _
        "'W3SVC/AppPools/MSSharePointAppPool'")

For Each objItem in colItems
    objItem.EnumAppsInPool arrApplications
    For i = 0 to Ubound(arrApplications)
        Wscript.Echo arrApplications(i)
    Next
Next
</vb><vb name="List Applications That Depend on a Given Group ID" n="483">' List Applications That Depend on a Given Group ID


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * From IIsWebService")
 
For Each objItem in colItems
    objItem.QueryGroupIDStatus "ASP", arrGroups
    For i = 0 to Ubound(arrGroups)
        Wscript.Echo arrGroups(i)
    Next
Next
</vb><vb name="List Web Service Applications" n="484">' List Web Service Applications


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebService")

For Each objItem in colItems
    objItem.ListApplications arrApplications
    For i = 0 to Ubound(arrApplications)
        Wscript.Echo arrApplications(i)
    Next
Next
</vb><vb name="Modify an Application Pools Metabase Setting" n="485">' Modify an Application Pools Metabase Setting


strComputer = "."
 
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsApplicationPoolsSetting")
 
For Each objItem in colItems
    objItem.RapidFailProtection = TRUE
    objItem.Put_
Next
</vb><vb name="Create an Application as Part of an Application Pool" n="486">' Create an Application as Part of an Application Pool


Const OUT_OF_PROCESS = 1

Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebDirectory Where Name = " &amp;amp; _
        "'W3SVC/2142295254/root/aspnet_client_folder'")

For Each objItem in colItems
   objItem.AppCreate3 OUT_OF_PROCESS,"MSSharePointAppPool", False
Next
</vb><vb name="Create an Application in a Virtual Directory" n="487">' Create an Application in a Virtual Directory


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebVirtualDir Where Name = " &amp;amp; _
        "'W3SVC/1/ROOT/tsweb'")

For Each objItem in colItems
   objItem.AppCreate(False)
Next
</vb><vb name="Create an Application in a Virtual Directory as Part of an Application Pool" n="488">' Create an Application in a Virtual Directory as Part of an Application Pool


Const OUT_OF_PROCESS = 1

strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebVirtualDir Where Name = " &amp;amp; _
        "'W3SVC/1/ROOT/tsweb'")

For Each objItem in colItems
   objItem.AppCreate3 OUT_OF_PROCESS, "MSSharePointAppPool", _
       False
Next
</vb><vb name="Create an Application in a Web Directory" n="489">' Create an Application in a Web Directory


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebDirectory Where Name = " &amp;amp; _
        "'W3SVC/2142295254/root/aspnet_client_folder'")

For Each objItem in colItems
   objItem.AppCreate(False)
Next
</vb><vb name="Create an Application in an Application Pool Using ADSI" n="490">' Create an Application in an Application Pool Using ADSI


Const OUT_OF_PROCESS = 1
 
strComputer = "LocalHost"
 
Set objIIS = GetObject _
    ("IIS://" &amp;amp; strComputer &amp;amp; "/W3SVC/2142295254/root/aspnet_client_folder")
objIIS.AppCreate3 OUT_OF_PROCESS, "MSSharePointAppPool", False
</vb><vb name="Create an Out-of-Process Application in a Virtual Directory" n="491">' Create an Out-of-Process Application in a Virtual Directory


Const OUT_OF_PROCESS = 1

Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebVirtualDir Where Name = " &amp;amp; _
        "'W3SVC/1/ROOT/tsweb'")

For Each objItem in colItems
   objItem.AppCreate2(OUT_OF_PROCESS)
Next
</vb><vb name="Create an Out-of-Process Application in a Web Directory" n="492">' Create an Out-of-Process Application in a Web Directory


Const OUT_OF_PROCESS = 1

Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebDirectory Where Name = " &amp;amp; _
        "'W3SVC/2142295254/root/aspnet_client_folder'")

For Each objItem in colItems
   objItem.AppCreate2(OUT_OF_PROCESS)
Next
</vb><vb name="Delete a Web Directory Application" n="493">' Delete a Web Directory Application


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebDirectory Where Name = " &amp;amp; _
        "'W3SVC/2142295254/root/aspnet_client_folder'")

For Each objItem in colItems
   objItem.AppDelete(True)
Next
</vb><vb name="Delete a Web Service Application" n="494">' Delete a Web Service Application


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebService")

For Each objItem in colItems
    objItem.RemoveApplication("Remote Administration Tools")
Next
</vb><vb name="Delete an Application in a Virtual Directory" n="495">' Delete an Application in a Virtual Directory


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebVirtualDir Where Name = " &amp;amp; _
        "'W3SVC/1/ROOT/tsweb'")

For Each objItem in colItems
   objItem.AppDelete(True)
Next
</vb><vb name="Disable a Web Directory Application" n="496">' Disable a Web Directory Application


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebDirectory Where Name = " &amp;amp; _
        "'W3SVC/2142295254/root/aspnet_client_folder'")

For Each objItem in colItems
   objItem.AppDisable(True)
Next
</vb><vb name="Disable an Application in a Virtual Directory" n="497">' Disable an Application in a Virtual Directory


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebVirtualDir Where Name = " &amp;amp; _
        "'W3SVC/1/ROOT/tsweb'")

For Each objItem in colItems
   objItem.AppDisable(True)
Next
</vb><vb name="Enable a Web Directory Application" n="498">' Enable a Web Directory Application


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebDirectory Where Name = " &amp;amp; _
        "'W3SVC/2142295254/root/aspnet_client_folder'")

For Each objItem in colItems
   objItem.AppEnable(True)
Next
</vb><vb name="Enable a Web Service Application" n="499">' Enable a Web Service Application


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebService")

For Each objItem in colItems
    objItem.EnableApplication _
        ("Remote Administration Tools")
Next
</vb><vb name="Enable an Application in a Virtual Directory" n="500">' Enable an Application in a Virtual Directory


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebVirtualDir Where Name = " &amp;amp; _
        "'W3SVC/1/ROOT/tsweb'")

For Each objItem in colItems
   objItem.AppEnable(True)
Next
</vb></dd>
			<dd name="Authentication" code="auth" desc="Sample scripts for managing authentication properties on Internet Information Server 6.0."><vb name="List IIS Authentication Methods" n="501">' List IIS Authentication Methods


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")

For Each objItem in colItems
    Wscript.Echo "Anonymous User Name: " &amp;amp; objItem.AnonymousUserName
    Wscript.Echo "Anonymous User Password: " &amp;amp; _
        objItem.AnonymousUserPass
    Wscript.Echo "Authentication Anonymous: " &amp;amp; objItem.AuthAnonymous
    Wscript.Echo "Authentication Basic: " &amp;amp; objItem.AuthBasic
    Wscript.Echo "Authentication MD5: " &amp;amp; objItem.AuthMD5
    Wscript.Echo "Authentication NTLM: " &amp;amp; objItem.AuthNTLM
    Wscript.Echo "Authentication Passport: " &amp;amp; objItem.AuthPassport
    Wscript.Echo "Default Logon Domain: " &amp;amp; objItem.DefaultLogonDomain
    Wscript.Echo "Realm: " &amp;amp; objItem.Realm
Next
</vb><vb name="List IIS IP Address and Domain Restrictions" n="502">' List IIS IP Address and Domain Restrictions


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsIPSecuritySetting")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    For Each strDeny in objItem.DomainDeny
        Wscript.Echo "Domain Deny: " &amp;amp; strDeny
    Next
    For Each strGrant in objItem.DomainGrant
        Wscript.Echo "Domain Grant: " &amp;amp; strGrant
    Next
    Wscript.Echo "Grant By Default: " &amp;amp; objItem.GrantByDefault
    For Each strDeny in objItem.IPDeny
        Wscript.Echo "IP Deny: " &amp;amp; strDeny
    Next
    For Each strGrant in objItem.IPGrant
        Wscript.Echo "IP Grant: " &amp;amp; strGrant
    Next
Next
</vb></dd>
			<dd name="Basic Administration" code="admin" desc="Sample scripts for basic administration (such as backing up and restoring the metabase) of Internet Information Server 6.0."><vb name="Add an Extension File" n="503">' Add an Extension File


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebService")

For Each objItem in colItems
    objItem.AddExtensionFile _
        "C:\WINDOWS\system32\bits_update.dll", False, _
            "BITSEXT", True, "BITS Update"
Next
</vb><vb name="Back Up the Metabase Using a Password" n="504">' Back Up the Metabase Using a Password


Const MD_BACKUP_HIGHEST_VERSION = &amp;amp;HFFFFFFFE
Const MD_BACKUP_OVERWRITE = 1

strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set objComputer = _
    objWMIService.Get("IIsComputer.Name='LM'")

objComputer.BackupWithPassword "ScriptedBackup", _
    MD_BACKUP_HIGHEST_VERSION, MD_BACKUP_OVERWRITE, _
        "er$3qld9o"
</vb><vb name="Delete a Backup" n="505">' Delete a Backup


Const BACKUP_VERSION = 0

strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set objComputer = _
    objWMIService.Get("IIsComputer.Name='LM'")

objComputer.DeleteBackup "ScriptedBackup", BACKUP_VERSION
</vb><vb name="Delete an Extension File Record" n="506">' Delete an Extension File Record


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebService")

For Each objItem in colItems
    objItem.DeleteExtensionFileRecord _
        "C:\WINDOWS\system32\bits_update.dll"
Next
</vb><vb name="Disable a Web Service Extension" n="507">' Disable a Web Service Extension


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * From IIsWebService")

For Each objItem in colItems
    objItem.DisableWebServiceExtension("WEBDAV")
Next
</vb><vb name="Disable an Extension File" n="508">' Disable an Extension File


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebService")

For Each objItem in colItems
    objItem.DisableExtensionFile _
        ("C:\WINDOWS\system32\bitssrv.dll")
Next
</vb><vb name="Enable a Web Service Extension" n="509">' Enable a Web Service Extension


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebService")

For Each objItem in colItems
    objItem.EnableWebServiceExtension("WEBDAV")
Next
</vb><vb name="Enable an Extension File" n="510">' Enable an Extension File


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebService")

For Each objItem in colItems
    objItem.EnableExtensionFile _
        ("C:\WINDOWS\system32\bitssrv.dll")
Next
</vb><vb name="Enumerating History Files" n="511">' Enumerating History Files


On Error Resume Next

strComputer = "."

Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set objComputer = _
    objWMIService.Get("IIsComputer.Name='LM'")

intIndex = 0

Do While True
    strName = ""
    objComputer.EnumHistory strLocation, intMajorVersion, _
        intMinorVersion, strDateTime, intIndex
    If (Err.Number &amp;lt;&amp;gt; 0) Then
        Exit Do
    End If
        
    dtDate = DateSerial(Mid(strDateTime, 1, 4), _
        Mid(strDateTime, 5, 2), Mid(strDateTime, 7, 2))
    dtTime = TimeSerial(Mid(strDateTime, 9, 2), _
        Mid(strDateTime, 11, 2), Mid(strDateTime, 13, 2))
    strFmtDateTime = FormatDateTime(dtDate) &amp;amp; " " &amp;amp; _
        FormatDateTime(dtTime, vbLongTime)
        
    Wscript.Echo "Location: " &amp;amp; strLocation
    WScript.Echo "Major Version: " &amp;amp; intMajorVersion
    WScript.Echo "Minor Version: " &amp;amp; intMin0rVersion
    WScript.Echo "Date and Time: " &amp;amp; strFmtDateTime
        
    intIndex = intIndex + 1
Loop
</vb><vb name="Enumerating IIsObject Class Instances  -- WMI" n="512">' Enumerating IIsObject Class Instances  -- WMI


strComputer = "."
 
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsObject")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="Export a Section of the Metabase" n="513">' Export a Section of the Metabase


Const EXPORT_CHILDREN = 0

strComputer = "."

Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsComputer")

For Each objItem in colItems
    objItem.Export "er$3qld9o", "C:\backups\export.xml", _
        "/lm/logging/custom logging", EXPORT_CHILDREN
Next
</vb><vb name="Import a Metabase Section" n="514">' Import a Metabase Section


Const IMPORT_MERGE = 4

strComputer = "."

Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsComputer")

For Each objItem in colItems
    objItem.Import "er$3qld9o", "C:\backups\export.xml", _
        "/lm/logging/custom logging", _
            "/lm/logging/custom logging", IMPORT_MERGE
Next
</vb><vb name="List Access Control Entries" n="515">' List Access Control Entries


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsACE")
 
For Each objItem in colItems
    Wscript.Echo "Access Mask: " &amp;amp; objItem.AccessMask
    Wscript.Echo "Ace Flags: " &amp;amp; objItem.AceFlags
    Wscript.Echo "Ace Type: " &amp;amp; objItem.AceType
    Wscript.Echo "Flags: " &amp;amp; objItem.Flags
    Wscript.Echo "Inherited Object Type: " &amp;amp; _
        objItem.InheritedObjectType
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Object Type: " &amp;amp; objItem.ObjectType
    Wscript.Echo "Trustee: " &amp;amp; objItem.Trustee
Next
</vb><vb name="List Access Control Information" n="516">' List Access Control Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsAdminACL")
 
For Each objItem in colItems
    Wscript.Echo "Group: " &amp;amp; objItem.Group
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Owner: " &amp;amp; objItem.Owner
    Wscript.Echo "Control Flags: " &amp;amp; objItem.ControlFlags
Next
</vb><vb name="List Backup Files" n="517">' List Backup Files


On Error Resume Next

Const MD_BACKUP_NO_MORE_BACKUPS = &amp;amp;H80070103
strComputer = "."

Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set objComputer = _
    objWMIService.Get("IIsComputer.Name='LM'")

intIndex = 0

Do While True
    strName = ""
    objComputer.EnumBackups strName, intIndex, _
        strVersion, strDateTime
    If (Err.Number &amp;lt;&amp;gt; 0) Then
        If (Err.Number = MD_BACKUP_NO_MORE_BACKUPS) Then
            Exit Do
        End If
    End If
        
    dtDate = DateSerial(Mid(strDateTime, 1, 4), _
        Mid(strDateTime, 5, 2), Mid(strDateTime, 7, 2))
    dtTime = TimeSerial(Mid(strDateTime, 9, 2), _
        Mid(strDateTime, 11, 2), Mid(strDateTime, 13, 2))
    strFmtDateTime = FormatDateTime(dtDate) &amp;amp; " " &amp;amp; _
        FormatDateTime(dtTime, vbLongTime)
        
    WScript.Echo "Name: " &amp;amp; strName
    Wscript.Echo "Version Number: " &amp;amp; strVersion 
    Wscript.Echo "Backup Date: " &amp;amp; strFmtDateTime
        
    intIndex = intIndex + 1
Loop
</vb><vb name="List Computer Setting Information" n="518">' List Computer Setting Information


strComputer = "."
 
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsComputerSetting")
 
For Each objItem in colItems
    Wscript.Echo "Enable Edit While Running: " &amp;amp; _
        objItem.EnableEditWhileRunning
    Wscript.Echo "Enable History: " &amp;amp; objItem.EnableHistory
    Wscript.Echo "Maximum Bandwidth: " &amp;amp; objItem.MaxBandwidth
    Wscript.Echo "Maximum Bandwidth Blocked: " &amp;amp; _
        objItem.MaxBandwidthBlocked
    Wscript.Echo "Maximum Error Files: " &amp;amp; objItem.MaxErrorFiles
    Wscript.Echo "Maximum History Files: " &amp;amp; objItem.MaxHistoryFiles
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
Next
</vb><vb name="List Extension Files" n="519">' List Extension Files


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebService")

For Each objItem in colItems
    objItem.ListExtensionFiles arrFiles
    For i = 0 to Ubound(arrFiles)
        Wscript.Echo arrFiles(i)
    Next
Next
</vb><vb name="List IIsObjectSetting Class Instances" n="520">' List IIsObjectSetting Class Instances


strComputer = "."
 
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsObjectSetting")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List IP Security Setting Information" n="521">' List IP Security Setting Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsIPSecuritySetting")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    For Each strDeny in objItem.DomainDeny
        Wscript.Echo "Domain Deny: " &amp;amp; strDeny
    Next
    For Each strGrant in objItem.DomainGrant
        Wscript.Echo "Domain Grant: " &amp;amp; strGrant
    Next
    Wscript.Echo "Grant By Default: " &amp;amp; objItem.GrantByDefault
    For Each strDeny in objItem.IPDeny
        Wscript.Echo "IP Deny: " &amp;amp; strDeny
    Next
    For Each strGrant in objItem.IPGrant
        Wscript.Echo "IP Grant: " &amp;amp; strGrant
    Next
Next
</vb><vb name="List MIME Maps" n="522">' List MIME Maps


strComputer = "."
 
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsMimeMap")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List MIME Type Properties" n="523">' List MIME Type Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServerSetting") 

For Each objItem in colItems
    For i = 0 to Ubound(objItem.MimeMap)
        Wscript.Echo "Extension: " &amp;amp; objItem.MimeMap(i).Extension
        Wscript.Echo "MIME Type: " &amp;amp; objItem.MimeMap(i).MimeType
        Wscript.Echo
    Next
Next
</vb><vb name="List Script Maps" n="524">' List Script Maps


strComputer = "."

Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServerSetting")

For Each objItem in colItems
    For i = 0 to Ubound(objItem.ScriptMaps)
        Wscript.Echo "Extension: " &amp;amp; _
            objItem.ScriptMaps(i).Extensions
        Wscript.Echo "Flags: " &amp;amp; _
            objItem.ScriptMaps(i).Flags
        Wscript.Echo "Included Verbs: " &amp;amp; _
            objItem.ScriptMaps(i).IncludedVerbs
        Wscript.Echo "Script Processor: " &amp;amp; _
            objItem.ScriptMaps(i).ScriptProcessor
        Wscript.Echo
    Next
Next
</vb><vb name="List Secure Bindings" n="525">' List Secure Bindings


strComputer = "."

Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServerSetting")

For Each objItem in colItems
    For i = 0 to Ubound(objItem.SecureBindings)
        Wscript.Echo "Port: " &amp;amp; _
            objItem.SecureBindings(i).Port
    Next
Next
</vb><vb name="List Server Bindings" n="526">' List Server Bindings


strComputer = "."

Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServerSetting")

For Each objItem in colItems
    For i = 0 to Ubound(objItem.ServerBindings)
        Wscript.Echo "Port: " &amp;amp; _
            objItem.ServerBindings(i).Port
    Next
Next
</vb><vb name="List the IIS Computer Name" n="527">' List the IIS Computer Name


strComputer = "."
 
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsComputer")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List the Web Service Extension Restriction List" n="528">' List the Web Service Extension Restriction List


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")

For Each objItem in colItems
    For i = 0 to Ubound(objItem.WebSvcExtRestrictionList)
        Wscript.Echo "Server Extension: " &amp;amp; _  
            objItem.WebSvcExtRestrictionList(i)._
                ServerExtension
        Wscript.Echo "Access: " &amp;amp; _
            objItem.WebSvcExtRestrictionList(i).Access
        Wscript.Echo "Deletable: " &amp;amp; _
            objItem.WebSvcExtRestrictionList(i).Deletable
        Wscript.Echo "Description: " &amp;amp; _
            objItem.WebSvcExtRestrictionList(i).Description
        Wscript.Echo "File Path: " &amp;amp; _
            objItem.WebSvcExtRestrictionList(i).FilePath
        Wscript.Echo
    Next
Next
</vb><vb name="List Web Server MIME Maps" n="529">' List Web Server MIME Maps


strComputer = "."
 
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsWebServerSetting")
 
For Each objItem in colItems
    For i = 0 to Ubound(objItem.MimeMap)
        Wscript.Echo "Extension: " &amp;amp; objItem.MimeMap(i).Extension
        Wscript.Echo "MIME Type: " &amp;amp; objItem.MimeMap(i).MimeType
        Wscript.Echo
    Next
Next
</vb><vb name="List Web Service Extension Restrictions" n="530">' List Web Service Extension Restrictions


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")

For Each objItem in colItems
    For i = 0 to Ubound(objItem.WebSvcExtRestrictionList)
        Wscript.Echo "Access: " &amp;amp; _
            objItem.WebSvcExtRestrictionList(i).Access
        Wscript.Echo "File Path: " &amp;amp; _
            objItem.WebSvcExtRestrictionList(i).FilePath
        Wscript.Echo
    Next
Next
</vb><vb name="List Web Service Extensions" n="531">' List Web Service Extensions


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebService")

For Each objItem in colItems
    objItem.ListWebServiceExtensions arrExtensions
    For i = 0 to Ubound(arrExtensions)
        Wscript.Echo arrExtensions(i)
    Next
Next
</vb><vb name="Modify Local Computer Properties" n="532">' Modify Local Computer Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsComputerSetting")

For Each objItem in colItems
    objItem.EnableEditWhileRunning = 1
    objItem.EnableHistory = 1
    objItem.MaxHistoryFiles = 50
    objItem.Put_
Next
</vb><vb name="Restore a History File" n="533">' Restore a History File


Const MAJOR_VERSION = 257
Const MINOR_VERSION = 0

strComputer = "."

Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set objComputer = _
    objWMIService.Get("IIsComputer.Name='LM'")

objComputer.RestoreHistory _
    "C:\WINDOWS\System32\Inetsrv\History\", _
        MAJOR_VERSION, MINOR_VERSION, 0
</vb><vb name="Restore the Metabase Using a Password" n="534">' Restore the Metabase Using a Password


Const MD_BACKUP_HIGHEST_VERSION = &amp;amp;HFFFFFFFE 

strComputer = "."

Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set objComputer = _
    objWMIService.Get("IIsComputer.Name='LM'")

objComputer.RestoreWithPassword _
    "ScriptedBackup", MD_BACKUP_HIGHEST_VERSION, 0, _
         "er$3qld9o"
</vb><vb name="Save a History File" n="535">' Save a History File


strComputer = "."

Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set objComputer = _
    objWMIService.Get("IIsComputer.Name='LM'")

objComputer.SaveData
</vb><vb name="Verify Edit While Running Property Value" n="536">' Verify Edit While Running Property Value


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsComputerSetting")

For Each objItem in colItems
    Wscript.Echo "Enable Edit While Running: " &amp;amp; _
        objItem.EnableEditWhileRunning
Next
</vb><vb name="Verify IIS Isolation Mode" n="537">' Verify IIS Isolation Mode


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebService")

For Each objItem in colItems
    intMode = objItem.GetCurrentMode
    If intMode = 0 Then
        Wscript.Echo _
            "IIS is in IIS 5.0 isolation mode."
    ElseIf intMode = 1 Then
        Wscript.Echo _
            "IIS is in worker process isolation mode."
    Else
        Wscript.Echo _
            "The current mode cannot be determined."
    End If
Next
</vb><vb name="Verify the IIS Server Version" n="538">' Verify the IIS Server Version


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsWebInfo")

For Each objItem in colItems
    Wscript.Echo "Major IIS Version Number: " &amp;amp; _
        objItem.MajorIIsVersionNumber
    Wscript.Echo "Minor IIS Version Number: " &amp;amp; _
        objItem.MinorIIsVersionNumber
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb></dd>
			<dd name="BITS Server" code="bits" desc="Sample scripts for managing the BITS Server that ships with Internet Information Server 6.0."><vb name="List BITS Server Extension Properties" n="539">' List BITS Server Extension Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebVirtualDirSetting")

For Each objItem in colItems
    Wscript.Echo "BITS Host ID: " &amp;amp; objItem.BITSHostId
    Wscript.Echo "BITS Host ID Fallback Timeout: " &amp;amp; _
        objItem.BITSHostIdFallbackTimeout
    Wscript.Echo "BITS Maximum Upload Size: " &amp;amp; _
        objItem.BITSMaximumUploadSize
    Wscript.Echo "BITS Server Notification Type: " &amp;amp; _
        objItem.BITSServerNotificationType
    Wscript.Echo "BITS Server Notification URL: " &amp;amp; _
        objItem.BITSServerNotificationURL
    Wscript.Echo "BITS Session Timeout: " &amp;amp; objItem.BITSSessionTimeout
    Wscript.Echo "BITS Upload Enabled: " &amp;amp; objItem.BITSUploadEnabled
Next
</vb></dd>
			<dd name="Certificates" code="certs" desc="Sample scripts for managing certificate properties on Internet Information Server 6.0."><vb name="List Instances of the IIsCertMapper Class" n="540">' List Instances of the IIsCertMapper Class


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsCertMapper")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List Instances of the IIsCertMapperSetting Class" n="541">' List Instances of the IIsCertMapperSetting Class


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsCertMapperSetting")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb></dd>
			<dd name="Compression" code="compress" desc="Sample scripts for managing file compression on Internet Information Server 6.0."><vb name="List Compression Schemes Properties" n="542">' List Compression Schemes Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsCompressionSchemesSetting")

For Each objItem in colItems
    Wscript.Echo "Hc Compression Directory: " &amp;amp; _
        objItem.HcCompressionDirectory
    Wscript.Echo "Hc Do Dynamic Compression: " &amp;amp; _
        objItem.HcDoDynamicCompression
    Wscript.Echo "Hc Do Static Compression: " &amp;amp; _
        objItem.HcDoStaticCompression
    Wscript.Echo "Hc Maximum Disk Space Usage: " &amp;amp; _
        objItem.HcMaxDiskSpaceUsage
Next
</vb><vb name="List IIS Compression Scheme Setting Information" n="543">' List IIS Compression Scheme Setting Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsCompressionSchemeSetting")
 
For Each objItem in colItems
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Hc Compression Dll: " &amp;amp; _
        objItem.HcCompressionDll
    Wscript.Echo "Hc Create Flags: " &amp;amp; objItem.HcCreateFlags
    Wscript.Echo "Hc Do Dynamic Compression: " &amp;amp; _
        objItem.HcDoDynamicCompression
    Wscript.Echo "Hc Do On-Demand Compression: " &amp;amp; _
        objItem.HcDoOnDemandCompression
    Wscript.Echo "Hc Do Static Compression: " &amp;amp; _
        objItem.HcDoStaticCompression
    Wscript.Echo "Hc Dynamic Compression Level: " &amp;amp; _
        objItem.HcDynamicCompressionLevel
    For Each strExtension in objItem.HcFileExtensions
        Wscript.Echo "Hc File Extensions: " &amp;amp; strExtension
    Next
    Wscript.Echo "Hc On-Demand Compression Level: " &amp;amp; _
        objItem.HcOnDemandCompLevel
    Wscript.Echo "Hc Priority: " &amp;amp; objItem.HcPriority
    For Each strExtension in objItem.HcScriptFileExtensions
        Wscript.Echo "Hc Script File Extensions: " &amp;amp; strExtension
    Next
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
Next
</vb><vb name="List IIS Compression Schemes Setting Information" n="544">' List IIS Compression Schemes Setting Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsCompressionSchemesSetting")

For Each objItem in colItems
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Hc Cache Control Header: " &amp;amp; _
        objItem.HcCacheControlHeader
    Wscript.Echo "Hc Compression Buffer Size: " &amp;amp; _
        objItem.HcCompressionBufferSize
    Wscript.Echo "Hc Compression Directory: " &amp;amp; _
        objItem.HcCompressionDirectory
    Wscript.Echo "Hc Do Disk Space Limiting: " &amp;amp; _
        objItem.HcDoDiskSpaceLimiting
    Wscript.Echo "Hc Do DynamicC ompression: " &amp;amp; _
        objItem.HcDoDynamicCompression
    Wscript.Echo "Hc Do On-Demand Compression: " &amp;amp; _
        objItem.HcDoOnDemandCompression
    Wscript.Echo "Hc Do Static Compression: " &amp;amp; _
        objItem.HcDoStaticCompression
    Wscript.Echo "Hc Expires Header: " &amp;amp; objItem.HcExpiresHeader
    Wscript.Echo "Hc Files Deleted Per Disk Free: " &amp;amp; _
        objItem.HcFilesDeletedPerDiskFree
    Wscript.Echo "Hc I/O Buffer Size: " &amp;amp; objItem.HcIoBufferSize
    Wscript.Echo "Hc Maximum Disk Space Usage: " &amp;amp; _
        objItem.HcMaxDiskSpaceUsage
    Wscript.Echo "Hc Maximum Queue Length: " &amp;amp; _
        objItem.HcMaxQueueLength
    Wscript.Echo "Hc Minimum File Size For Compression: " &amp;amp; _
        objItem.HcMinFileSizeForComp
    Wscript.Echo "Hc No Compression For Http 1.0: " &amp;amp; _
        objItem.HcNoCompressionForHttp10
    Wscript.Echo "Hc No Compression For Proxies: " &amp;amp; _
        objItem.HcNoCompressionForProxies
    Wscript.Echo "Hc No Compression For Range: " &amp;amp; _
        objItem.HcNoCompressionForRange
    Wscript.Echo "Hc Send Cache Headers: " &amp;amp; _
        objItem.HcSendCacheHeaders
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
Next
</vb><vb name="List IIsCompressionScheme Instances" n="545">' List IIsCompressionScheme Instances


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsCompressionScheme")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List IIsCompressionSchemes Instances" n="546">' List IIsCompressionSchemes Instances


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsCompressionSchemes")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb></dd>
			<dd name="Filters" code="filters" desc="Sample scripts for managing filter properties on Internet Information Server 6.0."><vb name="List IIS Filter Setting Information" n="547">' List IIS Filter Setting Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsFilterSetting")
 
For Each objItem in colItems
    Wscript.Echo "Filter Description: " &amp;amp; objItem.FilterDescription
    Wscript.Echo "Filter Enable Cache: " &amp;amp; objItem.FilterEnableCache
    Wscript.Echo "Filter Enabled: " &amp;amp; objItem.FilterEnabled
    Wscript.Echo "Filter Flags: " &amp;amp; objItem.FilterFlags
    Wscript.Echo "Filter Path: " &amp;amp; objItem.FilterPath
    Wscript.Echo "Filter State: " &amp;amp; objItem.FilterState
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Notify Access Denied: " &amp;amp;  _
        objItem.NotifyAccessDenied
    Wscript.Echo "Notify Authentication Complete: " &amp;amp;  _
        objItem.NotifyAuthComplete
    Wscript.Echo "Notify Authentication: " &amp;amp;  _
        objItem.NotifyAuthentication
    Wscript.Echo "Notify End Of Net Session: " &amp;amp;  _
        objItem.NotifyEndOfNetSession
    Wscript.Echo "Notify End Of Request: " &amp;amp;  _
        objItem.NotifyEndOfRequest
    Wscript.Echo "Notify Log: " &amp;amp; objItem.NotifyLog
    Wscript.Echo "Notify Non-Secure Port: " &amp;amp;  _
        objItem.NotifyNonSecurePort
    Wscript.Echo "Notify Order High: " &amp;amp; objItem.NotifyOrderHigh
    Wscript.Echo "Notify Order Low: " &amp;amp; objItem.NotifyOrderLow
    Wscript.Echo "Notify Order Medium: " &amp;amp; objItem.NotifyOrderMedium
    Wscript.Echo "Notify Pre-Proc Headers: " &amp;amp;  _
        objItem.NotifyPreProcHeaders
    Wscript.Echo "Notify Read Raw Data: " &amp;amp;  _
        objItem.NotifyReadRawData
    Wscript.Echo "Notify Secure Port: " &amp;amp; objItem.NotifySecurePort
    Wscript.Echo "Notify Send Raw Data: " &amp;amp;  _
        objItem.NotifySendRawData
    Wscript.Echo "Notify Send Response: " &amp;amp;  _
        objItem.NotifySendResponse
    Wscript.Echo "Notify Url Map: " &amp;amp; objItem.NotifyUrlMap
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Win32 Error: " &amp;amp; objItem.Win32Error
Next
</vb><vb name="List IIS Filters" n="548">' List IIS Filters


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsFilters")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List Instances of the IIsFilter Class" n="549">' List Instances of the IIsFilter Class


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsFilter")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List ISAPI Filters" n="550">' List ISAPI Filters


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsFilterSetting")

For Each objItem in colItems
    Wscript.Echo "Filter Path: " &amp;amp; objItem.FilterPath
    Wscript.Echo "Filter State: " &amp;amp; objItem.FilterState
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="Modify an IIS Filter Setting Metabase Property" n="551">' Modify an IIS Filter Setting Metabase Property


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsFilterSetting")

For Each objItem in colItems
    objItem.FilterEnabled = TRUE
    objItem.Put_
Next
</vb></dd>
			<dd name="FTP Sites" code="ftp" desc="Sample scripts for managing FTP sites on Internet Information Server 6.0."><vb name="Continue an FTP Server" n="552">' Continue an FTP Server


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsFtpServer Where Name = " &amp;amp; _
        "'MSFTPSVC/1'")

For Each objItem in colItems
    objItem.Continue
Next
</vb><vb name="Create a New FTP Site" n="553">' Create a New FTP Site


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set objWebService = objWMIService.ExecQuery _
    ("Select * From IISFTPService")

arrBindings = Array(0)
Set arrBindings(0) = _
    objWMIService.Get("ServerBinding").SpawnInstance_()
arrBindings(0).IP = "192.168.1.1"
arrBindings(0).Port = "8383"
arrBindings(0).Hostname = "atl-ws-01"

For Each objItem in objWebService
    objItem.CreateNewSite "Test FTP Site", arrBindings, _
        "c:\inetpub\ftproot"
Next
</vb><vb name="List Basic FTP Site Properties" n="554">' List Basic FTP Site Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsFtpServiceSetting")

For Each objItem in colItems
    Wscript.Echo "Connection Timeout: " &amp;amp; objItem.ConnectionTimeout
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
    Wscript.Echo "Server Comment: " &amp;amp; objItem.ServerComment
Next
</vb><vb name="List FTP Server Setting Information" n="555">' List FTP Server Setting Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsFtpServerSetting")
 
For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp; _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; _
        objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; _
        objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "AD Connections Password: " &amp;amp; _
        objItem.ADConnectionsPassword
    Wscript.Echo "AD Connections User Name: " &amp;amp; _
        objItem.ADConnectionsUserName
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Allow Anonymous: " &amp;amp; objItem.AllowAnonymous
    Wscript.Echo "Anonymous Only: " &amp;amp; objItem.AnonymousOnly
    Wscript.Echo "Anonymous Password Sync: " &amp;amp; _
        objItem.AnonymousPasswordSync
    Wscript.Echo "Anonymous User Name: " &amp;amp; _
        objItem.AnonymousUserName
    Wscript.Echo "Anonymous User Password: " &amp;amp; _
        objItem.AnonymousUserPass
    For Each objMessage in objItem.BannerMessage
        Wscript.Echo "Banner Message: " &amp;amp; objMessage
    Next
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Cluster Enabled: " &amp;amp; objItem.ClusterEnabled
    Wscript.Echo "Connection Timeout: " &amp;amp; _
        objItem.ConnectionTimeout
    Wscript.Echo "Default Logon Domain: " &amp;amp; _
        objItem.DefaultLogonDomain
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Disable Socket Pooling: " &amp;amp; _
        objItem.DisableSocketPooling
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Exit Message: " &amp;amp; objItem.ExitMessage
    Wscript.Echo "FTP Directory Browse Show Long Date: " &amp;amp; _
        objItem.FtpDirBrowseShowLongDate
    Wscript.Echo "FTP Log in Utf8: " &amp;amp; objItem.FtpLogInUtf8
    For Each objMessage in objItem.GreetingMessage
        Wscript.Echo "Greeting Message: " &amp;amp; objMessage
    Next
    Wscript.Echo "Log Anonymous: " &amp;amp; objItem.LogAnonymous
    Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
        objItem.LogExtFileBytesRecv
    Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; _
        objItem.LogExtFileBytesSent
    Wscript.Echo "Log Ext File Client IP: " &amp;amp; _
        objItem.LogExtFileClientIp
    Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
        objItem.LogExtFileComputerName
    Wscript.Echo "Log Ext File Cookie: " &amp;amp; objItem.LogExtFileCookie
    Wscript.Echo "Log Ext File Date: " &amp;amp; objItem.LogExtFileDate
    Wscript.Echo "Log Ext File Flags: " &amp;amp; objItem.LogExtFileFlags
    Wscript.Echo "Log Ext File Host: " &amp;amp; objItem.LogExtFileHost
    Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
        objItem.LogExtFileHttpStatus
    Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
        objItem.LogExtFileHttpSubStatus
    Wscript.Echo "Log Ext File Method: " &amp;amp; objItem.LogExtFileMethod
    Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
        objItem.LogExtFileProtocolVersion
    Wscript.Echo "Log Ext File Referer: " &amp;amp; objItem.LogExtFileReferer
    Wscript.Echo "Log Ext File Server IP: " &amp;amp; _
        objItem.LogExtFileServerIp
    Wscript.Echo "Log Ext File Server Port: " &amp;amp; _
        objItem.LogExtFileServerPort
    Wscript.Echo "Log Ext File Site Name: " &amp;amp; _
        objItem.LogExtFileSiteName
    Wscript.Echo "Log Ext File Time: " &amp;amp; objItem.LogExtFileTime
    Wscript.Echo "Log Ext File Time Taken: " &amp;amp; _
        objItem.LogExtFileTimeTaken
    Wscript.Echo "Log Ext File URI Query: " &amp;amp; _
        objItem.LogExtFileUriQuery
    Wscript.Echo "Log Ext File Uri Stem: " &amp;amp; objItem.LogExtFileUriStem
    Wscript.Echo "Log Ext File User Agent: " &amp;amp; _
        objItem.LogExtFileUserAgent
    Wscript.Echo "Log Ext File User Name: " &amp;amp; objItem.LogExtFileUserName
    Wscript.Echo "Log Ext File Win32 Status: " &amp;amp; _
        objItem.LogExtFileWin32Status
    Wscript.Echo "Log File Directory: " &amp;amp; objItem.LogFileDirectory
    Wscript.Echo "Log File Local Time Rollover: " &amp;amp; _
        objItem.LogFileLocaltimeRollover
    Wscript.Echo "Log File Period: " &amp;amp; objItem.LogFilePeriod
    Wscript.Echo "Log File Truncate Size: " &amp;amp; _
        objItem.LogFileTruncateSize
    Wscript.Echo "Log Non-Anonymous: " &amp;amp; objItem.LogNonAnonymous
    Wscript.Echo "Log Odbc Data Source: " &amp;amp; objItem.LogOdbcDataSource
    Wscript.Echo "Log Odbc Password: " &amp;amp; objItem.LogOdbcPassword
    Wscript.Echo "Log Odbc Table Name: " &amp;amp; objItem.LogOdbcTableName
    Wscript.Echo "Log Odbc User Name: " &amp;amp; objItem.LogOdbcUserName
    Wscript.Echo "Log Plugin Clsid: " &amp;amp; objItem.LogPluginClsid
    Wscript.Echo "Log Type: " &amp;amp; objItem.LogType
    Wscript.Echo "Maximum Clients Message: " &amp;amp; _
        objItem.MaxClientsMessage
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
    Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
        objItem.MaxEndpointConnections
    Wscript.Echo "MS-DOS Directory Output: " &amp;amp; objItem.MSDOSDirOutput
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Realm: " &amp;amp; objItem.Realm
    Wscript.Echo "Server AutoStart: " &amp;amp; objItem.ServerAutoStart
    Wscript.Echo "Server Command: " &amp;amp; objItem.ServerCommand
    Wscript.Echo "Server Comment: " &amp;amp; objItem.ServerComment
    Wscript.Echo "Server ID: " &amp;amp; objItem.ServerID
    Wscript.Echo "Server Listen Backlog: " &amp;amp; _
        objItem.ServerListenBacklog
    Wscript.Echo "Server Listen Timeout: " &amp;amp; _
        objItem.ServerListenTimeout
    Wscript.Echo "Server Size: " &amp;amp; objItem.ServerSize
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "User Isolation Mode: " &amp;amp; objItem.UserIsolationMode
    Wscript.Echo "Win32 Error: " &amp;amp; objItem.Win32Error
Next
</vb><vb name="List FTP Server Version" n="556">' List FTP Server Version


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsFtpInfo")

For Each objItem in colItems
    Wscript.Echo "Major IIS Version Number: " &amp;amp; objItem.MajorIIsVersionNumber
    Wscript.Echo "Minor IIS Version Number: " &amp;amp; objItem.MinorIIsVersionNumber
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List FTP Service Setting Properties" n="557">' List FTP Service Setting Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsFtpServiceSetting")

For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp; _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; _
        objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "AD Connections Password: " &amp;amp; _
        objItem.ADConnectionsPassword
    Wscript.Echo "AD Connections User Name: " &amp;amp; _
        objItem.ADConnectionsUserName
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Allow Anonymous: " &amp;amp; objItem.AllowAnonymous
    Wscript.Echo "Anonymous Only: " &amp;amp; objItem.AnonymousOnly
    Wscript.Echo "Anonymous Password Sync: " &amp;amp; _
        objItem.AnonymousPasswordSync
    Wscript.Echo "Anonymous User Name: " &amp;amp; objItem.AnonymousUserName
    Wscript.Echo "Anonymous User Password: " &amp;amp; _
        objItem.AnonymousUserPass
    For Each objMessage in objItem.BannerMessage
        Wscript.Echo "Banner Message: " &amp;amp; objMessage
    Next
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Connection Timeout: " &amp;amp; objItem.ConnectionTimeout
    Wscript.Echo "Default Logon Domain: " &amp;amp; objItem.DefaultLogonDomain
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Directory Levels To Scan: " &amp;amp; _
        objItem.DirectoryLevelsToScan
    Wscript.Echo "Disable Socket Pooling: " &amp;amp; _
        objItem.DisableSocketPooling
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Downlevel Admin Instance: " &amp;amp; _
        objItem.DownlevelAdminInstance
    Wscript.Echo "Exit Message: " &amp;amp; objItem.ExitMessage
    Wscript.Echo "FTP Directory Browse Show Long Date: " &amp;amp; _
        objItem.FtpDirBrowseShowLongDate
    Wscript.Echo "FFTP Log in Utf8: " &amp;amp; objItem.FtpLogInUtf8
    For Each objMessage in objItem.GreetingMessage
        Wscript.Echo "Greeting Message: " &amp;amp; objMessage
    Next
    Wscript.Echo "Log Anonymous: " &amp;amp; objItem.LogAnonymous
    Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
        objItem.LogExtFileBytesRecv
    Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; _
        objItem.LogExtFileBytesSent
    Wscript.Echo "Log Ext File Client IP: " &amp;amp; _
        objItem.LogExtFileClientIp
    Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
        objItem.LogExtFileComputerName
    Wscript.Echo "Log Ext File Cookie: " &amp;amp; objItem.LogExtFileCookie
    Wscript.Echo "Log Ext File Date: " &amp;amp; objItem.LogExtFileDate
    Wscript.Echo "Log Ext File Flags: " &amp;amp; objItem.LogExtFileFlags
    Wscript.Echo "Log Ext File Host: " &amp;amp; objItem.LogExtFileHost
    Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
        objItem.LogExtFileHttpStatus
    Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
        objItem.LogExtFileHttpSubStatus
    Wscript.Echo "Log Ext File Method: " &amp;amp; objItem.LogExtFileMethod
    Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
        objItem.LogExtFileProtocolVersion
    Wscript.Echo "Log Ext File Referer: " &amp;amp; _
        objItem.LogExtFileReferer
    Wscript.Echo "Log Ext File Server IP: " &amp;amp; _
        objItem.LogExtFileServerIp
    Wscript.Echo "Log Ext File ServerPort: " &amp;amp; _
        objItem.LogExtFileServerPort
    Wscript.Echo "Log Ext File Site Name: " &amp;amp; _
        objItem.LogExtFileSiteName
    Wscript.Echo "Log Ext File Time: " &amp;amp; objItem.LogExtFileTime
    Wscript.Echo "Log Ext File Time Taken: " &amp;amp; _
        objItem.LogExtFileTimeTaken
    Wscript.Echo "Log Ext File URI Query: " &amp;amp; _
        objItem.LogExtFileUriQuery
    Wscript.Echo "Log Ext File URI Stem: " &amp;amp; _
        objItem.LogExtFileUriStem
    Wscript.Echo "Log Ext File User Agent: " &amp;amp; _
        objItem.LogExtFileUserAgent
    Wscript.Echo "Log Ext File User Name: " &amp;amp; _
        objItem.LogExtFileUserName
    Wscript.Echo "Log Ext File Win32 Status: " &amp;amp; _
        objItem.LogExtFileWin32Status
    Wscript.Echo "Log File Directory: " &amp;amp; objItem.LogFileDirectory
    Wscript.Echo "Log File Local Time Rollover: " &amp;amp; _
        objItem.LogFileLocaltimeRollover
    Wscript.Echo "Log FileP eriod: " &amp;amp; objItem.LogFilePeriod
    Wscript.Echo "Log File Truncate Size: " &amp;amp; _
        objItem.LogFileTruncateSize
    Wscript.Echo "Log Module List: " &amp;amp; objItem.LogModuleList
    Wscript.Echo "Log Non-Anonymous: " &amp;amp; objItem.LogNonAnonymous
    Wscript.Echo "Log Odbc Data Source: " &amp;amp; _
        objItem.LogOdbcDataSource
    Wscript.Echo "Log Odbc Password: " &amp;amp; objItem.LogOdbcPassword
    Wscript.Echo "Log Odbc Table Name: " &amp;amp; objItem.LogOdbcTableName
    Wscript.Echo "Log Odbc User Name: " &amp;amp; objItem.LogOdbcUserName
    Wscript.Echo "Log Plugin Clsid: " &amp;amp; objItem.LogPluginClsid
    Wscript.Echo "Log Type: " &amp;amp; objItem.LogType
    Wscript.Echo "Maximum Clients Message: " &amp;amp; _
        objItem.MaxClientsMessage
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
    Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
        objItem.MaxEndpointConnections
    Wscript.Echo "MS-DOS Directory Output: " &amp;amp; _
        objItem.MSDOSDirOutput
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Passive Port Range: " &amp;amp; objItem.PassivePortRange
    Wscript.Echo "Realm: " &amp;amp; objItem.Realm
    Wscript.Echo "Server AutoStart: " &amp;amp; objItem.ServerAutoStart
    Wscript.Echo "Server Command: " &amp;amp; objItem.ServerCommand
    Wscript.Echo "Server Comment: " &amp;amp; objItem.ServerComment
    Wscript.Echo "Server Listen Backlog: " &amp;amp; _
        objItem.ServerListenBacklog
    Wscript.Echo "Server Listen Timeout: " &amp;amp; _
        objItem.ServerListenTimeout
    Wscript.Echo "Server Size: " &amp;amp; objItem.ServerSize
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "User Isolation Mode: " &amp;amp; _
        objItem.UserIsolationMode
Next
</vb><vb name="List FTP Site Home Directory Properties" n="558">' List FTP Site Home Directory Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsFtpServiceSetting")

For Each objItem in colItems
    Wscript.Echo "MS-DOS Directory Output: " &amp;amp; _
        objItem.MSDOSDirOutput
Next
</vb><vb name="List FTP Site Messages" n="559">' List FTP Site Messages


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsFtpServiceSetting")

For Each objItem in colItems
    For Each objMessage in objItem.BannerMessage
        Wscript.Echo "Banner Message: " &amp;amp; objMessage
    Next
    Wscript.Echo "Exit Message: " &amp;amp; objItem.ExitMessage
    For Each objMessage in objItem.GreetingMessage
        Wscript.Echo "Greeting Message: " &amp;amp; objMessage
    Next
    Wscript.Echo "Maximum Clients Message: " &amp;amp; _
        objItem.MaxClientsMessage
Next
</vb><vb name="List FTP Site Security Account Properties" n="560">' List FTP Site Security Account Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsFtpServiceSetting")

For Each objItem in colItems
    Wscript.Echo "Allow Anonymous: " &amp;amp; objItem.AllowAnonymous
    Wscript.Echo "Anonymous Only: " &amp;amp; objItem.AnonymousOnly
    Wscript.Echo "Anonymous User Name: " &amp;amp; objItem.AnonymousUserName
    Wscript.Echo "Anonymous User Password: " &amp;amp; _
        objItem.AnonymousUserPass
Next
</vb><vb name="List FTP Virtual Directories" n="561">' List FTP Virtual Directories


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsFtpVirtualDir")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List FTP Virtual Directory Properties" n="562">' List FTP Virtual Directory Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsFtpVirtualDirSetting")

For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp;  _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; _
        objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "FTP Directory Browse Show Long Date: " &amp;amp; _
        objItem.FtpDirBrowseShowLongDate
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Path: " &amp;amp; objItem.Path
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "UNC Password: " &amp;amp; objItem.UNCPassword
    Wscript.Echo "UNC User Name: " &amp;amp; objItem.UNCUserName
    Wscript.Echo "Win32 Error: " &amp;amp; objItem.Win32Error
Next
</vb><vb name="List Information About the FTP Service" n="563">' List Information About the FTP Service


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsFtpService")

For Each objItem in colItems
    Wscript.Echo "Accept Pause: " &amp;amp; objItem.AcceptPause
    Wscript.Echo "Accept Stop: " &amp;amp; objItem.AcceptStop
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Check Point: " &amp;amp; objItem.CheckPoint
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Desktop Interact: " &amp;amp; objItem.DesktopInteract
    Wscript.Echo "Display Name: " &amp;amp; objItem.DisplayName
    Wscript.Echo "Error Control: " &amp;amp; objItem.ErrorControl
    Wscript.Echo "Exit Code: " &amp;amp; objItem.ExitCode
    Wscript.Echo "Installation Date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Path Name: " &amp;amp; objItem.PathName
    Wscript.Echo "Process Id: " &amp;amp; objItem.ProcessId
    Wscript.Echo "Service Specific Exit Code: " &amp;amp; _
        objItem.ServiceSpecificExitCode
    Wscript.Echo "Service Type: " &amp;amp; objItem.ServiceType
    Wscript.Echo "Started: " &amp;amp; objItem.Started
    Wscript.Echo "Start Mode: " &amp;amp; objItem.StartMode
    Wscript.Echo "Start Name: " &amp;amp; objItem.StartName
    Wscript.Echo "State: " &amp;amp; objItem.State
    Wscript.Echo "Status: " &amp;amp; objItem.Status
    Wscript.Echo "Tag Id: " &amp;amp; objItem.TagId
    Wscript.Echo "Wait Hint: " &amp;amp; objItem.WaitHint
Next
</vb><vb name="Modify Basic FTP Site Properties" n="564">' Modify Basic FTP Site Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsFtpServiceSetting")

For Each objItem in colItems
    objItem.ConnectionTimeout = 600
    objItem.DontLog = True
    objItem.MaxConnections = 50
    objItem.ServerComment = "This server is for IT use only."
    objItem.Put_
Next
</vb><vb name="Modify FTP Site Home Directory Properties" n="565">' Modify FTP Site Home Directory Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsFtpServiceSetting")

For Each objItem in colItems
    objItem.MSDOSDirOutput = False
    objItem.Put_
Next
</vb><vb name="Modify FTP Site Security Account Properties" n="566">' Modify FTP Site Security Account Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsFtpServiceSetting")

For Each objItem in colItems
    objItem.AllowAnonymous = True
    objItem.AnonymousOnly = True
    objItem.AnonymousUserName = "TestUser"
    objItem.AnonymousUserPass = "password"
    objItem.Put_
Next
</vb><vb name="Pause an FTP Server" n="567">' Pause an FTP Server


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsFtpServer Where Name = " &amp;amp; _
        "'MSFTPSVC/1'")

For Each objItem in colItems
    objItem.Pause
Next
</vb><vb name="Start an FTP Server" n="568">' Start an FTP Server


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsFtpServer Where Name = " &amp;amp; _
        "'MSFTPSVC/1'")

For Each objItem in colItems
    objItem.Start
Next
</vb><vb name="Stop an FTP Server" n="569">' Stop an FTP Server


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsFtpServer Where Name = " &amp;amp; _
        "'MSFTPSVC/1'")

For Each objItem in colItems
    objItem.Stop
Next
</vb></dd>
			<dd name="IMAP Server" code="imap" desc="Sample scripts for managing the IMAP mail server included with Internet Information Server 6.0."><vb name="List IMAP Global Default Server Information Using WMI" n="570">' List IMAP Global Default Server Information Using WMI


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsImapServiceSetting")
 
For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp; _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; _
        objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; _
        objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access SSL: " &amp;amp; objItem.AccessSSL
    Wscript.Echo "Access SSL 128: " &amp;amp; objItem.AccessSSL128
    Wscript.Echo "Access SSL Flags: " &amp;amp; objItem.AccessSSLFlags
    Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
        objItem.AccessSSLMapCert
    Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
        objItem.AccessSSLNegotiateCert
    Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
        objItem.AccessSSLRequireCert
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Authentication Anonymous: " &amp;amp; _
        objItem.AuthAnonymous
    Wscript.Echo "Authentication Basic: " &amp;amp; objItem.AuthBasic
    Wscript.Echo "Authentication Flags: " &amp;amp; objItem.AuthFlags
    Wscript.Echo "Authentication MD5: " &amp;amp; objItem.AuthMD5
    Wscript.Echo "Authentication NTLM: " &amp;amp; objItem.AuthNTLM
    Wscript.Echo "AuthenticationPassport: " &amp;amp; objItem.AuthPassport
    Wscript.Echo "Az Enable: " &amp;amp; objItem.AzEnable
    Wscript.Echo "Az Scope Name: " &amp;amp; objItem.AzScopeName
    Wscript.Echo "Az Store Name: " &amp;amp; objItem.AzStoreName
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Connection Timeout: " &amp;amp; _
        objItem.ConnectionTimeout
    Wscript.Echo "Default Logon Domain: " &amp;amp; _
        objItem.DefaultLogonDomain
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "IMAP Clear Text Provider: " &amp;amp; _
        objItem.ImapClearTextProvider
    Wscript.Echo "IMAP Default Domain: " &amp;amp; objItem.ImapDefaultDomain
    Wscript.Echo "IMAP Expire Delay: " &amp;amp; objItem.ImapExpireDelay
    Wscript.Echo "IMAP Expire Mail: " &amp;amp; objItem.ImapExpireMail
    Wscript.Echo "IMAP Expire Start: " &amp;amp; objItem.ImapExpireStart
    Wscript.Echo "IMAP Mail Expiration Time: " &amp;amp; _
        objItem.ImapMailExpirationTime
    Wscript.Echo "IMAP Routing Dll: " &amp;amp; objItem.ImapRoutingDll
    Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
        objItem.LogExtFileBytesRecv
    Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; _
        objItem.LogExtFileBytesSent
    Wscript.Echo "Log Ext File Client IP: " &amp;amp; _
        objItem.LogExtFileClientIp
    Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
        objItem.LogExtFileComputerName
    Wscript.Echo "Log Ext File Cookie: " &amp;amp; objItem.LogExtFileCookie
    Wscript.Echo "Log Ext File Date: " &amp;amp; objItem.LogExtFileDate
    Wscript.Echo "Log Ext File Flags: " &amp;amp; objItem.LogExtFileFlags
    Wscript.Echo "Log Ext File Host: " &amp;amp; objItem.LogExtFileHost
    Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
        objItem.LogExtFileHttpStatus
    Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
        objItem.LogExtFileHttpSubStatus
    Wscript.Echo "Log Ext File Method: " &amp;amp; objItem.LogExtFileMethod
    Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
        objItem.LogExtFileProtocolVersion
    Wscript.Echo "Log Ext File Referer: " &amp;amp; objItem.LogExtFileReferer
    Wscript.Echo "Log Ext File Server IP: " &amp;amp; objItem.LogExtFileServerIp
    Wscript.Echo "Log Ext File Server Port: " &amp;amp; _
        objItem.LogExtFileServerPort
    Wscript.Echo "Log Ext File Site Name: " &amp;amp; objItem.LogExtFileSiteName
    Wscript.Echo "Log Ext File Time: " &amp;amp; objItem.LogExtFileTime
    Wscript.Echo "Log Ext File Time Taken: " &amp;amp; objItem.LogExtFileTimeTaken
    Wscript.Echo "Log Ext File URI Query: " &amp;amp; objItem.LogExtFileUriQuery
    Wscript.Echo "Log Ext File URI Stem: " &amp;amp; objItem.LogExtFileUriStem
    Wscript.Echo "Log Ext File User Agent: " &amp;amp; objItem.LogExtFileUserAgent
    Wscript.Echo "Log Ext File User Name: " &amp;amp; objItem.LogExtFileUserName
    Wscript.Echo "Log Ext File Win32 Status: " &amp;amp; _
        objItem.LogExtFileWin32Status
    Wscript.Echo "Log File Directory: " &amp;amp; objItem.LogFileDirectory
    Wscript.Echo "Log File Period: " &amp;amp; objItem.LogFilePeriod
    Wscript.Echo "Log File Truncate Size: " &amp;amp; _
        objItem.LogFileTruncateSize
    Wscript.Echo "Log Module List: " &amp;amp; objItem.LogModuleList
    Wscript.Echo "Log Odbc Data Source: " &amp;amp; objItem.LogOdbcDataSource
    Wscript.Echo "Log Odbc Password: " &amp;amp; objItem.LogOdbcPassword
    Wscript.Echo "Log Odbc Table Name: " &amp;amp; objItem.LogOdbcTableName
    Wscript.Echo "Log Odbc User Name: " &amp;amp; objItem.LogOdbcUserName
    Wscript.Echo "Log Plugin Clsid: " &amp;amp; objItem.LogPluginClsid
    Wscript.Echo "Log Type: " &amp;amp; objItem.LogType
    Wscript.Echo "Maximum Bandwidth: " &amp;amp; objItem.MaxBandwidth
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
    Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
        objItem.MaxEndpointConnections
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "NT Authentication Providers: " &amp;amp; _
        objItem.NTAuthenticationProviders
    Wscript.Echo "Server AutoStart: " &amp;amp; objItem.ServerAutoStart
    Wscript.Echo "Server Comment: " &amp;amp; objItem.ServerComment
    Wscript.Echo "Server Listen Backlog: " &amp;amp; objItem.ServerListenBacklog
    Wscript.Echo "Server Listen Timeout: " &amp;amp; objItem.ServerListenTimeout
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
Next
</vb><vb name="List IMAP Server Information" n="571">' List IMAP Server Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsImapServerSetting")
 
For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp; _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; _
        objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; _
        objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access SSL: " &amp;amp; objItem.AccessSSL
    Wscript.Echo "Access SSL 128: " &amp;amp; objItem.AccessSSL128
    Wscript.Echo "Access SSL Flags: " &amp;amp; objItem.AccessSSLFlags
    Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
        objItem.AccessSSLMapCert
    Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
        objItem.AccessSSLNegotiateCert
    Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
        objItem.AccessSSLRequireCert
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Authentication Anonymous: " &amp;amp; objItem.AuthAnonymous
    Wscript.Echo "Authentication Basic: " &amp;amp; objItem.AuthBasic
    Wscript.Echo "Authentication Flags: " &amp;amp; objItem.AuthFlags
    Wscript.Echo "Authentication MD5: " &amp;amp; objItem.AuthMD5
    Wscript.Echo "Authentication NTLM: " &amp;amp; objItem.AuthNTLM
    Wscript.Echo "Authentication Passport: " &amp;amp; objItem.AuthPassport
    Wscript.Echo "Az Enable: " &amp;amp; objItem.AzEnable
    Wscript.Echo "Az Scope Name: " &amp;amp; objItem.AzScopeName
    Wscript.Echo "Az Store Name: " &amp;amp; objItem.AzStoreName
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Connection Timeout: " &amp;amp; objItem.ConnectionTimeout
    Wscript.Echo "Default Logon Domain: " &amp;amp; _
        objItem.DefaultLogonDomain
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "IMAP Clear Text Provider: " &amp;amp; _
        objItem.ImapClearTextProvider
    Wscript.Echo "IMAP Default Domain: " &amp;amp; objItem.ImapDefaultDomain
    Wscript.Echo "IMAP Expire Delay: " &amp;amp; objItem.ImapExpireDelay
    Wscript.Echo "IMAP Expire Mail: " &amp;amp; objItem.ImapExpireMail
    Wscript.Echo "IMAP Expire Start: " &amp;amp; objItem.ImapExpireStart
    Wscript.Echo "IMAP Mail Expiration Time: " &amp;amp; _
        objItem.ImapMailExpirationTime
    Wscript.Echo "IMAP Routing Dll: " &amp;amp; objItem.ImapRoutingDll
    Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
        objItem.LogExtFileBytesRecv
    Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; _
        objItem.LogExtFileBytesSent
    Wscript.Echo "Log Ext File Client IP: " &amp;amp; _
        objItem.LogExtFileClientIp
    Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
        objItem.LogExtFileComputerName
    Wscript.Echo "Log Ext File Cookie: " &amp;amp; objItem.LogExtFileCookie
    Wscript.Echo "Log Ext File Date: " &amp;amp; objItem.LogExtFileDate
    Wscript.Echo "Log Ext File Flags: " &amp;amp; objItem.LogExtFileFlags
    Wscript.Echo "Log Ext File Host: " &amp;amp; objItem.LogExtFileHost
    Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
        objItem.LogExtFileHttpStatus
    Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
        objItem.LogExtFileHttpSubStatus
    Wscript.Echo "Log Ext File Method: " &amp;amp; objItem.LogExtFileMethod
    Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
        objItem.LogExtFileProtocolVersion
    Wscript.Echo "Log Ext File Referer: " &amp;amp; objItem.LogExtFileReferer
    Wscript.Echo "Log Ext File Server IP: " &amp;amp; _
        objItem.LogExtFileServerIp
    Wscript.Echo "Log Ext File Server Port: " &amp;amp; _
        objItem.LogExtFileServerPort
    Wscript.Echo "Log Ext File Site Name: " &amp;amp; _
        objItem.LogExtFileSiteName
    Wscript.Echo "Log Ext File Time: " &amp;amp; objItem.LogExtFileTime
    Wscript.Echo "Log Ext File Time Taken: " &amp;amp; _
        objItem.LogExtFileTimeTaken
    Wscript.Echo "Log Ext File URI Query: " &amp;amp; _
        objItem.LogExtFileUriQuery
    Wscript.Echo "Log Ext File URI Stem: " &amp;amp; objItem.LogExtFileUriStem
    Wscript.Echo "Log Ext File User Agent: " &amp;amp; _
        objItem.LogExtFileUserAgent
    Wscript.Echo "Log Ext File User Name: " &amp;amp; objItem.LogExtFileUserName
    Wscript.Echo "Log Ext File Win32 Status: " &amp;amp; _
        objItem.LogExtFileWin32Status
    Wscript.Echo "Log File Directory: " &amp;amp; objItem.LogFileDirectory
    Wscript.Echo "Log File Period: " &amp;amp; objItem.LogFilePeriod
    Wscript.Echo "Log File Truncate Size: " &amp;amp; _
        objItem.LogFileTruncateSize
    Wscript.Echo "Log Odbc Data Source: " &amp;amp; objItem.LogOdbcDataSource
    Wscript.Echo "Log Odbc Password: " &amp;amp; objItem.LogOdbcPassword
    Wscript.Echo "Log Odbc Table Name: " &amp;amp; objItem.LogOdbcTableName
    Wscript.Echo "Log Odbc User Name: " &amp;amp; objItem.LogOdbcUserName
    Wscript.Echo "Log Plugin Clsid: " &amp;amp; objItem.LogPluginClsid
    Wscript.Echo "Log Type: " &amp;amp; objItem.LogType
    Wscript.Echo "Maximum Bandwidth: " &amp;amp; objItem.MaxBandwidth
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
    Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
        objItem.MaxEndpointConnections
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "NT Authentication Providers: " &amp;amp; _
        objItem.NTAuthenticationProviders
    Wscript.Echo "Server AutoStart: " &amp;amp; objItem.ServerAutoStart
    Wscript.Echo "Server Comment: " &amp;amp; objItem.ServerComment
    Wscript.Echo "Server Listen Backlog: " &amp;amp; _
        objItem.ServerListenBacklog
    Wscript.Echo "Server Listen Timeout: " &amp;amp; _
        objItem.ServerListenTimeout
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Win32 Error: " &amp;amp; objItem.Win32Error
Next
</vb><vb name="List IMAP Server Information Using ADSI" n="572">' List IMAP Server Information Using ADSI


strComputer = "LocalHost"
 
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/IMAP4SVC/1")
 
Wscript.Echo "Access Execute: " &amp;amp; objIIS.AccessExecute
Wscript.Echo "Access Flags: " &amp;amp; objIIS.AccessFlags
Wscript.Echo "Access No Physical Directory: " &amp;amp; _
    objIIS.AccessNoPhysicalDir
Wscript.Echo "Access No Remote Execute: " &amp;amp; _
    objIIS.AccessNoRemoteExecute
Wscript.Echo "Access No Remote Read: " &amp;amp; _
    objIIS.AccessNoRemoteRead
Wscript.Echo "Access No Remote Script: " &amp;amp; _
    objIIS.AccessNoRemoteScript
Wscript.Echo "Access No Remote Write: " &amp;amp; _
    objIIS.AccessNoRemoteWrite
Wscript.Echo "Access Read: " &amp;amp; objIIS.AccessRead
Wscript.Echo "Access Script: " &amp;amp; objIIS.AccessScript
Wscript.Echo "Access Source: " &amp;amp; objIIS.AccessSource
Wscript.Echo "Access SSL: " &amp;amp; objIIS.AccessSSL
Wscript.Echo "Access SSL 128: " &amp;amp; objIIS.AccessSSL128
Wscript.Echo "Access SSL Flags: " &amp;amp; objIIS.AccessSSLFlags
Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
    objIIS.AccessSSLMapCert
Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
    objIIS.AccessSSLNegotiateCert
Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
    objIIS.AccessSSLRequireCert
Wscript.Echo "Access Write: " &amp;amp; objIIS.AccessWrite
For Each strACL in objIIS.AdminACLBin
    Wscript.Echo "Admin ACL Bin: " &amp;amp; strACL
Next
Wscript.Echo "Authentication Anonymous: " &amp;amp; _
    objIIS.AuthAnonymous
Wscript.Echo "Authentication Basic: " &amp;amp; objIIS.AuthBasic
Wscript.Echo "Authentication Flags: " &amp;amp; objIIS.AuthFlags
Wscript.Echo "Authentication MD5: " &amp;amp; objIIS.AuthMD5
Wscript.Echo "Authentication NTLM: " &amp;amp; objIIS.AuthNTLM
Wscript.Echo "Authentication Passport: " &amp;amp; _
    objIIS.AuthPassport
Wscript.Echo "Az Enable: " &amp;amp; objIIS.AzEnable
Wscript.Echo "Az Scope Name: " &amp;amp; objIIS.AzScopeName
Wscript.Echo "Az Store Name: " &amp;amp; objIIS.AzStoreName
Wscript.Echo "Connection Timeout: " &amp;amp; _
    objIIS.ConnectionTimeout
Wscript.Echo "Default Logon Domain: " &amp;amp; _
    objIIS.DefaultLogonDomain
Wscript.Echo "Don't Log: " &amp;amp; objIIS.DontLog
Wscript.Echo "IMAP Clear Text Provider: " &amp;amp; _
    objIIS.ImapClearTextProvider
Wscript.Echo "IMAP Default Domain: " &amp;amp; objIIS.ImapDefaultDomain
Wscript.Echo "IMAP Expire Delay: " &amp;amp; objIIS.ImapExpireDelay
Wscript.Echo "IMAP Expire Mail: " &amp;amp; objIIS.ImapExpireMail
Wscript.Echo "IMAP Expire Start: " &amp;amp; objIIS.ImapExpireStart
Wscript.Echo "IMAP Mail Expiration Time: " &amp;amp; _
    objIIS.ImapMailExpirationTime
Wscript.Echo "IMAP Routing Dll: " &amp;amp; objIIS.ImapRoutingDll
Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
    objIIS.LogExtFileBytesRecv
Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; _
    objIIS.LogExtFileBytesSent
Wscript.Echo "Log Ext File Client IP: " &amp;amp; objIIS.LogExtFileClientIp
Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
    objIIS.LogExtFileComputerName
Wscript.Echo "Log Ext File Cookie: " &amp;amp; objIIS.LogExtFileCookie
Wscript.Echo "Log Ext File Date: " &amp;amp; objIIS.LogExtFileDate
Wscript.Echo "Log Ext File Flags: " &amp;amp; objIIS.LogExtFileFlags
Wscript.Echo "Log Ext File Host: " &amp;amp; objIIS.LogExtFileHost
Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
    objIIS.LogExtFileHttpStatus
Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
    objIIS.LogExtFileHttpSubStatus
Wscript.Echo "Log Ext File Method: " &amp;amp; objIIS.LogExtFileMethod
Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
    objIIS.LogExtFileProtocolVersion
Wscript.Echo "Log Ext File Referer: " &amp;amp; objIIS.LogExtFileReferer
Wscript.Echo "Log Ext File Server IP: " &amp;amp; objIIS.LogExtFileServerIp
Wscript.Echo "Log Ext File Server Port: " &amp;amp; _
    objIIS.LogExtFileServerPort
Wscript.Echo "Log Ext File Site Name: " &amp;amp; objIIS.LogExtFileSiteName
Wscript.Echo "Log Ext File Time: " &amp;amp; objIIS.LogExtFileTime
Wscript.Echo "Log Ext File Time Taken: " &amp;amp; objIIS.LogExtFileTimeTaken
Wscript.Echo "Log Ext File URI Query: " &amp;amp; objIIS.LogExtFileUriQuery
Wscript.Echo "Log Ext File URI Stem: " &amp;amp; objIIS.LogExtFileUriStem
Wscript.Echo "Log Ext File User Agent: " &amp;amp; objIIS.LogExtFileUserAgent
Wscript.Echo "Log Ext File User Name: " &amp;amp; objIIS.LogExtFileUserName
Wscript.Echo "Log Ext File Win32 Status: " &amp;amp; _
    objIIS.LogExtFileWin32Status
Wscript.Echo "Log File Directory: " &amp;amp; objIIS.LogFileDirectory
Wscript.Echo "Log File Period: " &amp;amp; objIIS.LogFilePeriod
Wscript.Echo "Log File Truncate Size: " &amp;amp; objIIS.LogFileTruncateSize
Wscript.Echo "Log Odbc Data Source: " &amp;amp; objIIS.LogOdbcDataSource
Wscript.Echo "Log Odbc Password: " &amp;amp; objIIS.LogOdbcPassword
Wscript.Echo "Log Odbc Table Name: " &amp;amp; objIIS.LogOdbcTableName
Wscript.Echo "Log Odbc User Name: " &amp;amp; objIIS.LogOdbcUserName
Wscript.Echo "Log Plugin Clsid: " &amp;amp; objIIS.LogPluginClsid
Wscript.Echo "Log Type: " &amp;amp; objIIS.LogType
Wscript.Echo "Maximum Bandwidth: " &amp;amp; objIIS.MaxBandwidth
Wscript.Echo "Maximum Connections: " &amp;amp; objIIS.MaxConnections
Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
    objIIS.MaxEndpointConnections
Wscript.Echo "Name: " &amp;amp; objIIS.Name
Wscript.Echo "NT Authentication Providers: " &amp;amp; _
    objIIS.NTAuthenticationProviders
For Each strBinding in objIIS.SecureBindings
    Wscript.Echo "Secure Bindings: " &amp;amp; strBinding
Next
Wscript.Echo "Server AutoStart: " &amp;amp; objIIS.ServerAutoStart
For Each strBinding in objIIS.ServerBindings
    Wscript.Echo "Server Bindings: " &amp;amp; strBinding
Next
Wscript.Echo "Server Comment: " &amp;amp; objIIS.ServerComment
Wscript.Echo "Server Listen Backlog: " &amp;amp; _
    objIIS.ServerListenBacklog
Wscript.Echo "Server Listen Timeout: " &amp;amp; _
    objIIS.ServerListenTimeout
Wscript.Echo "Win32 Error: " &amp;amp; objIIS.Win32Error
</vb><vb name="List IMAP Server State" n="573">' List IMAP Server State


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsImapServer")

For Each objItem in colItems
    Wscript.Echo "IMAP Service Version: " &amp;amp; objItem.ImapServiceVersion
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Server State: " &amp;amp; objItem.ServerState
Next
</vb><vb name="List IMAP Service Configuration Information" n="574">' List IMAP Service Configuration Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsImapService")

For Each objItem in colItems
    Wscript.Echo "Accept Pause: " &amp;amp; objItem.AcceptPause
    Wscript.Echo "Accept Stop: " &amp;amp; objItem.AcceptStop
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Check Point: " &amp;amp; objItem.CheckPoint
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Desktop Interact: " &amp;amp; objItem.DesktopInteract
    Wscript.Echo "Display Name: " &amp;amp; objItem.DisplayName
    Wscript.Echo "Error Control: " &amp;amp; objItem.ErrorControl
    Wscript.Echo "Exit Code: " &amp;amp; objItem.ExitCode
    For Each strSource in objItem.ImapRoutingSources
        Wscript.Echo "IMAP Routing Sources: " &amp;amp; strSource
    Next
    Wscript.Echo "IMAP Service Version: " &amp;amp; objItem.ImapServiceVersion
    Wscript.Echo "Installation Date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Path Name: " &amp;amp; objItem.PathName
    Wscript.Echo "Process Id: " &amp;amp; objItem.ProcessId
    Wscript.Echo "Service Specific Exit Code: " &amp;amp; _
        objItem.ServiceSpecificExitCode
    Wscript.Echo "Service Type: " &amp;amp; objItem.ServiceType
    Wscript.Echo "Started: " &amp;amp; objItem.Started
    Wscript.Echo "Start Mode: " &amp;amp; objItem.StartMode
    Wscript.Echo "Start Name: " &amp;amp; objItem.StartName
    Wscript.Echo "State: " &amp;amp; objItem.State
    Wscript.Echo "Status: " &amp;amp; objItem.Status
    Wscript.Echo "Tag Id: " &amp;amp; objItem.TagId
    Wscript.Echo "Wait Hint: " &amp;amp; objItem.WaitHint
Next
</vb><vb name="List IMAP Service Information Using ADSI" n="575">' List IMAP Service Information Using ADSI


strComputer = "LocalHost"
 
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/IMAP4SVC")
 
Wscript.Echo "Access Execute: " &amp;amp; objIIS.AccessExecute
Wscript.Echo "Access Flags: " &amp;amp; objIIS.AccessFlags
Wscript.Echo "Access No Physical Directory: " &amp;amp; _
    objIIS.AccessNoPhysicalDir
Wscript.Echo "Access No Remote Execute: " &amp;amp; _
    objIIS.AccessNoRemoteExecute
Wscript.Echo "Access No Remote Read: " &amp;amp; objIIS.AccessNoRemoteRead
Wscript.Echo "Access No Remote Script: " &amp;amp; _
    objIIS.AccessNoRemoteScript
Wscript.Echo "Access No Remote Write: " &amp;amp; _
    objIIS.AccessNoRemoteWrite
Wscript.Echo "Access Read: " &amp;amp; objIIS.AccessRead
Wscript.Echo "Access Script: " &amp;amp; objIIS.AccessScript
Wscript.Echo "Access Source: " &amp;amp; objIIS.AccessSource
Wscript.Echo "Access SSL: " &amp;amp; objIIS.AccessSSL
Wscript.Echo "Access SSL 128: " &amp;amp; objIIS.AccessSSL128
Wscript.Echo "Access SSL Flags: " &amp;amp; objIIS.AccessSSLFlags
Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
    objIIS.AccessSSLMapCert
Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
    objIIS.AccessSSLNegotiateCert
Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
    objIIS.AccessSSLRequireCert
Wscript.Echo "Access Write: " &amp;amp; objIIS.AccessWrite
For Each strACL in objIIS.AdminACLBin
    Wscript.Echo "Admin ACL Bin: " &amp;amp; strACL
Next
Wscript.Echo "Authentication Anonymous: " &amp;amp; objIIS.AuthAnonymous
Wscript.Echo "Authentication Basic: " &amp;amp; objIIS.AuthBasic
Wscript.Echo "Authentication Flags: " &amp;amp; objIIS.AuthFlags
Wscript.Echo "Authentication MD5: " &amp;amp; objIIS.AuthMD5
Wscript.Echo "Authentication NTLM: " &amp;amp; objIIS.AuthNTLM
Wscript.Echo "AuthenticationPassport: " &amp;amp; objIIS.AuthPassport
Wscript.Echo "Az Enable: " &amp;amp; objIIS.AzEnable
Wscript.Echo "Az Scope Name: " &amp;amp; objIIS.AzScopeName
Wscript.Echo "Az Store Name: " &amp;amp; objIIS.AzStoreName
Wscript.Echo "Connection Timeout: " &amp;amp; objIIS.ConnectionTimeout
Wscript.Echo "Default Logon Domain: " &amp;amp; objIIS.DefaultLogonDomain
Wscript.Echo "Don't Log: " &amp;amp; objIIS.DontLog
Wscript.Echo "IMAP Clear Text Provider: " &amp;amp; _
    objIIS.ImapClearTextProvider
Wscript.Echo "IMAP Default Domain: " &amp;amp; objIIS.ImapDefaultDomain
Wscript.Echo "IMAP Expire Delay: " &amp;amp; objIIS.ImapExpireDelay
Wscript.Echo "IMAP Expire Mail: " &amp;amp; objIIS.ImapExpireMail
Wscript.Echo "IMAP Expire Start: " &amp;amp; objIIS.ImapExpireStart
Wscript.Echo "IMAP Mail Expiration Time: " &amp;amp; _
    objIIS.ImapMailExpirationTime
Wscript.Echo "IMAP Routing Dll: " &amp;amp; objIIS.ImapRoutingDll
Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
    objIIS.LogExtFileBytesRecv
Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; _
    objIIS.LogExtFileBytesSent
Wscript.Echo "Log Ext File Client IP: " &amp;amp; objIIS.LogExtFileClientIp
Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
    objIIS.LogExtFileComputerName
Wscript.Echo "Log Ext File Cookie: " &amp;amp; objIIS.LogExtFileCookie
Wscript.Echo "Log Ext File Date: " &amp;amp; objIIS.LogExtFileDate
Wscript.Echo "Log Ext File Flags: " &amp;amp; objIIS.LogExtFileFlags
Wscript.Echo "Log Ext File Host: " &amp;amp; objIIS.LogExtFileHost
Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
    objIIS.LogExtFileHttpStatus
Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
    objIIS.LogExtFileHttpSubStatus
Wscript.Echo "Log Ext File Method: " &amp;amp; objIIS.LogExtFileMethod
Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
    objIIS.LogExtFileProtocolVersion
Wscript.Echo "Log Ext File Referer: " &amp;amp; objIIS.LogExtFileReferer
Wscript.Echo "Log Ext File Server IP: " &amp;amp; objIIS.LogExtFileServerIp
Wscript.Echo "Log Ext File Server Port: " &amp;amp; _
    objIIS.LogExtFileServerPort
Wscript.Echo "Log Ext File Site Name: " &amp;amp; objIIS.LogExtFileSiteName
Wscript.Echo "Log Ext File Time: " &amp;amp; objIIS.LogExtFileTime
Wscript.Echo "Log Ext File Time Taken: " &amp;amp; objIIS.LogExtFileTimeTaken
Wscript.Echo "Log Ext File URI Query: " &amp;amp; objIIS.LogExtFileUriQuery
Wscript.Echo "Log Ext File URI Stem: " &amp;amp; objIIS.LogExtFileUriStem
Wscript.Echo "Log Ext File User Agent: " &amp;amp; objIIS.LogExtFileUserAgent
Wscript.Echo "Log Ext File User Name: " &amp;amp; objIIS.LogExtFileUserName
Wscript.Echo "Log Ext File Win32 Status: " &amp;amp; _
    objIIS.LogExtFileWin32Status
Wscript.Echo "Log File Directory: " &amp;amp; objIIS.LogFileDirectory
Wscript.Echo "Log File Period: " &amp;amp; objIIS.LogFilePeriod
Wscript.Echo "Log File Truncate Size: " &amp;amp; objIIS.LogFileTruncateSize
Wscript.Echo "Log Module List: " &amp;amp; objIIS.LogModuleList
Wscript.Echo "Log Odbc Data Source: " &amp;amp; objIIS.LogOdbcDataSource
Wscript.Echo "Log Odbc Password: " &amp;amp; objIIS.LogOdbcPassword
Wscript.Echo "Log Odbc Table Name: " &amp;amp; objIIS.LogOdbcTableName
Wscript.Echo "Log Odbc User Name: " &amp;amp; objIIS.LogOdbcUserName
Wscript.Echo "Log Plugin Clsid: " &amp;amp; objIIS.LogPluginClsid
Wscript.Echo "Log Type: " &amp;amp; objIIS.LogType
Wscript.Echo "Maximum Bandwidth: " &amp;amp; objIIS.MaxBandwidth
Wscript.Echo "Maximum Connections: " &amp;amp; objIIS.MaxConnections
Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
    objIIS.MaxEndpointConnections
Wscript.Echo "Name: " &amp;amp; objIIS.Name
Wscript.Echo "NT Authentication Providers: " &amp;amp; _
    objIIS.NTAuthenticationProviders
Wscript.Echo "Server AutoStart: " &amp;amp; objIIS.ServerAutoStart
Wscript.Echo "Server Comment: " &amp;amp; objIIS.ServerComment
Wscript.Echo "Server Listen Backlog: " &amp;amp; objIIS.ServerListenBacklog
Wscript.Echo "Server Listen Timeout: " &amp;amp; objIIS.ServerListenTimeout
</vb><vb name="List IMAP Sessions" n="576">' List IMAP Sessions


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsImapSessions")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List IMAP Sessions Setting Instances" n="577">' List IMAP Sessions Setting Instances


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsImapSessionsSetting")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="Modify an IMAP Server Setting Metabase Property" n="578">' Modify an IMAP Server Setting Metabase Property


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsIMAPServerSetting")
 
For Each objItem in colItems
    objItem.DefaultLogonDomain = "fabrikam"
    objItem.Put_
Next
</vb><vb name="Modify an IMAP Service Setting Metabase Property" n="579">' Modify an IMAP Service Setting Metabase Property


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery( _
    "Select * from IIsIMAPServiceSetting")
 
For Each objItem in colItems
    objItem.ServerAutoStart = TRUE
    objItem.Put_
Next
</vb><vb name="Modify an IMAP Virtual Directory Metabase Property" n="580">' Modify an IMAP Virtual Directory Metabase Property


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsIMAPVirtualDirSetting")
 
For Each objItem in colItems
    objItem.AccessSource = FALSE
    objItem.Put_
Next
</vb></dd>
			<dd name="Logging" code="logging" desc="Sample scripts for logs and logging options on Internet Information Server 6.0."><vb name="List All FTP Log Modules" n="581">' List All FTP Log Modules


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsFtpInfoSetting")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Log Module List: " &amp;amp; objItem.LogModuleList
Next
</vb><vb name="List Custom Log Module Properties" n="582">' List Custom Log Module Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsCustomLogModuleSetting")

For Each objItem in colItems
    Wscript.Echo "Log Custom Property Data Type: " &amp;amp; _
        objItem.LogCustomPropertyDataType
    Wscript.Echo "Log Custom Property Header: " &amp;amp; _
        objItem.LogCustomPropertyHeader
    Wscript.Echo "Log Custom Property ID: " &amp;amp; _
        objItem.LogCustomPropertyID
    Wscript.Echo "Log Custom Property Mask: " &amp;amp; _
        objItem.LogCustomPropertyMask
    Wscript.Echo "Log Custom Property Name: " &amp;amp; _
        objItem.LogCustomPropertyName
    Wscript.Echo "Log Custom Property Node ID: " &amp;amp; _
        objItem.LogCustomPropertyNodeID
    For Each strProperty in objItem.LogCustomPropertyServicesString
        Wscript.Echo "Log Custom Property Services String: " &amp;amp; _
            strproperty
    Next
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
Next
</vb><vb name="List Custom Log Modules" n="583">' List Custom Log Modules


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsCustomLogModule")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List IIsLogModule Instances" n="584">' List IIsLogModule Instances


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsLogModule")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List IIsLogModulesSetting Instances" n="585">' List IIsLogModulesSetting Instances


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsLogModulesSetting")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List Log Module Settings" n="586">' List Log Module Settings


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsLogModuleSetting")
 
For Each objItem in colItems
    Wscript.Echo "Log Module Id: " &amp;amp; objItem.LogModuleId
    Wscript.Echo "Log Module UI Id: " &amp;amp; objItem.LogModuleUiId
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List Log Modules" n="587">' List Log Modules


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsLogModules")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List Web Service Logging Options" n="588">' List Web Service Logging Options


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")
For Each objItem in colItems
    Wscript.Echo "Log File Directory: " &amp;amp; objItem.LogFileDirectory
    Wscript.Echo "Log File Local Time Rollover: " &amp;amp; _
        objItem.LogFileLocaltimeRollover
    Wscript.Echo "Log File Period: " &amp;amp; objItem.LogFilePeriod
    Wscript.Echo "Log File Truncate Size: " &amp;amp; _
        objItem.LogFileTruncateSize
Next
</vb><vb name="Modify Web Service Logging Options" n="589">' Modify Web Service Logging Options


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")

For Each objItem in colItems
    objItem.LogFileDirectory = "C:\Logs"
    objItem.LogFileLocaltimeRollover = True
    objItem.LogFilePeriod = 2
    objItem.LogFileTruncateSize = 1000000
    objItem.Put_
Next
</vb></dd>
			<dd name="NNTP Server" code="nntp" desc="Sample scripts for managing the NNTP news server included with Internet Information Server 6.0."><vb name="List Filter Load Order" n="590">' List Filter Load Order


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsFiltersSetting")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Filter Load Order: " &amp;amp; objItem.FilterLoadOrder
Next
</vb><vb name="List IIsNNTPExpiration Instances" n="591">' List IIsNNTPExpiration Instances


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpExpiration")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List IIsNNTPExpirationSetting Instances" n="592">' List IIsNNTPExpirationSetting Instances


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpExpirationSetting")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List IIsNNTPExpire Instances" n="593">' List IIsNNTPExpire Instances


strComputer = "."Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")
Set colItems = objWMIService.ExecQuery("Select * from IIsNntpExpire")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List IIsNNTPFeeds Instances" n="594">' List IIsNNTPFeeds Instances


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsNntpFeeds")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List IIsNNTPGroupsSetting Instances" n="595">' List IIsNNTPGroupsSetting Instances


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpGroupsSetting")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List IIsNNTPRebuildSetting Instances" n="596">' List IIsNNTPRebuildSetting Instances


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpRebuildSetting")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List Instances of the IIsNNTPRebuild Class" n="597">' List Instances of the IIsNNTPRebuild Class


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsNntpRebuild")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List Instances of the IIsNNTPSessionsSetting Class" n="598">' List Instances of the IIsNNTPSessionsSetting Class


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpSessionsSetting")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List NNTP Authentication Properties" n="599">' List NNTP Authentication Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpServiceSetting") 

For Each objItem in colItems
    Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
        objItem.AccessSSLMapCert
    Wscript.Echo "Access SSL Negotiate Certifcate: " &amp;amp; _
        objItem.AccessSSLNegotiateCert
    Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
        objItem.AccessSSLRequireCert
    Wscript.Echo "Authentication Anonymous: " &amp;amp; objItem.AuthAnonymous
    Wscript.Echo "Authentication Basic: " &amp;amp; objItem.AuthBasic
    Wscript.Echo "Authentication NTLM: " &amp;amp; objItem.AuthNTLM
Next
</vb><vb name="List NNTP Expiration Information" n="600">' List NNTP Expiration Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpExpireSetting")
 
For Each objItem in colItems
    For Each strGroup in objItem.ExpireNewsgroups
        Wscript.Echo "Expire Newsgroups: " &amp;amp; strGroup
    Next
    Wscript.Echo "Expire Policy Name: " &amp;amp; objItem.ExpirePolicyName
    Wscript.Echo "Expire Space: " &amp;amp; objItem.ExpireSpace
    Wscript.Echo "Expire Time: " &amp;amp; objItem.ExpireTime
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
Next
</vb><vb name="List NNTP Feed Peer Temporary Directories" n="601">' List NNTP Feed Peer Temporary Directories


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpFeedsSetting")
 
For Each objItem in colItems
    Wscript.Echo "Feed Peer Temporary Directory: " &amp;amp; _
        objItem.FeedPeerTempDirectory
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List NNTP Groups" n="602">' List NNTP Groups


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsNntpGroups")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List NNTP Log Modules" n="603">' List NNTP Log Modules


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpInfoSetting")
 
For Each objItem in colItems
    Wscript.Echo "Log Module List: " &amp;amp; objItem.LogModuleList
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List NNTP Server Setting Information" n="604">' List NNTP Server Setting Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpServerSetting")
 
For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp; _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; _
        objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access SSL: " &amp;amp; objItem.AccessSSL
    Wscript.Echo "Access SSL 128: " &amp;amp; objItem.AccessSSL128
    Wscript.Echo "Access SSL Flags: " &amp;amp; objItem.AccessSSLFlags
    Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
        objItem.AccessSSLMapCert
    Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
        objItem.AccessSSLNegotiateCert
    Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
        objItem.AccessSSLRequireCert
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Admin Email: " &amp;amp; objItem.AdminEmail
    Wscript.Echo "Admin Name: " &amp;amp; objItem.AdminName
    Wscript.Echo "Allow Clien tPosts: " &amp;amp; objItem.AllowClientPosts
    Wscript.Echo "Allow Control Msgs: " &amp;amp; objItem.AllowControlMsgs
    Wscript.Echo "Allow Feedback Posts: " &amp;amp; objItem.AllowFeedPosts
    Wscript.Echo "Anonymous Password Sync: " &amp;amp; _
        objItem.AnonymousPasswordSync
    Wscript.Echo "Anonymous User Name: " &amp;amp; objItem.AnonymousUserName
    Wscript.Echo "Anonymous User Password: " &amp;amp; _
        objItem.AnonymousUserPass
    Wscript.Echo "Article Table File: " &amp;amp; objItem.ArticleTableFile
    Wscript.Echo "Article Time Limit: " &amp;amp; objItem.ArticleTimeLimit
    Wscript.Echo "Authentication Anonymous: " &amp;amp; objItem.AuthAnonymous
    Wscript.Echo "Authentication Basic: " &amp;amp; objItem.AuthBasic
    Wscript.Echo "Authentication Flags: " &amp;amp; objItem.AuthFlags
    Wscript.Echo "Authentication MD5: " &amp;amp; objItem.AuthMD5
    Wscript.Echo "Authentication NTLM: " &amp;amp; objItem.AuthNTLM
    Wscript.Echo "Authentication Passport: " &amp;amp; objItem.AuthPassport
    Wscript.Echo "Az Enable: " &amp;amp; objItem.AzEnable
    Wscript.Echo "Az Scope Name: " &amp;amp; objItem.AzScopeName
    Wscript.Echo "Az Store Name: " &amp;amp; objItem.AzStoreName
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Client Post Hard Limit: " &amp;amp; _
        objItem.ClientPostHardLimit
    Wscript.Echo "Client Post Soft Limit: " &amp;amp; _
        objItem.ClientPostSoftLimit
    Wscript.Echo "Cluster Enabled: " &amp;amp; objItem.ClusterEnabled
    Wscript.Echo "Connection Timeout: " &amp;amp; objItem.ConnectionTimeout
    Wscript.Echo "Content Indexed: " &amp;amp; objItem.ContentIndexed
    Wscript.Echo "Default Moderator Domain: " &amp;amp; _
        objItem.DefaultModeratorDomain
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Disable New News: " &amp;amp; objItem.DisableNewNews
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Feed Post Hard Limit: " &amp;amp; objItem.FeedPostHardLimit
    Wscript.Echo "Feed Post Soft Limit: " &amp;amp; objItem.FeedPostSoftLimit
    Wscript.Echo "Feed Report Period: " &amp;amp; objItem.FeedReportPeriod
    Wscript.Echo "Group Help File: " &amp;amp; objItem.GroupHelpFile
    Wscript.Echo "Group List File: " &amp;amp; objItem.GroupListFile
    Wscript.Echo "Group Var List File: " &amp;amp; objItem.GroupVarListFile
    Wscript.Echo "History Expiration: " &amp;amp; objItem.HistoryExpiration
    Wscript.Echo "History Table File: " &amp;amp; objItem.HistoryTableFile
    Wscript.Echo "Honor Client Msg Ids: " &amp;amp; objItem.HonorClientMsgIds
    Wscript.Echo "List File: " &amp;amp; objItem.ListFile
    Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
        objItem.LogExtFileBytesRecv
    Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; _
        objItem.LogExtFileBytesSent
    Wscript.Echo "Log Ext File Client IP: " &amp;amp; _
        objItem.LogExtFileClientIp
    Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
        objItem.LogExtFileComputerName
    Wscript.Echo "Log Ext File Cookie: " &amp;amp; objItem.LogExtFileCookie
    Wscript.Echo "Log Ext File Date: " &amp;amp; objItem.LogExtFileDate
    Wscript.Echo "Log Ext File Flags: " &amp;amp; objItem.LogExtFileFlags
    Wscript.Echo "Log Ext File Host: " &amp;amp; objItem.LogExtFileHost
    Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
        objItem.LogExtFileHttpStatus
    Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
        objItem.LogExtFileHttpSubStatus
    Wscript.Echo "Log Ext File Method: " &amp;amp; objItem.LogExtFileMethod
    Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
        objItem.LogExtFileProtocolVersion
    Wscript.Echo "Log Ext File Referer: " &amp;amp; objItem.LogExtFileReferer
    Wscript.Echo "Log Ext File Server IP: " &amp;amp; objItem.LogExtFileServerIp
    Wscript.Echo "Log Ext File Server Port: " &amp;amp; _
        objItem.LogExtFileServerPort
    Wscript.Echo "Log Ext File Site Name: " &amp;amp; objItem.LogExtFileSiteName
    Wscript.Echo "Log Ext File Time: " &amp;amp; objItem.LogExtFileTime
    Wscript.Echo "Log Ext File Time Taken: " &amp;amp; objItem.LogExtFileTimeTaken
    Wscript.Echo "Log Ext File URI Query: " &amp;amp; objItem.LogExtFileUriQuery
    Wscript.Echo "Log Ext File URI Stem: " &amp;amp; objItem.LogExtFileUriStem
    Wscript.Echo "Log Ext File User Agent: " &amp;amp; objItem.LogExtFileUserAgent
    Wscript.Echo "Log Ext File User Name: " &amp;amp; objItem.LogExtFileUserName
    Wscript.Echo "Log Ext FileWin32 Status: " &amp;amp; _
        objItem.LogExtFileWin32Status
    Wscript.Echo "Log File Directory: " &amp;amp; objItem.LogFileDirectory
    Wscript.Echo "Log File Period: " &amp;amp; objItem.LogFilePeriod
    Wscript.Echo "Log File Truncate Size: " &amp;amp; _
        objItem.LogFileTruncateSize
    Wscript.Echo "Log Odbc Data Source: " &amp;amp; objItem.LogOdbcDataSource
    Wscript.Echo "Log Odbc Password: " &amp;amp; objItem.LogOdbcPassword
    Wscript.Echo "Log Odbc Table Name: " &amp;amp; objItem.LogOdbcTableName
    Wscript.Echo "Log Odbc User Name: " &amp;amp; objItem.LogOdbcUserName
    Wscript.Echo "Log Plugin Clsid: " &amp;amp; objItem.LogPluginClsid
    Wscript.Echo "Log Type: " &amp;amp; objItem.LogType
    Wscript.Echo "Maximum Bandwidth: " &amp;amp; objItem.MaxBandwidth
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
    Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
        objItem.MaxEndpointConnections
    Wscript.Echo "Maximum Search Results: " &amp;amp; objItem.MaxSearchResults
    Wscript.Echo "Moderator File: " &amp;amp; objItem.ModeratorFile
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "News Crawler Time: " &amp;amp; objItem.NewsCrawlerTime
    Wscript.Echo "News Drop Directory: " &amp;amp; objItem.NewsDropDirectory
    Wscript.Echo "News Failed Pickup Directory: " &amp;amp; _
        objItem.NewsFailedPickupDirectory
    Wscript.Echo "News Pickup Directory: " &amp;amp; objItem.NewsPickupDirectory
    Wscript.Echo "NNTP Clear Text Provider: " &amp;amp; _
        objItem.NntpClearTextProvider
    Wscript.Echo "NNTP Command Log Mask: " &amp;amp; objItem.NntpCommandLogMask
    Wscript.Echo "NNTP Organization: " &amp;amp; objItem.NntpOrganization
    Wscript.Echo "NNTP UUCP Name: " &amp;amp; objItem.NntpUucpName
    Wscript.Echo "NT Authentication Providers: " &amp;amp; _
        objItem.NTAuthenticationProviders
    Wscript.Echo "Pretty Names File: " &amp;amp; objItem.PrettyNamesFile
    Wscript.Echo "Server AutoStart: " &amp;amp; objItem.ServerAutoStart
    Wscript.Echo "Server Comment: " &amp;amp; objItem.ServerComment
    Wscript.Echo "Server Listen Backlog: " &amp;amp; _
        objItem.ServerListenBacklog
    Wscript.Echo "Server Listen Timeout: " &amp;amp; _
        objItem.ServerListenTimeout
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Shutdown Latency: " &amp;amp; objItem.ShutdownLatency
    Wscript.Echo "SMTP Server: " &amp;amp; objItem.SmtpServer
    Wscript.Echo "Win32 Error: " &amp;amp; objItem.Win32Error
    Wscript.Echo "Xover Table File: " &amp;amp; objItem.XoverTableFile
Next
</vb><vb name="List NNTP Service Configuration Information" n="605">' List NNTP Service Configuration Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsNntpService")
 
For Each objItem in colItems
    Wscript.Echo "Accept Pause: " &amp;amp; objItem.AcceptPause
    Wscript.Echo "Accept Stop: " &amp;amp; objItem.AcceptStop
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Check Point: " &amp;amp; objItem.CheckPoint
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Desktop Interact: " &amp;amp; objItem.DesktopInteract
    Wscript.Echo "Display Name: " &amp;amp; objItem.DisplayName
    Wscript.Echo "Error Control: " &amp;amp; objItem.ErrorControl
    Wscript.Echo "Exit Code: " &amp;amp; objItem.ExitCode
    Wscript.Echo "Installation Date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "NNTP Service Version: " &amp;amp; _
        objItem.NntpServiceVersion
    Wscript.Echo "Path Name: " &amp;amp; objItem.PathName
    Wscript.Echo "Process Id: " &amp;amp; objItem.ProcessId
    Wscript.Echo "Service Specific Exit Code: " &amp;amp; _
        objItem.ServiceSpecificExitCode
    Wscript.Echo "Service Type: " &amp;amp; objItem.ServiceType
    Wscript.Echo "Started: " &amp;amp; objItem.Started
    Wscript.Echo "Start Mode: " &amp;amp; objItem.StartMode
    Wscript.Echo "Start Name: " &amp;amp; objItem.StartName
    Wscript.Echo "State: " &amp;amp; objItem.State
    Wscript.Echo "Status: " &amp;amp; objItem.Status
    Wscript.Echo "Tag Id: " &amp;amp; objItem.TagId
    Wscript.Echo "Wait Hint: " &amp;amp; objItem.WaitHint
Next
</vb><vb name="List NNTP Service Information" n="606">' List NNTP Service Information


strComputer = "LocalHost"
 
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/NNTPSVC")
 
Wscript.Echo "Access Execute: " &amp;amp; objIIS.AccessExecute
Wscript.Echo "Access Flags: " &amp;amp; objIIS.AccessFlags
Wscript.Echo "Access No Physical Directory: " &amp;amp; _
    objIIS.AccessNoPhysicalDir
Wscript.Echo "Access No Remote Execute: " &amp;amp; _
    objIIS.AccessNoRemoteExecute
Wscript.Echo "Access No Remote Read: " &amp;amp; objIIS.AccessNoRemoteRead
Wscript.Echo "Access No Remote Script: " &amp;amp; _
    objIIS.AccessNoRemoteScript
Wscript.Echo "Access No Remote Write: " &amp;amp; _
    objIIS.AccessNoRemoteWrite
Wscript.Echo "Access Read: " &amp;amp; objIIS.AccessRead
Wscript.Echo "Access Script: " &amp;amp; objIIS.AccessScript
Wscript.Echo "Access Source: " &amp;amp; objIIS.AccessSource
Wscript.Echo "Access SSL: " &amp;amp; objIIS.AccessSSL
Wscript.Echo "Access SSL 128: " &amp;amp; objIIS.AccessSSL128
Wscript.Echo "Access SSL Flags: " &amp;amp; objIIS.AccessSSLFlags
Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
    objIIS.AccessSSLMapCert
Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
    objIIS.AccessSSLNegotiateCert
Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
    objIIS.AccessSSLRequireCert
Wscript.Echo "Access Write: " &amp;amp; objIIS.AccessWrite
For Each strACL in objIIS.AdminACLBin
    Wscript.Echo "Admin ACL Bin: " &amp;amp; strACL
Next
Wscript.Echo "Admin Email: " &amp;amp; objIIS.AdminEmail
Wscript.Echo "Admin Name: " &amp;amp; objIIS.AdminName
Wscript.Echo "Allow Clien tPosts: " &amp;amp; objIIS.AllowClientPosts
Wscript.Echo "Allow Control Msgs: " &amp;amp; objIIS.AllowControlMsgs
Wscript.Echo "Allow Feedback Posts: " &amp;amp; objIIS.AllowFeedPosts
Wscript.Echo "Anonymous Password Sync: " &amp;amp; _
    objIIS.AnonymousPasswordSync
Wscript.Echo "Anonymous User Name: " &amp;amp; objIIS.AnonymousUserName
Wscript.Echo "Anonymous User Password: " &amp;amp; objIIS.AnonymousUserPass
Wscript.Echo "Article Time Limit: " &amp;amp; objIIS.ArticleTimeLimit
Wscript.Echo "Authentication Anonymous: " &amp;amp; objIIS.AuthAnonymous
Wscript.Echo "Authentication Basic: " &amp;amp; objIIS.AuthBasic
Wscript.Echo "Authentication Flags: " &amp;amp; objIIS.AuthFlags
Wscript.Echo "Authentication MD5: " &amp;amp; objIIS.AuthMD5
Wscript.Echo "Authentication NTLM: " &amp;amp; objIIS.AuthNTLM
Wscript.Echo "Authentication Passport: " &amp;amp; objIIS.AuthPassport
Wscript.Echo "Az Enable: " &amp;amp; objIIS.AzEnable
Wscript.Echo "Az Scope Name: " &amp;amp; objIIS.AzScopeName
Wscript.Echo "Az Store Name: " &amp;amp; objIIS.AzStoreName
Wscript.Echo "Client Post Hard Limit: " &amp;amp; _
    objIIS.ClientPostHardLimit
Wscript.Echo "Client Post Soft Limit: " &amp;amp; _
    objIIS.ClientPostSoftLimit
Wscript.Echo "Connection Timeout: " &amp;amp; objIIS.ConnectionTimeout
Wscript.Echo "Content Indexed: " &amp;amp; objIIS.ContentIndexed
Wscript.Echo "Default Moderator Domain: " &amp;amp; _
    objIIS.DefaultModeratorDomain
Wscript.Echo "Disable New News: " &amp;amp; objIIS.DisableNewNews
Wscript.Echo "Don't Log: " &amp;amp; objIIS.DontLog
Wscript.Echo "Feed Post Hard Limit: " &amp;amp; objIIS.FeedPostHardLimit
Wscript.Echo "Feed Post Soft Limit: " &amp;amp; objIIS.FeedPostSoftLimit
Wscript.Echo "Feed Report Period: " &amp;amp; objIIS.FeedReportPeriod
Wscript.Echo "Group Var List File: " &amp;amp; objIIS.GroupVarListFile
Wscript.Echo "History Expiration: " &amp;amp; objIIS.HistoryExpiration
Wscript.Echo "Honor Client Msg Ids: " &amp;amp; objIIS.HonorClientMsgIds
Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
    objIIS.LogExtFileBytesRecv
Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; _
    objIIS.LogExtFileBytesSent
Wscript.Echo "Log Ext File Client IP: " &amp;amp; objIIS.LogExtFileClientIp
Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
    objIIS.LogExtFileComputerName
Wscript.Echo "Log Ext File Cookie: " &amp;amp; objIIS.LogExtFileCookie
Wscript.Echo "Log Ext File Date: " &amp;amp; objIIS.LogExtFileDate
Wscript.Echo "Log Ext File Flags: " &amp;amp; objIIS.LogExtFileFlags
Wscript.Echo "Log Ext File Host: " &amp;amp; objIIS.LogExtFileHost
Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
    objIIS.LogExtFileHttpStatus
Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
    objIIS.LogExtFileHttpSubStatus
Wscript.Echo "Log Ext File Method: " &amp;amp; objIIS.LogExtFileMethod
Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
    objIIS.LogExtFileProtocolVersion
Wscript.Echo "Log Ext File Referer: " &amp;amp; objIIS.LogExtFileReferer
Wscript.Echo "Log Ext File Server IP: " &amp;amp; objIIS.LogExtFileServerIp
Wscript.Echo "Log Ext File Server Port: " &amp;amp; _
    objIIS.LogExtFileServerPort
Wscript.Echo "Log Ext File Site Name: " &amp;amp; objIIS.LogExtFileSiteName
Wscript.Echo "Log Ext File Time: " &amp;amp; objIIS.LogExtFileTime
Wscript.Echo "Log Ext File Time Taken: " &amp;amp; objIIS.LogExtFileTimeTaken
Wscript.Echo "Log Ext File URI Query: " &amp;amp; objIIS.LogExtFileUriQuery
Wscript.Echo "Log Ext File URI Stem: " &amp;amp; objIIS.LogExtFileUriStem
Wscript.Echo "Log Ext File User Agent: " &amp;amp; objIIS.LogExtFileUserAgent
Wscript.Echo "Log Ext File User Name: " &amp;amp; objIIS.LogExtFileUserName
Wscript.Echo "Log Ext FileWin32 Status: " &amp;amp; _
    objIIS.LogExtFileWin32Status
Wscript.Echo "Log File Directory: " &amp;amp; objIIS.LogFileDirectory
Wscript.Echo "Log File Period: " &amp;amp; objIIS.LogFilePeriod
Wscript.Echo "Log File Truncate Size: " &amp;amp; objIIS.LogFileTruncateSize
Wscript.Echo "Log Odbc Data Source: " &amp;amp; objIIS.LogOdbcDataSource
Wscript.Echo "Log Odbc Password: " &amp;amp; objIIS.LogOdbcPassword
Wscript.Echo "Log Odbc Table Name: " &amp;amp; objIIS.LogOdbcTableName
Wscript.Echo "Log Odbc User Name: " &amp;amp; objIIS.LogOdbcUserName
Wscript.Echo "Log Plugin Clsid: " &amp;amp; objIIS.LogPluginClsid
Wscript.Echo "Log Type: " &amp;amp; objIIS.LogType
Wscript.Echo "Maximum Bandwidth: " &amp;amp; objIIS.MaxBandwidth
Wscript.Echo "Maximum Connections: " &amp;amp; objIIS.MaxConnections
Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
    objIIS.MaxEndpointConnections
Wscript.Echo "Maximum Search Results: " &amp;amp; objIIS.MaxSearchResults
Wscript.Echo "Name: " &amp;amp; objIIS.Name
Wscript.Echo "News Crawler Time: " &amp;amp; objIIS.NewsCrawlerTime
Wscript.Echo "NNTP Command Log Mask: " &amp;amp; objIIS.NntpCommandLogMask
Wscript.Echo "NT Authentication Providers: " &amp;amp; _
    objIIS.NTAuthenticationProviders
Wscript.Echo "Server AutoStart: " &amp;amp; objIIS.ServerAutoStart
Wscript.Echo "Server Comment: " &amp;amp; objIIS.ServerComment
Wscript.Echo "Server Listen Backlog: " &amp;amp; objIIS.ServerListenBacklog
Wscript.Echo "Server Listen Timeout: " &amp;amp; objIIS.ServerListenTimeout
Wscript.Echo "Shutdown Latency: " &amp;amp; objIIS.ShutdownLatency
Wscript.Echo "SMTP Server: " &amp;amp; objIIS.SmtpServer
</vb><vb name="List NNTP Service Setting Information" n="607">' List NNTP Service Setting Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpServiceSetting")
 
For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp; _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; _
        objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access SSL: " &amp;amp; objItem.AccessSSL
    Wscript.Echo "Access SSL 128: " &amp;amp; objItem.AccessSSL128
    Wscript.Echo "Access SSL Flags: " &amp;amp; objItem.AccessSSLFlags
    Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
        objItem.AccessSSLMapCert
    Wscript.Echo "Access SSL Negotiate Certifcate: " &amp;amp; _
        objItem.AccessSSLNegotiateCert
    Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
        objItem.AccessSSLRequireCert
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Admin Email: " &amp;amp; objItem.AdminEmail
    Wscript.Echo "Admin Name: " &amp;amp; objItem.AdminName
    Wscript.Echo "Allow Anonymous: " &amp;amp; objItem.AllowAnonymous
    Wscript.Echo "Allow Client Posts: " &amp;amp; objItem.AllowClientPosts
    Wscript.Echo "Allow Control Msgs: " &amp;amp; objItem.AllowControlMsgs
    Wscript.Echo "Allow Feed Posts: " &amp;amp; objItem.AllowFeedPosts
    Wscript.Echo "Anonymous Password Sync: " &amp;amp; _
        objItem.AnonymousPasswordSync
    Wscript.Echo "Anonymous User Name: " &amp;amp; objItem.AnonymousUserName
    Wscript.Echo "Anonymous User Password: " &amp;amp; objItem.AnonymousUserPass
    Wscript.Echo "Article Time Limit: " &amp;amp; objItem.ArticleTimeLimit
    Wscript.Echo "Authentication Anonymous: " &amp;amp; objItem.AuthAnonymous
    Wscript.Echo "Authentication Basic: " &amp;amp; objItem.AuthBasic
    Wscript.Echo "Authentication Flags: " &amp;amp; objItem.AuthFlags
    Wscript.Echo "Authentication MD5: " &amp;amp; objItem.AuthMD5
    Wscript.Echo "Authentication NTLM: " &amp;amp; objItem.AuthNTLM
    Wscript.Echo "Authentication Passport: " &amp;amp; objItem.AuthPassport
    Wscript.Echo "Az Enable: " &amp;amp; objItem.AzEnable
    Wscript.Echo "Az Scope Name: " &amp;amp; objItem.AzScopeName
    Wscript.Echo "Az Store Name: " &amp;amp; objItem.AzStoreName
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Client Post Hard Limit: " &amp;amp; _
        objItem.ClientPostHardLimit
    Wscript.Echo "Client Post Soft Limit: " &amp;amp; _
        objItem.ClientPostSoftLimit
    Wscript.Echo "Connection Timeout: " &amp;amp; objItem.ConnectionTimeout
    Wscript.Echo "Content Indexed: " &amp;amp; objItem.ContentIndexed
    Wscript.Echo "Default Moderator Domain: " &amp;amp; _
        objItem.DefaultModeratorDomain
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Directory Levels To Scan: " &amp;amp; _
        objItem.DirectoryLevelsToScan
    Wscript.Echo "Disable New News: " &amp;amp; objItem.DisableNewNews
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Feed Post Hard Limit: " &amp;amp; objItem.FeedPostHardLimit
    Wscript.Echo "Feed Post Soft Limit: " &amp;amp; objItem.FeedPostSoftLimit
    Wscript.Echo "Feed Report Period: " &amp;amp; objItem.FeedReportPeriod
    Wscript.Echo "Group Var List File: " &amp;amp; objItem.GroupVarListFile
    Wscript.Echo "History Expiration: " &amp;amp; objItem.HistoryExpiration
    Wscript.Echo "Honor Client Msg Ids: " &amp;amp; objItem.HonorClientMsgIds
    Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
        objItem.LogExtFileBytesRecv
    Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; _
        objItem.LogExtFileBytesSent
    Wscript.Echo "Log Ext File Client IP: " &amp;amp; objItem.LogExtFileClientIp
    Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
        objItem.LogExtFileComputerName
    Wscript.Echo "Log Ext File Cookie: " &amp;amp; objItem.LogExtFileCookie
    Wscript.Echo "Log Ext File Date: " &amp;amp; objItem.LogExtFileDate
    Wscript.Echo "Log Ext File Flags: " &amp;amp; objItem.LogExtFileFlags
    Wscript.Echo "Log Ext File Host: " &amp;amp; objItem.LogExtFileHost
    Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
        objItem.LogExtFileHttpStatus
    Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
        objItem.LogExtFileHttpSubStatus
    Wscript.Echo "Log Ext File Method: " &amp;amp; objItem.LogExtFileMethod
    Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
        objItem.LogExtFileProtocolVersion
    Wscript.Echo "Log Ext File Referer: " &amp;amp; objItem.LogExtFileReferer
    Wscript.Echo "Log Ext File Server IP: " &amp;amp; objItem.LogExtFileServerIp
    Wscript.Echo "Log Ext File Server Port: " &amp;amp; objItem.LogExtFileServerPort
    Wscript.Echo "Log Ext File Site Name: " &amp;amp; objItem.LogExtFileSiteName
    Wscript.Echo "Log Ext File Time: " &amp;amp; objItem.LogExtFileTime
    Wscript.Echo "Log Ext File Time Taken: " &amp;amp; objItem.LogExtFileTimeTaken
    Wscript.Echo "Log Ext File URI Query: " &amp;amp; objItem.LogExtFileUriQuery
    Wscript.Echo "Log Ext File URI Stem: " &amp;amp; objItem.LogExtFileUriStem
    Wscript.Echo "Log Ext File User Agent: " &amp;amp; objItem.LogExtFileUserAgent
    Wscript.Echo "Log Ext File User Name: " &amp;amp; objItem.LogExtFileUserName
    Wscript.Echo "Log Ext File Win32 Status: " &amp;amp; _
        objItem.LogExtFileWin32Status
    Wscript.Echo "Log File Directory: " &amp;amp; objItem.LogFileDirectory
    Wscript.Echo "Log File Period: " &amp;amp; objItem.LogFilePeriod
    Wscript.Echo "Log File Truncate Size: " &amp;amp; objItem.LogFileTruncateSize
    Wscript.Echo "Log Module List: " &amp;amp; objItem.LogModuleList
    Wscript.Echo "Log Odbc Data Source: " &amp;amp; objItem.LogOdbcDataSource
    Wscript.Echo "Log Odbc Password: " &amp;amp; objItem.LogOdbcPassword
    Wscript.Echo "Log Odbc Table Name: " &amp;amp; objItem.LogOdbcTableName
    Wscript.Echo "Log Odbc User Name: " &amp;amp; objItem.LogOdbcUserName
    Wscript.Echo "Log Plugin Clsid: " &amp;amp; objItem.LogPluginClsid
    Wscript.Echo "Log Type: " &amp;amp; objItem.LogType
    Wscript.Echo "Maximum Bandwidth: " &amp;amp; objItem.MaxBandwidth
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
    Wscript.Echo "Maximum EndpointConnections: " &amp;amp; _
        objItem.MaxEndpointConnections
    Wscript.Echo "Maximum SearchResults: " &amp;amp; objItem.MaxSearchResults
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "News Crawler Time: " &amp;amp; objItem.NewsCrawlerTime
    Wscript.Echo "NNTP Command Log Mask: " &amp;amp; objItem.NntpCommandLogMask
    Wscript.Echo "NT Authentication Providers: " &amp;amp; _
        objItem.NTAuthenticationProviders
    Wscript.Echo "Server AutoStart: " &amp;amp; objItem.ServerAutoStart
    Wscript.Echo "Server Comment: " &amp;amp; objItem.ServerComment
    Wscript.Echo "Server Listen Backlog: " &amp;amp; _
        objItem.ServerListenBacklog
    Wscript.Echo "Server Listen Timeout: " &amp;amp; _
        objItem.ServerListenTimeout
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Shutdown Latency: " &amp;amp; objItem.ShutdownLatency
    Wscript.Echo "SMTP Server: " &amp;amp; objItem.SmtpServer
Next
</vb><vb name="List NNTP Sessions" n="608">' List NNTP Sessions


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsNntpSessions")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List NNTP Virtual Directories" n="609">' List NNTP Virtual Directories


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsNntpVirtualDir")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List NNTP Virtual Directory Information" n="610">' List NNTP Virtual Directory Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpVirtualDirSetting")
 
For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp; _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; _
        objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access SSL: " &amp;amp; objItem.AccessSSL
    Wscript.Echo "Access SSL 128: " &amp;amp; objItem.AccessSSL128
    Wscript.Echo "Access SSL Flags: " &amp;amp; objItem.AccessSSLFlags
    Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
        objItem.AccessSSLMapCert
    Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
        objItem.AccessSSLNegotiateCert
    Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
        objItem.AccessSSLRequireCert
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Content Indexed: " &amp;amp; objItem.ContentIndexed
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Ex Mdb Guid: " &amp;amp; objItem.ExMdbGuid
    Wscript.Echo "Fs Property Path: " &amp;amp; objItem.FsPropertyPath
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Path: " &amp;amp; objItem.Path
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "UNC Password: " &amp;amp; objItem.UNCPassword
    Wscript.Echo "UNC User Name: " &amp;amp; objItem.UNCUserName
    Wscript.Echo "Vr Do Expire: " &amp;amp; objItem.VrDoExpire
    Wscript.Echo "Vr Driver Clsid: " &amp;amp; objItem.VrDriverClsid
    Wscript.Echo "Vr Driver Progid: " &amp;amp; objItem.VrDriverProgid
    Wscript.Echo "Vr Own Moderator: " &amp;amp; objItem.VrOwnModerator
    Wscript.Echo "Vr Use Account: " &amp;amp; objItem.VrUseAccount
    Wscript.Echo "Win32 Error: " &amp;amp; objItem.Win32Error
Next
</vb><vb name="List NNTP Virtual Directory Properties" n="611">' List NNTP Virtual Directory Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpVirtualDirSetting")

For Each objItem in colItems
    Wscript.Echo "Content Indexed: " &amp;amp; objItem.ContentIndexed
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Path: " &amp;amp; objItem.Path
Next
</vb><vb name="List NNTP Virtual Server Properties" n="612">' List NNTP Virtual Server Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpServiceSetting")

For Each objItem in colItems
    Wscript.Echo "Connection Timeout: " &amp;amp; objItem.ConnectionTimeout
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
    Wscript.Echo "NNTP UUCP Name: " &amp;amp; objItem.NntpUucpName
Next
</vb><vb name="List NNTP Virtual Server Setting Properties" n="613">' List NNTP Virtual Server Setting Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpServiceSetting") 

For Each objItem in colItems
    Wscript.Echo "Admin Email: " &amp;amp; objItem.AdminEmail
    Wscript.Echo "Allow Client Posts: " &amp;amp; objItem.AllowClientPosts
    Wscript.Echo "Allow Control Msgs: " &amp;amp; objItem.AllowControlMsgs
    Wscript.Echo "Allow Feed Posts: " &amp;amp; objItem.AllowFeedPosts
    Wscript.Echo "Client Post Hard Limit: " &amp;amp; _
        objItem.ClientPostHardLimit
    Wscript.Echo "Client Post Soft Limit: " &amp;amp; _
        objItem.ClientPostSoftLimit
    Wscript.Echo "Default Moderator Domain: " &amp;amp; _
        objItem.DefaultModeratorDomain
    Wscript.Echo "Feed Post Hard Limit: " &amp;amp; objItem.FeedPostHardLimit
    Wscript.Echo "Feed Post Soft Limit: " &amp;amp; objItem.FeedPostSoftLimit
    Wscript.Echo "SMTP Server: " &amp;amp; objItem.SmtpServer
Next
</vb><vb name="List the NNTP Server State" n="614">' List the NNTP Server State


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpServer")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "NNTP Service Version: " &amp;amp;  _
        objItem.NntpServiceVersion
    Wscript.Echo "Server State: " &amp;amp; objItem.ServerState
Next
</vb><vb name="List the NNTP Server Version" n="615">' List the NNTP Server Version


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsNntpInfo")

For Each objItem in colItems
    Wscript.Echo "Major IIS Version Number: " &amp;amp; objItem.MajorIIsVersionNumber
    Wscript.Echo "Minor IIS Version Number: " &amp;amp; objItem.MinorIIsVersionNumber
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="Modify an NNTP Server Setting Metabase Property" n="616">' Modify an NNTP Server Setting Metabase Property


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNNTPServerSetting")
 
For Each objItem in colItems
    objItem.AllowClientPosts = TRUE
    objItem.Put_
Next
</vb><vb name="Modify an NNTP Service Metabase Property Using ADSI" n="617">' Modify an NNTP Service Metabase Property Using ADSI


strComputer = "LocalHost"
 
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/NNTPSVC")
objIIS.MaxConnections = 5000
objIIS.SetInfo
</vb><vb name="Modify an NNTP Service Setting Metabase Property" n="618">' Modify an NNTP Service Setting Metabase Property


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNNTPServiceSetting")
 
For Each objItem in colItems
    objItem.ContentIndexed = TRUE
    objItem.Put_
Next
</vb><vb name="Modify an NNTP Virtual Directory Metabase Property" n="619">' Modify an NNTP Virtual Directory Metabase Property


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNNTPVirtualDirSetting")
 
For Each objItem in colItems
    objItem.VrDoExpire = TRUE
    objItem.Put_
Next
</vb><vb name="Modify NNTP Authentication Properties" n="620">' Modify NNTP Authentication Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpServiceSetting") 

For Each objItem in colItems
    objItem.AccessSSLMapCert = False
    objItem.AccessSSLNegotiateCert = False
    objItem.AccessSSLRequireCert = False
    objItem.AuthAnonymous = True
    objItem.AuthBasic = True
    objItem.AuthNTLM = False
    objItem.Put_
Next
</vb><vb name="Modify NNTP Virtual Directory Properties" n="621">' Modify NNTP Virtual Directory Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpVirtualDirSetting")

For Each objItem in colItems
    objItem.ContentIndexed = True
    objItem.DontLog = False
    objItem.Path = "c:\inetpub\nntpfile\root\accounting"
    objItem.Put_
Next
</vb><vb name="Modify NNTP Virtual Server Setting Properties" n="622">' Modify NNTP Virtual Server Setting Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsNntpServiceSetting") 

For Each objItem in colItems
    objItem.AdminEmail = "admin@fabrikam.com"
    objItem.AllowClientPosts = True
    objItem.AllowControlMsgs = True
    objItem.AllowFeedPosts = True
    objItem.ClientPostHardLimit = 1000000
    objItem.ClientPostSoftLimit = 250000
    objItem.DefaultModeratorDomain = "fabrikam.com"
    objItem.FeedPostHardLimit = 1000000
    objItem.FeedPostSoftLimit = 250000
    objItem.SmtpServer = "mail.fabrikam.com"
    objItem.Put_
Next
</vb></dd>
			<dd name="POP3 Server" code="pop3" desc="Sample scripts for managing the POP3 mail server included with Internet Information Server 6.0."><vb name="List POP3 Server Information Using ADSI" n="623">' List POP3 Server Information Using ADSI


strComputer = "LocalHost"
 
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/POP3SVC/1")
 
Wscript.Echo "Access Execute: " &amp;amp; objIIS.AccessExecute
Wscript.Echo "Access Flags: " &amp;amp; objIIS.AccessFlags
Wscript.Echo "Access No Physical Directory: " &amp;amp; _
    objIIS.AccessNoPhysicalDir
Wscript.Echo "Access No Remote Execute: " &amp;amp; _
    objIIS.AccessNoRemoteExecute
Wscript.Echo "Access No Remote Read: " &amp;amp; objIIS.AccessNoRemoteRead
Wscript.Echo "Access No Remote Script: " &amp;amp; _
    objIIS.AccessNoRemoteScript
Wscript.Echo "Access No Remote Write: " &amp;amp; objIIS.AccessNoRemoteWrite
Wscript.Echo "Access Read: " &amp;amp; objIIS.AccessRead
Wscript.Echo "Access Script: " &amp;amp; objIIS.AccessScript
Wscript.Echo "Access Source: " &amp;amp; objIIS.AccessSource
Wscript.Echo "Access SSL: " &amp;amp; objIIS.AccessSSL
Wscript.Echo "Access SSL 128: " &amp;amp; objIIS.AccessSSL128
Wscript.Echo "Access SSL Flags: " &amp;amp; objIIS.AccessSSLFlags
Wscript.Echo "Access SSL Map Certificate: " &amp;amp; objIIS.AccessSSLMapCert
Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
    objIIS.AccessSSLNegotiateCert
Wscript.Echo "Access SSL Require Certifcate: " &amp;amp; _
    objIIS.AccessSSLRequireCert
Wscript.Echo "Access Write: " &amp;amp; objIIS.AccessWrite
For Each strACL in objIIS.AdminACLBin
    Wscript.Echo "Admin ACL Bin: " &amp;amp; strACL
Next
Wscript.Echo "Authentication Anonymous: " &amp;amp; objIIS.AuthAnonymous
Wscript.Echo "Authentication Basic: " &amp;amp; objIIS.AuthBasic
Wscript.Echo "Authentication Flags: " &amp;amp; objIIS.AuthFlags
Wscript.Echo "Authentication MD5: " &amp;amp; objIIS.AuthMD5
Wscript.Echo "Authentication NTLM: " &amp;amp; objIIS.AuthNTLM
Wscript.Echo "Authentication Passport: " &amp;amp; objIIS.AuthPassport
Wscript.Echo "Az Enable: " &amp;amp; objIIS.AzEnable
Wscript.Echo "Az Scope Name: " &amp;amp; objIIS.AzScopeName
Wscript.Echo "Az Store Name: " &amp;amp; objIIS.AzStoreName
Wscript.Echo "ConnectionT imeout: " &amp;amp; objIIS.ConnectionTimeout
Wscript.Echo "Default Logon Domain: " &amp;amp; objIIS.DefaultLogonDomain
Wscript.Echo "Don't Log: " &amp;amp; objIIS.DontLog
Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
    objIIS.LogExtFileBytesRecv
Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; objIIS.LogExtFileBytesSent
Wscript.Echo "Log Ext File Client IP: " &amp;amp; objIIS.LogExtFileClientIp
Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
    objIIS.LogExtFileComputerName
Wscript.Echo "Log Ext File Cookie: " &amp;amp; objIIS.LogExtFileCookie
Wscript.Echo "Log Ext File Date: " &amp;amp; objIIS.LogExtFileDate
Wscript.Echo "Log Ext File Flags: " &amp;amp; objIIS.LogExtFileFlags
Wscript.Echo "Log Ext File Host: " &amp;amp; objIIS.LogExtFileHost
Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
    objIIS.LogExtFileHttpStatus
Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
    objIIS.LogExtFileHttpSubStatus
Wscript.Echo "Log Ext File Method: " &amp;amp; objIIS.LogExtFileMethod
Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
    objIIS.LogExtFileProtocolVersion
Wscript.Echo "Log Ext File Referer: " &amp;amp; objIIS.LogExtFileReferer
Wscript.Echo "Log Ext File Server IP: " &amp;amp; objIIS.LogExtFileServerIp
Wscript.Echo "Log Ext File Server Port: " &amp;amp; objIIS.LogExtFileServerPort
Wscript.Echo "Log Ext File Site Name: " &amp;amp; objIIS.LogExtFileSiteName
Wscript.Echo "Log Ext File Time: " &amp;amp; objIIS.LogExtFileTime
Wscript.Echo "Log Ext File Time Taken: " &amp;amp; objIIS.LogExtFileTimeTaken
Wscript.Echo "Log Ext File URI Query: " &amp;amp; objIIS.LogExtFileUriQuery
Wscript.Echo "Log Ext File URI Stem: " &amp;amp; objIIS.LogExtFileUriStem
Wscript.Echo "Log Ext File User Agent: " &amp;amp; objIIS.LogExtFileUserAgent
Wscript.Echo "Log Ext File User Name: " &amp;amp; objIIS.LogExtFileUserName
Wscript.Echo "Log Ext File Win32 Status: " &amp;amp; _
    objIIS.LogExtFileWin32Status
Wscript.Echo "Log File Directory: " &amp;amp; objIIS.LogFileDirectory
Wscript.Echo "Log File Period: " &amp;amp; objIIS.LogFilePeriod
Wscript.Echo "Log File Truncate Size: " &amp;amp; objIIS.LogFileTruncateSize
Wscript.Echo "Log Odbc Data Source: " &amp;amp; objIIS.LogOdbcDataSource
Wscript.Echo "Log Odbc Password: " &amp;amp; objIIS.LogOdbcPassword
Wscript.Echo "Log Odbc Table Name: " &amp;amp; objIIS.LogOdbcTableName
Wscript.Echo "Log Odbc User Name: " &amp;amp; objIIS.LogOdbcUserName
Wscript.Echo "Log Plugin Clsid: " &amp;amp; objIIS.LogPluginClsid
Wscript.Echo "Log Type: " &amp;amp; objIIS.LogType
Wscript.Echo "Maximum Bandwidth: " &amp;amp; objIIS.MaxBandwidth
Wscript.Echo "Maximum Connections: " &amp;amp; objIIS.MaxConnections
Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
    objIIS.MaxEndpointConnections
Wscript.Echo "Name: " &amp;amp; objIIS.Name
Wscript.Echo "NT Authentication Providers: " &amp;amp; _
    objIIS.NTAuthenticationProviders
Wscript.Echo "Pop3 Clear Text Provider: " &amp;amp; _
    objIIS.Pop3ClearTextProvider
Wscript.Echo "Pop3 Default Domain: " &amp;amp; objIIS.Pop3DefaultDomain
Wscript.Echo "Pop3 Expire Delay: " &amp;amp; objIIS.Pop3ExpireDelay
Wscript.Echo "Pop3 Expire Mail: " &amp;amp; objIIS.Pop3ExpireMail
Wscript.Echo "Pop3 Expire Start: " &amp;amp; objIIS.Pop3ExpireStart
Wscript.Echo "Pop3 Mail Expiration Time: " &amp;amp; _
    objIIS.Pop3MailExpirationTime
Wscript.Echo "Pop3 Routing Dll: " &amp;amp; objIIS.Pop3RoutingDll
For Each strBinding in objIIS.SecureBindings
    Wscript.Echo "Secure Bindings: " &amp;amp; strBinding
Next
Wscript.Echo "Server AutoStart: " &amp;amp; objIIS.ServerAutoStart
For Each strBinding in objIIS.ServerBindings
    Wscript.Echo "Server Bindings: " &amp;amp; strBinding
Next
Wscript.Echo "Server Comment: " &amp;amp; objIIS.ServerComment
Wscript.Echo "Server Listen Backlog: " &amp;amp; _
    objIIS.ServerListenBacklog
Wscript.Echo "Server Listen Timeout: " &amp;amp; _
    objIIS.ServerListenTimeout
Wscript.Echo "Win32 Error: " &amp;amp; objIIS.Win32Error
</vb><vb name="List POP3 Server Information Using WMI" n="624">' List POP3 Server Information Using WMI


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsPop3ServerSetting")
 
For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp; _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; _
        objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; _
        objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access SSL: " &amp;amp; objItem.AccessSSL
    Wscript.Echo "Access SSL 128: " &amp;amp; objItem.AccessSSL128
    Wscript.Echo "Access SSL Flags: " &amp;amp; objItem.AccessSSLFlags
    Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
        objItem.AccessSSLMapCert
    Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
        objItem.AccessSSLNegotiateCert
    Wscript.Echo "Access SSL Require Certifcate: " &amp;amp; _
        objItem.AccessSSLRequireCert
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Authentication Anonymous: " &amp;amp; _
        objItem.AuthAnonymous
    Wscript.Echo "Authentication Basic: " &amp;amp; objItem.AuthBasic
    Wscript.Echo "Authentication Flags: " &amp;amp; objItem.AuthFlags
    Wscript.Echo "Authentication MD5: " &amp;amp; objItem.AuthMD5
    Wscript.Echo "Authentication NTLM: " &amp;amp; objItem.AuthNTLM
    Wscript.Echo "Authentication Passport: " &amp;amp; _
        objItem.AuthPassport
    Wscript.Echo "Az Enable: " &amp;amp; objItem.AzEnable
    Wscript.Echo "Az Scope Name: " &amp;amp; objItem.AzScopeName
    Wscript.Echo "Az Store Name: " &amp;amp; objItem.AzStoreName
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "ConnectionT imeout: " &amp;amp; _
        objItem.ConnectionTimeout
    Wscript.Echo "Default Logon Domain: " &amp;amp; _
        objItem.DefaultLogonDomain
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
        objItem.LogExtFileBytesRecv
    Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; _
        objItem.LogExtFileBytesSent
    Wscript.Echo "Log Ext File Client IP: " &amp;amp; _
        objItem.LogExtFileClientIp
    Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
        objItem.LogExtFileComputerName
    Wscript.Echo "Log Ext File Cookie: " &amp;amp; _
        objItem.LogExtFileCookie
    Wscript.Echo "Log Ext File Date: " &amp;amp; objItem.LogExtFileDate
    Wscript.Echo "Log Ext File Flags: " &amp;amp; objItem.LogExtFileFlags
    Wscript.Echo "Log Ext File Host: " &amp;amp; objItem.LogExtFileHost
    Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
        objItem.LogExtFileHttpStatus
    Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
        objItem.LogExtFileHttpSubStatus
    Wscript.Echo "Log Ext File Method: " &amp;amp; _
        objItem.LogExtFileMethod
    Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
        objItem.LogExtFileProtocolVersion
    Wscript.Echo "Log Ext File Referer: " &amp;amp; _
        objItem.LogExtFileReferer
    Wscript.Echo "Log Ext File Server IP: " &amp;amp; _
        objItem.LogExtFileServerIp
    Wscript.Echo "Log Ext File Server Port: " &amp;amp; _
        objItem.LogExtFileServerPort
    Wscript.Echo "Log Ext File Site Name: " &amp;amp; _
        objItem.LogExtFileSiteName
    Wscript.Echo "Log Ext File Time: " &amp;amp; objItem.LogExtFileTime
    Wscript.Echo "Log Ext File Time Taken: " &amp;amp; _
        objItem.LogExtFileTimeTaken
    Wscript.Echo "Log Ext File URI Query: " &amp;amp; _
        objItem.LogExtFileUriQuery
    Wscript.Echo "Log Ext File URI Stem: " &amp;amp; _
        objItem.LogExtFileUriStem
    Wscript.Echo "Log Ext File User Agent: " &amp;amp; _
        objItem.LogExtFileUserAgent
    Wscript.Echo "Log Ext File User Name: " &amp;amp; _
        objItem.LogExtFileUserName
    Wscript.Echo "Log Ext File Win32 Status: " &amp;amp; _
        objItem.LogExtFileWin32Status
    Wscript.Echo "Log File Directory: " &amp;amp; objItem.LogFileDirectory
    Wscript.Echo "Log File Period: " &amp;amp; objItem.LogFilePeriod
    Wscript.Echo "Log File Truncate Size: " &amp;amp; _
        objItem.LogFileTruncateSize
    Wscript.Echo "Log Odbc Data Source: " &amp;amp; _
        objItem.LogOdbcDataSource
    Wscript.Echo "Log Odbc Password: " &amp;amp; objItem.LogOdbcPassword
    Wscript.Echo "Log Odbc Table Name: " &amp;amp; objItem.LogOdbcTableName
    Wscript.Echo "Log Odbc User Name: " &amp;amp; objItem.LogOdbcUserName
    Wscript.Echo "Log Plugin Clsid: " &amp;amp; objItem.LogPluginClsid
    Wscript.Echo "Log Type: " &amp;amp; objItem.LogType
    Wscript.Echo "Maximum Bandwidth: " &amp;amp; objItem.MaxBandwidth
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
    Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
        objItem.MaxEndpointConnections
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "NT Authentication Providers: " &amp;amp; _
        objItem.NTAuthenticationProviders
    Wscript.Echo "Pop3 Clear Text Provider: " &amp;amp; o_
        bjItem.Pop3ClearTextProvider
    Wscript.Echo "Pop3 Default Domain: " &amp;amp; objItem.Pop3DefaultDomain
    Wscript.Echo "Pop3 Expire Delay: " &amp;amp; objItem.Pop3ExpireDelay
    Wscript.Echo "Pop3 Expire Mail: " &amp;amp; objItem.Pop3ExpireMail
    Wscript.Echo "Pop3 Expire Start: " &amp;amp; objItem.Pop3ExpireStart
    Wscript.Echo "Pop3 Mail Expiration Time: " &amp;amp; _
        objItem.Pop3MailExpirationTime
    Wscript.Echo "Pop3 Routing Dll: " &amp;amp; objItem.Pop3RoutingDll
    Wscript.Echo "Server AutoStart: " &amp;amp; objItem.ServerAutoStart
    Wscript.Echo "Server Comment: " &amp;amp; objItem.ServerComment
    Wscript.Echo "Server Listen Backlog: " &amp;amp; _
        objItem.ServerListenBacklog
    Wscript.Echo "Server Listen Timeout: " &amp;amp; _
        objItem.ServerListenTimeout
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Win32 Error: " &amp;amp; objItem.Win32Error
Next
</vb><vb name="List POP3 Server State" n="625">' List POP3 Server State


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsPop3Server")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    For Each strSource in objItem.Pop3RoutingSources
        Wscript.Echo "Pop3 Routing Sources: " &amp;amp; strSource
    Next
    Wscript.Echo "Pop3 Service Version: " &amp;amp; _
        objItem.Pop3ServiceVersion
    Wscript.Echo "Server State: " &amp;amp; objItem.ServerState
Next
</vb><vb name="List POP3 Service Configuration Information" n="626">' List POP3 Service Configuration Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsPop3Service")

For Each objItem in colItems
    Wscript.Echo "Accept Pause: " &amp;amp; objItem.AcceptPause
    Wscript.Echo "Accept Stop: " &amp;amp; objItem.AcceptStop
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "CheckPoint: " &amp;amp; objItem.CheckPoint
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Desktop Interact: " &amp;amp; _
        objItem.DesktopInteract
    Wscript.Echo "Display Name: " &amp;amp; objItem.DisplayName
    Wscript.Echo "Error Control: " &amp;amp; objItem.ErrorControl
    Wscript.Echo "Exit Code: " &amp;amp; objItem.ExitCode
    Wscript.Echo "Installation Date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Path Name: " &amp;amp; objItem.PathName
    For Each strSource in objItem.Pop3RoutingSources
        Wscript.Echo "Pop3 Routing Sources: " &amp;amp; strSource
    Next
    Wscript.Echo "Pop3 Service Version: " &amp;amp; _
        objItem.Pop3ServiceVersion
    Wscript.Echo "ProcessId: " &amp;amp; objItem.ProcessId
    Wscript.Echo "Service Specific Exit Code: " &amp;amp; _
        objItem.ServiceSpecificExitCode
    Wscript.Echo "Service Type: " &amp;amp; objItem.ServiceType
    Wscript.Echo "Started: " &amp;amp; objItem.Started
    Wscript.Echo "Start Mode: " &amp;amp; objItem.StartMode
    Wscript.Echo "Start Name: " &amp;amp; objItem.StartName
    Wscript.Echo "State: " &amp;amp; objItem.State
    Wscript.Echo "Status: " &amp;amp; objItem.Status
    Wscript.Echo "Tag Id: " &amp;amp; objItem.TagId
    Wscript.Echo "Wait Hint: " &amp;amp; objItem.WaitHint
Next
</vb><vb name="List POP3 Service Setting Information Using ADSI" n="627">' List POP3 Service Setting Information Using ADSI


strComputer = "LocalHost"
 
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/POP3SVC")
 
Wscript.Echo "Access Execute: " &amp;amp; objIIS.AccessExecute
Wscript.Echo "Access Flags: " &amp;amp; objIIS.AccessFlags
Wscript.Echo "Access No Physical Directory: " &amp;amp; _
    objIIS.AccessNoPhysicalDir
Wscript.Echo "Access No Remote Execute: " &amp;amp; _
    objIIS.AccessNoRemoteExecute
Wscript.Echo "Access No Remote Read: " &amp;amp; objIIS.AccessNoRemoteRead
Wscript.Echo "Access No Remote Script: " &amp;amp; objIIS.AccessNoRemoteScript
Wscript.Echo "Access No Remote Write: " &amp;amp; objIIS.AccessNoRemoteWrite
Wscript.Echo "Access Read: " &amp;amp; objIIS.AccessRead
Wscript.Echo "Access Script: " &amp;amp; objIIS.AccessScript
Wscript.Echo "Access Source: " &amp;amp; objIIS.AccessSource
Wscript.Echo "Access SSL: " &amp;amp; objIIS.AccessSSL
Wscript.Echo "Access SSL 128: " &amp;amp; objIIS.AccessSSL128
Wscript.Echo "Access SSL Flags: " &amp;amp; objIIS.AccessSSLFlags
Wscript.Echo "Access SS LMapCert: " &amp;amp; objIIS.AccessSSLMapCert
Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
    objIIS.AccessSSLNegotiateCert
Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
    objIIS.AccessSSLRequireCert
Wscript.Echo "Access Write: " &amp;amp; objIIS.AccessWrite
Wscript.Echo "Admin ACL Bin: " &amp;amp; objIIS.AdminACLBin
Wscript.Echo "Authentication Anonymous: " &amp;amp; objIIS.AuthAnonymous
Wscript.Echo "Authentication Basic: " &amp;amp; objIIS.AuthBasic
Wscript.Echo "Authentication Flags: " &amp;amp; objIIS.AuthFlags
Wscript.Echo "Authentication MD5: " &amp;amp; objIIS.AuthMD5
Wscript.Echo "Authentication NTLM: " &amp;amp; objIIS.AuthNTLM
Wscript.Echo "Authentication Passport: " &amp;amp; objIIS.AuthPassport
Wscript.Echo "Az Enable: " &amp;amp; objIIS.AzEnable
Wscript.Echo "Az Scope Name: " &amp;amp; objIIS.AzScopeName
Wscript.Echo "Az Store Name: " &amp;amp; objIIS.AzStoreName
Wscript.Echo "Caption: " &amp;amp; objIIS.Caption
Wscript.Echo "Connection Timeout: " &amp;amp; objIIS.ConnectionTimeout
Wscript.Echo "Default Logon Domain: " &amp;amp; objIIS.DefaultLogonDomain
Wscript.Echo "Description: " &amp;amp; objIIS.Description
Wscript.Echo "Don't Log: " &amp;amp; objIIS.DontLog
Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
    objIIS.LogExtFileBytesRecv
Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; _
    objIIS.LogExtFileBytesSent
Wscript.Echo "Log Ext File Client IP: " &amp;amp; objIIS.LogExtFileClientIp
Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
    objIIS.LogExtFileComputerName
Wscript.Echo "Log Ext File Cookie: " &amp;amp; objIIS.LogExtFileCookie
Wscript.Echo "Log Ext File Date: " &amp;amp; objIIS.LogExtFileDate
Wscript.Echo "Log Ext File Flags: " &amp;amp; objIIS.LogExtFileFlags
Wscript.Echo "Log Ext File Host: " &amp;amp; objIIS.LogExtFileHost
Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
    objIIS.LogExtFileHttpStatus
Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
    objIIS.LogExtFileHttpSubStatus
Wscript.Echo "Log Ext File Method: " &amp;amp; objIIS.LogExtFileMethod
Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
    objIIS.LogExtFileProtocolVersion
Wscript.Echo "Log Ext File Referer: " &amp;amp; objIIS.LogExtFileReferer
Wscript.Echo "Log Ext File Server IP: " &amp;amp; objIIS.LogExtFileServerIp
Wscript.Echo "Log Ext File Server Port: " &amp;amp; _
    objIIS.LogExtFileServerPort
Wscript.Echo "Log Ext File Site Name: " &amp;amp; objIIS.LogExtFileSiteName
Wscript.Echo "Log Ext File Time: " &amp;amp; objIIS.LogExtFileTime
Wscript.Echo "Log Ext File Time Taken: " &amp;amp; _
    objIIS.LogExtFileTimeTaken
Wscript.Echo "Log Ext File URI Query: " &amp;amp; objIIS.LogExtFileUriQuery
Wscript.Echo "Log Ext File URI Stem: " &amp;amp; objIIS.LogExtFileUriStem
Wscript.Echo "Log Ext File User Agent: " &amp;amp; _
    objIIS.LogExtFileUserAgent
Wscript.Echo "Log Ext File User Name: " &amp;amp; objIIS.LogExtFileUserName
Wscript.Echo "Log Ext File Win32 Status: " &amp;amp; _
    objIIS.LogExtFileWin32Status
Wscript.Echo "Log File Directory: " &amp;amp; objIIS.LogFileDirectory
Wscript.Echo "Log File Period: " &amp;amp; objIIS.LogFilePeriod
Wscript.Echo "Log File Truncate Size: " &amp;amp; _
    objIIS.LogFileTruncateSize
Wscript.Echo "Log Module List: " &amp;amp; objIIS.LogModuleList
Wscript.Echo "Log Odbc Data Source: " &amp;amp; objIIS.LogOdbcDataSource
Wscript.Echo "Log Odbc Password: " &amp;amp; objIIS.LogOdbcPassword
Wscript.Echo "Log Odbc Table Name: " &amp;amp; objIIS.LogOdbcTableName
Wscript.Echo "Log Odbc User Name: " &amp;amp; objIIS.LogOdbcUserName
Wscript.Echo "Log Plugin Clsid: " &amp;amp; objIIS.LogPluginClsid
Wscript.Echo "Log Type: " &amp;amp; objIIS.LogType
Wscript.Echo "Maximum Bandwidth: " &amp;amp; objIIS.MaxBandwidth
Wscript.Echo "Maximum Connections: " &amp;amp; objIIS.MaxConnections
Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
    objIIS.MaxEndpointConnections
Wscript.Echo "Name: " &amp;amp; objIIS.Name
Wscript.Echo "NT Authentication Providers: " &amp;amp; _
    objIIS.NTAuthenticationProviders
Wscript.Echo "Pop3 Clear Text Provider: " &amp;amp; _
    objIIS.Pop3ClearTextProvider
Wscript.Echo "Pop3 Default Domain: " &amp;amp; objIIS.Pop3DefaultDomain
Wscript.Echo "Pop3 Expire Delay: " &amp;amp; objIIS.Pop3ExpireDelay
Wscript.Echo "Pop3 Expire Mail: " &amp;amp; objIIS.Pop3ExpireMail
Wscript.Echo "Pop3 Expire Start: " &amp;amp; objIIS.Pop3ExpireStart
Wscript.Echo "Pop3 Mail Expiration Time: " &amp;amp; _
    objIIS.Pop3MailExpirationTime
Wscript.Echo "Pop3 Routing Dll: " &amp;amp; objIIS.Pop3RoutingDll
Wscript.Echo "Server AutoStart: " &amp;amp; objIIS.ServerAutoStart
Wscript.Echo "Server Comment: " &amp;amp; objIIS.ServerComment
Wscript.Echo "Server Listen Backlog: " &amp;amp; _
    objIIS.ServerListenBacklog
Wscript.Echo "Server Listen Timeout: " &amp;amp; _
    objIIS.ServerListenTimeout
Wscript.Echo "Setting ID: " &amp;amp; objIIS.SettingID
</vb><vb name="List POP3 Service Setting Information Using WMI" n="628">' List POP3 Service Setting Information Using WMI


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsPop3ServiceSetting")

For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp; _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; _
        objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access SSL: " &amp;amp; objItem.AccessSSL
    Wscript.Echo "Access SSL 128: " &amp;amp; objItem.AccessSSL128
    Wscript.Echo "Access SSL Flags: " &amp;amp; objItem.AccessSSLFlags
    Wscript.Echo "Access SS LMapCert: " &amp;amp; objItem.AccessSSLMapCert
    Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
        objItem.AccessSSLNegotiateCert
    Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
        objItem.AccessSSLRequireCert
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Authentication Anonymous: " &amp;amp; objItem.AuthAnonymous
    Wscript.Echo "Authentication Basic: " &amp;amp; objItem.AuthBasic
    Wscript.Echo "Authentication Flags: " &amp;amp; objItem.AuthFlags
    Wscript.Echo "Authentication MD5: " &amp;amp; objItem.AuthMD5
    Wscript.Echo "Authentication NTLM: " &amp;amp; objItem.AuthNTLM
    Wscript.Echo "Authentication Passport: " &amp;amp; objItem.AuthPassport
    Wscript.Echo "Az Enable: " &amp;amp; objItem.AzEnable
    Wscript.Echo "Az Scope Name: " &amp;amp; objItem.AzScopeName
    Wscript.Echo "Az Store Name: " &amp;amp; objItem.AzStoreName
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Connection Timeout: " &amp;amp; objItem.ConnectionTimeout
    Wscript.Echo "Default Logon Domain: " &amp;amp; _
        objItem.DefaultLogonDomain
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
        objItem.LogExtFileBytesRecv
    Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; _
        objItem.LogExtFileBytesSent
    Wscript.Echo "Log Ext File Client IP: " &amp;amp; _
        objItem.LogExtFileClientIp
    Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
        objItem.LogExtFileComputerName
    Wscript.Echo "Log Ext File Cookie: " &amp;amp; objItem.LogExtFileCookie
    Wscript.Echo "Log Ext File Date: " &amp;amp; objItem.LogExtFileDate
    Wscript.Echo "Log Ext File Flags: " &amp;amp; objItem.LogExtFileFlags
    Wscript.Echo "Log Ext File Host: " &amp;amp; objItem.LogExtFileHost
    Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
        objItem.LogExtFileHttpStatus
    Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
        objItem.LogExtFileHttpSubStatus
    Wscript.Echo "Log Ext File Method: " &amp;amp; objItem.LogExtFileMethod
    Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
        objItem.LogExtFileProtocolVersion
    Wscript.Echo "Log Ext File Referer: " &amp;amp; objItem.LogExtFileReferer
    Wscript.Echo "Log Ext File Server IP: " &amp;amp; _
        objItem.LogExtFileServerIp
    Wscript.Echo "Log Ext File Server Port: " &amp;amp; _
        objItem.LogExtFileServerPort
    Wscript.Echo "Log Ext File Site Name: " &amp;amp; _
        objItem.LogExtFileSiteName
    Wscript.Echo "Log Ext File Time: " &amp;amp; objItem.LogExtFileTime
    Wscript.Echo "Log Ext File Time Taken: " &amp;amp; _
        objItem.LogExtFileTimeTaken
    Wscript.Echo "Log Ext File URI Query: " &amp;amp; _
        objItem.LogExtFileUriQuery
    Wscript.Echo "Log Ext File URI Stem: " &amp;amp; objItem.LogExtFileUriStem
    Wscript.Echo "Log Ext File User Agent: " &amp;amp; _
        objItem.LogExtFileUserAgent
    Wscript.Echo "Log Ext File User Name: " &amp;amp; _
        objItem.LogExtFileUserName
    Wscript.Echo "Log Ext File Win32 Status: " &amp;amp; _
        objItem.LogExtFileWin32Status
    Wscript.Echo "Log File Directory: " &amp;amp; objItem.LogFileDirectory
    Wscript.Echo "Log File Period: " &amp;amp; objItem.LogFilePeriod
    Wscript.Echo "Log File Truncate Size: " &amp;amp; _
        objItem.LogFileTruncateSize
    Wscript.Echo "Log Module List: " &amp;amp; objItem.LogModuleList
    Wscript.Echo "Log Odbc Data Source: " &amp;amp; objItem.LogOdbcDataSource
    Wscript.Echo "Log Odbc Password: " &amp;amp; objItem.LogOdbcPassword
    Wscript.Echo "Log Odbc Table Name: " &amp;amp; objItem.LogOdbcTableName
    Wscript.Echo "Log Odbc User Name: " &amp;amp; objItem.LogOdbcUserName
    Wscript.Echo "Log Plugin Clsid: " &amp;amp; objItem.LogPluginClsid
    Wscript.Echo "Log Type: " &amp;amp; objItem.LogType
    Wscript.Echo "Maximum Bandwidth: " &amp;amp; objItem.MaxBandwidth
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
    Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
        objItem.MaxEndpointConnections
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "NT Authentication Providers: " &amp;amp; o_
        bjItem.NTAuthenticationProviders
    Wscript.Echo "Pop3 Clear Text Provider: " &amp;amp; _
        objItem.Pop3ClearTextProvider
    Wscript.Echo "Pop3 Default Domain: " &amp;amp; objItem.Pop3DefaultDomain
    Wscript.Echo "Pop3 Expire Delay: " &amp;amp; objItem.Pop3ExpireDelay
    Wscript.Echo "Pop3 Expire Mail: " &amp;amp; objItem.Pop3ExpireMail
    Wscript.Echo "Pop3 Expire Start: " &amp;amp; objItem.Pop3ExpireStart
    Wscript.Echo "Pop3 Mail Expiration Time: " &amp;amp; _
        objItem.Pop3MailExpirationTime
    Wscript.Echo "Pop3 Routing Dll: " &amp;amp; objItem.Pop3RoutingDll
    Wscript.Echo "Server AutoStart: " &amp;amp; objItem.ServerAutoStart
    Wscript.Echo "Server Comment: " &amp;amp; objItem.ServerComment
    Wscript.Echo "Server Listen Backlog: " &amp;amp; _
        objItem.ServerListenBacklog
    Wscript.Echo "Server Listen Timeout: " &amp;amp; _
        objItem.ServerListenTimeout
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
Next
</vb><vb name="List POP3 Sesssions" n="629">' List POP3 Sesssions


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsPop3Sessions")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="Modify a POP3 Server Setting Metabase Property" n="630">' Modify a POP3 Server Setting Metabase Property


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsPop3ServerSetting")
 
For Each objItem in colItems
    objItem.AuthPassport = TRUE
    objItem.Put_
Next
</vb><vb name="Modify a POP3 Service Metabase Setting" n="631">' Modify a POP3 Service Metabase Setting


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsPop3ServiceSetting")
 
For Each objItem in colItems
    objItem.AuthAnonymous = FALSE
    objItem.Put_
Next
</vb><vb name="Modify a POP3 Virtual Directory Metabase Property" n="632">' Modify a POP3 Virtual Directory Metabase Property


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsPop3VirtualDirSetting")
 
For Each objItem in colItems
    objItem.AccessSSLRequireCert = TRUE
    objItem.Put_
Next
</vb></dd>
			<dd name="SMTP Server" code="smtp" desc="Sample scripts for managing the SMTP mail server included with Internet Information Server 6.0."><vb name="List IIsSMTPSessionsSetting Instances" n="633">' List IIsSMTPSessionsSetting Instances


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpSessionsSetting")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List SMTP Advanced Delivery Options" n="634">' List SMTP Advanced Delivery Options


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpServiceSetting") 

For Each objItem in colItems
    Wscript.Echo "Enable Reverse DNS Lookup: " &amp;amp; _
        objItem.EnableReverseDnsLookup
    Wscript.Echo "Fully Qualified Domain Name: " &amp;amp; _
        objItem.FullyQualifiedDomainName
    Wscript.Echo "Hop Count: " &amp;amp; objItem.HopCount
    Wscript.Echo "Masquerade Domain: " &amp;amp; objItem.MasqueradeDomain
    Wscript.Echo "Smart Host: " &amp;amp; objItem.SmartHost
    Wscript.Echo "Smart Host Type: " &amp;amp; objItem.SmartHostType
Next
</vb><vb name="List SMTP Authentication Properties" n="635">' List SMTP Authentication Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpServiceSetting")

For Each objItem in colItems
    Wscript.Echo "Authentication Anonymous: " &amp;amp; objItem.AuthAnonymous
    Wscript.Echo "Authentication Basic: " &amp;amp; objItem.AuthBasic
    Wscript.Echo "Authentication NTLM: " &amp;amp; objItem.AuthNTLM
    Wscript.Echo "Sasl Logon Domain: " &amp;amp; objItem.SaslLogonDomain
Next
</vb><vb name="List SMTP Domain Setting Information" n="636">' List SMTP Domain Setting Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpDomainSetting")
 
For Each objItem in colItems
    For Each strTurn in objItem.AuthTurnList
        Wscript.Echo "Authentication Turn List: " &amp;amp; strTurn
    Next
    Wscript.Echo "CSide Etrn Domains: " &amp;amp; objItem.CSideEtrnDomains
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Relay For Authentication: " &amp;amp; objItem.RelayForAuth
    Wscript.Echo "Relay IP List: " &amp;amp; objItem.RelayIpList
    Wscript.Echo "Route Action: " &amp;amp; objItem.RouteAction
    Wscript.Echo "Route Action String: " &amp;amp; objItem.RouteActionString
    Wscript.Echo "Route Password: " &amp;amp; objItem.RoutePassword
    Wscript.Echo "Route User Name: " &amp;amp; objItem.RouteUserName
Next
</vb><vb name="List SMTP Domains" n="637">' List SMTP Domains


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsSmtpDomain")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List SMTP LDAP Routing Properties" n="638">' List SMTP LDAP Routing Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpRoutingSourceSetting")

For Each objItem in colItems
    Wscript.Echo "SMTP DS Account: " &amp;amp; objItem.SmtpDsAccount
    Wscript.Echo "SMTP DS Bind Type: " &amp;amp; objItem.SmtpDsBindType
    Wscript.Echo "SMTP DS Domain: " &amp;amp; objItem.SmtpDsDomain
    Wscript.Echo "SMTP DS Host: " &amp;amp; objItem.SmtpDsHost
    Wscript.Echo "SMTP DS Naming Context: " &amp;amp; _
        objItem.SmtpDsNamingContext
    Wscript.Echo "SMTP DS Password: " &amp;amp; objItem.SmtpDsPassword
    Wscript.Echo "SMTP DS Schema Type: " &amp;amp; objItem.SmtpDsSchemaType
Next
</vb><vb name="List SMTP Log Modules" n="639">' List SMTP Log Modules


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpInfoSetting")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Log Module List: " &amp;amp; objItem.LogModuleList
Next
</vb><vb name="List SMTP Outbound Connection Properties" n="640">' List SMTP Outbound Connection Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpServiceSetting")

For Each objItem in colItems
    Wscript.Echo "Maximum Out Connections: " &amp;amp; _
        objItem.MaxOutConnections
    Wscript.Echo "Maximum Out Connections Per Domain: " &amp;amp; _
        objItem.MaxOutConnectionsPerDomain
    Wscript.Echo "Remote SMTP Port: " &amp;amp; objItem.RemoteSmtpPort
    Wscript.Echo "Remote Timeout: " &amp;amp; objItem.RemoteTimeout
Next
</vb><vb name="List SMTP Routing Source Settings" n="641">' List SMTP Routing Source Settings


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpRoutingSourceSetting")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "SMTP DS Account: " &amp;amp; objItem.SmtpDsAccount
    Wscript.Echo "SMTP DS Bind Type: " &amp;amp; objItem.SmtpDsBindType
    Wscript.Echo "SMTP DS Data Directory: " &amp;amp; _
        objItem.SmtpDsDataDirectory
    Wscript.Echo "SMTP DS Default Mail Root: " &amp;amp; _
        objItem.SmtpDsDefaultMailRoot
    Wscript.Echo "SMTP DS Domain: " &amp;amp; objItem.SmtpDsDomain
    Wscript.Echo "SMTP DS Flags: " &amp;amp; objItem.SmtpDsFlags
    Wscript.Echo "SMTP DS Host: " &amp;amp; objItem.SmtpDsHost
    Wscript.Echo "SMTP DS Naming Context: " &amp;amp; _
        objItem.SmtpDsNamingContext
    Wscript.Echo "SMTP DS Password: " &amp;amp; objItem.SmtpDsPassword
    Wscript.Echo "SMTP DS Port: " &amp;amp; objItem.SmtpDsPort
    Wscript.Echo "SMTP DS Schema Type: " &amp;amp; objItem.SmtpDsSchemaType
    Wscript.Echo "SMTP DS Use Catalog: " &amp;amp; objItem.SmtpDsUseCat
    Wscript.Echo "SMTP Routing Table Type: " &amp;amp; _
        objItem.SmtpRoutingTableType
Next
</vb><vb name="List SMTP Routing Sources" n="642">' List SMTP Routing Sources


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpRoutingSource")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List SMTP Server Information" n="643">' List SMTP Server Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsSmtpServer")

For Each objItem in colItems
    For Each strRoute in objItem.DomainRouting
        Wscript.Echo "Domain Routing: " &amp;amp; strRoute
    Next
    Wscript.Echo "Local Domains:" &amp;amp; objItem.LocalDomains
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Postmaster Email: " &amp;amp; objItem.PostmasterEmail
    Wscript.Echo "Postmaster Name: " &amp;amp; objItem.PostmasterName
    For Each strSource in objItem.RoutingSources
        Wscript.Echo "Routing Sources: " &amp;amp; strSource
    Next
    Wscript.Echo "Server State: " &amp;amp; objItem.ServerState
    Wscript.Echo "SMTP Service Version: " &amp;amp; objItem.SmtpServiceVersion
    Wscript.Echo "Status: " &amp;amp; objItem.Status
Next
</vb><vb name="List SMTP Server Information Using ADSI" n="644">' List SMTP Server Information Using ADSI


strComputer = "LocalHost"
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/SMTPSVC/1")
 
Wscript.Echo "Access Execute: " &amp;amp; objIIS.AccessExecute
Wscript.Echo "Access Flags: " &amp;amp; objIIS.AccessFlags
Wscript.Echo "Access No Physical Directory: " &amp;amp; _
    objIIS.AccessNoPhysicalDir
Wscript.Echo "Access No Remote Execute: " &amp;amp; _
    objIIS.AccessNoRemoteExecute
Wscript.Echo "Access No Remote Read: " &amp;amp; objIIS.AccessNoRemoteRead
Wscript.Echo "Access No Remote Script: " &amp;amp; _
    objIIS.AccessNoRemoteScript
Wscript.Echo "Access No Remote Write: " &amp;amp; _
    objIIS.AccessNoRemoteWrite
Wscript.Echo "Access Read: " &amp;amp; objIIS.AccessRead
Wscript.Echo "Access Script: " &amp;amp; objIIS.AccessScript
Wscript.Echo "Access Source: " &amp;amp; objIIS.AccessSource
Wscript.Echo "Access SSL: " &amp;amp; objIIS.AccessSSL
Wscript.Echo "Access SSL 128: " &amp;amp; objIIS.AccessSSL128
Wscript.Echo "Access SSL Flags: " &amp;amp; objIIS.AccessSSLFlags
Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
    objIIS.AccessSSLMapCert
Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
    objIIS.AccessSSLNegotiateCert
Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
    objIIS.AccessSSLRequireCert
Wscript.Echo "Access Write: " &amp;amp; objIIS.AccessWrite
Wscript.Echo "Add No Headers: " &amp;amp; objIIS.AddNoHeaders
For Each strACL in objIIS.AdminACLBin
    Wscript.Echo "Admin ACL Bin: " &amp;amp; strACL
Next
Wscript.Echo "Allow Anonymous: " &amp;amp; objIIS.AllowAnonymous
Wscript.Echo "Always Use SSl: " &amp;amp; objIIS.AlwaysUseSsl
Wscript.Echo "Anonymous Only: " &amp;amp; objIIS.AnonymousOnly
Wscript.Echo "Anonymous Password Sync: " &amp;amp; _
    objIIS.AnonymousPasswordSync
Wscript.Echo "Anonymous User Name: " &amp;amp; objIIS.AnonymousUserName
Wscript.Echo "Authentication Anonymous: " &amp;amp; objIIS.AuthAnonymous
Wscript.Echo "Authentication Basic: " &amp;amp; objIIS.AuthBasic
Wscript.Echo "Authentication Flags: " &amp;amp; objIIS.AuthFlags
Wscript.Echo "Authentication MD5: " &amp;amp; objIIS.AuthMD5
Wscript.Echo "Authentication NTLM: " &amp;amp; objIIS.AuthNTLM
Wscript.Echo "Authentication Passport: " &amp;amp; objIIS.AuthPassport
Wscript.Echo "Az Enable: " &amp;amp; objIIS.AzEnable
Wscript.Echo "Az Scope Name: " &amp;amp; objIIS.AzScopeName
Wscript.Echo "Az Store Name: " &amp;amp; objIIS.AzStoreName
Wscript.Echo "Bad Mail Directory: " &amp;amp; objIIS.BadMailDirectory
Wscript.Echo "Cluster Enabled: " &amp;amp; objIIS.ClusterEnabled
Wscript.Echo "Connection Timeout: " &amp;amp; objIIS.ConnectionTimeout
Wscript.Echo "Connect Response: " &amp;amp; objIIS.ConnectResponse
Wscript.Echo "Default Domain: " &amp;amp; objIIS.DefaultDomain
Wscript.Echo "Default Logon Domain: " &amp;amp; _
    objIIS.DefaultLogonDomain
Wscript.Echo "Disable Socket Pooling: " &amp;amp; _
    objIIS.DisableSocketPooling
Wscript.Echo "Do Masquerade: " &amp;amp; objIIS.DoMasquerade
Wscript.Echo "Don't Log: " &amp;amp; objIIS.DontLog
Wscript.Echo "Drop Directory: " &amp;amp; objIIS.DropDirectory
Wscript.Echo "Enable Reverse DNS Lookup: " &amp;amp; _
    objIIS.EnableReverseDnsLookup
Wscript.Echo "Etrn Days: " &amp;amp; objIIS.EtrnDays
Wscript.Echo "Etrn Subdomains: " &amp;amp; objIIS.EtrnSubdomains
Wscript.Echo "Fully Qualified Domain Name: " &amp;amp; _
    objIIS.FullyQualifiedDomainName
Wscript.Echo "Hop Count: " &amp;amp; objIIS.HopCount
Wscript.Echo "Limit Remote Connections: " &amp;amp; _
    objIIS.LimitRemoteConnections
Wscript.Echo "Local Retry Attempts: " &amp;amp; _
    objIIS.LocalRetryAttempts
Wscript.Echo "Local Retry Interval: " &amp;amp; _
    objIIS.LocalRetryInterval
Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
    objIIS.LogExtFileBytesRecv
Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; _
    objIIS.LogExtFileBytesSent
Wscript.Echo "Log Ext File Client IP: " &amp;amp; _
    objIIS.LogExtFileClientIp
Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
    objIIS.LogExtFileComputerName
Wscript.Echo "Log Ext File Cookie: " &amp;amp; objIIS.LogExtFileCookie
Wscript.Echo "Log Ext File Date: " &amp;amp; objIIS.LogExtFileDate
Wscript.Echo "Log Ext File Flags: " &amp;amp; objIIS.LogExtFileFlags
Wscript.Echo "Log Ext File Host: " &amp;amp; objIIS.LogExtFileHost
Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
    objIIS.LogExtFileHttpStatus
Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
    objIIS.LogExtFileHttpSubStatus
Wscript.Echo "Log Ext File Method: " &amp;amp; objIIS.LogExtFileMethod
Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
    objIIS.LogExtFileProtocolVersion
Wscript.Echo "Log Ext File Referer: " &amp;amp; objIIS.LogExtFileReferer
Wscript.Echo "Log Ext File Server IP: " &amp;amp; objIIS.LogExtFileServerIp
Wscript.Echo "Log Ext File Server Port: " &amp;amp; _
    objIIS.LogExtFileServerPort
Wscript.Echo "Log Ext File Site Name: " &amp;amp; objIIS.LogExtFileSiteName
Wscript.Echo "Log Ext File Time: " &amp;amp; objIIS.LogExtFileTime
Wscript.Echo "Log Ext File Time Taken: " &amp;amp; _
    objIIS.LogExtFileTimeTaken
Wscript.Echo "Log Ext File URI Query: " &amp;amp; objIIS.LogExtFileUriQuery
Wscript.Echo "Log Ext File URI Stem: " &amp;amp; objIIS.LogExtFileUriStem
Wscript.Echo "Log Ext File User Agent: " &amp;amp; _
    objIIS.LogExtFileUserAgent
Wscript.Echo "Log Ext File User Name: " &amp;amp; objIIS.LogExtFileUserName
Wscript.Echo "Log Ext File Win32 Status: " &amp;amp; _
    objIIS.LogExtFileWin32Status
Wscript.Echo "Log File Directory: " &amp;amp; objIIS.LogFileDirectory
Wscript.Echo "Log File Period: " &amp;amp; objIIS.LogFilePeriod
Wscript.Echo "Log File Truncate Size: " &amp;amp; _
    objIIS.LogFileTruncateSize
Wscript.Echo "Log Odbc Data Source: " &amp;amp; objIIS.LogOdbcDataSource
Wscript.Echo "Log Odbc Password: " &amp;amp; objIIS.LogOdbcPassword
Wscript.Echo "Log Odbc Table Name: " &amp;amp; objIIS.LogOdbcTableName
Wscript.Echo "Log Odbc User Name: " &amp;amp; objIIS.LogOdbcUserName
Wscript.Echo "Log Plugin Clsid: " &amp;amp; objIIS.LogPluginClsid
Wscript.Echo "LogT ype: " &amp;amp; objIIS.LogType
Wscript.Echo "Masquerade Domain: " &amp;amp; objIIS.MasqueradeDomain
Wscript.Echo "Maximum Bandwidth: " &amp;amp; objIIS.MaxBandwidth
Wscript.Echo "Maximum Batched Messages: " &amp;amp; _
    objIIS.MaxBatchedMessages
Wscript.Echo "Maximum Connections: " &amp;amp; objIIS.MaxConnections
Wscript.Echo "Maximum Directory Change IO Size: " &amp;amp; _
    objIIS.MaxDirChangeIOSize
Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
    objIIS.MaxEndpointConnections
Wscript.Echo "Maximum Mail Objects: " &amp;amp; objIIS.MaxMailObjects
Wscript.Echo "Maximum Message Size: " &amp;amp; objIIS.MaxMessageSize
Wscript.Echo "Maximum Out Connections: " &amp;amp; _
    objIIS.MaxOutConnections
Wscript.Echo "Maximum Out Connections Per Domain: " &amp;amp; _
    objIIS.MaxOutConnectionsPerDomain
Wscript.Echo "Maximum Recipients: " &amp;amp; objIIS.MaxRecipients
Wscript.Echo "Maximum Session Size: " &amp;amp; objIIS.MaxSessionSize
Wscript.Echo "Maximum SMTP Errors: " &amp;amp; objIIS.MaxSmtpErrors
Wscript.Echo "Name: " &amp;amp; objIIS.Name
Wscript.Echo "Name Resolution Type: " &amp;amp; _
    objIIS.NameResolutionType
Wscript.Echo "NT Authentication Providers: " &amp;amp; _
    objIIS.NTAuthenticationProviders
Wscript.Echo "Pickup Directory: " &amp;amp; objIIS.PickupDirectory
Wscript.Echo "Queue Directory: " &amp;amp; objIIS.QueueDirectory
Wscript.Echo "Realm: " &amp;amp; objIIS.Realm
Wscript.Echo "Relay For Authentication: " &amp;amp; objIIS.RelayForAuth
Wscript.Echo "Remote Retry Attempts: " &amp;amp; _
    objIIS.RemoteRetryAttempts
Wscript.Echo "Remote Retry Interval: " &amp;amp; _
    objIIS.RemoteRetryInterval
Wscript.Echo "Remote SMTP Port: " &amp;amp; objIIS.RemoteSmtpPort
Wscript.Echo "Remote SMTP Secure Port: " &amp;amp; _
    objIIS.RemoteSmtpSecurePort
Wscript.Echo "Remote Timeout: " &amp;amp; objIIS.RemoteTimeout
Wscript.Echo "Route Action: " &amp;amp; objIIS.RouteAction
Wscript.Echo "Route Password: " &amp;amp; objIIS.RoutePassword
Wscript.Echo "Route User Name: " &amp;amp; objIIS.RouteUserName
Wscript.Echo "Routing Dll: " &amp;amp; objIIS.RoutingDll
Wscript.Echo "Sasl Logon Domain: " &amp;amp; objIIS.SaslLogonDomain
Wscript.Echo "Send Bad To: " &amp;amp; objIIS.SendBadTo
Wscript.Echo "Send Ndr To: " &amp;amp; objIIS.SendNdrTo
Wscript.Echo "Server AutoStart: " &amp;amp; objIIS.ServerAutoStart
Wscript.Echo "Server Comment: " &amp;amp; objIIS.ServerComment
Wscript.Echo "Server Listen Backlog: " &amp;amp; _
    objIIS.ServerListenBacklog
Wscript.Echo "Server Listen Timeout: " &amp;amp; _
    objIIS.ServerListenTimeout
'Wscript.Echo "Setting ID: " &amp;amp; objIIS.SettingID
Wscript.Echo "Should Deliver: " &amp;amp; objIIS.ShouldDeliver
Wscript.Echo "Should Pickup Mail: " &amp;amp; objIIS.ShouldPickupMail
Wscript.Echo "Should Pipeline In: " &amp;amp; objIIS.ShouldPipelineIn
Wscript.Echo "Should Pipeline Out: " &amp;amp; _
    objIIS.ShouldPipelineOut
Wscript.Echo "Smart Host: " &amp;amp; objIIS.SmartHost
Wscript.Echo "Smart Host Type: " &amp;amp; objIIS.SmartHostType
Wscript.Echo "SMTP Aqueue Wait: " &amp;amp; objIIS.SmtpAqueueWait
Wscript.Echo "SMTP Authentication Timeout: " &amp;amp; _
    objIIS.SmtpAuthTimeout
Wscript.Echo "SMTP Bdat Timeout: " &amp;amp; objIIS.SmtpBdatTimeout
Wscript.Echo "SMTP Clear Text Provider: " &amp;amp; _
    objIIS.SmtpClearTextProvider
Wscript.Echo "SMTP Connect Timeout: " &amp;amp; objIIS.SmtpConnectTimeout
Wscript.Echo "SMTP Data Timeout: " &amp;amp; objIIS.SmtpDataTimeout
Wscript.Echo "SMTP Disable Relay: " &amp;amp; objIIS.SmtpDisableRelay
Wscript.Echo "SMTP Domain Validation Flags: " &amp;amp; _
    objIIS.SmtpDomainValidationFlags
Wscript.Echo "SMTP Dot Stuff Pickup Directory Files: " &amp;amp; _
    objIIS.SmtpDotStuffPickupDirFiles
Wscript.Echo "SMTP DSN Language ID: " &amp;amp; objIIS.SmtpDSNLanguageID
Wscript.Echo "SMTP DSN Options: " &amp;amp; objIIS.SmtpDSNOptions
Wscript.Echo "SMTP Eventlog Level: " &amp;amp; objIIS.SmtpEventlogLevel
Wscript.Echo "SMTP Helo No Domain: " &amp;amp; objIIS.SmtpHeloNoDomain
Wscript.Echo "SMTP Helo Timeout: " &amp;amp; objIIS.SmtpHeloTimeout
Wscript.Echo "SMTP Inbound Command Support Options: " &amp;amp; o_
    bjIIS.SmtpInboundCommandSupportOptions
Wscript.Echo "SMTP IP Restriction Flag: " &amp;amp; _
    objIIS.SmtpIpRestrictionFlag
Wscript.Echo "SMTP Local Delay Expire Minutes: " &amp;amp; _
    objIIS.SmtpLocalDelayExpireMinutes
Wscript.Echo "SMTP Local NDR Expire Minutes: " &amp;amp; _
    objIIS.SmtpLocalNDRExpireMinutes
Wscript.Echo "SMTP Mail From Timeout: " &amp;amp; _
    objIIS.SmtpMailFromTimeout
Wscript.Echo "SMTP Mail No Helo: " &amp;amp; objIIS.SmtpMailNoHelo
Wscript.Echo "SMTP Maximum Remote Q Threads: " &amp;amp; _
    objIIS.SmtpMaxRemoteQThreads
Wscript.Echo "SMTP Outbound Command Support Options: " &amp;amp; _
    objIIS.SmtpOutboundCommandSupportOptions
Wscript.Echo "SMTP Rcpt To Timeout: " &amp;amp; objIIS.SmtpRcptToTimeout
Wscript.Echo "SMTP Remote Delay Expire Minutes: " &amp;amp; _
    objIIS.SmtpRemoteDelayExpireMinutes
Wscript.Echo "SMTP Remote NDR Expire Minutes: " &amp;amp; _
    objIIS.SmtpRemoteNDRExpireMinutes
Wscript.Echo "SMTP Remote Progressive Retry: " &amp;amp; _
    objIIS.SmtpRemoteProgressiveRetry
Wscript.Echo "SMTP Remote Retry Threshold: " &amp;amp; _
    objIIS.SmtpRemoteRetryThreshold
Wscript.Echo "SMTP Rset Timeout: " &amp;amp; objIIS.SmtpRsetTimeout
Wscript.Echo "SMTP Sasl Timeout: " &amp;amp; objIIS.SmtpSaslTimeout
Wscript.Echo "SMTP SSL Certifcate Hostname Validation: " &amp;amp; _
    objIIS.SmtpSSLCertHostnameValidation
Wscript.Echo "SMTP SSL Require Trusted CA: " &amp;amp; _
    objIIS.SmtpSSLRequireTrustedCA
Wscript.Echo "SMTP Turn Timeout: " &amp;amp; objIIS.SmtpTurnTimeout
Wscript.Echo "SMTP Use Tcp Dns: " &amp;amp; objIIS.SmtpUseTcpDns
Wscript.Echo "Updated Default Domain: " &amp;amp; _
    objIIS.UpdatedDefaultDomain
Wscript.Echo "Updated FQDN: " &amp;amp; objIIS.UpdatedFQDN
Wscript.Echo "Win32 Error: " &amp;amp; objIIS.Win32Error
</vb><vb name="List SMTP Server Setting Information" n="645">' List SMTP Server Setting Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpServerSetting")
 
For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp;  _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp;  _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp;  _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access SSL: " &amp;amp; objItem.AccessSSL
    Wscript.Echo "Access SSL 128: " &amp;amp; objItem.AccessSSL128
    Wscript.Echo "Access SSL Flags: " &amp;amp; objItem.AccessSSLFlags
    Wscript.Echo "Access SSL Map Certificate: " &amp;amp;  _
        objItem.AccessSSLMapCert
    Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp;  _
        objItem.AccessSSLNegotiateCert
    Wscript.Echo "Access SSL Require Certificate: " &amp;amp;  _
        objItem.AccessSSLRequireCert
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "Add No Headers: " &amp;amp; objItem.AddNoHeaders
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Allow Anonymous: " &amp;amp; objItem.AllowAnonymous
    Wscript.Echo "Always Use SSl: " &amp;amp; objItem.AlwaysUseSsl
    Wscript.Echo "Anonymous Only: " &amp;amp; objItem.AnonymousOnly
    Wscript.Echo "Anonymous Password Sync: " &amp;amp;  _
        objItem.AnonymousPasswordSync
    Wscript.Echo "Anonymous User Name: " &amp;amp; objItem.AnonymousUserName
    Wscript.Echo "Authentication Anonymous: " &amp;amp; objItem.AuthAnonymous
    Wscript.Echo "Authentication Basic: " &amp;amp; objItem.AuthBasic
    Wscript.Echo "Authentication Flags: " &amp;amp; objItem.AuthFlags
    Wscript.Echo "Authentication MD5: " &amp;amp; objItem.AuthMD5
    Wscript.Echo "Authentication NTLM: " &amp;amp; objItem.AuthNTLM
    Wscript.Echo "Authentication Passport: " &amp;amp; objItem.AuthPassport
    Wscript.Echo "Az Enable: " &amp;amp; objItem.AzEnable
    Wscript.Echo "Az Scope Name: " &amp;amp; objItem.AzScopeName
    Wscript.Echo "Az Store Name: " &amp;amp; objItem.AzStoreName
    Wscript.Echo "Bad Mail Directory: " &amp;amp; objItem.BadMailDirectory
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Cluster Enabled: " &amp;amp; objItem.ClusterEnabled
    Wscript.Echo "Connection Timeout: " &amp;amp; objItem.ConnectionTimeout
    Wscript.Echo "Connect Response: " &amp;amp; objItem.ConnectResponse
    Wscript.Echo "Default Domain: " &amp;amp; objItem.DefaultDomain
    Wscript.Echo "Default Logon Domain: " &amp;amp;  _
        objItem.DefaultLogonDomain
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Disable Socket Pooling: " &amp;amp;  _
        objItem.DisableSocketPooling
    Wscript.Echo "Do Masquerade: " &amp;amp; objItem.DoMasquerade
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Drop Directory: " &amp;amp; objItem.DropDirectory
    Wscript.Echo "Enable Reverse DNS Lookup: " &amp;amp;  _
        objItem.EnableReverseDnsLookup
    Wscript.Echo "Etrn Days: " &amp;amp; objItem.EtrnDays
    Wscript.Echo "Etrn Subdomains: " &amp;amp; objItem.EtrnSubdomains
    Wscript.Echo "Fully Qualified Domain Name: " &amp;amp;  _
        objItem.FullyQualifiedDomainName
    Wscript.Echo "Hop Count: " &amp;amp; objItem.HopCount
    Wscript.Echo "Limit Remote Connections: " &amp;amp;  _
        objItem.LimitRemoteConnections
    Wscript.Echo "Local Retry Attempts: " &amp;amp;  _
        objItem.LocalRetryAttempts
    Wscript.Echo "Local Retry Interval: " &amp;amp;  _
        objItem.LocalRetryInterval
    Wscript.Echo "Log Ext File Bytes Received: " &amp;amp;  _
        objItem.LogExtFileBytesRecv
    Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp;  _
        objItem.LogExtFileBytesSent
    Wscript.Echo "Log Ext File Client IP: " &amp;amp;  _
        objItem.LogExtFileClientIp
    Wscript.Echo "Log Ext File Computer Name: " &amp;amp;  _
        objItem.LogExtFileComputerName
    Wscript.Echo "Log Ext File Cookie: " &amp;amp; objItem.LogExtFileCookie
    Wscript.Echo "Log Ext File Date: " &amp;amp; objItem.LogExtFileDate
    Wscript.Echo "Log Ext File Flags: " &amp;amp; objItem.LogExtFileFlags
    Wscript.Echo "Log Ext File Host: " &amp;amp; objItem.LogExtFileHost
    Wscript.Echo "Log Ext File Http Status: " &amp;amp;  _
        objItem.LogExtFileHttpStatus
    Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp;  _
        objItem.LogExtFileHttpSubStatus
    Wscript.Echo "Log Ext File Method: " &amp;amp; objItem.LogExtFileMethod
    Wscript.Echo "Log Ext File Protocol Version: " &amp;amp;  _
        objItem.LogExtFileProtocolVersion
    Wscript.Echo "Log Ext File Referer: " &amp;amp; objItem.LogExtFileReferer
    Wscript.Echo "Log Ext File Server IP: " &amp;amp;  _
        objItem.LogExtFileServerIp
    Wscript.Echo "Log Ext File Server Port: " &amp;amp;  _
        objItem.LogExtFileServerPort
    Wscript.Echo "Log Ext File Site Name: " &amp;amp;  _
        objItem.LogExtFileSiteName
    Wscript.Echo "Log Ext File Time: " &amp;amp; objItem.LogExtFileTime
    Wscript.Echo "Log Ext File Time Taken: " &amp;amp;  _
        objItem.LogExtFileTimeTaken
    Wscript.Echo "Log Ext File URI Query: " &amp;amp;  _
        objItem.LogExtFileUriQuery
    Wscript.Echo "Log Ext File URI Stem: " &amp;amp; objItem.LogExtFileUriStem
    Wscript.Echo "Log Ext File User Agent: " &amp;amp;  _
        objItem.LogExtFileUserAgent
    Wscript.Echo "Log Ext File User Name: " &amp;amp; objItem.LogExtFileUserName
    Wscript.Echo "Log Ext File Win32 Status: " &amp;amp;  _
        objItem.LogExtFileWin32Status
    Wscript.Echo "Log File Directory: " &amp;amp; objItem.LogFileDirectory
    Wscript.Echo "Log File Period: " &amp;amp; objItem.LogFilePeriod
    Wscript.Echo "Log File Truncate Size: " &amp;amp;  _
        objItem.LogFileTruncateSize
    Wscript.Echo "Log Odbc Data Source: " &amp;amp; objItem.LogOdbcDataSource
    Wscript.Echo "Log Odbc Password: " &amp;amp; objItem.LogOdbcPassword
    Wscript.Echo "Log Odbc Table Name: " &amp;amp; objItem.LogOdbcTableName
    Wscript.Echo "Log Odbc User Name: " &amp;amp; objItem.LogOdbcUserName
    Wscript.Echo "Log Plugin Clsid: " &amp;amp; objItem.LogPluginClsid
    Wscript.Echo "LogT ype: " &amp;amp; objItem.LogType
    Wscript.Echo "Masquerade Domain: " &amp;amp; objItem.MasqueradeDomain
    Wscript.Echo "Maximum Bandwidth: " &amp;amp; objItem.MaxBandwidth
    Wscript.Echo "Maximum Batched Messages: " &amp;amp;  _
        objItem.MaxBatchedMessages
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
    Wscript.Echo "Maximum Directory Change IO Size: " &amp;amp;  _
        objItem.MaxDirChangeIOSize
    Wscript.Echo "Maximum Endpoint Connections: " &amp;amp;  _
        objItem.MaxEndpointConnections
    Wscript.Echo "Maximum Mail Objects: " &amp;amp; objItem.MaxMailObjects
    Wscript.Echo "Maximum Message Size: " &amp;amp; objItem.MaxMessageSize
    Wscript.Echo "Maximum Out Connections: " &amp;amp; objItem.MaxOutConnections
    Wscript.Echo "Maximum Out Connections Per Domain: " &amp;amp;  _
        objItem.MaxOutConnectionsPerDomain
    Wscript.Echo "Maximum Recipients: " &amp;amp; objItem.MaxRecipients
    Wscript.Echo "Maximum Session Size: " &amp;amp; objItem.MaxSessionSize
    Wscript.Echo "Maximum SMTP Errors: " &amp;amp; objItem.MaxSmtpErrors
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Name Resolution Type: " &amp;amp; objItem.NameResolutionType
    Wscript.Echo "NT Authentication Providers: " &amp;amp;  _
        objItem.NTAuthenticationProviders
    Wscript.Echo "Pickup Directory: " &amp;amp; objItem.PickupDirectory
    Wscript.Echo "Queue Directory: " &amp;amp; objItem.QueueDirectory
    Wscript.Echo "Realm: " &amp;amp; objItem.Realm
    Wscript.Echo "Relay For Authentication: " &amp;amp; objItem.RelayForAuth
    Wscript.Echo "Relay IP List: " &amp;amp; objItem.RelayIpList
    Wscript.Echo "Remote Retry Attempts: " &amp;amp; objItem.RemoteRetryAttempts
    Wscript.Echo "Remote Retry Interval: " &amp;amp; objItem.RemoteRetryInterval
    Wscript.Echo "Remote SMTP Port: " &amp;amp; objItem.RemoteSmtpPort
    Wscript.Echo "Remote SMTP Secure Port: " &amp;amp;  _
        objItem.RemoteSmtpSecurePort
    Wscript.Echo "Remote Timeout: " &amp;amp; objItem.RemoteTimeout
    Wscript.Echo "Route Action: " &amp;amp; objItem.RouteAction
    Wscript.Echo "Route Password: " &amp;amp; objItem.RoutePassword
    Wscript.Echo "Route User Name: " &amp;amp; objItem.RouteUserName
    Wscript.Echo "Routing Dll: " &amp;amp; objItem.RoutingDll
    Wscript.Echo "Sasl Logon Domain: " &amp;amp; objItem.SaslLogonDomain
    Wscript.Echo "Send Bad To: " &amp;amp; objItem.SendBadTo
    Wscript.Echo "Send Ndr To: " &amp;amp; objItem.SendNdrTo
    Wscript.Echo "Server AutoStart: " &amp;amp; objItem.ServerAutoStart
    Wscript.Echo "Server Comment: " &amp;amp; objItem.ServerComment
    Wscript.Echo "Server Listen Backlog: " &amp;amp;  _
        objItem.ServerListenBacklog
    Wscript.Echo "Server Listen Timeout: " &amp;amp;  _
        objItem.ServerListenTimeout
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Should Deliver: " &amp;amp; objItem.ShouldDeliver
    Wscript.Echo "Should Pickup Mail: " &amp;amp; objItem.ShouldPickupMail
    Wscript.Echo "Should Pipeline In: " &amp;amp; objItem.ShouldPipelineIn
    Wscript.Echo "Should Pipeline Out: " &amp;amp; objItem.ShouldPipelineOut
    Wscript.Echo "Smart Host: " &amp;amp; objItem.SmartHost
    Wscript.Echo "Smart Host Type: " &amp;amp; objItem.SmartHostType
    Wscript.Echo "SMTP Aqueue Wait: " &amp;amp; objItem.SmtpAqueueWait
    Wscript.Echo "SMTP Authentication Timeout: " &amp;amp;  _
        objItem.SmtpAuthTimeout
    Wscript.Echo "SMTP Bdat Timeout: " &amp;amp; objItem.SmtpBdatTimeout
    Wscript.Echo "SMTP Clear Text Provider: " &amp;amp;  _
        objItem.SmtpClearTextProvider
    Wscript.Echo "SMTP Connect Timeout: " &amp;amp;  _
        objItem.SmtpConnectTimeout
    Wscript.Echo "SMTP Data Timeout: " &amp;amp; objItem.SmtpDataTimeout
    Wscript.Echo "SMTP Disable Relay: " &amp;amp; objItem.SmtpDisableRelay
    Wscript.Echo "SMTP Domain Validation Flags: " &amp;amp;  _
        objItem.SmtpDomainValidationFlags
    Wscript.Echo "SMTP Dot Stuff Pickup Directory Files: " &amp;amp;  _
        objItem.SmtpDotStuffPickupDirFiles
    Wscript.Echo "SMTP DSN Language ID: " &amp;amp; objItem.SmtpDSNLanguageID
    Wscript.Echo "SMTP DSN Options: " &amp;amp; objItem.SmtpDSNOptions
    Wscript.Echo "SMTP Eventlog Level: " &amp;amp; objItem.SmtpEventlogLevel
    Wscript.Echo "SMTP Helo No Domain: " &amp;amp; objItem.SmtpHeloNoDomain
    Wscript.Echo "SMTP Helo Timeout: " &amp;amp; objItem.SmtpHeloTimeout
    Wscript.Echo "SMTP Inbound Command Support Options: " &amp;amp;  _
        objItem.SmtpInboundCommandSupportOptions
    Wscript.Echo "SMTP IP Restriction Flag: " &amp;amp;  _
        objItem.SmtpIpRestrictionFlag
    Wscript.Echo "SMTP Local Delay Expire Minutes: " &amp;amp;  _
        objItem.SmtpLocalDelayExpireMinutes
    Wscript.Echo "SMTP Local NDR Expire Minutes: " &amp;amp;  _
        objItem.SmtpLocalNDRExpireMinutes
    Wscript.Echo "SMTP Mail From Timeout: " &amp;amp;  _
        objItem.SmtpMailFromTimeout
    Wscript.Echo "SMTP Mail No Helo: " &amp;amp; objItem.SmtpMailNoHelo
    Wscript.Echo "SMTP Maximum Remote Q Threads: " &amp;amp;  _
        objItem.SmtpMaxRemoteQThreads
    Wscript.Echo "SMTP Outbound Command Support Options: " &amp;amp;  _
        objItem.SmtpOutboundCommandSupportOptions
    Wscript.Echo "SMTP Rcpt To Timeout: " &amp;amp; objItem.SmtpRcptToTimeout
    Wscript.Echo "SMTP Remote Delay Expire Minutes: " &amp;amp;  _
        objItem.SmtpRemoteDelayExpireMinutes
    Wscript.Echo "SMTP Remote NDR Expire Minutes: " &amp;amp;  _
        objItem.SmtpRemoteNDRExpireMinutes
    Wscript.Echo "SMTP Remote Progressive Retry: " &amp;amp;  _
        objItem.SmtpRemoteProgressiveRetry
    Wscript.Echo "SMTP Remote Retry Threshold: " &amp;amp;  _
        objItem.SmtpRemoteRetryThreshold
    Wscript.Echo "SMTP Rset Timeout: " &amp;amp; objItem.SmtpRsetTimeout
    Wscript.Echo "SMTP Sasl Timeout: " &amp;amp; objItem.SmtpSaslTimeout
    Wscript.Echo "SMTP SSL Certifcate Hostname Validation: " &amp;amp;  _
        objItem.SmtpSSLCertHostnameValidation
    Wscript.Echo "SMTP SSL Require Trusted CA: " &amp;amp; _
        objItem.SmtpSSLRequireTrustedCA
    Wscript.Echo "SMTP Turn Timeout: " &amp;amp; objItem.SmtpTurnTimeout
    Wscript.Echo "SMTP Use Tcp Dns: " &amp;amp; objItem.SmtpUseTcpDns
    Wscript.Echo "Updated Default Domain: " &amp;amp;  _
        objItem.UpdatedDefaultDomain
    Wscript.Echo "Updated FQDN: " &amp;amp; objItem.UpdatedFQDN
    Wscript.Echo "Win32 Error: " &amp;amp; objItem.Win32Error
Next
</vb><vb name="List SMTP Service Configuration Information" n="646">' List SMTP Service Configuration Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpService")
 
For Each objItem in colItems
    Wscript.Echo "Accept Pause: " &amp;amp; objItem.AcceptPause
    Wscript.Echo "Accept Stop: " &amp;amp; objItem.AcceptStop
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Check Point: " &amp;amp; objItem.CheckPoint
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Desktop Interact: " &amp;amp; objItem.DesktopInteract
    Wscript.Echo "Display Name: " &amp;amp; objItem.DisplayName
    For Each strRoute in objItem.DomainRouting
        Wscript.Echo "Domain Routing: " &amp;amp; strRoute
    Next
    Wscript.Echo "Error Control: " &amp;amp; objItem.ErrorControl
    Wscript.Echo "Exit Code: " &amp;amp; objItem.ExitCode
    Wscript.Echo "Installation Date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Local Domains: " &amp;amp; objItem.LocalDomains
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Path Name: " &amp;amp; objItem.PathName
    Wscript.Echo "Process Id: " &amp;amp; objItem.ProcessId
    For Each strRoute in objItem.RoutingSources
        Wscript.Echo "Routing Sources: " &amp;amp; strRoute
    Next
    Wscript.Echo "Service Specific Exit Code: " &amp;amp; _
        objItem.ServiceSpecificExitCode
    Wscript.Echo "Service Type: " &amp;amp; objItem.ServiceType
    Wscript.Echo "SMTP Service Version: " &amp;amp; _
        objItem.SmtpServiceVersion
    Wscript.Echo "Started: " &amp;amp; objItem.Started
    Wscript.Echo "Start Mode: " &amp;amp; objItem.StartMode
    Wscript.Echo "Start Name: " &amp;amp; objItem.StartName
    Wscript.Echo "State: " &amp;amp; objItem.State
    Wscript.Echo "Status: " &amp;amp; objItem.Status
    Wscript.Echo "Tag Id: " &amp;amp; objItem.TagId
    Wscript.Echo "Wait Hint: " &amp;amp; objItem.WaitHint
Next
</vb><vb name="List SMTP Service Properties Using ADSI" n="647">' List SMTP Service Properties Using ADSI


strComputer = "LocalHost"
 
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/SMTPSVC")
 
Wscript.Echo "Access Flags: " &amp;amp; objIIS.AccessFlags
Wscript.Echo "Disable Socket Pooling: " &amp;amp; _
    objIIS.DisableSocketPooling
Wscript.Echo "Allow Anonymous: " &amp;amp; objIIS.AllowAnonymous
Wscript.Echo "Don't Log: " &amp;amp; objIIS.DontLog
Wscript.Echo "Anonymous Only: " &amp;amp; objIIS.AnonymousOnly
Wscript.Echo "Anonymous Password Sync: " &amp;amp; _
    objIIS.AnonymousPasswordSync
Wscript.Echo "Anonymous User Name: " &amp;amp; objIIS.AnonymousUserName
Wscript.Echo "Anonymous User Password: " &amp;amp; _
    objIIS.AnonymousUserPass
Wscript.Echo "Connection Timeout: " &amp;amp; objIIS.ConnectionTimeout
Wscript.Echo "Log Ext File Flags: " &amp;amp; objIIS.LogExtFileFlags
Wscript.Echo "Log ODBC Data Source: " &amp;amp; objIIS.LogOdbcDataSource
Wscript.Echo "Log ODBC Password: " &amp;amp; objIIS.LogOdbcPassword
Wscript.Echo "Log File Directory: " &amp;amp; objIIS.LogFileDirectory
Wscript.Echo "Log ODBC Table Name: " &amp;amp; objIIS.LogOdbcTableName
Wscript.Echo "Log ODBC User Name: " &amp;amp; objIIS.LogOdbcUserName
Wscript.Echo "Log File Period: " &amp;amp; objIIS.LogFilePeriod
Wscript.Echo "Log Plugin Clsid: " &amp;amp; objIIS.LogPluginClsid
Wscript.Echo "Log File Truncate Size: " &amp;amp; _
    objIIS.LogFileTruncateSize
Wscript.Echo "Log Type: " &amp;amp; objIIS.LogType
Wscript.Echo "Maximum Connections: " &amp;amp; objIIS.MaxConnections
Wscript.Echo "Server Comment: " &amp;amp; objIIS.ServerComment
Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
    objIIS.MaxEndpointConnections
Wscript.Echo "Server Listen Timeout: " &amp;amp; _
    objIIS.ServerListenTimeout
Wscript.Echo "Realm: " &amp;amp; objIIS.Realm
Wscript.Echo "Server AutoStart: " &amp;amp; objIIS.ServerAutoStart
</vb><vb name="List SMTP Service Setting Information" n="648">' List SMTP Service Setting Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpServiceSetting")
 
For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp; _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; _
        objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access SSL: " &amp;amp; objItem.AccessSSL
    Wscript.Echo "Access SSL 128: " &amp;amp; objItem.AccessSSL128
    Wscript.Echo "Access SSL Flags: " &amp;amp; objItem.AccessSSLFlags
    Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
        objItem.AccessSSLMapCert
    Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
        objItem.AccessSSLNegotiateCert
    Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
        objItem.AccessSSLRequireCert
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "Add No Headers: " &amp;amp; objItem.AddNoHeaders
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Allow Anonymous: " &amp;amp; objItem.AllowAnonymous
    Wscript.Echo "Always Use Ssl: " &amp;amp; objItem.AlwaysUseSsl
    Wscript.Echo "Anonymous Only: " &amp;amp; objItem.AnonymousOnly
    Wscript.Echo "Anonymous Password Sync: " &amp;amp; _
        objItem.AnonymousPasswordSync
    Wscript.Echo "Anonymous User Name: " &amp;amp; objItem.AnonymousUserName
    Wscript.Echo "Anonymous User Password: " &amp;amp; _
        objItem.AnonymousUserPass
    Wscript.Echo "Authentication Anonymous: " &amp;amp; objItem.AuthAnonymous
    Wscript.Echo "Authentication Basic: " &amp;amp; objItem.AuthBasic
    Wscript.Echo "Authentication Flags: " &amp;amp; objItem.AuthFlags
    Wscript.Echo "Authentication MD5: " &amp;amp; objItem.AuthMD5
    Wscript.Echo "Authentication NTLM: " &amp;amp; objItem.AuthNTLM
    Wscript.Echo "Authentication Passport: " &amp;amp; objItem.AuthPassport
    Wscript.Echo "Az Enable: " &amp;amp; objItem.AzEnable
    Wscript.Echo "Az Scope Name: " &amp;amp; objItem.AzScopeName
    Wscript.Echo "Az Store Name: " &amp;amp; objItem.AzStoreName
    Wscript.Echo "Bad Mail Directory: " &amp;amp; objItem.BadMailDirectory
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Connection Timeout: " &amp;amp; objItem.ConnectionTimeout
    Wscript.Echo "Connect Response: " &amp;amp; objItem.ConnectResponse
    Wscript.Echo "Default Domain: " &amp;amp; objItem.DefaultDomain
    Wscript.Echo "Default Logon Domain: " &amp;amp; _
        objItem.DefaultLogonDomain
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Disable Socket Pooling: " &amp;amp; _
        objItem.DisableSocketPooling
    Wscript.Echo "Do Masquerade: " &amp;amp; objItem.DoMasquerade
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Drop Directory: " &amp;amp; objItem.DropDirectory
    Wscript.Echo "Enable Reverse DNS Lookup: " &amp;amp; _
        objItem.EnableReverseDnsLookup
    Wscript.Echo "Etrn Days: " &amp;amp; objItem.EtrnDays
    Wscript.Echo "Etrn Subdomains: " &amp;amp; objItem.EtrnSubdomains
    Wscript.Echo "Fully Qualified Domain Name: " &amp;amp; _
        objItem.FullyQualifiedDomainName
    Wscript.Echo "Hop Count: " &amp;amp; objItem.HopCount
    Wscript.Echo "Limit Remote Connections: " &amp;amp; _
        objItem.LimitRemoteConnections
    Wscript.Echo "Local Retry Attempts: " &amp;amp; objItem.LocalRetryAttempts
    Wscript.Echo "Local Retry Interval: " &amp;amp; objItem.LocalRetryInterval
    Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
        objItem.LogExtFileBytesRecv
    Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; _
        objItem.LogExtFileBytesSent
    Wscript.Echo "Log Ext File Client IP: " &amp;amp; _
        objItem.LogExtFileClientIp
    Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
        objItem.LogExtFileComputerName
    Wscript.Echo "Log Ext File Cookie: " &amp;amp; objItem.LogExtFileCookie
    Wscript.Echo "Log Ext File Date: " &amp;amp; objItem.LogExtFileDate
    Wscript.Echo "Log Ext File Flags: " &amp;amp; objItem.LogExtFileFlags
    Wscript.Echo "Log Ext File Host: " &amp;amp; objItem.LogExtFileHost
    Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
        objItem.LogExtFileHttpStatus
    Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
        objItem.LogExtFileHttpSubStatus
    Wscript.Echo "Log Ext File Method: " &amp;amp; objItem.LogExtFileMethod
    Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
        objItem.LogExtFileProtocolVersion
    Wscript.Echo "Log Ext File Referer: " &amp;amp; objItem.LogExtFileReferer
    Wscript.Echo "Log Ext File Server IP: " &amp;amp; objItem.LogExtFileServerIp
    Wscript.Echo "Log Ext File Server Port: " &amp;amp; _
        objItem.LogExtFileServerPort
    Wscript.Echo "Log Ext File Site Name: " &amp;amp; objItem.LogExtFileSiteName
    Wscript.Echo "Log Ext File Time: " &amp;amp; objItem.LogExtFileTime
    Wscript.Echo "Log Ext File Time Taken: " &amp;amp; objItem.LogExtFileTimeTaken
    Wscript.Echo "Log Ext File URI Query: " &amp;amp; objItem.LogExtFileUriQuery
    Wscript.Echo "Log Ext File URI Stem: " &amp;amp; objItem.LogExtFileUriStem
    Wscript.Echo "Log Ext File User Agent: " &amp;amp; objItem.LogExtFileUserAgent
    Wscript.Echo "Log Ext File User Name: " &amp;amp; objItem.LogExtFileUserName
    Wscript.Echo "Log Ext File Win32 Status: " &amp;amp; _
        objItem.LogExtFileWin32Status
    Wscript.Echo "Log File Directory: " &amp;amp; objItem.LogFileDirectory
    Wscript.Echo "Log File Period: " &amp;amp; objItem.LogFilePeriod
    Wscript.Echo "Log File Truncate Size: " &amp;amp; objItem.LogFileTruncateSize
    Wscript.Echo "Log Module List: " &amp;amp; objItem.LogModuleList
    Wscript.Echo "Log Odbc Data Source: " &amp;amp; objItem.LogOdbcDataSource
    Wscript.Echo "Log Odbc Password: " &amp;amp; objItem.LogOdbcPassword
    Wscript.Echo "Log Odbc Table Name: " &amp;amp; objItem.LogOdbcTableName
    Wscript.Echo "Log Odbc User Name: " &amp;amp; objItem.LogOdbcUserName
    Wscript.Echo "Log Plugin Clsid: " &amp;amp; objItem.LogPluginClsid
    Wscript.Echo "Log Type: " &amp;amp; objItem.LogType
    Wscript.Echo "Masquerade Domain: " &amp;amp; objItem.MasqueradeDomain
    Wscript.Echo "Maximum Bandwidth: " &amp;amp; objItem.MaxBandwidth
    Wscript.Echo "Maximum Batched Messages: " &amp;amp; objItem.MaxBatchedMessages
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
    Wscript.Echo "Maximum Diectory rChange IO Size: " &amp;amp; _
        objItem.MaxDirChangeIOSize
    Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
        objItem.MaxEndpointConnections
    Wscript.Echo "Maximum Mail Objects: " &amp;amp; objItem.MaxMailObjects
    Wscript.Echo "Maximum Message Size: " &amp;amp; objItem.MaxMessageSize
    Wscript.Echo "Maximum Out Connections: " &amp;amp; objItem.MaxOutConnections
    Wscript.Echo "Maximum Out Connections Per Domain: " &amp;amp; _
        objItem.MaxOutConnectionsPerDomain
    Wscript.Echo "Maximum Recipients: " &amp;amp; objItem.MaxRecipients
    Wscript.Echo "Maximum Session Size: " &amp;amp; objItem.MaxSessionSize
    Wscript.Echo "Maximum SMTP Errors: " &amp;amp; objItem.MaxSmtpErrors
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Name Resolution Type: " &amp;amp; objItem.NameResolutionType
    Wscript.Echo "NT Authentication Providers: " &amp;amp; _
        objItem.NTAuthenticationProviders
    Wscript.Echo "Pickup Directory: " &amp;amp; objItem.PickupDirectory
    Wscript.Echo "Queue Directory: " &amp;amp; objItem.QueueDirectory
    Wscript.Echo "Realm: " &amp;amp; objItem.Realm
    Wscript.Echo "Relay For Authentication : " &amp;amp; objItem.RelayForAuth
    For Each strIP in objItem.RelayIpList
        Wscript.Echo "Relay IP List: " &amp;amp; strIP
    Next
    Wscript.Echo "Remote Retry Attempts: " &amp;amp; _
        objItem.RemoteRetryAttempts
    Wscript.Echo "Remote Retry Interval: " &amp;amp; _
        objItem.RemoteRetryInterval
    Wscript.Echo "Remote SMTP Port: " &amp;amp; objItem.RemoteSmtpPort
    Wscript.Echo "Remote SMTP Secure Port: " &amp;amp; _
        objItem.RemoteSmtpSecurePort
    Wscript.Echo "Remote Timeout: " &amp;amp; objItem.RemoteTimeout
    Wscript.Echo "Route Action: " &amp;amp; objItem.RouteAction
    Wscript.Echo "Route Password: " &amp;amp; objItem.RoutePassword
    Wscript.Echo "Route User Name: " &amp;amp; objItem.RouteUserName
    Wscript.Echo "Routing Dll: " &amp;amp; objItem.RoutingDll
    Wscript.Echo "Sasl Logon Domain: " &amp;amp; objItem.SaslLogonDomain
    Wscript.Echo "Send Bad To: " &amp;amp; objItem.SendBadTo
    Wscript.Echo "Send Ndr To: " &amp;amp; objItem.SendNdrTo
    Wscript.Echo "Server AutoStart: " &amp;amp; objItem.ServerAutoStart
    Wscript.Echo "Server Comment: " &amp;amp; objItem.ServerComment
    Wscript.Echo "Server Listen Timeout: " &amp;amp; _
        objItem.ServerListenTimeout
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Should Deliver: " &amp;amp; objItem.ShouldDeliver
    Wscript.Echo "Should Pickup Mail: " &amp;amp; objItem.ShouldPickupMail
    Wscript.Echo "Should Pipeline In: " &amp;amp; objItem.ShouldPipelineIn
    Wscript.Echo "Should Pipeline Out: " &amp;amp; objItem.ShouldPipelineOut
    Wscript.Echo "Smart Host: " &amp;amp; objItem.SmartHost
    Wscript.Echo "Smart Host Type: " &amp;amp; objItem.SmartHostType
    Wscript.Echo "SMTP Adv Queue Dll: " &amp;amp; objItem.SmtpAdvQueueDll
    Wscript.Echo "SMTP Aqueue Wait: " &amp;amp; objItem.SmtpAqueueWait
    Wscript.Echo "SMTP Authetication Timeout: " &amp;amp; _
        objItem.SmtpAuthTimeout
    Wscript.Echo "SMTP Bdat Timeout: " &amp;amp; objItem.SmtpBdatTimeout
    Wscript.Echo "SMTP Clear Text Provider: " &amp;amp; _
        objItem.SmtpClearTextProvider
    Wscript.Echo "SMTP Command Log Mask: " &amp;amp; _
        objItem.SmtpCommandLogMask
    Wscript.Echo "SMTP Connect Timeout: " &amp;amp; _
        objItem.SmtpConnectTimeout
    Wscript.Echo "SMTP Data Timeout: " &amp;amp; objItem.SmtpDataTimeout
    Wscript.Echo "SMTP Disable Relay: " &amp;amp; objItem.SmtpDisableRelay
    Wscript.Echo "SMTP Domain Validation Flags: " &amp;amp; _
        objItem.SmtpDomainValidationFlags
    Wscript.Echo "SMTP Dot Stuff Pickup Directory Files: " &amp;amp; _
        objItem.SmtpDotStuffPickupDirFiles
    Wscript.Echo "SMTP DSN Language ID: " &amp;amp; _
        objItem.SmtpDSNLanguageID
    Wscript.Echo "SMTP DSN Options: " &amp;amp; objItem.SmtpDSNOptions
    Wscript.Echo "SMTP Eventlog Level: " &amp;amp; objItem.SmtpEventlogLevel
    Wscript.Echo "SMTP Flush Mail File: " &amp;amp; _
        objItem.SmtpFlushMailFile
    Wscript.Echo "SMTP Helo No Domain: " &amp;amp; objItem.SmtpHeloNoDomain
    Wscript.Echo "SMTP Helo Timeout: " &amp;amp; objItem.SmtpHeloTimeout
    Wscript.Echo "SMTP Inbound Command Support Options: " &amp;amp; _
        objItem.SmtpInboundCommandSupportOptions
    Wscript.Echo "SMTP IP Restriction Flag: " &amp;amp; _
        objItem.SmtpIpRestrictionFlag
    Wscript.Echo "SMTP Local Delay Expire Minutes: " &amp;amp; _
        objItem.SmtpLocalDelayExpireMinutes
    Wscript.Echo "SMTP Local NDR Expire Minutes: " &amp;amp; _
        objItem.SmtpLocalNDRExpireMinutes
    Wscript.Echo "SMTP Mail From Timeout: " &amp;amp; _
        objItem.SmtpMailFromTimeout
    Wscript.Echo "SMTP Mail No Helo: " &amp;amp; objItem.SmtpMailNoHelo
    Wscript.Echo "SMTP Maximum Remote Q Threads: " &amp;amp; _
        objItem.SmtpMaxRemoteQThreads
    Wscript.Echo "SMTP Outbound Command Support Options: " &amp;amp; _
        objItem.SmtpOutboundCommandSupportOptions
    Wscript.Echo "SMTP Rcpt To Timeout: " &amp;amp; objItem.SmtpRcptToTimeout
    Wscript.Echo "SMTP Remote Delay Expire Minutes: " &amp;amp; _
        objItem.SmtpRemoteDelayExpireMinutes
    Wscript.Echo "SMTP Remote NDR Expire Minutes: " &amp;amp; _
        objItem.SmtpRemoteNDRExpireMinutes
    Wscript.Echo "SMTP Remote Progressive Retry: " &amp;amp; _
        objItem.SmtpRemoteProgressiveRetry
    Wscript.Echo "SMTP Remote Retry Threshold: " &amp;amp; _
        objItem.SmtpRemoteRetryThreshold
    Wscript.Echo "SMTP Rset Timeout: " &amp;amp; objItem.SmtpRsetTimeout
    Wscript.Echo "SMTP Sasl Timeout: " &amp;amp; objItem.SmtpSaslTimeout
    Wscript.Echo "SMTP SSL Certificate Hostname Validation: " &amp;amp; _
        objItem.SmtpSSLCertHostnameValidation
    Wscript.Echo "SMTP SSL Require Trusted CA: " &amp;amp; _
        objItem.SmtpSSLRequireTrustedCA
    Wscript.Echo "SMTP Turn Timeout: " &amp;amp; objItem.SmtpTurnTimeout
    Wscript.Echo "SMTP Use Tcp Dns: " &amp;amp; objItem.SmtpUseTcpDns
    Wscript.Echo "Updated Default Domain: " &amp;amp; _
        objItem.UpdatedDefaultDomain
    Wscript.Echo "Updated FQDN: " &amp;amp; objItem.UpdatedFQDN
Next
</vb><vb name="List SMTP Sessions" n="649">' List SMTP Sessions


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsSmtpSessions")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List SMTP Virtual Directories" n="650">' List SMTP Virtual Directories


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery( _
    "Select * from IIsSmtpVirtualDir")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List SMTP Virtual Directory Properties" n="651">' List SMTP Virtual Directory Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpVirtualDirSetting")

For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp; _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; _
        objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access SSL: " &amp;amp; objItem.AccessSSL
    Wscript.Echo "Access SSL 128: " &amp;amp; objItem.AccessSSL128
    Wscript.Echo "Access SSL Flags: " &amp;amp; objItem.AccessSSLFlags
    Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
        objItem.AccessSSLMapCert
    Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
        objItem.AccessSSLNegotiateCert
    Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
        objItem.AccessSSLRequireCert
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Path: " &amp;amp; objItem.Path
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "UNC Password: " &amp;amp; objItem.UNCPassword
    Wscript.Echo "UNC User Name: " &amp;amp; objItem.UNCUserName
    Wscript.Echo "Win32 Error: " &amp;amp; objItem.Win32Error
Next
</vb><vb name="List SMTP Virtual Server Delivery Properties" n="652">' List SMTP Virtual Server Delivery Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpServiceSetting")

For Each objItem in colItems
    Wscript.Echo "SMTP Local Delay Expire Minutes: " &amp;amp; _
        objItem.SmtpLocalDelayExpireMinutes
    Wscript.Echo "SMTP Local NDR Expire Minutes: " &amp;amp; _
        objItem.SmtpLocalNDRExpireMinutes
    Wscript.Echo "SMTP Remote Delay Expire Minutes: " &amp;amp; _
        objItem.SmtpRemoteDelayExpireMinutes
    Wscript.Echo "SMTP Remote NDR Expire Minutes: " &amp;amp; _
        objItem.SmtpRemoteNDRExpireMinutes
    Wscript.Echo "SMTP Remote Progressive Retry: " &amp;amp; _
        objItem.SmtpRemoteProgressiveRetry
Next
</vb><vb name="List SMTP Virtual Server General Properties" n="653">' List SMTP Virtual Server General Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpServiceSetting")

For Each objItem in colItems
    Wscript.Echo "Connection Timeout: " &amp;amp; objItem.ConnectionTimeout
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List SMTP Virtual Server Message Properties" n="654">' List SMTP Virtual Server Message Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpServiceSetting")

 For Each objItem in colItems
    Wscript.Echo "Bad Mail Directory: " &amp;amp; objItem.BadMailDirectory
    Wscript.Echo "Maximum Batched Messages: " &amp;amp; _
        objItem.MaxBatchedMessages
    Wscript.Echo "Maximum Message Size: " &amp;amp; objItem.MaxMessageSize
    Wscript.Echo "Maximum Recipients: " &amp;amp; objItem.MaxRecipients
    Wscript.Echo "Maximum Session Size: " &amp;amp; objItem.MaxSessionSize
    Wscript.Echo "Send Ndr To: " &amp;amp; objItem.SendNdrTo
Next
</vb><vb name="List the SMTP Server Version" n="655">' List the SMTP Server Version


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsSmtpInfo")

For Each objItem in colItems
    Wscript.Echo "Major IIS Version Number: " &amp;amp; _
        objItem.MajorIIsVersionNumber
    Wscript.Echo "Minor IIS Version Number: " &amp;amp; _
        objItem.MinorIIsVersionNumber
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="Modify an SMTP Service Property Using ADSI" n="656">' Modify an SMTP Service Property Using ADSI


strComputer = "LocalHost"
 
Set objIIS = GetObject("IIS://" &amp;amp; strComputer &amp;amp; "/SMTPSVC")
objIIS.ServerComment = "This is an internal SMTP server."
objIIS.SetInfo
</vb><vb name="Modify SMTP Advanced Delivery Options" n="657">' Modify SMTP Advanced Delivery Options


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpServiceSetting") 

For Each objItem in colItems
    objItem.EnableReverseDnsLookup = False
    objItem.HopCount = 10
    objItem.MasqueradeDomain = "fabrikam.com"
    objItem.SmartHost = "smtp-server.fabrikam.com"
    objItem.SmartHostType = 1
    objItem.Put_
Next
</vb><vb name="Modify SMTP Authentication Properties" n="658">' Modify SMTP Authentication Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpServiceSetting")

For Each objItem in colItems
    objItem.AuthAnonymous = True
    objItem.AuthBasic = True
    objItem.AuthNTLM = True
    objItem.SaslLogonDomain = "fabrikam.com"
    objItem.Put_
Next
</vb><vb name="Modify SMTP Outbound Connection Properties" n="659">' Modify SMTP Outbound Connection Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpServiceSetting")

For Each objItem in colItems
    objItem.MaxOutConnections = 500
    objItem.MaxOutConnectionsPerDomain = 250
    objItem.RemoteSmtpPort = 25
    objItem.RemoteTimeout = 900
    objItem.Put_
Next
</vb><vb name="Modify SMTP Virtual Server Delivery Properties" n="660">' Modify SMTP Virtual Server Delivery Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpServiceSetting")

For Each objItem in colItems
    objItem.SmtpLocalDelayExpireMinutes = 1000
    objItem.SmtpLocalNDRExpireMinutes = 4000
    objItem.SmtpRemoteDelayExpireMinutes = 1000
    objItem.SmtpRemoteNDRExpireMinutes = 4000
    objItem.SmtpRemoteProgressiveRetry = "60,120,240"
    objItem.Put_
Next
</vb><vb name="Modify SMTP Virtual Server General Properties" n="661">' Modify SMTP Virtual Server General Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpServiceSetting")

For Each objItem in colItems
    objItem.ConnectionTimeout = 1200
    objItem.DontLog = True
    objItem.MaxConnections = 10000
    objItem.Put_
Next
</vb><vb name="Modify SMTP Virtual Server Message Properties" n="662">' Modify SMTP Virtual Server Message Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsSmtpServiceSetting")

 For Each objItem in colItems
    objItem.BadMailDirectory = "C:\Badmail"
    objItem.MaxBatchedMessages = 30
    objItem.MaxMessageSize = 500000
    objItem.MaxRecipients = 50
    objItem.MaxSessionSize = 1000000
    objItem.SendNdrTo = "email-admin@fabrikam.com"
    objItem.Put_
Next
</vb></dd>
			<dd name="Web Sites" code="web" desc="Sample scripts for managing Web sites on Internet Information Server 6.0."><vb name="Continue a Paused Web Server" n="663">' Continue a Paused Web Server


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebServer Where Name = " &amp;amp; _
        "'W3SVC/2142295254'")

For Each objItem in colItems
    objItem.Continue
Next
</vb><vb name="Create a New Web Site" n="664">' Create a New Web Site


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set objWebService = objWMIService.ExecQuery _
    ("Select * From IISWebService")

arrBindings = Array(0)
Set arrBindings(0) = _
    objWMIService.Get("ServerBinding").SpawnInstance_()
arrBindings(0).IP = "192.168.1.1"
arrBindings(0).Port = "8383"
arrBindings(0).Hostname = "atl-ws-01"

For Each objItem in objWebService
    objItem.CreateNewSite "Test Site", arrBindings, _
        "c:\inetpub\wwwroot"
Next
</vb><vb name="List Basic Web Site Properties" n="665">' List Basic Web Site Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")

For Each objItem in colItems
    Wscript.Echo "Allow Keep Alive: " &amp;amp; objItem.AllowKeepAlive
    Wscript.Echo "Connection Timeout: " &amp;amp; objItem.ConnectionTimeout
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Server Comment: " &amp;amp; objItem.ServerComment
Next
</vb><vb name="List Virtual Directories" n="666">' List Virtual Directories


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsWebVirtualDir")
 
For Each objItem in colItems
    Wscript.Echo "Application Isolated: " &amp;amp; objItem.AppIsolated
    Wscript.Echo "Application Package ID: " &amp;amp; objItem.AppPackageID
    Wscript.Echo "Application Package Name: " &amp;amp; objItem.AppPackageName
    Wscript.Echo "Application Root: " &amp;amp; objItem.AppRoot
    Wscript.Echo "Installation Date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List Virtual Directory Information" n="667">' List Virtual Directory Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebVirtualDirSetting")
 
For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp; _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access SSL: " &amp;amp; objItem.AccessSSL
    Wscript.Echo "Access SSL 128: " &amp;amp; objItem.AccessSSL128
    Wscript.Echo "Access SSL Flags: " &amp;amp; objItem.AccessSSLFlags
    Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
        objItem.AccessSSLMapCert
    Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
        objItem.AccessSSLNegotiateCert
    Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
        objItem.AccessSSLRequireCert
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Anonymous Password Sync: " &amp;amp; _
        objItem.AnonymousPasswordSync
    Wscript.Echo "Anonymous User Name: " &amp;amp; objItem.AnonymousUserName
    Wscript.Echo "Anonymous User Password: " &amp;amp; objItem.AnonymousUserPass
    Wscript.Echo "Application Allow Client Debug: " &amp;amp; _
        objItem.AppAllowClientDebug
    Wscript.Echo "Application Allow Debugging: " &amp;amp; _
        objItem.AppAllowDebugging
    Wscript.Echo "Application Friendly Name: " &amp;amp; objItem.AppFriendlyName
    Wscript.Echo "Application Oop Recover Limit: " &amp;amp; _
        objItem.AppOopRecoverLimit
    Wscript.Echo "Application Pool Id: " &amp;amp; objItem.AppPoolId
    Wscript.Echo "Application Wam Clsid: " &amp;amp; objItem.AppWamClsid
    Wscript.Echo "ASP Allow Out Of Process Components: " &amp;amp; _
        objItem.AspAllowOutOfProcComponents
    Wscript.Echo "ASP Allow Session State: " &amp;amp; _
        objItem.AspAllowSessionState
    Wscript.Echo "ASP Application Service Flags: " &amp;amp; _
        objItem.AspAppServiceFlags
    Wscript.Echo "ASP Buffering Limit: " &amp;amp; objItem.AspBufferingLimit
    Wscript.Echo "ASP Buffering On: " &amp;amp; objItem.AspBufferingOn
    Wscript.Echo "ASP Calc Line Number: " &amp;amp; objItem.AspCalcLineNumber
    Wscript.Echo "ASP Codepage: " &amp;amp; objItem.AspCodepage
    Wscript.Echo "ASP Disk Template Cache Directory: " &amp;amp; _
        objItem.AspDiskTemplateCacheDirectory
    Wscript.Echo "ASP Enable Application Restart: " &amp;amp; _
        objItem.AspEnableApplicationRestart
    Wscript.Echo "ASP Enable ASP Html Fallback: " &amp;amp; _
        objItem.AspEnableAspHtmlFallback
    Wscript.Echo "ASP Enable Chunked Encoding: " &amp;amp; _
        objItem.AspEnableChunkedEncoding
    Wscript.Echo "ASP Enable Parent Paths: " &amp;amp; _
        objItem.AspEnableParentPaths
    Wscript.Echo "ASP Enable Sxs: " &amp;amp; objItem.AspEnableSxs
    Wscript.Echo "ASP Enable Tracker: " &amp;amp; objItem.AspEnableTracker
    Wscript.Echo "ASP Enable Typelib Cache: " &amp;amp; _
        objItem.AspEnableTypelibCache
    Wscript.Echo "ASP Errors To NT Log: " &amp;amp; objItem.AspErrorsToNTLog
    Wscript.Echo "ASP Exception Catch Enable: " &amp;amp; _
        objItem.AspExceptionCatchEnable
    Wscript.Echo "ASP Execute In MTA: " &amp;amp; objItem.AspExecuteInMTA
    Wscript.Echo "ASP Keep Session ID Secure: " &amp;amp; _
        objItem.AspKeepSessionIDSecure
    Wscript.Echo "ASP LCID: " &amp;amp; objItem.AspLCID
    Wscript.Echo "ASP Log Error Requests: " &amp;amp; _
        objItem.AspLogErrorRequests
    Wscript.Echo "ASP Maximum Disk Template Cache Files: " &amp;amp; _
        objItem.AspMaxDiskTemplateCacheFiles
    Wscript.Echo "ASP Maximum Request Entity Allowed: " &amp;amp; _
        objItem.AspMaxRequestEntityAllowed
    Wscript.Echo "ASP Partition ID: " &amp;amp; objItem.AspPartitionID
    Wscript.Echo "ASP Processor Thread Maximum: " &amp;amp; _
        objItem.AspProcessorThreadMax
    Wscript.Echo "ASP Queue Connection Test Time: " &amp;amp; _
        objItem.AspQueueConnectionTestTime
    Wscript.Echo "ASP Queue Timeout: " &amp;amp; objItem.AspQueueTimeout
    Wscript.Echo "ASP Request Queue Maximum: " &amp;amp; _
        objItem.AspRequestQueueMax
    Wscript.Echo "AspRunOnEndAnonymously: " &amp;amp; _
        objItem.AspRunOnEndAnonymously
    Wscript.Echo "ASP Script Engine Cache Max: " &amp;amp; _
        objItem.AspScriptEngineCacheMax
    Wscript.Echo "ASP Script Error Message: " &amp;amp; _
        objItem.AspScriptErrorMessage
    Wscript.Echo "ASP Script Error Sent To Browser: " &amp;amp; _
        objItem.AspScriptErrorSentToBrowser
    Wscript.Echo "ASP Script File Cache Size: " &amp;amp; _
        objItem.AspScriptFileCacheSize
    Wscript.Echo "ASP Script Language: " &amp;amp; objItem.AspScriptLanguage
    Wscript.Echo "ASP Script Timeout: " &amp;amp; objItem.AspScriptTimeout
    Wscript.Echo "ASP Session Maximum: " &amp;amp; objItem.AspSessionMax
    Wscript.Echo "ASP Session Timeout: " &amp;amp; objItem.AspSessionTimeout
    Wscript.Echo "ASP Sxs Name: " &amp;amp; objItem.AspSxsName
    Wscript.Echo "ASP Track Threading Model: " &amp;amp; _
        objItem.AspTrackThreadingModel
    Wscript.Echo "ASP Use Partition: " &amp;amp; objItem.AspUsePartition
    Wscript.Echo "Authentication Anonymous: " &amp;amp; objItem.AuthAnonymous
    Wscript.Echo "Authentication Basic: " &amp;amp; objItem.AuthBasic
    Wscript.Echo "Authentication Flags: " &amp;amp; objItem.AuthFlags
    Wscript.Echo "Authentication MD5: " &amp;amp; objItem.AuthMD5
    Wscript.Echo "Authentication NTLM: " &amp;amp; objItem.AuthNTLM
    Wscript.Echo "Authentication Passport: " &amp;amp; objItem.AuthPassport
    Wscript.Echo "Authentication Persistence: " &amp;amp; _
        objItem.AuthPersistence
    Wscript.Echo "Authentication Persist Single Request: " &amp;amp; _
        objItem.AuthPersistSingleRequest
    Wscript.Echo "Az Enable: " &amp;amp; objItem.AzEnable
    Wscript.Echo "Az Impersonation Level: " &amp;amp; objItem.AzImpersonationLevel
    Wscript.Echo "Az Scope Name: " &amp;amp; objItem.AzScopeName
    Wscript.Echo "Az Store Name: " &amp;amp; objItem.AzStoreName
    Wscript.Echo "BITS Allow Overwrites: " &amp;amp; objItem.BITSAllowOverwrites
    Wscript.Echo "BITS Cleanup Work Item Key: " &amp;amp; _
        objItem.BITSCleanupWorkItemKey
    Wscript.Echo "BITS Host ID: " &amp;amp; objItem.BITSHostId
    Wscript.Echo "BITS Host ID Fallback Timeout: " &amp;amp; _
        objItem.BITSHostIdFallbackTimeout
    Wscript.Echo "BITS Maximum Upload Size: " &amp;amp; _
        objItem.BITSMaximumUploadSize
    Wscript.Echo "BITS Server Notification Type: " &amp;amp; _
        objItem.BITSServerNotificationType
    Wscript.Echo "BITS Server Notification URL: " &amp;amp; _
        objItem.BITSServerNotificationURL
    Wscript.Echo "BITS Session Directory: " &amp;amp; _
        objItem.BITSSessionDirectory
    Wscript.Echo "BITS Session Timeout: " &amp;amp; objItem.BITSSessionTimeout
    Wscript.Echo "BITS Upload Enabled: " &amp;amp; objItem.BITSUploadEnabled
    Wscript.Echo "BITS Upload Metadata Version: " &amp;amp; _
        objItem.BITSUploadMetadataVersion
    Wscript.Echo "Cache Control Custom: " &amp;amp; objItem.CacheControlCustom
    Wscript.Echo "Cache Control Maximum Age: " &amp;amp; _
        objItem.CacheControlMaxAge
    Wscript.Echo "Cache Control No Cache: " &amp;amp; objItem.CacheControlNoCache
    Wscript.Echo "Cache ISAPI: " &amp;amp; objItem.CacheISAPI
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "CGI Timeout: " &amp;amp; objItem.CGITimeout
    Wscript.Echo "Content Indexed: " &amp;amp; objItem.ContentIndexed
    Wscript.Echo "Create CGI With New Console: " &amp;amp; _
        objItem.CreateCGIWithNewConsole
    Wscript.Echo "Create Process As User: " &amp;amp; objItem.CreateProcessAsUser
    Wscript.Echo "Default Doc: " &amp;amp; objItem.DefaultDoc
    Wscript.Echo "Default Doc Footer: " &amp;amp; objItem.DefaultDocFooter
    Wscript.Echo "Default Logon Domain: " &amp;amp; objItem.DefaultLogonDomain
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Directory Browse Flags: " &amp;amp; objItem.DirBrowseFlags
    Wscript.Echo "Directory Browse Show Date: " &amp;amp; objItem.DirBrowseShowDate
    Wscript.Echo "Directory Browse Show Extension: " &amp;amp; _
        objItem.DirBrowseShowExtension
    Wscript.Echo "Directory Browse Show Long Date: " &amp;amp; _
        objItem.DirBrowseShowLongDate
    Wscript.Echo "Directory Browse Show Size: " &amp;amp; objItem.DirBrowseShowSize
    Wscript.Echo "Directory Browse Show Time: " &amp;amp; objItem.DirBrowseShowTime
    Wscript.Echo "Disable Static File Cache: " &amp;amp; _
        objItem.DisableStaticFileCache
    Wscript.Echo "Do Dynamic Compression: " &amp;amp; objItem.DoDynamicCompression
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Do Static Compression: " &amp;amp; objItem.DoStaticCompression
    Wscript.Echo "Enable Default Doc: " &amp;amp; objItem.EnableDefaultDoc
    Wscript.Echo "Enable Directory Browsing: " &amp;amp; objItem.EnableDirBrowsing
    Wscript.Echo "Enable Doc Footer: " &amp;amp; objItem.EnableDocFooter
    Wscript.Echo "Enable Reverse Dns: " &amp;amp; objItem.EnableReverseDns
    Wscript.Echo "FrontPage Web: " &amp;amp; objItem.FrontPageWeb
    Wscript.Echo "Http Expires: " &amp;amp; objItem.HttpExpires
    Wscript.Echo "Http Redirect: " &amp;amp; objItem.HttpRedirect
    Wscript.Echo "Logon Method: " &amp;amp; objItem.LogonMethod
    Wscript.Echo "Maximum Request Entity Allowed: " &amp;amp; _
        objItem.MaxRequestEntityAllowed
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "NT Authentication Providers: " &amp;amp; _
        objItem.NTAuthenticationProviders
    Wscript.Echo "Passport Require AD Mapping: " &amp;amp; _
        objItem.PassportRequireADMapping
    Wscript.Echo "Path: " &amp;amp; objItem.Path
    Wscript.Echo "Pool Idc Timeout: " &amp;amp; objItem.PoolIdcTimeout
    Wscript.Echo "Realm: " &amp;amp; objItem.Realm
    For Each strHeader in objItem.RedirectHeaders
        Wscript.Echo "Redirect Headers: " &amp;amp;  strHeader
    Next
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Shutdown Time Limit: " &amp;amp; objItem.ShutdownTimeLimit
    Wscript.Echo "SSI Exec Disable: " &amp;amp; objItem.SSIExecDisable
    Wscript.Echo "UNC Password: " &amp;amp; objItem.UNCPassword
    Wscript.Echo "UNC User Name: " &amp;amp; objItem.UNCUserName
    Wscript.Echo "Upload Read Ahead Size: " &amp;amp; objItem.UploadReadAheadSize
    Wscript.Echo "Use Digest SSP: " &amp;amp; objItem.UseDigestSSP
    Wscript.Echo "Win32 Error: " &amp;amp; objItem.Win32Error
Next
</vb><vb name="List Web Directories" n="668">' List Web Directories


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsWebDirectory")
 
For Each objItem in colItems
    Wscript.Echo "Application Isolated: " &amp;amp; objItem.AppIsolated
    Wscript.Echo "Application Package ID: " &amp;amp; objItem.AppPackageID
    Wscript.Echo "Application Package Name: " &amp;amp; objItem.AppPackageName
    Wscript.Echo "Application Root: " &amp;amp; objItem.AppRoot
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Status: " &amp;amp; objItem.Status
Next
</vb><vb name="List Web Directory Property Information" n="669">' List Web Directory Property Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebDirectorySetting")
 
For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp; _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; _
        objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; _
        objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access SSL: " &amp;amp; objItem.AccessSSL
    Wscript.Echo "Access SSL 128: " &amp;amp; objItem.AccessSSL128
    Wscript.Echo "Access SSL Flags: " &amp;amp; objItem.AccessSSLFlags
    Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
        objItem.AccessSSLMapCert
    Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
        objItem.AccessSSLNegotiateCert
    Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
        objItem.AccessSSLRequireCert
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Anonymous Password Sync: " &amp;amp; _
        objItem.AnonymousPasswordSync
    Wscript.Echo "Anonymous User Name: " &amp;amp; objItem.AnonymousUserName
    Wscript.Echo "Anonymous User Password: " &amp;amp; o_
        bjItem.AnonymousUserPass
    Wscript.Echo "Application Allow Client Debug: " &amp;amp; _
        objItem.AppAllowClientDebug
    Wscript.Echo "Application Allow Debugging: " &amp;amp; _
        objItem.AppAllowDebugging
    Wscript.Echo "Application Friendly Name: " &amp;amp; _
        objItem.AppFriendlyName
    Wscript.Echo "Application Oop Recover Limit: " &amp;amp; _
        objItem.AppOopRecoverLimit
    Wscript.Echo "Application Pool ID: " &amp;amp; objItem.AppPoolId
    Wscript.Echo "Application Wam Clsid: " &amp;amp; objItem.AppWamClsid
    Wscript.Echo "ASP Allow Out Of Process Components: " &amp;amp; _
        objItem.AspAllowOutOfProcComponents
    Wscript.Echo "ASP Allow Session State: " &amp;amp; _
        objItem.AspAllowSessionState
    Wscript.Echo "ASP Application Service Flags: " &amp;amp; _
        objItem.AspAppServiceFlags
    Wscript.Echo "ASP Buffering Limit: " &amp;amp; objItem.AspBufferingLimit
    Wscript.Echo "ASP Buffering On: " &amp;amp; objItem.AspBufferingOn
    Wscript.Echo "ASP Calc Line Number: " &amp;amp; objItem.AspCalcLineNumber
    Wscript.Echo "ASP Codepage: " &amp;amp; objItem.AspCodepage
    Wscript.Echo "ASP Disk Template Cache Directory: " &amp;amp; _
        objItem.AspDiskTemplateCacheDirectory
    Wscript.Echo "ASP Enable Application Restart: " &amp;amp; _
        objItem.AspEnableApplicationRestart
    Wscript.Echo "ASP Enable ASP Html Fallback: " &amp;amp; _
        objItem.AspEnableAspHtmlFallback
    Wscript.Echo "ASP Enable Chunked Encoding: " &amp;amp; _
        objItem.AspEnableChunkedEncoding
    Wscript.Echo "ASP Enable Parent Paths: " &amp;amp; _
        objItem.AspEnableParentPaths
    Wscript.Echo "ASP Enable Sxs: " &amp;amp; objItem.AspEnableSxs
    Wscript.Echo "ASP Enable Tracker: " &amp;amp; objItem.AspEnableTracker
    Wscript.Echo "ASP Enable Typelib Cache: " &amp;amp; _
        objItem.AspEnableTypelibCache
    Wscript.Echo "ASP Errors To NT Log: " &amp;amp; objItem.AspErrorsToNTLog
    Wscript.Echo "ASP Exception Catch Enable: " &amp;amp; _
        objItem.AspExceptionCatchEnable
    Wscript.Echo "ASP Execute In MTA: " &amp;amp; objItem.AspExecuteInMTA
    Wscript.Echo "ASP Keep Session ID Secure: " &amp;amp; o_
        bjItem.AspKeepSessionIDSecure
    Wscript.Echo "ASP LCID: " &amp;amp; objItem.AspLCID
    Wscript.Echo "ASP Log Error Requests: " &amp;amp; _
        objItem.AspLogErrorRequests
    Wscript.Echo "ASP Max Disk Template Cache Files: " &amp;amp; _
        objItem.AspMaxDiskTemplateCacheFiles
    Wscript.Echo "ASP Max Request Entity Allowed: " &amp;amp; _
        objItem.AspMaxRequestEntityAllowed
    Wscript.Echo "ASP Partition ID: " &amp;amp; objItem.AspPartitionID
    Wscript.Echo "ASP Processor Thread Max: " &amp;amp; objItem.AspProcessorThreadMax
    Wscript.Echo "ASP Queue Connection Test Time: " &amp;amp; _
        objItem.AspQueueConnectionTestTime
    Wscript.Echo "ASP Queue Timeout: " &amp;amp; objItem.AspQueueTimeout
    Wscript.Echo "ASP Request Queue Max: " &amp;amp; objItem.AspRequestQueueMax
    Wscript.Echo "ASP Run On End Anonymously: " &amp;amp; _
        objItem.AspRunOnEndAnonymously
    Wscript.Echo "ASP Script Engine Cache Maximum: " &amp;amp; _
        objItem.AspScriptEngineCacheMax
    Wscript.Echo "ASP Script Error Message: " &amp;amp; objItem.AspScriptErrorMessage
    Wscript.Echo "ASP Script Error Sent To Browser: " &amp;amp; _
        objItem.AspScriptErrorSentToBrowser
    Wscript.Echo "ASP Script File Cache Size: " &amp;amp; _
        objItem.AspScriptFileCacheSize
    Wscript.Echo "ASP Script Language: " &amp;amp; objItem.AspScriptLanguage
    Wscript.Echo "ASP Script Timeout: " &amp;amp; objItem.AspScriptTimeout
    Wscript.Echo "ASP Session Maximum: " &amp;amp; objItem.AspSessionMax
    Wscript.Echo "ASP Session Timeout: " &amp;amp; objItem.AspSessionTimeout
    Wscript.Echo "ASP Sxs Name: " &amp;amp; objItem.AspSxsName
    Wscript.Echo "ASP Track Threading Model: " &amp;amp; _
        objItem.AspTrackThreadingModel
    Wscript.Echo "ASP Use Partition: " &amp;amp; objItem.AspUsePartition
    Wscript.Echo "Authentication Anonymous: " &amp;amp; objItem.AuthAnonymous
    Wscript.Echo "Authentication Basic: " &amp;amp; objItem.AuthBasic
    Wscript.Echo "Authentication Flags: " &amp;amp; objItem.AuthFlags
    Wscript.Echo "Authentication MD5: " &amp;amp; objItem.AuthMD5
    Wscript.Echo "Authentication NTLM: " &amp;amp; objItem.AuthNTLM
    Wscript.Echo "Authentication Passport: " &amp;amp; objItem.AuthPassport
    Wscript.Echo "Authentication Persistence: " &amp;amp; objItem.AuthPersistence
    Wscript.Echo "Authentication PersistSingleRequest: " &amp;amp; _
        objItem.AuthPersistSingleRequest
    Wscript.Echo "Az Enable: " &amp;amp; objItem.AzEnable
    Wscript.Echo "Az Impersonation Level: " &amp;amp; objItem.AzImpersonationLevel
    Wscript.Echo "Az Scope Name: " &amp;amp; objItem.AzScopeName
    Wscript.Echo "Az Store Name: " &amp;amp; objItem.AzStoreName
    Wscript.Echo "Cache Control Custom: " &amp;amp; objItem.CacheControlCustom
    Wscript.Echo "Cache Control Maximum Age: " &amp;amp; objItem.CacheControlMaxAge
    Wscript.Echo "Cache Control No Cache: " &amp;amp; objItem.CacheControlNoCache
    Wscript.Echo "Cache ISAPI: " &amp;amp; objItem.CacheISAPI
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "CGI Timeout: " &amp;amp; objItem.CGITimeout
    Wscript.Echo "Content Indexed: " &amp;amp; objItem.ContentIndexed
    Wscript.Echo "Create CGI With New Console: " &amp;amp; _
        objItem.CreateCGIWithNewConsole
    Wscript.Echo "Create Process As User: " &amp;amp; objItem.CreateProcessAsUser
    Wscript.Echo "Default Doc: " &amp;amp; objItem.DefaultDoc
    Wscript.Echo "Default Doc Footer: " &amp;amp; objItem.DefaultDocFooter
    Wscript.Echo "Default Logon Domain: " &amp;amp; objItem.DefaultLogonDomain
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Directory Browse Flags: " &amp;amp; objItem.DirBrowseFlags
    Wscript.Echo "Directory Browse Show Date: " &amp;amp; _
        objItem.DirBrowseShowDate
    Wscript.Echo "Directory Browse Show Extension: " &amp;amp; _
        objItem.DirBrowseShowExtension
    Wscript.Echo "Directory Browse Show Long Date: " &amp;amp; _
        objItem.DirBrowseShowLongDate
    Wscript.Echo "Directory Browse Show Size: " &amp;amp; objItem.DirBrowseShowSize
    Wscript.Echo "Directory Browse Show Time: " &amp;amp; objItem.DirBrowseShowTime
    Wscript.Echo "Disable Static File Cache: " &amp;amp; _
        objItem.DisableStaticFileCache
    Wscript.Echo "Do Dynamic Compression: " &amp;amp; objItem.DoDynamicCompression
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Do Static Compression: " &amp;amp; objItem.DoStaticCompression
    Wscript.Echo "Enable Default Doc: " &amp;amp; objItem.EnableDefaultDoc
    Wscript.Echo "Enable Dir Browsing: " &amp;amp; objItem.EnableDirBrowsing
    Wscript.Echo "Enable Doc Footer: " &amp;amp; objItem.EnableDocFooter
    Wscript.Echo "Enable Reverse DNS: " &amp;amp; objItem.EnableReverseDns
    Wscript.Echo "FrontPage Web: " &amp;amp; objItem.FrontPageWeb
    Wscript.Echo "Http Expires: " &amp;amp; objItem.HttpExpires
    Wscript.Echo "Http Redirect: " &amp;amp; objItem.HttpRedirect
    Wscript.Echo "Logon Method: " &amp;amp; objItem.LogonMethod
    Wscript.Echo "Maximum Request Entity Allowed: " &amp;amp; _
        objItem.MaxRequestEntityAllowed
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "NT Authentication Providers: " &amp;amp; _
        objItem.NTAuthenticationProviders
    Wscript.Echo "Passport Require AD Mapping: " &amp;amp; _
        objItem.PassportRequireADMapping
    Wscript.Echo "Pool Idc Timeout: " &amp;amp; objItem.PoolIdcTimeout
    Wscript.Echo "Realm: " &amp;amp; objItem.Realm
    For Each strHeader in objItem.RedirectHeaders
        Wscript.Echo "Redirect Headers: " &amp;amp; strHeader
    Next
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Shutdown TimeL imit: " &amp;amp; objItem.ShutdownTimeLimit
    Wscript.Echo "SSI Exec Disable: " &amp;amp; objItem.SSIExecDisable
    Wscript.Echo "Upload Read Ahead Size: " &amp;amp; _
        objItem.UploadReadAheadSize
    Wscript.Echo "Use Digest SSP: " &amp;amp; objItem.UseDigestSSP
Next
</vb><vb name="List Web File Property Information" n="670">' List Web File Property Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsWebFileSetting")
 
For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory : " &amp;amp; _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access SSL: " &amp;amp; objItem.AccessSSL
    Wscript.Echo "Access SSL 128: " &amp;amp; objItem.AccessSSL128
    Wscript.Echo "Access SSL Flags: " &amp;amp; objItem.AccessSSLFlags
    Wscript.Echo "Access SSL Map Certificate: " &amp;amp; objItem.AccessSSLMapCert
    Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
        objItem.AccessSSLNegotiateCert
    Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
        objItem.AccessSSLRequireCert
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Anonymous Password Sync: " &amp;amp; _
        objItem.AnonymousPasswordSync
    Wscript.Echo "Anonymous User Name: " &amp;amp; objItem.AnonymousUserName
    Wscript.Echo "Anonymous User Password: " &amp;amp; objItem.AnonymousUserPass
    Wscript.Echo "Authentication Anonymous: " &amp;amp; objItem.AuthAnonymous
    Wscript.Echo "Authentication Basic: " &amp;amp; objItem.AuthBasic
    Wscript.Echo "Authentication Flags: " &amp;amp; objItem.AuthFlags
    Wscript.Echo "Authentication MD5: " &amp;amp; objItem.AuthMD5
    Wscript.Echo "Authentication NTLM: " &amp;amp; objItem.AuthNTLM
    Wscript.Echo "AuthenticationPassport: " &amp;amp; objItem.AuthPassport
    Wscript.Echo "Authentication Persistence: " &amp;amp; objItem.AuthPersistence
    Wscript.Echo "Authentication Persist Single Request: " &amp;amp; _
        objItem.AuthPersistSingleRequest
    Wscript.Echo "Az Enable: " &amp;amp; objItem.AzEnable
    Wscript.Echo "Az Impersonation Level: " &amp;amp; objItem.AzImpersonationLevel
    Wscript.Echo "Az Scope Name: " &amp;amp; objItem.AzScopeName
    Wscript.Echo "Az Store Name: " &amp;amp; objItem.AzStoreName
    Wscript.Echo "Cache Control Custom: " &amp;amp; objItem.CacheControlCustom
    Wscript.Echo "Cache Control Maximum Age: " &amp;amp; objItem.CacheControlMaxAge
    Wscript.Echo "Cache Control No Cache: " &amp;amp; objItem.CacheControlNoCache
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "CGI Timeout: " &amp;amp; objItem.CGITimeout
    Wscript.Echo "Create CGI With New Console: " &amp;amp; _
        objItem.CreateCGIWithNewConsole
    Wscript.Echo "Create Process As User: " &amp;amp; objItem.CreateProcessAsUser
    Wscript.Echo "Default Doc Footer: " &amp;amp; objItem.DefaultDocFooter
    Wscript.Echo "Default Logon Domain: " &amp;amp; objItem.DefaultLogonDomain
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Disable Static File Cache: " &amp;amp; _
        objItem.DisableStaticFileCache
    Wscript.Echo "Do Dynamic Compression: " &amp;amp; objItem.DoDynamicCompression
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Do Static Compression: " &amp;amp; objItem.DoStaticCompression
    Wscript.Echo "Enable Doc Footer: " &amp;amp; objItem.EnableDocFooter
    Wscript.Echo "Enable Reverse Dns: " &amp;amp; objItem.EnableReverseDns
    Wscript.Echo "Http Expires: " &amp;amp; objItem.HttpExpires
    Wscript.Echo "Http Redirect: " &amp;amp; objItem.HttpRedirect
    Wscript.Echo "Logon Method: " &amp;amp; objItem.LogonMethod
    Wscript.Echo "Maximum Request Entity Allowed: " &amp;amp; _
        objItem.MaxRequestEntityAllowed
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "NT Authentication Providers: " &amp;amp; _
        objItem.NTAuthenticationProviders
    Wscript.Echo "Passport Require AD Mapping: " &amp;amp; _
        objItem.PassportRequireADMapping
    Wscript.Echo "Pool Idc Timeout: " &amp;amp; objItem.PoolIdcTimeout
    Wscript.Echo "Realm: " &amp;amp; objItem.Realm
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "SSI Exec Disable: " &amp;amp; objItem.SSIExecDisable
    Wscript.Echo "Upload Read Ahead Size: " &amp;amp; _
        objItem.UploadReadAheadSize
    Wscript.Echo "Use Digest SSP: " &amp;amp; objItem.UseDigestSSP
    Wscript.Echo
Next
</vb><vb name="List Web Files" n="671">' List Web Files


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsWebFile")
 
For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
Next
</vb><vb name="List Web Server Configuration Information" n="672">' List Web Server Configuration Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsWebInfoSetting")
 
For Each objItem in colItems
    Wscript.Echo "Admin Server: " &amp;amp; objItem.AdminServer
    Wscript.Echo "Log Module List: " &amp;amp; objItem.LogModuleList
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Server Configuration Auto Password Sync: " &amp;amp; _
        objItem.ServerConfigAutoPWSync
    Wscript.Echo "Server Configuration Flags: " &amp;amp; _
        objItem.ServerConfigFlags
    Wscript.Echo "Server Configuration SSL 128: " &amp;amp; _
        objItem.ServerConfigSSL128
    Wscript.Echo "Server Configuration SSL 40: " &amp;amp; _
        objItem.ServerConfigSSL40
    Wscript.Echo "Server Configuration SSL Allow Encryption: " &amp;amp; _
        objItem.ServerConfigSSLAllowEncrypt
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
Next
</vb><vb name="List Web Server Information" n="673">' List Web Server Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsWebServer")
 
For Each objItem in colItems
    Wscript.Echo "Application Isolated: " &amp;amp; objItem.AppIsolated
    Wscript.Echo "Application Package ID: " &amp;amp; objItem.AppPackageID
    Wscript.Echo "Application Package Name: " &amp;amp; objItem.AppPackageName
    Wscript.Echo "Application Root: " &amp;amp; objItem.AppRoot
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Installation Date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Server State: " &amp;amp; objItem.ServerState
    Wscript.Echo "Status: " &amp;amp; objItem.Status
Next
</vb><vb name="List Web Server Setting Information" n="674">' List Web Server Setting Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsWebServerSetting")
 
For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp; _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access SSL: " &amp;amp; objItem.AccessSSL
    Wscript.Echo "Access SSL 128: " &amp;amp; objItem.AccessSSL128
    Wscript.Echo "Access SSL Flags: " &amp;amp; objItem.AccessSSLFlags
    Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
        objItem.AccessSSLMapCert
    Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
        objItem.AccessSSLNegotiateCert
    Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
        objItem.AccessSSLRequireCert
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Allow Keep Alive: " &amp;amp; objItem.AllowKeepAlive
    Wscript.Echo "Allow Path Information For Script Mappings: " &amp;amp; _
        objItem.AllowPathInfoForScriptMappings
    Wscript.Echo "Anonymous Password Sync: " &amp;amp; _
        objItem.AnonymousPasswordSync
    Wscript.Echo "Anonymous User Name: " &amp;amp; objItem.AnonymousUserName
    Wscript.Echo "Anonymous User Password: " &amp;amp; objItem.AnonymousUserPass
    Wscript.Echo "Applocation Allow Client Debug: " &amp;amp; _
        objItem.AppAllowClientDebug
    Wscript.Echo "Application Allow Debugging: " &amp;amp; _
        objItem.AppAllowDebugging
    Wscript.Echo "Application Friendly Name: " &amp;amp; objItem.AppFriendlyName
    Wscript.Echo "Application Oop Recover Limit: " &amp;amp; _
        objItem.AppOopRecoverLimit
    Wscript.Echo "Application Pool Id: " &amp;amp; objItem.AppPoolId
    Wscript.Echo "Application Wam Clsid: " &amp;amp; objItem.AppWamClsid
    Wscript.Echo "ASP Allow Out Of Process Components: " &amp;amp; _
        objItem.AspAllowOutOfProcComponents
    Wscript.Echo "ASP Allow Session State: " &amp;amp; _
        objItem.AspAllowSessionState
    Wscript.Echo "ASP Application Service Flags: " &amp;amp; _
        objItem.AspAppServiceFlags
    Wscript.Echo "ASP Buffering Limit: " &amp;amp; objItem.AspBufferingLimit
    Wscript.Echo "ASP Buffering On: " &amp;amp; objItem.AspBufferingOn
    Wscript.Echo "ASP Calc Line Number: " &amp;amp; objItem.AspCalcLineNumber
    Wscript.Echo "ASP Codepage: " &amp;amp; objItem.AspCodepage
    Wscript.Echo "ASP Disk Template Cache Directory: " &amp;amp; _
        objItem.AspDiskTemplateCacheDirectory
    Wscript.Echo "ASP Enable Application Restart: " &amp;amp; _
        objItem.AspEnableApplicationRestart
    Wscript.Echo "ASP Enable ASP Html Fallback: " &amp;amp; _
        objItem.AspEnableAspHtmlFallback
    Wscript.Echo "ASP Enable Chunked Encoding: " &amp;amp; o_
        bjItem.AspEnableChunkedEncoding
    Wscript.Echo "ASP Enable Parent Paths: " &amp;amp; _
        objItem.AspEnableParentPaths
    Wscript.Echo "ASP Enable Sxs: " &amp;amp; objItem.AspEnableSxs
    Wscript.Echo "ASP Enable Tracker: " &amp;amp; objItem.AspEnableTracker
    Wscript.Echo "ASP Enable Typelib Cache: " &amp;amp; _
        objItem.AspEnableTypelibCache
    Wscript.Echo "ASP Errors To NT Log: " &amp;amp; objItem.AspErrorsToNTLog
    Wscript.Echo "ASP Exception Catch Enable: " &amp;amp; _
        objItem.AspExceptionCatchEnable
    Wscript.Echo "ASP Execute In MTA: " &amp;amp; objItem.AspExecuteInMTA
    Wscript.Echo "ASP Keep Session ID Secure: " &amp;amp; _
        objItem.AspKeepSessionIDSecure
    Wscript.Echo "ASP LCID: " &amp;amp; objItem.AspLCID
    Wscript.Echo "ASP Log Error Requests: " &amp;amp; _
        objItem.AspLogErrorRequests
    Wscript.Echo "ASP Maximum Disk Template Cache Files: " &amp;amp; _
        objItem.AspMaxDiskTemplateCacheFiles
    Wscript.Echo "ASP Maximum Request Entity Allowed: " &amp;amp; _
        objItem.AspMaxRequestEntityAllowed
    Wscript.Echo "ASP Partition ID: " &amp;amp; objItem.AspPartitionID
    Wscript.Echo "ASP Processor Thread Maximum: " &amp;amp; _
        objItem.AspProcessorThreadMax
    Wscript.Echo "ASP Queue Connection Test Time: " &amp;amp; _
        objItem.AspQueueConnectionTestTime
    Wscript.Echo "ASP Queue Timeout: " &amp;amp; objItem.AspQueueTimeout
    Wscript.Echo "ASP Request Queue Maximum: " &amp;amp; _
        objItem.AspRequestQueueMax
    Wscript.Echo "ASP Run OnEnd Anonymously: " &amp;amp; _
        objItem.AspRunOnEndAnonymously
    Wscript.Echo "ASP Script Engine Cache Maximum: " &amp;amp; _
        objItem.AspScriptEngineCacheMax
    Wscript.Echo "ASP Script Error Message: " &amp;amp; _
        objItem.AspScriptErrorMessage
    Wscript.Echo "ASP Script Error Sent To Browser: " &amp;amp; _
        objItem.AspScriptErrorSentToBrowser
    Wscript.Echo "ASP Script File Cache Size: " &amp;amp; _
        objItem.AspScriptFileCacheSize
    Wscript.Echo "ASP Script Language: " &amp;amp; objItem.AspScriptLanguage
    Wscript.Echo "ASP Script Timeout: " &amp;amp; objItem.AspScriptTimeout
    Wscript.Echo "ASP Session Maximum: " &amp;amp; objItem.AspSessionMax
    Wscript.Echo "ASP Session Timeout: " &amp;amp; objItem.AspSessionTimeout
    Wscript.Echo "ASP Sxs Name: " &amp;amp; objItem.AspSxsName
    Wscript.Echo "ASP Track Threading Model: " &amp;amp; _
        objItem.AspTrackThreadingModel
    Wscript.Echo "ASP Use Partition: " &amp;amp; objItem.AspUsePartition
    Wscript.Echo "Authentication Advanced Notify Disable: " &amp;amp; _
        objItem.AuthAdvNotifyDisable
    Wscript.Echo "Authentication Anonymous: " &amp;amp; objItem.AuthAnonymous
    Wscript.Echo "Authentication Basic: " &amp;amp; objItem.AuthBasic
    Wscript.Echo "Authentication Change Disable: " &amp;amp; _
        objItem.AuthChangeDisable
    Wscript.Echo "Authentication Change Unsecure: " &amp;amp; _
        objItem.AuthChangeUnsecure
    Wscript.Echo "Authentication Flags: " &amp;amp; objItem.AuthFlags
    Wscript.Echo "Authentication MD5: " &amp;amp; objItem.AuthMD5
    Wscript.Echo "Authentication NTLM: " &amp;amp; objItem.AuthNTLM
    Wscript.Echo "Authentication Passport: " &amp;amp; objItem.AuthPassport
    Wscript.Echo "Authentication Persistence: " &amp;amp; objItem.AuthPersistence
    Wscript.Echo "Authentication PersistSingleRequest: " &amp;amp; _
        objItem.AuthPersistSingleRequest
    Wscript.Echo "Az Enable: " &amp;amp; objItem.AzEnable
    Wscript.Echo "Az Impersonation Level: " &amp;amp; objItem.AzImpersonationLevel
    Wscript.Echo "Az Scope Name: " &amp;amp; objItem.AzScopeName
    Wscript.Echo "Az Store Name: " &amp;amp; objItem.AzStoreName
    Wscript.Echo "Cache Control Custom: " &amp;amp; objItem.CacheControlCustom
    Wscript.Echo "Cache Control Maximum Age: " &amp;amp; objItem.CacheControlMaxAge
    Wscript.Echo "Cache Control No Cache: " &amp;amp; objItem.CacheControlNoCache
    Wscript.Echo "Cache ISAPI: " &amp;amp; objItem.CacheISAPI
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Certifcate Check Mode: " &amp;amp; objItem.CertCheckMode
    Wscript.Echo "CGI Timeout: " &amp;amp; objItem.CGITimeout
    Wscript.Echo "Cluster Enabled: " &amp;amp; objItem.ClusterEnabled
    Wscript.Echo "Connection Timeout: " &amp;amp; objItem.ConnectionTimeout
    Wscript.Echo "Content Indexed: " &amp;amp; objItem.ContentIndexed
    Wscript.Echo "Create CGI With New Console: " &amp;amp; _
        objItem.CreateCGIWithNewConsole
    Wscript.Echo "Create Process As User: " &amp;amp; objItem.CreateProcessAsUser
    Wscript.Echo "Default Doc: " &amp;amp; objItem.DefaultDoc
    Wscript.Echo "Default Doc Footer: " &amp;amp; objItem.DefaultDocFooter
    Wscript.Echo "Default Logon Domain: " &amp;amp; objItem.DefaultLogonDomain
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Directory Browse Flags: " &amp;amp; objItem.DirBrowseFlags
    Wscript.Echo "Directory Browse Show Date: " &amp;amp; objItem.DirBrowseShowDate
    Wscript.Echo "Directory Browse Show Extension: " &amp;amp; _
        objItem.DirBrowseShowExtension
    Wscript.Echo "Directory Browse Show Long Date: " &amp;amp; _
        objItem.DirBrowseShowLongDate
    Wscript.Echo "Directory Browse Show Size: " &amp;amp; objItem.DirBrowseShowSize
    Wscript.Echo "Directory Browse Show Time: " &amp;amp; objItem.DirBrowseShowTime
    Wscript.Echo "Disable Socket Pooling: " &amp;amp; objItem.DisableSocketPooling
    Wscript.Echo "Disable Static File Cache: " &amp;amp; _
        objItem.DisableStaticFileCache
    Wscript.Echo "Do Dynamic Compression: " &amp;amp; objItem.DoDynamicCompression
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Do Static Compression: " &amp;amp; objItem.DoStaticCompression
    Wscript.Echo "Enable Default Doc: " &amp;amp; objItem.EnableDefaultDoc
    Wscript.Echo "Enable Dir Browsing: " &amp;amp; objItem.EnableDirBrowsing
    Wscript.Echo "Enable Doc Footer: " &amp;amp; objItem.EnableDocFooter
    Wscript.Echo "Enable Reverse DNS: " &amp;amp; objItem.EnableReverseDns
    Wscript.Echo "FrontPage Web: " &amp;amp; objItem.FrontPageWeb
    Wscript.Echo "Http Expires: " &amp;amp; objItem.HttpExpires
    Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
        objItem.LogExtFileBytesRecv
    Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; objItem.LogExtFileBytesSent
    Wscript.Echo "Log Ext File Client IP: " &amp;amp; objItem.LogExtFileClientIp
    Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
        objItem.LogExtFileComputerName
    Wscript.Echo "Log Ext File Cookie: " &amp;amp; objItem.LogExtFileCookie
    Wscript.Echo "Log Ext File Date: " &amp;amp; objItem.LogExtFileDate
    Wscript.Echo "Log Ext File Flags: " &amp;amp; objItem.LogExtFileFlags
    Wscript.Echo "Log Ext File Host: " &amp;amp; objItem.LogExtFileHost
    Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
        objItem.LogExtFileHttpStatus
    Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
        objItem.LogExtFileHttpSubStatus
    Wscript.Echo "Log Ext File Method: " &amp;amp; objItem.LogExtFileMethod
    Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
        objItem.LogExtFileProtocolVersion
    Wscript.Echo "Log Ext File Referer: " &amp;amp; objItem.LogExtFileReferer
    Wscript.Echo "Log Ext File Server IP: " &amp;amp; objItem.LogExtFileServerIp
    Wscript.Echo "Log Ext File Server Port: " &amp;amp; objItem.LogExtFileServerPort
    Wscript.Echo "Log Ext File Site Name: " &amp;amp; objItem.LogExtFileSiteName
    Wscript.Echo "Log Ext File Time: " &amp;amp; objItem.LogExtFileTime
    Wscript.Echo "Log Ext File Time Taken: " &amp;amp; objItem.LogExtFileTimeTaken
    Wscript.Echo "Log Ext File URI Query: " &amp;amp; objItem.LogExtFileUriQuery
    Wscript.Echo "Log Ext File URI Stem: " &amp;amp; objItem.LogExtFileUriStem
    Wscript.Echo "Log Ext File User Agent: " &amp;amp; objItem.LogExtFileUserAgent
    Wscript.Echo "Log Ext File User Name: " &amp;amp; objItem.LogExtFileUserName
    Wscript.Echo "Log Ext File Win32 Status: " &amp;amp; objItem.LogExtFileWin32Status
    Wscript.Echo "Log File Directory: " &amp;amp; objItem.LogFileDirectory
    Wscript.Echo "Log File Local Time Rollover: " &amp;amp; _
        objItem.LogFileLocaltimeRollover
    Wscript.Echo "Log File Period: " &amp;amp; objItem.LogFilePeriod
    Wscript.Echo "Log File Truncate Size: " &amp;amp; objItem.LogFileTruncateSize
    Wscript.Echo "Log Odbc Data Source: " &amp;amp; objItem.LogOdbcDataSource
    Wscript.Echo "Log Odbc Password: " &amp;amp; objItem.LogOdbcPassword
    Wscript.Echo "Log Odbc Table Name: " &amp;amp; objItem.LogOdbcTableName
    Wscript.Echo "Log Odbc User Name: " &amp;amp; objItem.LogOdbcUserName
    Wscript.Echo "Logon Method: " &amp;amp; objItem.LogonMethod
    Wscript.Echo "Log Plugin Clsid: " &amp;amp; objItem.LogPluginClsid
    Wscript.Echo "Log Type: " &amp;amp; objItem.LogType
    Wscript.Echo "Maximum Bandwidth: " &amp;amp; objItem.MaxBandwidth
    Wscript.Echo "Maximum Bandwidth Blocked: " &amp;amp; _
        objItem.MaxBandwidthBlocked
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
    Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
        objItem.MaxEndpointConnections
    Wscript.Echo "Maximum Request Entity Allowed: " &amp;amp; _
        objItem.MaxRequestEntityAllowed
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "NT Authentication Providers: " &amp;amp; _
        objItem.NTAuthenticationProviders
    Wscript.Echo "Passport Require AD Mapping: " &amp;amp; _
        objItem.PassportRequireADMapping
    Wscript.Echo "Password Cache TTL: " &amp;amp; objItem.PasswordCacheTTL
    Wscript.Echo "Password Change Flags: " &amp;amp; objItem.PasswordChangeFlags
    Wscript.Echo "Password Expire Prenotify Days: " &amp;amp; _
        objItem.PasswordExpirePrenotifyDays
    Wscript.Echo "Pool Idc Timeout: " &amp;amp; objItem.PoolIdcTimeout
    Wscript.Echo "Process NT CRIf Logged On: " &amp;amp; _
        objItem.ProcessNTCRIfLoggedOn
    Wscript.Echo "Realm: " &amp;amp; objItem.Realm
    For Each strHeader in objItem.RedirectHeaders
        Wscript.Echo "Redirect Headers: " &amp;amp; strHeader
    Next
    Wscript.Echo "Revocation Freshness Time: " &amp;amp; _
        objItem.RevocationFreshnessTime
    Wscript.Echo "Revocation URL Retrieval Timeout: " &amp;amp; _
        objItem.RevocationURLRetrievalTimeout
    Wscript.Echo "Server AutoStart: " &amp;amp; objItem.ServerAutoStart
    Wscript.Echo "Server Command: " &amp;amp; objItem.ServerCommand
    Wscript.Echo "Server Comment: " &amp;amp; objItem.ServerComment
    Wscript.Echo "Server ID: " &amp;amp; objItem.ServerID
    Wscript.Echo "Server Listen Backlog: " &amp;amp; objItem.ServerListenBacklog
    Wscript.Echo "Server Listen Timeout: " &amp;amp; objItem.ServerListenTimeout
    Wscript.Echo "Server Size: " &amp;amp; objItem.ServerSize
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Shutdown Time Limit: " &amp;amp; objItem.ShutdownTimeLimit
    Wscript.Echo "SSI Exec Disable: " &amp;amp; objItem.SSIExecDisable
    Wscript.Echo "SSL Always Negotiate Client Certificate: " &amp;amp; _
        objItem.SSLAlwaysNegoClientCert
    Wscript.Echo "Ssl Ctl Identifier: " &amp;amp; objItem.SslCtlIdentifier
    Wscript.Echo "Ssl Ctl Store Name: " &amp;amp; objItem.SslCtlStoreName
    Wscript.Echo "SSL Store Name: " &amp;amp; objItem.SSLStoreName
    Wscript.Echo "Upload Read Ahead Size: " &amp;amp; _
        objItem.UploadReadAheadSize
    Wscript.Echo "Use Digest SSP: " &amp;amp; objItem.UseDigestSSP
    Wscript.Echo "Win32 Error: " &amp;amp; objItem.Win32Error
Next
</vb><vb name="List Web Service Configuration Information" n="675">' List Web Service Configuration Information


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsWebService")
 
For Each objItem in colItems
    Wscript.Echo "Accept Pause: " &amp;amp; objItem.AcceptPause
    Wscript.Echo "Accept Stop: " &amp;amp; objItem.AcceptStop
    Wscript.Echo "Application Isolated: " &amp;amp; objItem.AppIsolated
    Wscript.Echo "Application Package ID: " &amp;amp; objItem.AppPackageID
    Wscript.Echo "Application Package Name: " &amp;amp; _
        objItem.AppPackageName
    Wscript.Echo "Application Root: " &amp;amp; objItem.AppRoot
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Check Point: " &amp;amp; objItem.CheckPoint
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Desktop Interact: " &amp;amp; objItem.DesktopInteract
    Wscript.Echo "Display Name: " &amp;amp; objItem.DisplayName
    Wscript.Echo "Error Control: " &amp;amp; objItem.ErrorControl
    Wscript.Echo "Exit Code: " &amp;amp; objItem.ExitCode
    Wscript.Echo "Installation Date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Path Name: " &amp;amp; objItem.PathName
    Wscript.Echo "Process ID: " &amp;amp; objItem.ProcessId
    Wscript.Echo "Service Specific Exit Code: " &amp;amp; _
        objItem.ServiceSpecificExitCode
    Wscript.Echo "Service Type: " &amp;amp; objItem.ServiceType
    Wscript.Echo "SSL Certificate Hash: " &amp;amp; objItem.SSLCertHash
    Wscript.Echo "Started: " &amp;amp; objItem.Started
    Wscript.Echo "Start Mode: " &amp;amp; objItem.StartMode
    Wscript.Echo "Start Name: " &amp;amp; objItem.StartName
    Wscript.Echo "State: " &amp;amp; objItem.State
    Wscript.Echo "Status: " &amp;amp; objItem.Status
    Wscript.Echo "Tag Id: " &amp;amp; objItem.TagId
    Wscript.Echo "Wait Hint: " &amp;amp; objItem.WaitHint
Next
</vb><vb name="List Web Service Setting Properties" n="676">' List Web Service Setting Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery("Select * from IIsWebServiceSetting")
 
For Each objItem in colItems
    Wscript.Echo "Access Execute: " &amp;amp; objItem.AccessExecute
    Wscript.Echo "Access Flags: " &amp;amp; objItem.AccessFlags
    Wscript.Echo "Access No Physical Directory: " &amp;amp; _
        objItem.AccessNoPhysicalDir
    Wscript.Echo "Access No Remote Execute: " &amp;amp; _
        objItem.AccessNoRemoteExecute
    Wscript.Echo "Access No Remote Read: " &amp;amp; objItem.AccessNoRemoteRead
    Wscript.Echo "Access No Remote Script: " &amp;amp; _
        objItem.AccessNoRemoteScript
    Wscript.Echo "Access No Remote Write: " &amp;amp; objItem.AccessNoRemoteWrite
    Wscript.Echo "Access Read: " &amp;amp; objItem.AccessRead
    Wscript.Echo "Access Script: " &amp;amp; objItem.AccessScript
    Wscript.Echo "Access Source: " &amp;amp; objItem.AccessSource
    Wscript.Echo "Access SSL: " &amp;amp; objItem.AccessSSL
    Wscript.Echo "Access SSL 128: " &amp;amp; objItem.AccessSSL128
    Wscript.Echo "Access SSL Flags: " &amp;amp; objItem.AccessSSLFlags
    Wscript.Echo "Access SSL Map Certificate: " &amp;amp; _
        objItem.AccessSSLMapCert
    Wscript.Echo "Access SSL Negotiate Certificate: " &amp;amp; _
        objItem.AccessSSLNegotiateCert
    Wscript.Echo "Access SSL Require Certificate: " &amp;amp; _
        objItem.AccessSSLRequireCert
    Wscript.Echo "Access Write: " &amp;amp; objItem.AccessWrite
    Wscript.Echo "Admin ACL Bin: " &amp;amp; objItem.AdminACLBin
    Wscript.Echo "Admin Server: " &amp;amp; objItem.AdminServer
    Wscript.Echo "Allow Keep Alive: " &amp;amp; objItem.AllowKeepAlive
    Wscript.Echo "Allow Path Information For Script Mappings: " &amp;amp; _
        objItem.AllowPathInfoForScriptMappings
    Wscript.Echo "Anonymous Password Sync: " &amp;amp; _
        objItem.AnonymousPasswordSync
    Wscript.Echo "Anonymous User Name: " &amp;amp; objItem.AnonymousUserName
    Wscript.Echo "Anonymous User Password: " &amp;amp; objItem.AnonymousUserPass
    Wscript.Echo "Application Allow Client Debug: " &amp;amp; _
        objItem.AppAllowClientDebug
    Wscript.Echo "Application Allow Debugging: " &amp;amp; _
        objItem.AppAllowDebugging
    Wscript.Echo "Application Friendly Name: " &amp;amp; objItem.AppFriendlyName
    Wscript.Echo "Application Pool ID: " &amp;amp; objItem.AppPoolId
    Wscript.Echo "Application Wam Clsid: " &amp;amp; objItem.AppWamClsid
    Wscript.Echo "ASP Allow Out Of Processs Components: " &amp;amp; _
        objItem.AspAllowOutOfProcComponents
    Wscript.Echo "ASP Allow Session State: " &amp;amp; _
        objItem.AspAllowSessionState
    Wscript.Echo "ASP Application Service Flags: " &amp;amp; _
        objItem.AspAppServiceFlags
    Wscript.Echo "ASP Buffering Limit: " &amp;amp; objItem.AspBufferingLimit
    Wscript.Echo "ASP Buffering On: " &amp;amp; objItem.AspBufferingOn
    Wscript.Echo "ASP Calc Line Number: " &amp;amp; objItem.AspCalcLineNumber
    Wscript.Echo "ASP Codepage: " &amp;amp; objItem.AspCodepage
    Wscript.Echo "ASP Disk Template Cache Directory: " &amp;amp; _
        objItem.AspDiskTemplateCacheDirectory
    Wscript.Echo "ASP Enable Application Restart: " &amp;amp; _
        objItem.AspEnableApplicationRestart
    Wscript.Echo "ASP Enable ASP Html Fallback: " &amp;amp; _
        objItem.AspEnableAspHtmlFallback
    Wscript.Echo "ASP Enable Chunked Encoding: " &amp;amp; o_
        bjItem.AspEnableChunkedEncoding
    Wscript.Echo "ASP Enable Parent Paths: " &amp;amp; _
        objItem.AspEnableParentPaths
    Wscript.Echo "ASP Enable Sxs: " &amp;amp; objItem.AspEnableSxs
    Wscript.Echo "ASP Enable Tracker: " &amp;amp; objItem.AspEnableTracker
    Wscript.Echo "ASP Enable Typelib Cache: " &amp;amp; _
        objItem.AspEnableTypelibCache
    Wscript.Echo "ASP Errors To NT Log: " &amp;amp; objItem.AspErrorsToNTLog
    Wscript.Echo "ASP Exception Catch Enable: " &amp;amp; _
        objItem.AspExceptionCatchEnable
    Wscript.Echo "ASP Execute in MTA: " &amp;amp; objItem.AspExecuteInMTA
    Wscript.Echo "ASP Keep Session ID Secure: " &amp;amp; _
        objItem.AspKeepSessionIDSecure
    Wscript.Echo "ASP LCID: " &amp;amp; objItem.AspLCID
    Wscript.Echo "ASP Log Error Requests: " &amp;amp; _
        objItem.AspLogErrorRequests
    Wscript.Echo "ASP Maximum Disk Template Cache Files: " &amp;amp; _
        objItem.AspMaxDiskTemplateCacheFiles
    Wscript.Echo "ASP Maximum Request Entity Allowed: " &amp;amp; _
        objItem.AspMaxRequestEntityAllowed
    Wscript.Echo "ASP Partition ID: " &amp;amp; objItem.AspPartitionID
    Wscript.Echo "ASP Processor Thread Maximum: " &amp;amp; _
        objItem.AspProcessorThreadMax
    Wscript.Echo "ASP Queue Connection Test Time: " &amp;amp; _
        objItem.AspQueueConnectionTestTime
    Wscript.Echo "ASP Queue Timeout: " &amp;amp; objItem.AspQueueTimeout
    Wscript.Echo "ASP Request Queue Maximum: " &amp;amp; _
        objItem.AspRequestQueueMax
    Wscript.Echo "ASP Run On End Anonymously: " &amp;amp; _
        objItem.AspRunOnEndAnonymously
    Wscript.Echo "ASP Script Engine Cache Maximum: " &amp;amp; _
        objItem.AspScriptEngineCacheMax
    Wscript.Echo "ASP Script Error Message: " &amp;amp; _
        objItem.AspScriptErrorMessage
    Wscript.Echo "ASP Script Error Sent To Browser: " &amp;amp; _
        objItem.AspScriptErrorSentToBrowser
    Wscript.Echo "ASP Script File Cache Size: " &amp;amp; _
        objItem.AspScriptFileCacheSize
    Wscript.Echo "ASP Script Language: " &amp;amp; objItem.AspScriptLanguage
    Wscript.Echo "ASP Script Timeout: " &amp;amp; objItem.AspScriptTimeout
    Wscript.Echo "ASP Session Max: " &amp;amp; objItem.AspSessionMax
    Wscript.Echo "ASP Session Timeout: " &amp;amp; objItem.AspSessionTimeout
    Wscript.Echo "ASP Sxs Name: " &amp;amp; objItem.AspSxsName
    Wscript.Echo "ASP Track Threading Model: " &amp;amp; _
        objItem.AspTrackThreadingModel
    Wscript.Echo "ASP Use Partition: " &amp;amp; objItem.AspUsePartition
    Wscript.Echo "Authentication Advanced Notify Disable: " &amp;amp; _
        objItem.AuthAdvNotifyDisable
    Wscript.Echo "Authentication Anonymous: " &amp;amp; objItem.AuthAnonymous
    Wscript.Echo "Authentication Basic: " &amp;amp; objItem.AuthBasic
    Wscript.Echo "Authentication ChangeDisable: " &amp;amp; _
        objItem.AuthChangeDisable
    Wscript.Echo "Authentication ChangeUnsecure: " &amp;amp; _
        objItem.AuthChangeUnsecure
    Wscript.Echo "Authentication ChangeURL: " &amp;amp; objItem.AuthChangeURL
    Wscript.Echo "Authentication ExpiredUnsecureURL: " &amp;amp; _
        objItem.AuthExpiredUnsecureURL
    Wscript.Echo "Authentication ExpiredURL: " &amp;amp; objItem.AuthExpiredURL
    Wscript.Echo "Authentication Flags: " &amp;amp; objItem.AuthFlags
    Wscript.Echo "Authentication MD5: " &amp;amp; objItem.AuthMD5
    Wscript.Echo "Authentication Notify Password Exp Unsecure URL: " &amp;amp; _
        objItem.AuthNotifyPwdExpUnsecureURL
    Wscript.Echo "Authentication Notify Password Exp URL: " &amp;amp; _
        objItem.AuthNotifyPwdExpURL
    Wscript.Echo "Authentication NTLM: " &amp;amp; objItem.AuthNTLM
    Wscript.Echo "Authentication Passport: " &amp;amp; objItem.AuthPassport
    Wscript.Echo "Authentication Persistence: " &amp;amp; objItem.AuthPersistence
    Wscript.Echo "Authentication PersistSingleRequest: " &amp;amp; _
        objItem.AuthPersistSingleRequest
    Wscript.Echo "Az Enable: " &amp;amp; objItem.AzEnable
    Wscript.Echo "Az Impersonation Level: " &amp;amp; _
        objItem.AzImpersonationLevel
    Wscript.Echo "Az Scope Name: " &amp;amp; objItem.AzScopeName
    Wscript.Echo "Az Store Name: " &amp;amp; objItem.AzStoreName
    Wscript.Echo "Cache Control Custom: " &amp;amp; objItem.CacheControlCustom
    Wscript.Echo "Cache Control Maximum Age: " &amp;amp; _
        objItem.CacheControlMaxAge
    Wscript.Echo "Cache Control No Cache: " &amp;amp; objItem.CacheControlNoCache
    Wscript.Echo "Cache ISAPI: " &amp;amp; objItem.CacheISAPI
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Central Binary Logging Enabled: " &amp;amp; _
        objItem.CentralBinaryLoggingEnabled
    Wscript.Echo "Certificate Check Mode: " &amp;amp; objItem.CertCheckMode
    Wscript.Echo "CGI Timeout: " &amp;amp; objItem.CGITimeout
    Wscript.Echo "Connection Timeout: " &amp;amp; objItem.ConnectionTimeout
    Wscript.Echo "Content Indexed: " &amp;amp; objItem.ContentIndexed
    Wscript.Echo "Create CGI With New Console: " &amp;amp; _
        objItem.CreateCGIWithNewConsole
    Wscript.Echo "Create Process As User: " &amp;amp; objItem.CreateProcessAsUser
    Wscript.Echo "Default Doc: " &amp;amp; objItem.DefaultDoc
    Wscript.Echo "Default Doc Footer: " &amp;amp; objItem.DefaultDocFooter
    Wscript.Echo "Default Logon Domain: " &amp;amp; objItem.DefaultLogonDomain
    Wscript.Echo "Demand Start Threshold: " &amp;amp; objItem.DemandStartThreshold
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Directory Browse Flags: " &amp;amp; objItem.DirBrowseFlags
    Wscript.Echo "Directory Browse Show Date: " &amp;amp; objItem.DirBrowseShowDate
    Wscript.Echo "Directory Browse Show Extension: " &amp;amp; _
        objItem.DirBrowseShowExtension
    Wscript.Echo "Directory Browse Show Long Date: " &amp;amp; _
        objItem.DirBrowseShowLongDate
    Wscript.Echo "Directory Browse Show Size: " &amp;amp; objItem.DirBrowseShowSize
    Wscript.Echo "Directory Browse Show Time: " &amp;amp; objItem.DirBrowseShowTime
    Wscript.Echo "Directory Levels To Scan: " &amp;amp; _
        objItem.DirectoryLevelsToScan
    Wscript.Echo "Disable Socket Pooling: " &amp;amp; objItem.DisableSocketPooling
    Wscript.Echo "Disable Static File Cache: " &amp;amp; _
        objItem.DisableStaticFileCache
    Wscript.Echo "Do Dynamic Compression: " &amp;amp; objItem.DoDynamicCompression
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
    Wscript.Echo "Do Static Compression: " &amp;amp; objItem.DoStaticCompression
    Wscript.Echo "Downlevel Admin Instance: " &amp;amp; _
        objItem.DownlevelAdminInstance
    Wscript.Echo "Enable Default Doc: " &amp;amp; objItem.EnableDefaultDoc
    Wscript.Echo "Enable Directory Browsing: " &amp;amp; objItem.EnableDirBrowsing
    Wscript.Echo "Enable Doc Footer: " &amp;amp; objItem.EnableDocFooter
    Wscript.Echo "Enable Reverse DNS: " &amp;amp; objItem.EnableReverseDns
    Wscript.Echo "Header Wait Timeout: " &amp;amp; objItem.HeaderWaitTimeout
    Wscript.Echo "Http Expires: " &amp;amp; objItem.HttpExpires
    Wscript.Echo "IIs5 Isolation Mode Enabled: " &amp;amp; _
        objItem.IIs5IsolationModeEnabled
    Wscript.Echo "Log Ext File Bytes Received: " &amp;amp; _
        objItem.LogExtFileBytesRecv
    Wscript.Echo "Log Ext File Bytes Sent: " &amp;amp; objItem.LogExtFileBytesSent
    Wscript.Echo "Log Ext File Client IP: " &amp;amp; objItem.LogExtFileClientIp
    Wscript.Echo "Log Ext File Computer Name: " &amp;amp; _
        objItem.LogExtFileComputerName
    Wscript.Echo "Log Ext File Cookie: " &amp;amp; objItem.LogExtFileCookie
    Wscript.Echo "Log Ext File Date: " &amp;amp; objItem.LogExtFileDate
    Wscript.Echo "Log Ext File Flags: " &amp;amp; objItem.LogExtFileFlags
    Wscript.Echo "Log Ext File Host: " &amp;amp; objItem.LogExtFileHost
    Wscript.Echo "Log Ext File Http Status: " &amp;amp; _
        objItem.LogExtFileHttpStatus
    Wscript.Echo "Log Ext File Http SubStatus: " &amp;amp; _
        objItem.LogExtFileHttpSubStatus
    Wscript.Echo "Log Ext File Method: " &amp;amp; objItem.LogExtFileMethod
    Wscript.Echo "Log Ext File Protocol Version: " &amp;amp; _
        objItem.LogExtFileProtocolVersion
    Wscript.Echo "Log Ext File Referer: " &amp;amp; objItem.LogExtFileReferer
    Wscript.Echo "Log Ext File Server Ip: " &amp;amp; objItem.LogExtFileServerIp
    Wscript.Echo "Log Ext File Server Port: " &amp;amp; _
        objItem.LogExtFileServerPort
    Wscript.Echo "Log Ext File Site Name: " &amp;amp; objItem.LogExtFileSiteName
    Wscript.Echo "Log Ext File Time: " &amp;amp; objItem.LogExtFileTime
    Wscript.Echo "Log Ext File Time Taken: " &amp;amp; objItem.LogExtFileTimeTaken
    Wscript.Echo "Log Ext File URI Query: " &amp;amp; objItem.LogExtFileUriQuery
    Wscript.Echo "Log Ext File URI Stem: " &amp;amp; objItem.LogExtFileUriStem
    Wscript.Echo "Log Ext File User Agent: " &amp;amp; objItem.LogExtFileUserAgent
    Wscript.Echo "Log Ext File User Name: " &amp;amp; objItem.LogExtFileUserName
    Wscript.Echo "Log Ext File Win32 Status: " &amp;amp; _
        objItem.LogExtFileWin32Status
    Wscript.Echo "Log File Directory: " &amp;amp; objItem.LogFileDirectory
    Wscript.Echo "Log File Local Time Rollover: " &amp;amp; _
        objItem.LogFileLocaltimeRollover
    Wscript.Echo "Log File Period: " &amp;amp; objItem.LogFilePeriod
    Wscript.Echo "Log File Truncate Size: " &amp;amp; objItem.LogFileTruncateSize
    Wscript.Echo "Log in UTF8: " &amp;amp; objItem.LogInUTF8
    Wscript.Echo "Log Module List: " &amp;amp; objItem.LogModuleList
    Wscript.Echo "Log Odbc Data Source: " &amp;amp; objItem.LogOdbcDataSource
    Wscript.Echo "Log Odbc Password: " &amp;amp; objItem.LogOdbcPassword
    Wscript.Echo "Log Odbc Table Name: " &amp;amp; objItem.LogOdbcTableName
    Wscript.Echo "Log Odbc User Name: " &amp;amp; objItem.LogOdbcUserName
    Wscript.Echo "Logon Method: " &amp;amp; objItem.LogonMethod
    Wscript.Echo "Log Plugin Clsid: " &amp;amp; objItem.LogPluginClsid
    Wscript.Echo "Log Type: " &amp;amp; objItem.LogType
    Wscript.Echo "Maximum Bandwidth: " &amp;amp; objItem.MaxBandwidth
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
    Wscript.Echo "Maximum Endpoint Connections: " &amp;amp; _
        objItem.MaxEndpointConnections
    Wscript.Echo "Maximum Global Bandwidth: " &amp;amp; _
        objItem.MaxGlobalBandwidth
    Wscript.Echo "Maximum Request Entity Allowed: " &amp;amp; _
        objItem.MaxRequestEntityAllowed
    Wscript.Echo "Minimum File Bytes Per Second: " &amp;amp; _
        objItem.MinFileBytesPerSec
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "NT Authentication Providers: " &amp;amp; _
        objItem.NTAuthenticationProviders
    Wscript.Echo "Passport Require AD Mapping: " &amp;amp; _
        objItem.PassportRequireADMapping
    Wscript.Echo "Password Cache TTL: " &amp;amp; objItem.PasswordCacheTTL
    Wscript.Echo "Password Change Flags: " &amp;amp; _
        objItem.PasswordChangeFlags
    Wscript.Echo "Password Expire Prenotify Days: " &amp;amp; _
        objItem.PasswordExpirePrenotifyDays
    Wscript.Echo "Pool Idc Timeout: " &amp;amp; objItem.PoolIdcTimeout
    Wscript.Echo "Process NTCRIf Logged On: " &amp;amp; _
        objItem.ProcessNTCRIfLoggedOn
    Wscript.Echo "Rapid Fail Protection Interval: " &amp;amp; _
        objItem.RapidFailProtectionInterval
    Wscript.Echo "Rapid Fail Protection Maximum Crashes: " &amp;amp; _
        objItem.RapidFailProtectionMaxCrashes
    Wscript.Echo "Realm: " &amp;amp; objItem.Realm
    For Each strHeader in objItem.RedirectHeaders
        Wscript.Echo "Redirect Headers: " &amp;amp; strHeader
    Next
    Wscript.Echo "Revocation Freshness Time: " &amp;amp; _
        objItem.RevocationFreshnessTime
    Wscript.Echo "Revocation URL Retrieval Timeout: " &amp;amp; _
        objItem.RevocationURLRetrievalTimeout
    Wscript.Echo "Server AutoStart: " &amp;amp; objItem.ServerAutoStart
    Wscript.Echo "Server Comment: " &amp;amp; objItem.ServerComment
    Wscript.Echo "Server Listen Backlog: " &amp;amp; _
        objItem.ServerListenBacklog
    Wscript.Echo "Server Listen Timeout: " &amp;amp; _
        objItem.ServerListenTimeout
    Wscript.Echo "Server Size: " &amp;amp; objItem.ServerSize
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Shutdown Time Limit: " &amp;amp; objItem.ShutdownTimeLimit
    Wscript.Echo "SSI Exec Disable: " &amp;amp; objItem.SSIExecDisable
    Wscript.Echo "SSL Always Negotiate Client Certificate: " &amp;amp; _
        objItem.SSLAlwaysNegoClientCert
    Wscript.Echo "SSL Store Name: " &amp;amp; objItem.SSLStoreName
    Wscript.Echo "Ssl Use Ds Mapper: " &amp;amp; objItem.SslUseDsMapper
    Wscript.Echo "Upload Read Ahead Size: " &amp;amp; _
        objItem.UploadReadAheadSize
    Wscript.Echo "Use Digest SSP: " &amp;amp; objItem.UseDigestSSP
    Wscript.Echo "WAM User Name: " &amp;amp; objItem.WAMUserName
    Wscript.Echo "WAM User Pass: " &amp;amp; objItem.WAMUserPass
Next
</vb><vb name="List Web Site Document Properties" n="677">' List Web Site Document Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")
For Each objItem in colItems
    Wscript.Echo "Default Doc: " &amp;amp; objItem.DefaultDoc
    Wscript.Echo "Default Doc Footer: " &amp;amp; objItem.DefaultDocFooter
    Wscript.Echo "Enable Default Doc: " &amp;amp; objItem.EnableDefaultDoc
    Wscript.Echo "Enable Doc Footer: " &amp;amp; objItem.EnableDocFooter
Next
</vb><vb name="List Web Site Home Directory Properties" n="678">' List Web Site Home Directory Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting") 

For Each objItem in colItems
    Wscript.Echo "Application Pool ID: " &amp;amp; objItem.AppPoolId
    Wscript.Echo "Content Indexed: " &amp;amp; objItem.ContentIndexed
    Wscript.Echo "Don't Log: " &amp;amp; objItem.DontLog
Next
</vb><vb name="List Web Site Performance Properties" n="679">' List Web Site Performance Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")

For Each objItem in colItems
    Wscript.Echo "Maximum Bandwidth: " &amp;amp; objItem.MaxBandwidth
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
Next
</vb><vb name="Modify a Web File Setting Metabase Property" n="680">' Modify a Web File Setting Metabase Property


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebFileSetting")

For Each objItem in colItems
    objItem.EnableDocFooter = TRUE
    objItem.Put_
Next
</vb><vb name="Modify a Web Info Metabase Property" n="681">' Modify a Web Info Metabase Property


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebInfoSetting")
 
For Each objItem in colItems
    objItem.ServerConfigSSLAllowEncrypt = TRUE
    objItem.Put_
Next
</vb><vb name="Modify Basic Web Site Properties" n="682">' Modify Basic Web Site Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")

For Each objItem in colItems
    objItem.AllowKeepAlive = True
    objItem.ConnectionTimeout = 1200
    objItem.DontLog = False
    objItem.ServerComment = "This is an intranet-only server."
    objItem.Put_
Next
</vb><vb name="Modify Web Site Document Properties" n="683">' Modify Web Site Document Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")

For Each objItem in colItems
    strDocs = objItem.DefaultDoc
    objItem.DefaultDoc = strDocs &amp;amp; ",index.htm"
    objItem.DefaultDocFooter = "FILE:c:\config\footer.htm"
    objItem.EnableDefaultDoc = True
    objItem.EnableDocFooter = True
    objItem.Put_
Next
</vb><vb name="Modify Web Site Home Directory Properties" n="684">' Modify Web Site Home Directory Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting") 

For Each objItem in colItems
    objItem.ContentIndexed = True
    objItem.DontLog = True
    objItem.Put_
Next
</vb><vb name="Modify Web Site Performance Properties" n="685">' Modify Web Site Performance Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsWebServiceSetting")

For Each objItem in colItems
    objItem.MaxBandwidth = -1
    objItem.MaxConnections = 10000
    objItem.Put_
Next
</vb><vb name="Modify Web Site Service Properties" n="686">' Modify Web Site Service Properties


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from IIsCompressionSchemesSetting")

For Each objItem in colItems
    objItem.HcCompressionDirectory = "C:\Compressed_Files"
    objItem.HcDoDynamicCompression = True
    objItem.HcDoStaticCompression = True
    objItem.DoDiskSpaceLimiting = True
    objItem.HcMaxDiskSpaceUsage = 200000000
    objItem.Put_
Next
</vb><vb name="Pause a Web Server" n="687">' Pause a Web Server


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebServer Where Name = " &amp;amp; _
        "'W3SVC/2142295254'")

For Each objItem in colItems
    objItem.Pause
Next
</vb><vb name="Start a Web Server" n="688">' Start a Web Server


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebServer Where Name = " &amp;amp; _
        "'W3SVC/2142295254'")

For Each objItem in colItems
    objItem.Start
Next
</vb><vb name="Stop a Web Server" n="689">' Stop a Web Server


strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:{authenticationLevel=pktPrivacy}\\" _
        &amp;amp; strComputer &amp;amp; "\root\microsoftiisv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From IIsWebServer Where Name = " &amp;amp; _
        "'W3SVC/2142295254'")

For Each objItem in colItems
    objItem.Stop
Next
</vb></dd>
		</dd>
	</dd>
	<dd name="Logs" code="logs" desc="Sample scripts for managing event logs and plain-text log files.">
		<dd name="Event Logs" code="eventlog" desc="Sample scripts for managing event logs (for example, backing up and clearing event logs), and for retrieving events from event logs."><vb name="Back Up and Clear an Event Log" n="690">' Back Up and Clear an Event Log


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate,(Backup)}!\\" &amp;amp; _
        strComputer &amp;amp; "\root\cimv2")

Set colLogFiles = objWMIService.ExecQuery _
    ("Select * from Win32_NTEventLogFile where LogFileName='Application'")

For Each objLogfile in colLogFiles
    errBackupLog = objLogFile.BackupEventLog("c:\scripts\application.evt")
    If errBackupLog &amp;lt;&amp;gt; 0 Then        
        Wscript.Echo "The Application event log could not be backed up."
    Else
        objLogFile.ClearEventLog()
    End If
Next
</vb><vb name="Back Up and Clear Large Event Logs" n="691">' Back Up and Clear Large Event Logs


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate, (Backup, Security)}!\\" _
        &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colLogFiles = objWMIService.ExecQuery _
    ("Select * from Win32_NTEventLogFile")

For Each objLogfile in colLogFiles
    If objLogFile.FileSize &amp;gt; 100000 Then
       strBackupLog = objLogFile.BackupEventLog _
           ("c:\scripts\" &amp;amp; objLogFile.LogFileName &amp;amp; ".evt")
       objLogFile.ClearEventLog()
    End If
Next
</vb><vb name="Copy Event Log Events to a Database" n="692">' Copy Event Log Events to a Database


Set objConn = CreateObject("ADODB.Connection")
Set objRS = CreateObject("ADODB.Recordset")

objConn.Open "DSN=EventLogs;"
objRS.CursorLocation = 3
objRS.Open "SELECT * FROM EventTable" , objConn, 3, 3
strComputer = "."

Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colRetrievedEvents = objWMIService.ExecQuery _
    ("Select * from Win32_NTLogEvent")

For Each objEvent in colRetrievedEvents
    objRS.AddNew
    objRS("Category") = objEvent.Category
    objRS("ComputerName") = objEvent.ComputerName
    objRS("EventCode") = objEvent.EventCode
    objRS("Message") = objEvent.Message
    objRS("RecordNumber") = objEvent.RecordNumber
    objRS("SourceName") = objEvent.SourceName
    objRS("TimeWritten") = objEvent.TimeWritten
    objRS("Type") = objEvent.Type
    objRS("User") = objEvent.User
    objRS.Update
Next

objRS.Close
objConn.Close
</vb><vb name="Copy the Previous Day's Event Log Events to a Database" n="693">' Copy the Previous Day's Event Log Events to a Database


Set objConn = CreateObject("ADODB.Connection")
Set objRS = CreateObject("ADODB.Recordset")

objConn.Open "DSN=EventLogs;"
objRS.CursorLocation = 3
objRS.Open "SELECT * FROM EventTable" , objConn, 3, 3

Set dtmStartDate = CreateObject("WbemScripting.SWbemDateTime")
Set dtmEndDate = CreateObject("WbemScripting.SWbemDateTime")

DateToCheck = Date - 1
dtmEndDate.SetVarDate Date, True
dtmStartDate.SetVarDate DateToCheck, True

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colEvents = objWMIService.ExecQuery _
    ("Select * from Win32_NTLogEvent Where TimeWritten &amp;gt;= '" _ 
        &amp;amp; dtmStartDate &amp;amp; "' and TimeWritten &amp;lt; '" &amp;amp; dtmEndDate &amp;amp; "'") 

For each objEvent in colEvents
    objRS.AddNew
    objRS("Category") = objEvent.Category
    objRS("ComputerName") = objEvent.ComputerName
    objRS("EventCode") = objEvent.EventCode
    objRS("Message") = objEvent.Message
    objRS("RecordNumber") = objEvent.RecordNumber
    objRS("SourceName") = objEvent.SourceName
    objRS("TimeWritten") = objEvent.TimeWritten
    objRS("Type") = objEvent.Type
    objRS("User") = objEvent.User
    objRS.Update
Next

objRS.Close
objConn.Close
</vb><vb name="Create a Custom Event Log" n="694">' Create a Custom Event Log


Const NO_VALUE = Empty

Set WshShell = WScript.CreateObject("WScript.Shell")
WshShell.RegWrite _
    "HKLM\System\CurrentControlSet\Services\EventLog\Scripts\", NO_VALUE
</vb><vb name="Create Unique File Names for Event Log Backups" n="695">' Create Unique File Names for Event Log Backups


dtmThisDay = Day(Date)
dtmThisMonth = Month(Date)
dtmThisYear = Year(Date)
strBackupName = dtmThisYear &amp;amp; "_" &amp;amp; dtmThisMonth &amp;amp; "_" &amp;amp; dtmThisDay

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate,(Backup)}!\\" &amp;amp; _
        strComputer &amp;amp; "\root\cimv2")

Set colLogFiles = objWMIService.ExecQuery _
    ("Select * from Win32_NTEventLogFile where LogFileName='Application'")

For Each objLogfile in colLogFiles
    objLogFile.BackupEventLog("c:\scripts\" &amp;amp; strBackupName &amp;amp; _
        "_application.evt")
    objLogFile.ClearEventLog()
Next
</vb><vb name="List All Events from an Event Log" n="696">' List All Events from an Event Log


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colLoggedEvents = objWMIService.ExecQuery _
    ("Select * from Win32_NTLogEvent Where Logfile = 'Application'")

For Each objEvent in colLoggedEvents
    Wscript.Echo "Category: " &amp;amp; objEvent.Category
    Wscript.Echo "Computer Name: " &amp;amp; objEvent.ComputerName
    Wscript.Echo "Event Code: " &amp;amp; objEvent.EventCode
    Wscript.Echo "Message: " &amp;amp; objEvent.Message
    Wscript.Echo "Record Number: " &amp;amp; objEvent.RecordNumber
    Wscript.Echo "Source Name: " &amp;amp; objEvent.SourceName
    Wscript.Echo "Time Written: " &amp;amp; objEvent.TimeWritten
    Wscript.Echo "Event Type: " &amp;amp; objEvent.Type
    Wscript.Echo "User: " &amp;amp; objEvent.User
Next
</vb><vb name="List All Stop Events" n="697">' List All Stop Events


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colLoggedEvents = objWMIService.ExecQuery _
    ("Select * from Win32_NTLogEvent Where Logfile = 'System'" _
        &amp;amp; " and SourceName = 'SaveDump'")

For Each objEvent in colLoggedEvents
    Wscript.Echo "Event date: " &amp;amp; objEvent.TimeGenerated
    Wscript.Echo "Description: " &amp;amp; objEvent.Message
Next
</vb><vb name="List Event Log Properties" n="698">' List Event Log Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objInstalledLogFiles = objWMIService.ExecQuery _
    ("Select * from Win32_NTEventLogFile")

For each objLogfile in objInstalledLogFiles
    Wscript.Echo "Name: " &amp;amp;  objLogfile.LogFileName 
    Wscript.Echo "Maximum Size: " &amp;amp;  objLogfile.MaxFileSize 
    If objLogfile.OverWriteOutdated &amp;gt; 365 Then
        Wscript.Echo "Overwrite Outdated Records: Never." 
    ElseIf objLogfile.OverWriteOutdated = 0 Then
        Wscript.Echo "Overwrite Outdated Records: As needed." 
    Else
        Wscript.Echo "Overwrite Outdated Records After: " &amp;amp;  _
            objLogfile.OverWriteOutdated &amp;amp; " days" &amp;amp; 
    End If
Next
</vb><vb name="List Events For a Specific Day From An Event Log" n="699">' List Events For a Specific Day From An Event Log


Const CONVERT_TO_LOCAL_TIME = True

Set dtmStartDate = CreateObject("WbemScripting.SWbemDateTime")
Set dtmEndDate = CreateObject("WbemScripting.SWbemDateTime")
DateToCheck = CDate("2/18/2002")
dtmStartDate.SetVarDate DateToCheck, CONVERT_TO_LOCAL_TIME
dtmEndDate.SetVarDate DateToCheck + 1, CONVERT_TO_LOCAL_TIME

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colEvents = objWMIService.ExecQuery _
    ("Select * from Win32_NTLogEvent Where TimeWritten &amp;gt;= '" _ 
        &amp;amp; dtmStartDate &amp;amp; "' and TimeWritten &amp;lt; '" &amp;amp; dtmEndDate &amp;amp; "'") 

For Each objEvent in colEvents
    Wscript.Echo "Category: " &amp;amp; objEvent.Category
    Wscript.Echo "Computer Name: " &amp;amp; objEvent.ComputerName
    Wscript.Echo "Event Code: " &amp;amp; objEvent.EventCode
    Wscript.Echo "Message: " &amp;amp; objEvent.Message
    Wscript.Echo "Record Number: " &amp;amp; objEvent.RecordNumber
    Wscript.Echo "Source Name: " &amp;amp; objEvent.SourceName
    Wscript.Echo "Time Written: " &amp;amp; objEvent.TimeWritten
    Wscript.Echo "Event Type: " &amp;amp; objEvent.Type
    Wscript.Echo "User: " &amp;amp; objEvent.User
    Wscript.Echo objEvent.LogFile
Next
</vb><vb name="List Events From a Specific Event Log" n="700">' List Events From a Specific Event Log


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colLoggedEvents = objWMIService.ExecQuery _
    ("Select * from Win32_NTLogEvent Where Logfile = 'Application'")

For Each objEvent in colLoggedEvents
    Wscript.Echo "Category: " &amp;amp; objEvent.Category
    Wscript.Echo "Computer Name: " &amp;amp; objEvent.ComputerName
    Wscript.Echo "Event Code: " &amp;amp; objEvent.EventCode
    Wscript.Echo "Message: " &amp;amp; objEvent.Message
    Wscript.Echo "Record Number: " &amp;amp; objEvent.RecordNumber
    Wscript.Echo "Source Name: " &amp;amp; objEvent.SourceName
    Wscript.Echo "Time Written: " &amp;amp; objEvent.TimeWritten
    Wscript.Echo "Event Type: " &amp;amp; objEvent.Type
    Wscript.Echo "User: " &amp;amp; objEvent.User
Next
</vb><vb name="List Events Using an Asynchronous  Query" n="701">' List Events Using an Asynchronous  Query


Const POPUP_DURATION = 10
Const OK_BUTTON = 0

Set objWSHShell = Wscript.CreateObject("Wscript.Shell")

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objSink = WScript.CreateObject("WbemScripting.SWbemSink","SINK_")
objWMIService.InstancesOfAsync objSink, "Win32_NTLogEvent"
Error = objWshShell.Popup("Starting event retrieval", POPUP_DURATION, _
    "Event Retrieval", OK_BUTTON)

Sub SINK_OnCompleted(iHResult, objErrorObject, objAsyncContext)
    WScript.Echo "Asynchronous operation is done."
End Sub

Sub SINK_OnObjectReady(objEvent, objAsyncContext)
    Wscript.Echo "Category: " &amp;amp; objEvent.Category
    Wscript.Echo "Computer Name: " &amp;amp; objEvent.ComputerName
    Wscript.Echo "Event Code: " &amp;amp; objEvent.EventCode
    Wscript.Echo "Message: " &amp;amp; objEvent.Message
    Wscript.Echo "Record Number: " &amp;amp; objEvent.RecordNumber
    Wscript.Echo "Source Name: " &amp;amp; objEvent.SourceName
    Wscript.Echo "Time Written: " &amp;amp; objEvent.TimeWritten
    Wscript.Echo "Event Type: " &amp;amp; objEvent.Type
    Wscript.Echo "User: " &amp;amp; objEvent.User
End Sub
</vb><vb name="List Security Log Properties" n="702">' List Security Log Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate,(Security)}!\\" &amp;amp; _
        strComputer &amp;amp; "\root\cimv2")

Set colLogFiles = objWMIService.ExecQuery _
    ("Select * from Win32_NTEventLogFile where LogFileName='Security'")

For Each objLogFile in colLogFiles
    Wscript.Echo objLogFile.NumberOfRecords
    Wscript.Echo "Maximum Size: " &amp;amp;  objLogfile.MaxFileSize 
Next
</vb><vb name="List Specific Events from an Event Log" n="703">' List Specific Events from an Event Log


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colLoggedEvents = objWMIService.ExecQuery _
        ("Select * from Win32_NTLogEvent Where Logfile = 'System' and " _
            &amp;amp; "EventCode = '6008'")

Wscript.Echo "Improper shutdowns: " &amp;amp; colLoggedEvents.Count
</vb><vb name="List System Event Log Properties" n="704">' List System Event Log Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colLogFiles = objWMIService.ExecQuery _
    ("Select * from Win32_NTEventLogFile where LogFileName='System'")

For Each objLogFile in colLogFiles
    Wscript.Echo objLogFile.NumberOfRecords
Next
</vb><vb name="Modify Event Log Properties" n="705">' Modify Event Log Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate,(Security)}!\\" &amp;amp; _
        strComputer &amp;amp; "\root\cimv2")

Set colLogFiles = objWMIService.ExecQuery _
    ("Select * from Win32_NTEventLogFile")

For each objLogfile in colLogFiles
    strLogFileName = objLogfile.Name
    Set wmiSWbemObject = GetObject _
        ("winmgmts:{impersonationLevel=Impersonate}!\\.\root\cimv2:" _
            &amp;amp; "Win32_NTEventlogFile.Name='" &amp;amp; strLogFileName &amp;amp; "'")
    wmiSWbemObject.MaxFileSize = 2500000000
    wmiSWbemObject.OverwriteOutdated = 14
    wmiSWbemObject.Put_ 
Next
</vb><vb name="Monitor Event Logs in Real Time" n="706">' Monitor Event Logs in Real Time


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate, (Security)}!\\" &amp;amp; _
        strComputer &amp;amp; "\root\cimv2")

Set colMonitoredEvents = objWMIService.ExecNotificationQuery _    
    ("Select * from __instancecreationevent where " _
        &amp;amp; "TargetInstance isa 'Win32_NTLogEvent' " _
            &amp;amp; "and TargetInstance.EventCode = '533' ")

Do
    Set objLatestEvent = colMonitoredEvents.NextEvent
     strAlertToSend = objLatestEvent.TargetInstance.User _ 
         &amp;amp; " attempted to access DatabaseServer."
     Wscript.Echo strAlertToSend
Loop
</vb><vb name="Write Events to a Remote Event Log" n="707">' Write Events to a Remote Event Log


Const EVENT_SUCCESS = 0

Set objShell = Wscript.CreateObject("Wscript.Shell")

objShell.LogEvent EVENT_SUCCESS, _
    "Payroll application successfully installed." , "\\PrimaryServer"
</vb><vb name="Write Events to the Local Event Log" n="708">' Write Events to the Local Event Log


Const EVENT_SUCCESS = 0

Set objShell = Wscript.CreateObject("Wscript.Shell")

objShell.LogEvent EVENT_SUCCESS, _
    "Payroll application successfully installed."
</vb><vb name="Write to a Custom Event Log Using EventCreate" n="709">' Write to a Custom Event Log Using EventCreate


Set WshShell = WScript.CreateObject("WScript.Shell")

strCommand = "eventcreate /T Error /ID 100 /L Scripts /D " &amp;amp; _
    Chr(34) &amp;amp; "Test event." &amp;amp; Chr(34)
WshShell.Run strcommand
</vb><vb name="Add WMI Data to an Event Log Entry" n="710">' Add WMI Data to an Event Log Entry



Const EVENT_FAILED = 2

Set objShell = Wscript.CreateObject("Wscript.Shell")
Set objNetwork = Wscript.CreateObject("Wscript.Network")
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colDiskDrives = objWMIService.ExecQuery _
    ("Select * from win32_perfformatteddata_perfdisk_logicaldisk")

For Each objDisk in colDiskDrives
    strDriveSpace = objDisk.Name &amp;amp; " " &amp;amp; objDisk.FreeMegabytes _
        &amp;amp; VbCrLf
Next

strEventDescription = "Payroll application could not be installed on " _ 
    &amp;amp; objNetwork.UserDomain &amp;amp; "\" &amp;amp; objNetwork.ComputerName _ 
        &amp;amp; " by user " &amp;amp; objNetwork.UserName &amp;amp; _
            ". Free space on each drive is: " &amp;amp; strDriveSpace
objShell.LogEvent EVENT_FAILED, strEventDescription
</vb></dd>
		<dd name="Plain-Text Logs" code="text" desc="Sample scripts for retrieving information from plain-text log files."><vb name="Read a Comma Separated Values Log" n="711">' Read a Comma Separated Values Log



Const ForReading = 1

Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objTextFile = objFSO.OpenTextFile("C:\Windows\System32\DHCP\" &amp;amp; _
 "DhcpSrvLog-Mon.log", ForReading)

Wscript.Echo vbCrLf &amp;amp; "DHCP Records"

Do While objTextFile.AtEndOfStream &amp;lt;&amp;gt; True
  strLine = objtextFile.ReadLine
  If inStr(strLine, ",") Then
    arrDHCPRecord = split(strLine, ",")
    Wscript.Echo vbCrLf &amp;amp; "Event ID: " &amp;amp; arrDHCPRecord(0)
    Wscript.Echo "Date: " &amp;amp; arrDHCPRecord(1)
    Wscript.Echo "Time: " &amp;amp; arrDHCPRecord(2)
    Wscript.Echo "Description: " &amp;amp; arrDHCPRecord(3)
    Wscript.Echo "IP Address: " &amp;amp; arrDHCPRecord(4)
    Wscript.Echo "Host Name: " &amp;amp; arrDHCPRecord(5)
    Wscript.Echo "MAC Address: " &amp;amp; arrDHCPRecord(6)
    i = i + 1
  End If
Loop

Wscript.Echo vbCrLf &amp;amp; "Number of DHCP records read: " &amp;amp; i
</vb><vb name="Read a Fixed Width Column Log" n="712">' Read a Fixed Width Column Log


Const ForReading = 1

Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objTextFile = objFSO.OpenTextFile("C:\Windows\Debug\Netsetup.log", _
    ForReading)

Do While objTextFile.AtEndOfStream &amp;lt;&amp;gt; True
    strLinetoParse = objTextFile.ReadLine
    dtmEventDate = Mid(strLinetoParse, 1, 6)
    dtmEventTime = Mid(strLinetoParse, 7, 9)
    strEventDescription = Mid(strLinetoParse, 16)
    Wscript.Echo "Date: " &amp;amp; dtmEventDate
    Wscript.Echo "Time: " &amp;amp; dtmEventTime
    Wscript.Echo "Description: " &amp;amp; strEventDescription &amp;amp; VbCrLf
Loop
objFSO.Close
</vb></dd>
	</dd>
	<dd name="Messaging and Communication" code="message" desc="Sample scripts for managing messaging and communication applications, including Microsoft Exchange Server 2003.">
		<dd name="Microsoft Exchange Server 2003" code="exch2003" desc="Sample scripts for managing Exchange Server 2003."><vb name="List  Exchange Schedule Interval Information" n="713">' List  Exchange Schedule Interval Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\ROOT\MicrosoftExchangeV2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Exchange_ScheduleInterval")

For Each objItem in colItems
    Wscript.Echo "Start time: " &amp;amp; objItem.StartTime
    Wscript.Echo "Stop time: " &amp;amp; objItem.StopTime
    Wscript.Echo
Next
</vb><vb name="List Exchange Cluster Resource Information" n="714">' List Exchange Cluster Resource Information



On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp;  _
        strComputer &amp;amp; "\root\CIMV2\Applications\Exchange")

Set colItems = objWMIService.ExecQuery _
     ("Select * from ExchangeClusterResource")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Owner: " &amp;amp; objItem.Owner
    Wscript.Echo "State: " &amp;amp; objItem.State
    Wscript.Echo "Type: " &amp;amp; objItem.Type
    Wscript.Echo "Virtual machine: " &amp;amp; objItem.VirtualMachine
    Wscript.Echo
Next
</vb><vb name="List Exchange Connector State Information" n="715">' List Exchange Connector State Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp;  _
        strComputer &amp;amp; "\root\cimv2\Applications\Exchange")

Set colItems = objWMIService.ExecQuery _
    ("Select * from ExchangeConnectorState")

For Each objItem in colItems
    Wscript.Echo "Distinguished name: " &amp;amp; objItem.DN
    Wscript.Echo "Group distinguished name: " &amp;amp; objItem.GroupDN
    Wscript.Echo "Group GUID: " &amp;amp; objItem.GroupGUID
    Wscript.Echo "GUID: " &amp;amp; objItem.GUID
    Wscript.Echo "Is up: " &amp;amp; objItem.IsUp
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo
Next
</vb><vb name="List Exchange Domain Controller Information" n="716">' List Exchange Domain Controller Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\ROOT\MicrosoftExchangeV2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Exchange_DSAccessDC")

For Each objItem in colItems
    Wscript.Echo "Configuration: " &amp;amp; objItem.Configuration
    Wscript.Echo "Directory type: " &amp;amp; objItem.DirectoryType
    Wscript.Echo "Is fast: " &amp;amp; objItem.IsFast
    Wscript.Echo "Is in sync: " &amp;amp; objItem.IsInSync
    Wscript.Echo "Is up: " &amp;amp; objItem.IsUp
    Wscript.Echo "LDAP port: " &amp;amp; objItem.LDAPPort
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Type: " &amp;amp; objItem.Type
    Wscript.Echo
Next
</vb><vb name="List Exchange Folder Tree Information" n="717">' List Exchange Folder Tree Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\ROOT\MicrosoftExchangeV2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Exchange_FolderTree")

For Each objItem in colItems
    Wscript.Echo "Administrative group: " &amp;amp; _
        objItem.AdministrativeGroup
    Wscript.Echo "Administrative noe: " &amp;amp; _
        objItem.AdministrativeNote
    Wscript.Echo "Associated public stores: " &amp;amp; _
        objItem.AssociatedPublicStores
    Wscript.Echo "Creation time: " &amp;amp; objItem.CreationTime
    Wscript.Echo "GUID: " &amp;amp; objItem.GUID
    Wscript.Echo "Has local public store: " &amp;amp; _
        objItem.HasLocalPublicStore
    Wscript.Echo "Last modification time: " &amp;amp; _
        objItem.LastModificationTime
    Wscript.Echo "MAPI folder tree: " &amp;amp; objItem.MAPIFolderTree
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Root folder URL: " &amp;amp; objItem.RootFolderURL
    Wscript.Echo
Next
</vb><vb name="List Exchange Link Information" n="718">' List Exchange Link Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\ROOT\MicrosoftExchangeV2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Exchange_Link")

For Each objItem in colItems
    Wscript.Echo "Action freeze: " &amp;amp; objItem.ActionFreeze
    Wscript.Echo "Action kick: " &amp;amp; objItem.ActionKick
    Wscript.Echo "Action thaw: " &amp;amp; objItem.ActionThaw
    Wscript.Echo "Extended state info: " &amp;amp; _
        objItem.ExtendedStateInfo
    Wscript.Echo "Global stop: " &amp;amp; objItem.GlobalStop
    Wscript.Echo "Link distinguished name: " &amp;amp; objItem.LinkDN
    Wscript.Echo "Link ID: " &amp;amp; objItem.LinkID
    Wscript.Echo "Link name: " &amp;amp; objItem.LinkName
    Wscript.Echo "Message count: " &amp;amp; objItem.MessageCount
    Wscript.Echo "Next scheduled connection: " &amp;amp; _
        objItem.NextScheduledConnection
    Wscript.Echo "Oldest message: " &amp;amp; objItem.OldestMessage
    Wscript.Echo "Protocol name: " &amp;amp; objItem.ProtocolName
    Wscript.Echo "Size: " &amp;amp; objItem.Size
    Wscript.Echo "State action: " &amp;amp; objItem.StateActive
    Wscript.Echo "State flags: " &amp;amp; objItem.StateFlags
    Wscript.Echo "State frozen: " &amp;amp; objItem.StateFrozen
    Wscript.Echo "State ready: " &amp;amp; objItem.StateReady
    Wscript.Echo "State remote: " &amp;amp; objItem.StateRemote
    Wscript.Echo "State retry: " &amp;amp; objItem.StateRetry
    Wscript.Echo "State scheduled: " &amp;amp; objItem.StateScheduled
    Wscript.Echo "Support link actions: " &amp;amp; _
        objItem.SupportLinkActions
    Wscript.Echo "Type currently unreachable: " &amp;amp; _
        objItem.TypeCurrentlyUnreachable
    Wscript.Echo "Type deferred deilvery: " &amp;amp; _
        objItem.TypeDeferredDelivery
    Wscript.Echo "Type internal: " &amp;amp; objItem.TypeInternal
    Wscript.Echo "Type local delivery: " &amp;amp; _
        objItem.TypeLocalDelivery
    Wscript.Echo "Type pending categorization: " &amp;amp; _
        objItem.TypePendingCategorization
    Wscript.Echo "Type pending routing: " &amp;amp; _
        objItem.TypePendingRouting
    Wscript.Echo "Type pending submission: " &amp;amp; _
        objItem.TypePendingSubmission
    Wscript.Echo "Type remote delivery: " &amp;amp; _
        objItem.TypeRemoteDelivery
    Wscript.Echo "Version: " &amp;amp; objItem.Version
    Wscript.Echo "Virtual machine: " &amp;amp; objItem.VirtualMachine
    Wscript.Echo "Virtual server name: " &amp;amp; _
        objItem.VirtualServerName
    Wscript.Echo
Next
</vb><vb name="List Exchange Logon Information" n="719">' List Exchange Logon Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\ROOT\MicrosoftExchangeV2")

Set colItems = objWMIService.ExecQuery("Select * from Exchange_Logon")

For Each objItem in colItems
    Wscript.Echo "Client version: " &amp;amp; objItem.ClientVersion
    Wscript.Echo "Code page ID: " &amp;amp; objItem.CodePageID
    Wscript.Echo "Folder operations rate: " &amp;amp; _
        objItem.FolderOperationsRate
    Wscript.Echo "Host addess: " &amp;amp; objItem.HostAddress
    Wscript.Echo "Last operation time: " &amp;amp; _
        objItem.LastOperationTime
    Wscript.Echo "Locale ID: " &amp;amp; objItem.LocaleID
    Wscript.Echo "Logged-on user account: " &amp;amp; _
        objItem.LoggedOnUserAccount
    Wscript.Echo "Logged-on user's malibx legacy distinguished name: " _
        &amp;amp; objItem.LoggedOnUsersMailboxLegacyDN
    Wscript.Echo "Logon time: " &amp;amp; objItem.LogonTime
    Wscript.Echo "Mailbox display name: " &amp;amp; _
        objItem.MailboxDisplayName
    Wscript.Echo "Mailbox legacy distinguished name: " &amp;amp; _
        objItem.MailboxLegacyDN
    Wscript.Echo "Messaging operation count: " &amp;amp; _
        objItem.MessagingOperationRate
    Wscript.Echo "Open attachment count: " &amp;amp; _
        objItem.OpenAttachmentCount
    Wscript.Echo "Open folder count: " &amp;amp; objItem.OpenFolderCount
    Wscript.Echo "Open message count: " &amp;amp; objItem.OpenMessageCount
    Wscript.Echo "Other operation rate: " &amp;amp; _
        objItem.OtherOperationRate
    Wscript.Echo "Progress operation rate: " &amp;amp; _
        objItem.ProgressOperationRate
    Wscript.Echo "Row ID: " &amp;amp; objItem.RowID
    Wscript.Echo "Server name: " &amp;amp; objItem.ServerName
    Wscript.Echo "Storage group name: " &amp;amp; objItem.StorageGroupName
    Wscript.Echo "Store name: " &amp;amp; objItem.StoreName
    Wscript.Echo "Store type: " &amp;amp; objItem.StoreType
    Wscript.Echo "Stream operation rate: " &amp;amp; _
        objItem.StreamOperationRate
    Wscript.Echo "Table operation rate: " &amp;amp; _
        objItem.TableOperationRate
    Wscript.Echo "Total operation rate: " &amp;amp; _
        objItem.TotalOperationRate
    Wscript.Echo "Transfer operation rate: " &amp;amp; _
        objItem.TransferOperationRate
    Wscript.Echo
Next
</vb><vb name="List Exchange Mailbox Information" n="720">' List Exchange Mailbox Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\ROOT\MicrosoftExchangeV2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Exchange_Mailbox")

For Each objItem in colItems
    Wscript.Echo "Associated content count: " &amp;amp; _
        objItem.AssocContentCount
    Wscript.Echo "Date discovered absent in directory service: " &amp;amp; _
        objItem.DateDiscoveredAbsentInDS
    Wscript.Echo "Delete messages size extended: " &amp;amp; _
        objItem.DeletedMessageSizeExtended
    Wscript.Echo "Last logged-on user account: " &amp;amp; _
        objItem.LastLoggedOnUserAccount
    Wscript.Echo "Last logoff time: " &amp;amp; objItem.LastLogoffTime
    Wscript.Echo "Last logon time: " &amp;amp; objItem.LastLogonTime
    Wscript.Echo "Legacy distinguished name: " &amp;amp; objItem.LegacyDN
    Wscript.Echo "Mailbox display name: " &amp;amp; _
        objItem.MailboxDisplayName
    Wscript.Echo "Mailbox GUID: " &amp;amp; objItem.MailboxGUID
    Wscript.Echo "Server name: " &amp;amp; objItem.ServerName
    Wscript.Echo "Size: " &amp;amp; objItem.Size
    Wscript.Echo "Storage group name: " &amp;amp; _
        objItem.StorageGroupName
    Wscript.Echo "Storage limit information: " &amp;amp; _
        objItem.StorageLimitInfo
    Wscript.Echo "Store name: " &amp;amp; objItem.StoreName
    Wscript.Echo "Total items: " &amp;amp; objItem.TotalItems
    Wscript.Echo
Next
</vb><vb name="List Exchange Message Tracking Entry Information" n="721">' List Exchange Message Tracking Entry Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\ROOT\MicrosoftExchangeV2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Exchange_MessageTrackingEntry")

For Each objItem in colItems
    Wscript.Echo "Attempted partner server: " &amp;amp;  _
        objItem.AttemtpedPartnerServer
    Wscript.Echo "Client IP: " &amp;amp; objItem.ClientIP
    Wscript.Echo "Client name: " &amp;amp; objItem.ClientName
    Wscript.Echo "Cost: " &amp;amp; objItem.Cost
    Wscript.Echo "Delivery time: " &amp;amp; objItem.DeliveryTime
    Wscript.Echo "Encrypted: " &amp;amp; objItem.Encrypted
    Wscript.Echo "Entry type: " &amp;amp; objItem.EntryType
    Wscript.Echo "Expansion DL: " &amp;amp; objItem.ExpansionDL
    Wscript.Echo "Key ID: " &amp;amp; objItem.KeyID
    Wscript.Echo "Linked message ID: " &amp;amp;  _
        objItem.LinkedMessageID
    Wscript.Echo "Message ID: " &amp;amp; objItem.MessageID
    Wscript.Echo "Origination time: " &amp;amp; objItem.OriginationTime
    Wscript.Echo "Partner server: " &amp;amp; objItem.PartnerServer
    Wscript.Echo "Priority: " &amp;amp; objItem.Priority
    Wscript.Echo "Recipient address: " &amp;amp;  _
        objItem.RecipientAddress
    Wscript.Echo "Recipient count: " &amp;amp; objItem.RecipientCount
    Wscript.Echo "Recipient status: " &amp;amp; objItem.RecipientStatus
    Wscript.Echo "Sender address: " &amp;amp; objItem.SenderAddress
    Wscript.Echo "Server IP: " &amp;amp; objItem.ServerIP
    Wscript.Echo "Server name: " &amp;amp; objItem.ServerName
    Wscript.Echo "Size: " &amp;amp; objItem.Size
    Wscript.Echo "Subject: " &amp;amp; objItem.Subject
    Wscript.Echo "Subject ID: " &amp;amp; objItem.SubjectID
    Wscript.Echo "Time logged: " &amp;amp; objItem.TimeLogged
    Wscript.Echo "Version: " &amp;amp; objItem.Version
    Wscript.Echo
Next
</vb><vb name="List Exchange Public Folder Information" n="722">' List Exchange Public Folder Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\ROOT\MicrosoftExchangeV2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Exchange_PublicFolder")

For Each objItem in colItems
    Wscript.Echo "Address book name: " &amp;amp; objItem.AddressBookName
    Wscript.Echo "Administrative note: " &amp;amp; _
        objItem.AdministrativeNote
    Wscript.Echo "Administrative security descriptor: " &amp;amp; _
        objItem.AdminSecurityDescriptor
    Wscript.Echo "Active Directory proxy path: " &amp;amp; _
        objItem.ADProxyPath
    Wscript.Echo "Associated messgae count: " &amp;amp; _
        objItem.AssociatedMessageCount
    Wscript.Echo "Attachment count: " &amp;amp; objItem.AttachmentCount
    Wscript.Echo "Categorization count: " &amp;amp; _
        objItem.CategorizationCount
    Wscript.Echo "Comment: " &amp;amp; objItem.Comment
    Wscript.Echo "Contact count: " &amp;amp; objItem.ContactCount
    Wscript.Echo "Contains rules: " &amp;amp; objItem.ContainsRules
    Wscript.Echo "Creation time: " &amp;amp; objItem.CreationTime
    Wscript.Echo "Deleted item lifetime: " &amp;amp; _
        objItem.DeletedItemLifetime
    Wscript.Echo "Folder tree: " &amp;amp; objItem.FolderTree
    Wscript.Echo "Friendly URL: " &amp;amp; objItem.FriendlyURL
    Wscript.Echo "Has children: " &amp;amp; objItem.HasChildren
    Wscript.Echo "Has local replica: " &amp;amp; objItem.HasLocalReplica
    Wscript.Echo "Is mail enabled: " &amp;amp; objItem.IsMailEnabled
    Wscript.Echo "Is normal folder: " &amp;amp; objItem.IsNormalFolder
    Wscript.Echo "Is search folder: " &amp;amp; objItem.IsSearchFolder
    Wscript.Echo "Is secure in site: " &amp;amp; objItem.IsSecureInSite
    Wscript.Echo "Last access time: " &amp;amp; objItem.LastAccessTime
    Wscript.Echo "Last modification time: " &amp;amp; _
        objItem.LastModificationTime
    Wscript.Echo "Maximum item size: " &amp;amp; objItem.MaximumItemSize
    Wscript.Echo "Message count: " &amp;amp; objItem.MessageCount
    Wscript.Echo "Message with attachments count: " &amp;amp; _
        objItem.MessageWithAttachmentsCount
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Normal message size: " &amp;amp; _
        objItem.NormalMessageSize
    Wscript.Echo "owner count: " &amp;amp; objItem.OwnerCount
    Wscript.Echo "Parent friendly URL: " &amp;amp; _
        objItem.ParentFriendlyURL
    Wscript.Echo "Path: " &amp;amp; objItem.Path
    Wscript.Echo "Prohibit post limit: " &amp;amp; _
        objItem.ProhibitPostLimit
    Wscript.Echo "Publish in address book: " &amp;amp; _
        objItem.PublishInAddressBook
    Wscript.Echo "Recipiejt count on associated messages: " &amp;amp; _
        objItem.RecipientCountOnAssociatedMessages
    Wscript.Echo "Recipient count on normal messages: " &amp;amp; _
        objItem.RecipientCountOnNormalMessages
    Wscript.Echo "Replica age limit: " &amp;amp; objItem.ReplicaAgeLimit
    Wscript.Echo "Replica list: " &amp;amp; objItem.ReplicaList
    Wscript.Echo "Replication message priority: " &amp;amp; _
        objItem.ReplicationMessagePriority
    Wscript.Echo "Replication schedule: " &amp;amp; _
        objItem.ReplicationSchedule
    Wscript.Echo "Replication style: " &amp;amp; objItem.ReplicationStyle
    Wscript.Echo "Replication count: " &amp;amp; objItem.RestrictionCount
    Wscript.Echo "Security descriptor: " &amp;amp; _
        objItem.SecurityDescriptor
    Wscript.Echo "Storage limit style: " &amp;amp; objItem.StorageLimitStyle
    Wscript.Echo "Target address: " &amp;amp; objItem.TargetAddress
    Wscript.Echo "Total message size: " &amp;amp; objItem.TotalMessageSize
    Wscript.Echo "URL: " &amp;amp; objItem.URL
    Wscript.Echo "Use public store age limits: " &amp;amp; _
        objItem.UsePublicStoreAgeLimits
    Wscript.Echo "Use public store deleted item lifetime: " &amp;amp; _
        objItem.UsePublicStoreDeletedItemLifetime
    Wscript.Echo "Warning limit: " &amp;amp; objItem.WarningLimit
    Wscript.Echo
Next
</vb><vb name="List Exchange Queue Information" n="723">' List Exchange Queue Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\ROOT\MicrosoftExchangeV2")

Set colItems = objWMIService.ExecQuery("Select * from ExchangeQueue")

For Each objItem in colItems
    Wscript.Echo "Can enumerate all: " &amp;amp; objItem.CanEnumAll
    Wscript.Echo "Can enumerate failures: " &amp;amp; objItem.CanEnumFailed
    Wscript.Echo "Van enumerate first N messages: " &amp;amp; _
        objItem.CanEnumFirstNMessages
    Wscript.Echo "Can enumerate frozen messages: " &amp;amp; _
        objItem.CanEnumFrozen
    Wscript.Echo "Can enumerate messages not meeting the criteria: " &amp;amp; _
        objItem.CanEnumInvertSense
    Wscript.Echo "Can enumerate messages larger than X: " &amp;amp; _
        objItem.CanEnumLargerThan
    Wscript.Echo "Can enumerate largest N messages: " &amp;amp; _
        objItem.CanEnumNLargestMessages
    Wscript.Echo "Can enumerate oldest N messages: " &amp;amp; _
        objItem.CanEnumNOldestMessages
    Wscript.Echo "Can enumerate messages older than X: " &amp;amp; _
        objItem.CanEnumOlderThan
    Wscript.Echo "Can enumerate recipients: " &amp;amp; _
        objItem.CanEnumRecipient
    Wscript.Echo "Can enumerate senders: " &amp;amp; objItem.CanEnumSender
    Wscript.Echo "Global stop: " &amp;amp; objItem.GlobalStop
    Wscript.Echo "Increasing time: " &amp;amp; objItem.IncreasingTime
    Wscript.Echo "Link name: " &amp;amp; objItem.LinkName
    Wscript.Echo "Message enumeration flags supported: " &amp;amp; _
        objItem.MsgEnumFlagsSupported
    Wscript.Echo "Number of messages: " &amp;amp; objItem.NumberOfMessages
    Wscript.Echo "Protocol name: " &amp;amp; objItem.ProtocolName
    Wscript.Echo "Queue name: " &amp;amp; objItem.QueueName
    Wscript.Echo "Size of queue: " &amp;amp; objItem.SizeOfQueue
    Wscript.Echo "Version: " &amp;amp; objItem.Version
    Wscript.Echo "Virtual machine: " &amp;amp; objItem.VirtualMachine
    Wscript.Echo "Virtual server name: " &amp;amp; objItem.VirtualServerName
    Wscript.Echo
Next
</vb><vb name="List Exchange Queued Message Information" n="724">' List Exchange Queued Message Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\ROOT\MicrosoftExchangeV2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Exchange_QueuedMessage")

For Each objItem in colItems
    Wscript.Echo "Action deleted NDR: " &amp;amp; objItem.ActionDeletedNDR
    Wscript.Echo "Action deleted no NDR: " &amp;amp; _
        objItem.ActionDeletedNoNDR
    Wscript.Echo "Action freeze: " &amp;amp; objItem.ActionFreeze
    Wscript.Echo "Action thaw: " &amp;amp; objItem.ActionThaw
    Wscript.Echo "Expiry: " &amp;amp; objItem.Expiry
    Wscript.Echo "High priority: " &amp;amp; objItem.HighPriority
    Wscript.Echo "Link ID: " &amp;amp; objItem.LinkID
    Wscript.Echo "Link name: " &amp;amp; objItem.LinkName
    Wscript.Echo "Low priority: " &amp;amp; objItem.LowPriority
    Wscript.Echo "Message ID: " &amp;amp; objItem.MessageID
    Wscript.Echo "Normal priority: " &amp;amp; objItem.NormalPriority
    Wscript.Echo "Protocol ID: " &amp;amp; objItem.ProtocolName
    Wscript.Echo "Queue ID: " &amp;amp; objItem.QueueID
    Wscript.Echo "Queue name: " &amp;amp; objItem.QueueName
    Wscript.Echo "Received: " &amp;amp; objItem.Received
    Wscript.Echo "Recipient count: " &amp;amp; objItem.RecipientCount
    Wscript.Echo "Recipients: " &amp;amp; objItem.Recipients
    Wscript.Echo "Sender: " &amp;amp; objItem.Sender
    Wscript.Echo "Size: " &amp;amp; objItem.Size
    Wscript.Echo "State flags: " &amp;amp; objItem.StateFlags
    Wscript.Echo "State frozen: " &amp;amp; objItem.StateFrozen
    Wscript.Echo "State retry: " &amp;amp; objItem.StateRetry
    Wscript.Echo "Subject: " &amp;amp; objItem.Subject
    Wscript.Echo "Submission: " &amp;amp; objItem.Submission
    Wscript.Echo "Version: " &amp;amp; objItem.Version
    Wscript.Echo "Virtual machine: " &amp;amp; objItem.VirtualMachine
    Wscript.Echo "Virtual server name: " &amp;amp; _
        objItem.VirtualServerName
    Wscript.Echo
Next
</vb><vb name="List Exchange Server Information" n="725">' List Exchange Server Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\ROOT\MicrosoftExchangeV2")

Set colItems = objWMIService.ExecQuery("Select * from Exchange_Server")

For Each objItem in colItems
    Wscript.Echo "Administrative group: " &amp;amp; _
        objItem.AdministrativeGroup
    Wscript.Echo "Administrative note: " &amp;amp; objItem.AdministrativeNote
    Wscript.Echo "Creation time: " &amp;amp; objItem.CreationTime
    Wscript.Echo "Distinguished name: " &amp;amp; objItem.DN
    Wscript.Echo "Exchange version: " &amp;amp; objItem.ExchangeVersion
    Wscript.Echo "Fully-qualified domain name: " &amp;amp; objItem.FQDN
    Wscript.Echo "GUID: " &amp;amp; objItem.GUID
    Wscript.Echo "Is front-end server: " &amp;amp; objItem.IsFrontEndServer
    Wscript.Echo "Last modification time: " &amp;amp; _
        objItem.LastModificationTime
    Wscript.Echo "Message tracking enabled: " &amp;amp; _
        objItem.MessageTrackingEnabled
    Wscript.Echo "Message tracking log file lifetime: " &amp;amp; _
        objItem.MessageTrackingLogFileLifetime
    Wscript.Echo "Message tracking log file path: " &amp;amp; _
        objItem.MessageTrackingLogFilePath
    Wscript.Echo "Monitoring enabled: " &amp;amp; objItem.MonitoringEnabled
    Wscript.Echo "MTA data path: " &amp;amp; objItem.MTADataPath
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Routing group: " &amp;amp; objItem.RoutingGroup
    Wscript.Echo "Subject logging enabled: " &amp;amp; _
        objItem.SubjectLoggingEnabled
    Wscript.Echo "Type: " &amp;amp; objItem.Type
    Wscript.Echo
Next
</vb><vb name="List Exchange Server State Information" n="726">' List Exchange Server State Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp;  _
        strComputer &amp;amp; "\root\cimv2\Applications\Exchange")

Set colItems = objWMIService.ExecQuery _
    ("Select * from ExchangeServerState")

For Each objItem in colItems
    Wscript.Echo "Cluster state: " &amp;amp; objItem.ClusterState
    Wscript.Echo "Cluster state string: " &amp;amp; _
        objItem.ClusterStateString
    Wscript.Echo "CPU state: " &amp;amp; objItem.CPUState
    Wscript.Echo "CPU state string: " &amp;amp; objItem.CPUStateString
    Wscript.Echo "Disks state: " &amp;amp; objItem.DisksState
    Wscript.Echo "Diskss state string: " &amp;amp; objItem.DisksStateString
    Wscript.Echo "Distinguished name: " &amp;amp; objItem.DN
    Wscript.Echo "Group dsitinguihsed name: " &amp;amp; objItem.GroupDN
    Wscript.Echo "Group GUID: " &amp;amp; objItem.GroupGUID
    Wscript.Echo "GUID: " &amp;amp; objItem.GUID
    Wscript.Echo "Memory state: " &amp;amp; objItem.MemoryState
    Wscript.Echo "Memory state string: " &amp;amp; _
        objItem.MemoryStateString
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Queues state: " &amp;amp; objItem.QueuesState
    Wscript.Echo "Queues state string: " &amp;amp; _
        objItem.QueuesStateString
    Wscript.Echo "Server maintenance: " &amp;amp; _
        objItem.ServerMaintenance
    Wscript.Echo "Server state: " &amp;amp; objItem.ServerState
    Wscript.Echo "Server state string: " &amp;amp; _
        objItem.ServerStateString
    Wscript.Echo "Services state: " &amp;amp; objItem.ServicesState
    Wscript.Echo "Services state string: " &amp;amp; _
        objItem.ServicesStateString
    Wscript.Echo "Unreachable: " &amp;amp; objItem.Unreachable
    Wscript.Echo "Version: " &amp;amp; objItem.Version
    Wscript.Echo
Next
</vb><vb name="List Exchange Virtual Server Queue Information" n="727">' List Exchange Virtual Server Queue Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\ROOT\MicrosoftExchangeV2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Exchange_QueueVirtualServer")

For Each objItem in colItems
    Wscript.Echo "Global actions supported: " &amp;amp; _
        objItem.GlobalActionsSupported
    Wscript.Echo "Global stop: " &amp;amp; objItem.GlobalStop
    Wscript.Echo "Protocol name: " &amp;amp; objItem.ProtocolName
    Wscript.Echo "Virtual machine: " &amp;amp; objItem.VirtualMachine
    Wscript.Echo "Virtual server name: " &amp;amp; _
        objItem.VirtualServerName
    Wscript.Echo
Next
</vb><vb name="List Exchange XML Queue Data" n="728">' List Exchange XML Queue Data


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\ROOT\MicrosoftExchangeV2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Exchange_QueueData")

For Each objItem in colItems
    Wscript.Echo "Server name: " &amp;amp; objItem.ServerName
    Wscript.Echo "XML queue data: " &amp;amp; objItem.XMLQueueData
    Wscript.Echo
Next
</vb><vb name="List the Queued Cache Reload Time" n="729">' List the Queued Cache Reload Time


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\ROOT\MicrosoftExchangeV2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Exchange_QueueCacheReloadEvent")

For Each objItem in colItems
    Wscript.Echo "Reload time: " &amp;amp; objItem.ReloadTime
    Wscript.Echo
Next
</vb></dd>
		<dd name="SMTP Mail" code="smtpmail" desc="Sample scripts for sending SMTP email using Collaboration Data Objects (CDO)."><vb name="Send Email from a Script" n="730">' Send Email from a Script


Set objEmail = CreateObject("CDO.Message")

objEmail.From = "monitor1@fabrikam.com"
objEmail.To = "admin1@fabrikam.com"
objEmail.Subject = "Atl-dc-01 down" 
objEmail.Textbody = "Atl-dc-01 is no longer accessible over the network."
objEmail.Send
</vb><vb name="Send Email without Installing the SMTP Service" n="731">' Send Email without Installing the SMTP Service


Set objEmail = CreateObject("CDO.Message")

objEmail.From = "admin1@fabrikam.com"
objEmail.To = "admin2@fabrikam.com"
objEmail.Subject = "Server down" 
objEmail.Textbody = "Server1 is no longer accessible over the network."
objEmail.Configuration.Fields.Item _
    ("http://schemas.microsoft.com/cdo/configuration/sendusing") = 2
objEmail.Configuration.Fields.Item _
    ("http://schemas.microsoft.com/cdo/configuration/smtpserver") = _
        "smarthost" 
objEmail.Configuration.Fields.Item _
    ("http://schemas.microsoft.com/cdo/configuration/smtpserverport") = 25
objEmail.Configuration.Fields.Update
objEmail.Send
</vb></dd>
	</dd>
	<dd name="Microsoft Office" code="office" desc="Sample scripts for managing Microsoft Office applications.">
		<dd name="Microsoft Excel" code="excel" desc="Sample scripts demonstrating ways to use the capabilities of Microsoft Excel within a system administration script."><vb name="Add Data to a Spreadsheet Cell" n="732">' Add Data to a Spreadsheet Cell



Set objExcel = CreateObject("Excel.Application")

objExcel.Visible = True
objExcel.Workbooks.Add
objExcel.Cells(1, 1).Value = "Test value"
</vb><vb name="Add Formatted Data to a Spreadsheet" n="733">' Add Formatted Data to a Spreadsheet



Set objExcel = CreateObject("Excel.Application")

objExcel.Visible = True
objExcel.Workbooks.Add
objExcel.Cells(1, 1).Value = "Test value"
objExcel.Cells(1, 1).Font.Bold = TRUE
objExcel.Cells(1, 1).Font.Size = 24
objExcel.Cells(1, 1).Font.ColorIndex = 3
</vb><vb name="Create User Accounts Based on Information in a Spreadsheet" n="734">' Create User Accounts Based on Information in a Spreadsheet


Set objExcel = CreateObject("Excel.Application")
Set objWorkbook = objExcel.Workbooks.Open _
    ("C:\Scripts\New_users.xls")

intRow = 2

Do Until objExcel.Cells(intRow,1).Value = ""
    Set objOU = GetObject("ou=Finance, dc=fabrikam, dc=com")
    Set objUser = objOU.Create _
        ("User", "cn=" &amp;amp; objExcel.Cells(intRow, 1).Value)
    objUser.sAMAccountName = objExcel.Cells(intRow, 2).Value
    objUser.GivenName = objExcel.Cells(intRow, 3).Value
    objUser.SN = objExcel.Cells(intRow, 4).Value
    objUser.AccountDisabled = FALSE
    objUser.SetInfo
    intRow = intRow + 1
Loop

objExcel.Quit
</vb><vb name="Format a Range of Cells" n="735">' Format a Range of Cells


Set objExcel = CreateObject("Excel.Application")

objExcel.Visible = True
objExcel.Workbooks.Add

objExcel.Cells(1, 1).Value = "Name"
objExcel.Cells(1, 1).Font.Bold = TRUE
objExcel.Cells(1, 1).Interior.ColorIndex = 30
objExcel.Cells(1, 1).Font.ColorIndex = 2
objExcel.Cells(2, 1).Value = "Test value 1"
objExcel.Cells(3, 1).Value = "Test value 2"
objExcel.Cells(4, 1).Value = "Tets value 3"
objExcel.Cells(5, 1).Value = "Test value 4"

Set objRange = objExcel.Range("A1","A5")
objRange.Font.Size = 14

Set objRange = objExcel.Range("A2","A5")
objRange.Interior.ColorIndex = 36

Set objRange = objExcel.ActiveCell.EntireColumn
objRange.AutoFit()
</vb><vb name="List Active Directory Data in a Spreadsheet" n="736">' List Active Directory Data in a Spreadsheet


Const ADS_SCOPE_SUBTREE = 2

Set objExcel = CreateObject("Excel.Application")

objExcel.Visible = True
objExcel.Workbooks.Add

objExcel.Cells(1, 1).Value = "Last name"
objExcel.Cells(1, 2).Value = "First name"
objExcel.Cells(1, 3).Value = "Department"
objExcel.Cells(1, 4).Value = "Phone number"

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"

Set objCommand.ActiveConnection = objConnection
objCommand.Properties("Page Size") = 100
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 
objCommand.CommandText = _
    "SELECT givenName, SN, department, telephoneNumber FROM " _
        &amp;amp; "'LDAP://dc=fabrikam,dc=microsoft,dc=com' WHERE " _
            &amp;amp; "objectCategory='user'"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst
x = 2

Do Until objRecordSet.EOF
    objExcel.Cells(x, 1).Value = _
        objRecordSet.Fields("SN").Value
    objExcel.Cells(x, 2).Value = _
        objRecordSet.Fields("givenName").Value
    objExcel.Cells(x, 3).Value = _
        objRecordSet.Fields("department").Value
    objExcel.Cells(x, 4).Value = _
        objRecordSet.Fields("telephoneNumber").Value
    x = x + 1
    objRecordSet.MoveNext
Loop

Set objRange = objExcel.Range("A1")
objRange.Activate

Set objRange = objExcel.ActiveCell.EntireColumn
objRange.Autofit()

Set objRange = objExcel.Range("B1")
objRange.Activate
Set objRange = objExcel.ActiveCell.EntireColumn
objRange.Autofit()

Set objRange = objExcel.Range("C1")
objRange.Activate

Set objRange = objExcel.ActiveCell.EntireColumn
objRange.Autofit()

Set objRange = objExcel.Range("D1")
objRange.Activate

Set objRange = objExcel.ActiveCell.EntireColumn
objRange.Autofit()

Set objRange = objExcel.Range("A1").SpecialCells(11)
Set objRange2 = objExcel.Range("C1")
Set objRange3 = objExcel.Range("A1")
</vb><vb name="List Excel Color Values" n="737">' List Excel Color Values


Set objExcel = CreateObject("Excel.Application")

objExcel.Visible = True
objExcel.Workbooks.Add

For i = 1 to 56
    objExcel.Cells(i, 1).Value = i
    objExcel.Cells(i, 1).Interior.ColorIndex = i
Next
</vb><vb name="List Service Data in a Spreadsheet" n="738">' List Service Data in a Spreadsheet


Set objExcel = CreateObject("Excel.Application")
objExcel.Visible = True
objExcel.Workbooks.Add

x = 1
strComputer = "."
Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colServices = objWMIService.ExecQuery _
    ("Select * From Win32_Service")

For Each objService in colServices
    objExcel.Cells(x, 1) = objService.Name
    objExcel.Cells(x, 2) = objService.State
    x = x + 1
Next
</vb><vb name="Open an Excel Spreadsheet" n="739">' Open an Excel Spreadsheet


Set objExcel = CreateObject("Excel.Application")
Set objWorkbook = objExcel.Workbooks.Open("C:\Scripts\New_users.xls")
</vb><vb name="Read an Excel Spreadsheet" n="740">' Read an Excel Spreadsheet


Set objExcel = CreateObject("Excel.Application")
Set objWorkbook = objExcel.Workbooks.Open _
    ("C:\Scripts\New_users.xls")

intRow = 2

Do Until objExcel.Cells(intRow,1).Value = ""
    Wscript.Echo "CN: " &amp;amp; objExcel.Cells(intRow, 1).Value
    Wscript.Echo "sAMAccountName: " &amp;amp; objExcel.Cells(intRow, 2).Value
    Wscript.Echo "GivenName: " &amp;amp; objExcel.Cells(intRow, 3).Value
    Wscript.Echo "LastName: " &amp;amp; objExcel.Cells(intRow, 4).Value
    intRow = intRow + 1
Loop

objExcel.Quit
</vb><vb name="AutoFit Columns in a Microsoft Excel Worksheet" n="741">' AutoFit Columns in a Microsoft Excel Worksheet



Set objExcel = CreateObject("Excel.Application")
objExcel.Visible = True
Set objWorkbook = objExcel.Workbooks.Add()
Set objWorksheet = objWorkbook.Worksheets(1)
x = 1

strComputer = "."
Set objWMIService = _
    GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_Service")
For Each objItem in colItems
    objWorksheet.Cells(x, 1) = objItem.Name
    objWorksheet.Cells(x, 2) = objItem.DisplayName
    objWorksheet.Cells(x, 3) = objItem.State
    x = x + 1
Next

Set objRange = objWorksheet.UsedRange
objRange.EntireColumn.Autofit()
</vb><vb name="Sort an Excel Spreadsheet on Three Different Columns" n="742">' Sort an Excel Spreadsheet on Three Different Columns



Const xlAscending = 1
Const xlDescending = 2
Const xlYes = 1

Set objExcel = CreateObject("Excel.Application")
objExcel.Visible = True
Set objExcel = CreateObject("Excel.Application")
objExcel.Visible = True
Set objWorkbook = _ 
    objExcel.Workbooks.Open("C:\Scripts\Sort_test.xls")

Set objWorksheet = objWorkbook.Worksheets(1)
Set objRange = objWorksheet.UsedRange

Set objRange2 = objExcel.Range("A1")
Set objRange3 = objExcel.Range("B1")
Set objRange4 = objExcel.Range("C1")

objRange.Sort objRange2,xlAscending,objRange3,,xlDescending, _
    objRange4,xlDescending,xlYes
</vb><vb name="Apply an AutoFormat to an Excel Spreadsheet" n="743">' Apply an AutoFormat to an Excel Spreadsheet



Const xpRangeAutoFormatList2 = 11

Set objExcel = CreateObject("Excel.Application")
objExcel.Visible = True
Set objWorkbook = objExcel.Workbooks.Add()
Set objWorksheet = objWorkbook.Worksheets(1)
k = 1
For i = 1 to 10
    For j = 1 to 10
        objWorksheet.Cells(i,j) = k
        k = k + 1
    Next
Next

Set objRange = objWorksheet.UsedRange
objRange.AutoFormat(xpRangeAutoFormatList2)
</vb><vb name="Sort a Microsoft Excel Worksheet" n="744">' Sort a Microsoft Excel Worksheet



Set objExcel = CreateObject("Excel.Application")
objExcel.Visible = True
Set objWorkbook = objExcel.Workbooks.Add
Set objWorksheet = objWorkbook.Worksheets(1)

objExcel.Cells(1, 1).Value = "4"
objExcel.Cells(2, 1).Value = "1"
objExcel.Cells(3, 1).Value = "2"
objExcel.Cells(4, 1).Value = "3"
objExcel.Cells(1, 2).Value = "A"
objExcel.Cells(2, 2).Value = "B"
objExcel.Cells(3, 2).Value = "C"
objExcel.Cells(4, 2).Value = "D"

Set objRange = objWorksheet.UsedRange
Set objRange2 = objExcel.Range("A1")
objRange.Sort(objRange2)
</vb></dd>
		<dd name="Microsoft PowerPoint" code="ppt" desc="Sample scripts demonstrating ways to use the capabilities of Microsoft PowerPoint within a system administration script."><vb name="Run a Microsoft PowerPoint Slide Show" n="745">' Run a Microsoft PowerPoint Slide Show



Const ppAdvanceOnTime = 2
Const ppShowTypeKiosk = 3
Const ppSlideShowDone = 5

Set objPPT = CreateObject("PowerPoint.Application")
objPPT.Visible = True

Set objPresentation = objPPT.Presentations.Open("C:\Scripts\Process.ppt")

objPresentation.Slides.Range.SlideShowTransition.AdvanceTime = 2
objPresentation.Slides.Range.SlideShowTransition.AdvanceOnTime = TRUE

objPresentation.SlideShowSettings.AdvanceMode = ppAdvanceOnTime 
objPresentation.SlideShowSettings.ShowType = ppShowTypeKiosk
objPresentation.SlideShowSettings.StartingSlide = 1
objPresentation.SlideShowSettings.EndingSlide = _
    objPresentation.Slides.Count

Set objSlideShow = objPresentation.SlideShowSettings.Run.View

Do Until objSlideShow.State = ppSlideShowDone
Loop
</vb><vb name="List the Shapes Found on a Microsoft PowerPoint Slide" n="746">' List the Shapes Found on a Microsoft PowerPoint Slide



Const ppLayoutText = 2

Set objPPT = CreateObject("PowerPoint.Application")
objPPT.Visible = True
Set objPresentation = objPPT.Presentations.Add
objPresentation.ApplyTemplate _
    ("C:\Program Files\Microsoft Office\" &amp;amp; _
        "Templates\Presentation Designs\Globe.pot")
Set objSlide = objPresentation.Slides.Add(1, ppLayoutText)

Set objShapes = objSlide.Shapes

For Each objShape in objShapes
    Wscript.Echo objShape.Name
Next
</vb><vb name="Add a Slide to a Microsoft PowerPoint Presentation" n="747">' Add a Slide to a Microsoft PowerPoint Presentation



Const ppLayoutText = 2

Set objPPT = CreateObject("PowerPoint.Application")
objPPT.Visible = True

Set objPresentation = objPPT.Presentations.Add

objPresentation.ApplyTemplate _
    ("C:\Program Files\Microsoft Office\" &amp;amp; _
        "Templates\Presentation Designs\Globe.pot")

Set objSlide = objPresentation.Slides.Add _
    (1, ppLayoutText)
</vb><vb name="Modify the Title of a Microsoft PowerPoint Slide" n="748">' Modify the Title of a Microsoft PowerPoint Slide



Const ppLayoutText = 2

Set objPPT = CreateObject("PowerPoint.Application")
objPPT.Visible = True

Set objPresentation = objPPT.Presentations.Add
objPresentation.ApplyTemplate _
    ("C:\Program Files\Microsoft Office\" &amp;amp; _
        "Templates\" Presentation Designs\Globe.pot")

Set objSlide = objPresentation.Slides.Add _
    (1, ppLayoutText)

Set objShapes = objSlide.Shapes
Set objTitle = objShapes.Item("Rectangle 2")
objTitle.TextFrame.TextRange.Text = "Ken Myer"
</vb><vb name="Modify a Bulleted List in Microsoft PowerPoint" n="749">' Modify a Bulleted List in Microsoft PowerPoint



Const ppLayoutText = 2

Set objPPT = CreateObject("PowerPoint.Application")
objPPT.Visible = True
Set objPresentation = objPPT.Presentations.Add
objPresentation.ApplyTemplate _
    ("C:\Program Files\Microsoft Office\" &amp;amp; _
        "Templates\Presentation Designs\Globe.pot")
Set objSlide = objPresentation.Slides.Add _
    (1, ppLayoutText)

Set objShapes = objSlide.Shapes

strText = "Assistant Vice-President" &amp;amp; vbCrLf
strText = strText &amp;amp; "Omaha, Nebraska" &amp;amp; vbcrlf
strText = strtext &amp;amp; "Harvard University"

Set objTitle = objShapes.Item("Rectangle 3")
objTitle.TextFrame.TextRange.Text = strText
</vb><vb name="Create a Sample Microsoft PowerPoint Presentation" n="750">' Create a Sample Microsoft PowerPoint Presentation



Set objPPT = CreateObject("PowerPoint.Application")
objPPT.Visible = True
Set objPresentation = objPPT.Presentations.Add
objPresentation.ApplyTemplate("C:\Program Files\Microsoft Office\Templates\Presentation Designs\Globe.pot")

strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colProcesses = objWMIService.ExecQuery("Select * From Win32_Process")

For Each objProcess in colProcesses
    Set objSlide = objPresentation.Slides.Add(1,2)
    Set objShapes = objSlide.Shapes

    Set objTitle = objShapes.Item("Rectangle 2")
    objTitle.TextFrame.TextRange.Text = objProcess.Name

    strText = "Working set size: " &amp;amp; objProcess.WorkingSetSize &amp;amp; vbCrLf
    strText = strText &amp;amp; "Priority: " &amp;amp; objProcess.Priority &amp;amp; vbCrLf
    strText = strText &amp;amp; "Thread count: " &amp;amp; objProcess.ThreadCount &amp;amp; vbCrLf

    Set objTitle = objShapes.Item("Rectangle 3")
    objTitle.TextFrame.TextRange.Text = strText
Next

objPresentation.SaveAs("C:\Scripts\Process.ppt")
objPresentation.Close
objPPT.Quit
</vb></dd>
		<dd name="Microsoft Word" code="word" desc="Sample scripts demonstrating ways to use the capabilities of Microsoft Word within a system administration script."><vb name="Add a Formatted Table to a Word Document" n="751">' Add a Formatted Table to a Word Document


Set objWord = CreateObject("Word.Application")
objWord.Visible = True
Set objDoc = objWord.Documents.Add()

Set objRange = objDoc.Range()
objDoc.Tables.Add objRange,1,3
Set objTable = objDoc.Tables(1)

x=1

strComputer = "."
Set objWMIService = _
    GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colItems = objWMIService.ExecQuery("Select * from Win32_Service")

For Each objItem in colItems
    If x &amp;gt; 1 Then
        objTable.Rows.Add()
    End If
    objTable.Cell(x, 1).Range.Font.Bold = True
    objTable.Cell(x, 1).Range.Text = objItem.Name
    objTable.Cell(x, 2).Range.text = objItem.DisplayName
    objTable.Cell(x, 3).Range.text = objItem.State
    x = x + 1
Next
</vb><vb name="Add a Table to a Word Document" n="752">' Add a Table to a Word Document


Set objWord = CreateObject("Word.Application")
objWord.Visible = True
Set objDoc = objWord.Documents.Add()

Set objRange = objDoc.Range()
objDoc.Tables.Add objRange,1,3
Set objTable = objDoc.Tables(1)

x=1

strComputer = "."
Set objWMIService = _
    GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colItems = objWMIService.ExecQuery("Select * from Win32_Service")

For Each objItem in colItems
    If x &amp;gt; 1 Then
        objTable.Rows.Add()
    End If
    objTable.Cell(x, 1).Range.Text = objItem.Name
    objTable.Cell(x, 2).Range.text = objItem.DisplayName
    objTable.Cell(x, 3).Range.text = objItem.State
    x = x + 1
Next
</vb><vb name="Add Formatted Text to a Word Document" n="753">' Add Formatted Text to a Word Document


Set objWord = CreateObject("Word.Application")

objWord.Visible = True
Set objDoc = objWord.Documents.Add()
Set objSelection = objWord.Selection

objSelection.Font.Name = "Arial"
objSelection.Font.Size = "18"
objSelection.TypeText "Network Adapter Report"
objSelection.TypeParagraph()

objSelection.Font.Size = "14"
objSelection.TypeText "" &amp;amp; Date()
objSelection.TypeParagraph()
</vb><vb name="Append Text to a Word Document" n="754">' Append Text to a Word Document


Const END_OF_STORY = 6
Const MOVE_SELECTION = 0

Set objWord = CreateObject("Word.Application")
objWord.Visible = True

Set objDoc = objWord.Documents.Open("c:\scripts\word\testdoc.doc")
Set objSelection = objWord.Selection
objSelection.EndKey END_OF_STORY, MOVE_SELECTION

objSelection.TypeParagraph()
objSelection.TypeParagraph()

objSelection.Font.Size = "14"
objSelection.TypeText "" &amp;amp; Date()
objSelection.TypeParagraph()
objSelection.TypeParagraph()

objSelection.Font.Size = "10"
</vb><vb name="Apply a Style to a Table in a Word Document" n="755">' Apply a Style to a Table in a Word Document


Set objWord = CreateObject("Word.Application")
objWord.Visible = True
Set objDoc = objWord.Documents.Add()

Set objRange = objDoc.Range()
objDoc.Tables.Add objRange,1,3
Set objTable = objDoc.Tables(1)
objTable.Range.Font.Size = 10
objTable.Range.Style = "Table Contemporary"

x=2

objTable.Cell(x, 1).Range.Text = "Service Name"
objTable.Cell(x, 2).Range.text = "Display Name"
objTable.Cell(x, 3).Range.text = "State"

strComputer = "."
Set objWMIService = _
    GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colItems = objWMIService.ExecQuery("Select * from Win32_Service")

For Each objItem in colItems
    If x &amp;gt; 1 Then
        objTable.Rows.Add()
    End If
    objTable.Cell(x, 1).Range.Text = objItem.Name
    objTable.Cell(x, 2).Range.text = objItem.DisplayName
    objTable.Cell(x, 3).Range.text = objItem.State
    x = x + 1
Next
</vb><vb name="Create a New Word Document" n="756">' Create a New Word Document


Set objWord = CreateObject("Word.Application")
objWord.Visible = True
Set objDoc = objWord.Documents.Add()
</vb><vb name="Create and Save a Word Document" n="757">' Create and Save a Word Document


Set objWord = CreateObject("Word.Application")
objWord.Caption = "Test Caption"
objWord.Visible = True

Set objDoc = objWord.Documents.Add()
Set objSelection = objWord.Selection

objSelection.Font.Name = "Arial"
objSelection.Font.Size = "18"
objSelection.TypeText "Network Adapter Report"
objSelection.TypeParagraph()

objSelection.Font.Size = "14"
objSelection.TypeText "" &amp;amp; Date()
objSelection.TypeParagraph()
objSelection.TypeParagraph()

objSelection.Font.Size = "10"

strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_NetworkAdapterConfiguration")

For Each objItem in colItems

    objSelection.Font.Bold = True
    objSelection.TypeText "ARP Always Source Route: " 
    objSelection.Font.Bold = False
    objSelection.TypeText "" &amp;amp; objItem.ArpAlwaysSourceRoute
    objSelection.TypeParagraph()

    objSelection.Font.Bold = True
    objSelection.TypeText "ARP Use EtherSNAP: "
    objSelection.Font.Bold = False
    objSelection.TypeText ""  &amp;amp; objItem.ArpUseEtherSNAP
    objSelection.TypeParagraph()

    objSelection.Font.Bold = True
    objSelection.TypeText "Caption: "
    objSelection.Font.Bold = False
    objSelection.TypeText ""  &amp;amp; objItem.Caption
    objSelection.TypeParagraph()

    objSelection.Font.Bold = True
    objSelection.TypeText "Database Path: "
    objSelection.Font.Bold = False
    objSelection.TypeText ""   &amp;amp; objItem.DatabasePath
    objSelection.TypeParagraph()

    objSelection.Font.Bold = True
    objSelection.TypeText "Dead GW Detection Enabled: "
    objSelection.Font.Bold = False
    objSelection.TypeText ""   &amp;amp; objItem.DeadGWDetectEnabled
    objSelection.TypeParagraph()

    objSelection.Font.Bold = True
    objSelection.TypeText "Default IP Gateway: " 
    objSelection.Font.Bold = False
    objSelection.TypeText "" &amp;amp; objItem.DefaultIPGateway
    objSelection.TypeParagraph()

    objSelection.Font.Bold = True
    objSelection.TypeText "Default TOS: "
    objSelection.Font.Bold = False
    objSelection.TypeText ""  &amp;amp; objItem.DefaultTOS
    objSelection.TypeParagraph()

    objSelection.Font.Bold = True
    objSelection.TypeText "Default TTL: "
    objSelection.Font.Bold = False
    objSelection.TypeText ""  &amp;amp; objItem.DefaultTTL
    objSelection.TypeParagraph()

    objSelection.Font.Bold = True
    objSelection.TypeText "Description: "
    objSelection.Font.Bold = True
    objSelection.Font.Bold = False
    objSelection.TypeText ""  &amp;amp; objItem.Description
    objSelection.TypeParagraph()

    objSelection.TypeParagraph()

Next

objDoc.SaveAs("C:\Scripts\Word\testdoc.doc")
objWord.Quit
</vb><vb name="Display Service Information in a Word Document" n="758">' Display Service Information in a Word Document


Set objWord = CreateObject("Word.Application")
objWord.Visible = True

Set objDoc = objWord.Documents.Add()
Set objSelection = objWord.Selection

objSelection.TypeText "Services Report"
objSelection.TypeParagraph()
objSelection.TypeText "" &amp;amp; Now
objSelection.TypeParagraph()
objSelection.TypeParagraph()

strComputer = "."
Set objWMIService = _
    GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colItems = objWMIService.ExecQuery("Select * from Win32_Service")

For Each objItem in colItems
    objSelection.TypeText objItem.DisplayName &amp;amp; " -- " &amp;amp; objItem.State
    objSelection.TypeParagraph()
Next
</vb><vb name="List Microsoft Word Properties" n="759">' List Microsoft Word Properties


On Error Resume Next

Set objWord = CreateObject("Word.Application")
Wscript.Echo "Active Printer:", objWord.ActivePrinter

For Each objAddIn in objWord.AddIns
    Wscript.Echo "AddIn: ", objAddIn
Next

Wscript.Echo "Application:", objWord.Application
Wscript.Echo "Assistant:", objWord.Assistant

For Each objCaption in objWord.AutoCaptions
    Wscript.Echo "AutoCaptions:", objCaption
Next
Wscript.Echo "Automation Security:", objWord.AutomationSecurity
Wscript.Echo "Background Printing Status:", objWord.BackgroundPrintingStatus
Wscript.Echo "Background Saving Status:", objWord.BackgroundSavingStatus
Wscript.Echo "Browse Extra File Type:", objWord.BrowseExtraFileTypes
Wscript.Echo "Build:", objWord.Build
Wscript.Echo "Caps Lock:", objWord.CapsLock
Wscript.Echo "Caption:", objWord.Caption

For Each objLabel in objWord.CaptionLabels
    Wscript.Echo "Caption Label:", objLabel
Next

Wscript.Echo "Check Language:", objWord.CheckLanguage

For Each objAddIn in objWord.COMAddIns
    Wscript.Echo "COM AddIn:", objAddIn
Next

Wscript.Echo "Creator:", objWord.Creator

For Each objDictionary in objWord.CustomDictionaries
    Wscript.Echo "Custom Dictionary:", objDictionary
Next

Wscript.Echo "Customization Context:", objWord.CustomizationContext
Wscript.Echo "Default Legal Blackline:", objWord.DefaultLegalBlackline
Wscript.Echo "Default Save Format:", objWord.DefaultSaveFormat
Wscript.Echo "Default Table Separator:", objWord.DefaultTableSeparator

For Each objDialog in objWord.Dialogs
    Wscript.Echo "Dialog:", objDialog
Next

Wscript.Echo "Display Alerts:", objWord.DisplayAlerts
Wscript.Echo "Display Recent Files:", objWord.DisplayRecentFiles
Wscript.Echo "Display Screen Tips:", objWord.DisplayScreenTips
Wscript.Echo "Display Scroll Bars:", objWord.DisplayScrollBars

For Each objDocument in objWord.Documents
    Wscript.Echo "Document:", objDocument
Next

Wscript.Echo "Email Template:", objWord.EmailTemplate
Wscript.Echo "Enable Cancel Key:", objWord.EnableCancelKey
Wscript.Echo "Feature Install:", objWord.FeatureInstall

For Each objConverter in objWord.FileConverters
    Wscript.Echo "File Converter:", objConverter
Next

Wscript.Echo "Focus In MailHeader:", objWord.FocusInMailHeader

For Each objFont in objWord.FontNames
    Wscript.Echo "Font Name:", objFont
Next

Wscript.Echo "Height", objWord.Height

For Each objBinding in objWord.KeyBindings
    Wscript.Echo "Key Binding:", objBinding
Next

For Each objFont in objWord.LandscapeFontNames
    Wscript.Echo "Landscape Font Name:", objFont
Next

Wscript.Echo "Language", objWord.Language

For Each objLanguage in objWord.Languages
    Wscript.Echo "Language:", objLanguage
Next

Wscript.Echo "Left", objWord.Left
Wscript.Echo "Mail System:", objWord.MailSystem
Wscript.Echo "MAPI Available:", objWord.MAPIAvailable
Wscript.Echo "Math Coprocessor Available:", objWord.MathCoprocessorAvailable
Wscript.Echo "Mouse Available:", objWord.MouseAvailable
Wscript.Echo "Name:", objWord.Name
Wscript.Echo "Normal Template:", objWord.NormalTemplate
Wscript.Echo "Num Lock:", objWord.NumLock
Wscript.Echo "Parent:", objWord.Parent
Wscript.Echo "Path:", objWord.Path
Wscript.Echo "Path Separator:", objWord.PathSeparator
Wscript.Echo "Print Preview:", objWord.PrintPreview

For Each objFile in objWord.RecentFiles
    Wscript.Echo "Recent File:", objFile
Next

Wscript.Echo "Screen Updating:", objWord.ScreenUpdating
Wscript.Echo "Show Visual Basic Editor:", objWord.ShowVisualBasicEditor
Wscript.Echo "Special Mode:", objWord.SpecialMode
Wscript.Echo "Startup Path:", objWord.StartupPath

For Each objTask in objWord.Tasks
    Wscript.Echo "Task:", objTask
Next

For Each objTemplate in objWord.Templates
    Wscript.Echo "Template:", objTemplate
Next

Wscript.Echo "Top:", objWord.Top
Wscript.Echo "Usable Height:", objWord.UsableHeight
Wscript.Echo "Usable Width:", objWord.UsableWidth
Wscript.Echo "User Address:", objWord.UserAddress
Wscript.Echo "User Control:", objWord.UserControl
Wscript.Echo "User Initials:", objWord.UserInitials
Wscript.Echo "User Name:", objWord.UserName
Wscript.Echo "Version:", objWord.Version
Wscript.Echo "Visible:", objWord.Visible
Wscript.Echo "Width:", objWord.Width

For Each objWindow in objWord.Windows
    Wscript.Echo "Window:", objWindow
Next

Wscript.Echo "Window State:", objWord.WindowState
objWord.Quit
</vb><vb name="Modify Bookmark Text in a Word Document" n="760">' Modify Bookmark Text in a Word Document


Set objWord = CreateObject("Word.Application")
objWord.Caption = "Test Caption"
objWord.Visible = True

Set objDoc = objWord.Documents.Open("c:\scripts\word\bookmarkdoc.doc")

Set objRange = objDoc.Bookmarks("NameBookmark").Range
objRange.Text = "Bob"

Set objRange = objDoc.Bookmarks("AddressBookmark").Range
objRange.Text = "999"
</vb><vb name="Open and Print a Word Document" n="761">' Open and Print a Word Document


Set objWord = CreateObject("Word.Application")
Set objDoc = objWord.Documents.Open("c:\scripts\inventory.doc")

objDoc.PrintOut()
objWord.Quit
</vb><vb name="Read a Bookmark in a Word Document" n="762">' Read a Bookmark in a Word Document


Set objWord = CreateObject("Word.Application")
Set objDoc = objWord.Documents.Open("c:\scripts\word\bookmarkdoc.doc")
Set objRange = objDoc.Bookmarks("NameBookmark").Range

Wscript.Echo objRange.Text 

Set objRange = objDoc.Bookmarks("AddressBookmark").Range
Wscript.Echo objRange.Text 

objWord.Quit
</vb><vb name="Use Word to Search for Files" n="763">' Use Word to Search for Files


Set objWord = CreateObject("Word.Application")
Set objDoc = objWord.Documents.Add()

objWord.FileSearch.FileName = "*.mp3"
objWord.FileSearch.LookIn = "C:\"
objWord.FileSearch.SearchSubfolders = True
objWord.FileSearch.Execute

For Each objFile in objWord.FileSearch.FoundFiles
    Wscript.Echo objFile
Next

objWord.Quit
</vb><vb name="Quit Microsoft Word Without Saving the Document" n="764">' Quit Microsoft Word Without Saving the Document



Set objWord = CreateObject("Word.Application")
objWord.Visible = True
Set objDoc = objWord.Documents.Add()
Set objSelection = objWord.Selection
objSelection.TypeText "ABCDEFGHIJKLM"

objDoc.Saved = TRUE
objWord.Quit
</vb><vb name="Determine the Version of Microsoft Word Installed on a Computer" n="765">' Determine the Version of Microsoft Word Installed on a Computer



Set objWord = CreateObject("Word.Application")
Wscript.Echo "Version: " &amp;amp; objWord.Version
Wscript.Echo "Build: " &amp;amp; objWord.Build
Wscript.Echo "Product Code: " &amp;amp; _
    objWord.ProductCode()
objWord.Quit
</vb><vb name="Save a Microsoft Word Document as an HTML File" n="766">' Save a Microsoft Word Document as an HTML File



Const wdFormatHTML = 8

Set objWord = CreateObject("Word.Application")
objWord.Visible = True
Set objDoc = _
    objWord.Documents.Open("c:\scripts\test.doc)
objDoc.SaveAs("C:\Scripts\test.htm", wdFormatHTML)
</vb><vb name="Format Paragraphs in Microsoft Word" n="767">' Format Paragraphs in Microsoft Word



Const CENTERED = 1

Set objWord = CreateObject("Word.Application")
objWord.Visible = True
Set objDoc = objWord.Documents.Add()
Set objSelection = objWord.Selection

objSelection.ParagraphFormat.Alignment = CENTERED
objSelection.ParagraphFormat.LineSpacing = 36

objSelection.Font.Name = "Arial"
objSelection.Font.Size = "18"
objSelection.TypeText "Here is some text typed in. "
objSelection.TypeText "Here is some more text typed in. "
objSelection.TypeText "Here is even more text typed in. "
objSelection.TypeText "This is the last of the text."
</vb><vb name="Add a Picture to a Microsoft Word Document" n="768">' Add a Picture to a Microsoft Word Document



Set objWord = CreateObject("Word.Application")
objWord.Visible = True
Set objDoc = objWord.Documents.Add()
Set objSelection = objWord.Selection

Set objShape = objDoc.Shapes
objShape.AddPicture("C:\Scripts\Logo.jpg")
</vb></dd>
	</dd>
	<dd name="Networking" code="network" desc="Sample scripts for managing and monitoring network configurations and network applications.">
		<dd name="Client-Side Management" code="client" desc="Sample scripts for configuring TCP/IP settings (IP address, DNS Server, WINS Server, etc.) on client computers.">
			<dd name="Configuring Network Settings" code="modify" desc="Sample scripts for configuring TCP/IP settings (IP address, DNS Server, WINS Server, etc.) on client computers."><vb name="Assign a Static IP Address" n="769">' Assign a Static IP Address


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colNetAdapters = objWMIService.ExecQuery _
    ("Select * from Win32_NetworkAdapterConfiguration where IPEnabled=TRUE")

strIPAddress = Array("192.168.1.141")
strSubnetMask = Array("255.255.255.0")
strGateway = Array("192.168.1.100")
strGatewayMetric = Array(1)
 
For Each objNetAdapter in colNetAdapters
    errEnable = objNetAdapter.EnableStatic(strIPAddress, strSubnetMask)
    errGateways = objNetAdapter.SetGateways(strGateway, strGatewaymetric)
    If errEnable = 0 Then
        WScript.Echo "The IP address has been changed."
    Else
        WScript.Echo "The IP address could not be changed."
    End If
Next
</vb><vb name="Assign the DNS Domain for a Network Adapter" n="770">' Assign the DNS Domain for a Network Adapter


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colNetCards = objWMIService.ExecQuery _
    ("Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True")

For Each objNetCard in colNetCards
    Wscript.Echo objNetCard.SetDNSDomain("fabrikam.com")
Next
</vb><vb name="Assign the WINS Server for a Network Adapter" n="771">' Assign the WINS Server for a Network Adapter


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colNetCards = objWMIService.ExecQuery _
    ("Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True")

For Each objNetCard in colNetCards
    strPrimaryServer = "192.168.1.100"
    strSecondaryServer = "192.168.1.200"
    objNetCard.SetWINSServer strPrimaryServer, strSecondaryServer
Next
</vb><vb name="Enable Dead Gateway Detection for All Network Adapters" n="772">' Enable Dead Gateway Detection for All Network Adapters


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetDeadGWDetect(True)
</vb><vb name="Enable DHCP" n="773">' Enable DHCP


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colNetAdapters = objWMIService.ExecQuery _
    ("Select * from Win32_NetworkAdapterConfiguration where IPEnabled=TRUE")
 
For Each objNetAdapter In colNetAdapters
    errEnable = objNetAdapter.EnableDHCP()
Next
</vb><vb name="Enable DNS on All Network Adapters" n="774">' Enable DNS on All Network Adapters


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
strHostName = "fabrikam1"
arrDNSSuffixes = Array("hr.fabrikam.com", "research.fabrikam.com")
objNetworkSettings.EnableDNS strHostName, , , arrDNSSuffixes
</vb><vb name="Enable IPFilter Security on All Network Adapters" n="775">' Enable IPFilter Security on All Network Adapters


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.EnableIPFilterSec(True)
</vb><vb name="Enable IPSec on a Network Adapter" n="776">' Enable IPSec on a Network Adapter


On Error Resume Next
 
Const ALLOW_ALL = 0
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colNetCards = objWMIService.ExecQuery _
    ("Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True")

For Each objNetCard in colNetCards
    arrPermittedTCPPorts = Array(ALLOW_ALL)
    arrPermittedUDPPorts = Array(ALLOW_ALL)
    arrPermittedIPProtocols = Array(ALLOW_ALL)
    objNetCard.EnableIPSec arrPermittedTCPPorts, arrPermittedUDPPorts, _
        arrPermittedIPProtocols
Next
</vb><vb name="Enable PMTU Discovery on all Network Adapters" n="777">' Enable PMTU Discovery on all Network Adapters


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetPMTUDiscovery(True)
</vb><vb name="Enable WINS for All Network Adapters" n="778">' Enable WINS for All Network Adapters


On Error Resume Next
 
Const DNS_ENABLED_FOR_WINS_RESOLUTION = True
Const USE_LMHOST_FILE = False

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
errResult = objNetworkSettings.EnableWINS(DNS_ENABLED_FOR_WINS_RESOLUTION,_
     USE_LMHOST_FILE)
</vb><vb name="Modify ARP Queries to Use EtherSNAP" n="779">' Modify ARP Queries to Use EtherSNAP


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetArpUseEtherSNAP(True)
</vb><vb name="Modify ARP Queries to Use Source Routing" n="780">' Modify ARP Queries to Use Source Routing


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetArpAlwaysSourceRoute(True)
</vb><vb name="Modify Dynamic DNS Registration for a Network Adapter" n="781">' Modify Dynamic DNS Registration for a Network Adapter


On Error Resume Next
 
Const FULL_DNS_REGISTRATION = True
Const DOMAIN_DNS_REGISTRATION = False
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colNetCards = objWMIService.ExecQuery _
    ("Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True")

For Each objNetCard in colNetCards
    objNetCard.SetDynamicDNSRegistration FULL_DNS_REGISTRATION, _
        DOMAIN_DNS_REGISTRATION
Next
</vb><vb name="Modify Keep Alive Time for All Network Adapters" n="782">' Modify Keep Alive Time for All Network Adapters


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetKeepAliveTime(300000)
</vb><vb name="Modify NetBIOS Use on a Network Adapter" n="783">' Modify NetBIOS Use on a Network Adapter


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colNetCards = objWMIService.ExecQuery _
    ("Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True")

For Each objNetCard in colNetCards
    objNetCard.SetTCPIPNetBIOS(1)
Next
</vb><vb name="Modify PMTUBH Detection on All Network Adapters" n="784">' Modify PMTUBH Detection on All Network Adapters


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetPMTUBHDetect(True)
</vb><vb name="Modify the Allowed Number of TCP Connections" n="785">' Modify the Allowed Number of TCP Connections


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetTCPNumConnections(10)
</vb><vb name="Modify the Database Path for all Network Adapters" n="786">' Modify the Database Path for all Network Adapters


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetDatabasePath("c:\windows\system32\drivers\etc")
</vb><vb name="Modify the Default Time-to-Live for All Network Adapters" n="787">' Modify the Default Time-to-Live for All Network Adapters


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetDefaultTTL(64)
</vb><vb name="Modify the DNS Server Search Order for a Network Adapter" n="788">' Modify the DNS Server Search Order for a Network Adapter


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colNetCards = objWMIService.ExecQuery _
    ("Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True")

For Each objNetCard in colNetCards
    arrDNSServers = Array("192.168.1.100", "192.168.1.200")
    objNetCard.SetDNSServerSearchOrder(arrDNSServers)
Next
</vb><vb name="Modify the DNS Suffix Search Order for All Network Adapters" n="789">' Modify the DNS Suffix Search Order for All Network Adapters


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
arrDNSSuffixes = Array("hr.fabrikam.com", "research.fabrikam.com")
objNetworkSettings.SetDNSSuffixSearchOrder(arrDNSSuffixes)
</vb><vb name="Modify the Forward Buffer Memory for All Network Adapters" n="790">' Modify the Forward Buffer Memory for All Network Adapters


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetForwardBufferMemory(74240)
</vb><vb name="Modify the Gateways for a Network Adapter" n="791">' Modify the Gateways for a Network Adapter


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colNetCards = objWMIService.ExecQuery _
    ("Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True")

For Each objNetCard in colNetCards
    arrGateways = Array("192.168.1.100", "192.168.1.200")
    objNetCard.SetGateways(arrGateways)
Next
</vb><vb name="Modify the IGMP Level for All Network Adapters" n="792">' Modify the IGMP Level for All Network Adapters


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetIGMPLevel(0)
</vb><vb name="Modify the IP Connection Metric for a Network Adapter" n="793">' Modify the IP Connection Metric for a Network Adapter


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colNetCards = objWMIService.ExecQuery _
    ("Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True")

For Each objNetCard in colNetCards
    objNetCard.SetIPConnectionMetric(100)
Next
</vb><vb name="Modify the IPX Frame Type" n="794">' Modify the IPX Frame Type


On Error Resume Next
 
Const AUTO = 255
Const NETWORK_NUMBER = 0
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colNetCards = objWMIService.ExecQuery _
    ("Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True")

For Each objNetCard in colNetCards
    arrNetworkNumber = Array(NETWORK_NUMBER)
    arrFrameTypes = Array(AUTO)
    objNetCard.SetIPXFrameTypeNetworkPairs arrNetworkNumber, arrFrameTypes
Next
</vb><vb name="Modify the IPX Virtual Network Number" n="795">' Modify the IPX Virtual Network Number


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetIPXVirtualNetworkNumber(5)
</vb><vb name="Modify the Keep Alive Interval for all Network Adapters" n="796">' Modify the Keep Alive Interval for all Network Adapters


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetKeepAliveInterval(300000)
</vb><vb name="Modify the Maximum Allowed TCP Connection Retransmissions" n="797">' Modify the Maximum Allowed TCP Connection Retransmissions


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetTCPMaxConnectRetransmissions(10)
</vb><vb name="Modify the Maximum Allowed TCP Data Retransmissions" n="798">' Modify the Maximum Allowed TCP Data Retransmissions


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetTCPMaxDataRetransmissions(10)
</vb><vb name="Modify the MTU for all Network Adapters" n="799">' Modify the MTU for all Network Adapters


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetMTU(68)
</vb><vb name="Modify the Number of Allowed Forward Packets" n="800">' Modify the Number of Allowed Forward Packets


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetNumForwardPackets(1)
</vb><vb name="Modify the TCP Window Size for All Network Adapters" n="801">' Modify the TCP Window Size for All Network Adapters


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetTCPWindowSize(65535)
</vb><vb name="Modify Urgent Pointer Use for All Network Adapters" n="802">' Modify Urgent Pointer Use for All Network Adapters


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetTcpUseRFC1122UrgentPointer(True)
</vb><vb name="Modify Zero-Broadcast Use for All Network Adapters" n="803">' Modify Zero-Broadcast Use for All Network Adapters


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.SetIPUseZeroBroadcast(True)
</vb><vb name="Release All DHCP Leases" n="804">' Release All DHCP Leases


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.ReleaseDHCPLeaseAll()
</vb><vb name="Release the DHCP Lease for a Network Adapter" n="805">' Release the DHCP Lease for a Network Adapter


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colNetCards = objWMIService.ExecQuery _
    ("Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True")

For Each objNetCard in colNetCards
    objNetCard.ReleaseDHCPLease()
Next
</vb><vb name="Renew All DHCP Leases" n="806">' Renew All DHCP Leases


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNetworkSettings = objWMIService.Get("Win32_NetworkAdapterConfiguration")
objNetworkSettings.RenewDHCPLeaseAll()
</vb><vb name="Renew the DHCP Lease for a Network Adapter" n="807">' Renew the DHCP Lease for a Network Adapter


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colNetCards = objWMIService.ExecQuery _
    ("Select * From Win32_NetworkAdapterConfiguration Where IPEnabled = True")

For Each objNetCard in colNetCards
    objNetCard.RenewDHCPLease()
Next
</vb></dd>
			<dd name="Retrieving Network Configuration Information" code="list" desc="Sample scripts for retrieving information about TCP/IP settings on client computers."><vb name="List IP Addresses for a Computer" n="808">' List IP Addresses for a Computer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set IPConfigSet = objWMIService.ExecQuery _
    ("Select * from Win32_NetworkAdapterConfiguration Where IPEnabled=TRUE")
 
For Each IPConfig in IPConfigSet
    If Not IsNull(IPConfig.IPAddress) Then 
        For i=LBound(IPConfig.IPAddress) to UBound(IPConfig.IPAddress)
            WScript.Echo IPConfig.IPAddress(i)
        Next
    End If
Next
</vb><vb name="List IP Configuration Data" n="809">' List IP Configuration Data


strComputer = "."

Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colAdapters = objWMIService.ExecQuery _
    ("SELECT * FROM Win32_NetworkAdapterConfiguration WHERE IPEnabled = True")
 
n = 1
WScript.Echo
 
For Each objAdapter in colAdapters
   WScript.Echo "Network Adapter " &amp;amp; n
   WScript.Echo "================="
   WScript.Echo "  Description: " &amp;amp; objAdapter.Description
 
   WScript.Echo "  Physical (MAC) address: " &amp;amp; objAdapter.MACAddress
   WScript.Echo "  Host name:              " &amp;amp; objAdapter.DNSHostName
 
   If Not IsNull(objAdapter.IPAddress) Then
      For i = 0 To UBound(objAdapter.IPAddress)
         WScript.Echo "  IP address:             " &amp;amp; objAdapter.IPAddress(i)
      Next
   End If
 
   If Not IsNull(objAdapter.IPSubnet) Then
      For i = 0 To UBound(objAdapter.IPSubnet)
         WScript.Echo "  Subnet:                 " &amp;amp; objAdapter.IPSubnet(i)
      Next
   End If
 
   If Not IsNull(objAdapter.DefaultIPGateway) Then
      For i = 0 To UBound(objAdapter.DefaultIPGateway)
         WScript.Echo "  Default gateway:        " &amp;amp; _
             objAdapter.DefaultIPGateway(i)
      Next
   End If
 
   WScript.Echo
   WScript.Echo "  DNS"
   WScript.Echo "  ---"
   WScript.Echo "    DNS servers in search order:"
 
   If Not IsNull(objAdapter.DNSServerSearchOrder) Then
      For i = 0 To UBound(objAdapter.DNSServerSearchOrder)
         WScript.Echo "      " &amp;amp; objAdapter.DNSServerSearchOrder(i)
      Next
   End If
 
   WScript.Echo "    DNS domain: " &amp;amp; objAdapter.DNSDomain
 
   If Not IsNull(objAdapter.DNSDomainSuffixSearchOrder) Then
      For i = 0 To UBound(objAdapter.DNSDomainSuffixSearchOrder)
         WScript.Echo "    DNS suffix search list: " &amp;amp; _
             objAdapter.DNSDomainSuffixSearchOrder(i)
      Next
   End If
 
   WScript.Echo
   WScript.Echo "  DHCP"
   WScript.Echo "  ----"
   WScript.Echo "    DHCP enabled:        " &amp;amp; objAdapter.DHCPEnabled
   WScript.Echo "    DHCP server:         " &amp;amp; objAdapter.DHCPServer
 
   If Not IsNull(objAdapter.DHCPLeaseObtained) Then
      utcLeaseObtained = objAdapter.DHCPLeaseObtained
      strLeaseObtained = WMIDateStringToDate(utcLeaseObtained)
   Else
      strLeaseObtained = ""
   End If
   WScript.Echo "    DHCP lease obtained: " &amp;amp; strLeaseObtained
 
   If Not IsNull(objAdapter.DHCPLeaseExpires) Then
      utcLeaseExpires = objAdapter.DHCPLeaseExpires
      strLeaseExpires = WMIDateStringToDate(utcLeaseExpires)
   Else
      strLeaseExpires = ""
   End If
   WScript.Echo "    DHCP lease expires:  " &amp;amp; strLeaseExpires
 
   WScript.Echo
   WScript.Echo "  WINS"
   WScript.Echo "  ----"
   WScript.Echo "    Primary WINS server:   " &amp;amp; objAdapter.WINSPrimaryServer
   WScript.Echo "    Secondary WINS server: " &amp;amp; objAdapter.WINSSecondaryServer
   WScript.Echo
 
   n = n + 1
 
Next
 
Function WMIDateStringToDate(utcDate)
   WMIDateStringToDate = CDate(Mid(utcDate, 5, 2)  &amp;amp; "/" &amp;amp; _
       Mid(utcDate, 7, 2)  &amp;amp; "/" &amp;amp; _
           Left(utcDate, 4)    &amp;amp; " " &amp;amp; _
               Mid (utcDate, 9, 2) &amp;amp; ":" &amp;amp; _
                   Mid(utcDate, 11, 2) &amp;amp; ":" &amp;amp; _
                      Mid(utcDate, 13, 2))
End Function
</vb><vb name="List IP4 Route Table Information" n="810">' List IP4 Route Table Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_IP4RouteTable")

For Each objItem in colItems
    Wscript.Echo "Age: " &amp;amp; objItem.Age
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Destination: " &amp;amp; objItem.Destination
    Wscript.Echo "Information: " &amp;amp; objItem.Information
    Wscript.Echo "Interface Index: " &amp;amp; objItem.InterfaceIndex
    Wscript.Echo "Mask: " &amp;amp; objItem.Mask
    Wscript.Echo "Metric 1: " &amp;amp; objItem.Metric1
    Wscript.Echo "Metric 2: " &amp;amp; objItem.Metric2
    Wscript.Echo "Metric 3: " &amp;amp; objItem.Metric3
    Wscript.Echo "Metric 4: " &amp;amp; objItem.Metric4
    Wscript.Echo "Metric 5: " &amp;amp; objItem.Metric5
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Next Hop: " &amp;amp; objItem.NextHop
    Wscript.Echo "Protocol: " &amp;amp; objItem.Protocol
    Wscript.Echo "Type: " &amp;amp; objItem.Type
    Wscript.Echo
Next
</vb><vb name="List Network Adapter Configuration Properties" n="811">' List Network Adapter Configuration Properties



On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_NetworkAdapterConfiguration")

For Each objItem in colItems
    Wscript.Echo "ARP Always Source Route: " &amp;amp; objItem.ArpAlwaysSourceRoute
    Wscript.Echo "ARP Use EtherSNAP: " &amp;amp; objItem.ArpUseEtherSNAP
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Database Path: " &amp;amp; objItem.DatabasePath
    Wscript.Echo "Dead GW Detection Enabled: " &amp;amp; objItem.DeadGWDetectEnabled
    Wscript.Echo "Default IP Gateway: " &amp;amp; objItem.DefaultIPGateway
    Wscript.Echo "Default TOS: " &amp;amp; objItem.DefaultTOS
    Wscript.Echo "Default TTL: " &amp;amp; objItem.DefaultTTL
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "DHCP Enabled: " &amp;amp; objItem.DHCPEnabled
    Wscript.Echo "DHCP Lease Expires: " &amp;amp; objItem.DHCPLeaseExpires
    Wscript.Echo "DHCP Lease Obtained: " &amp;amp; objItem.DHCPLeaseObtained
    Wscript.Echo "DHCP Server: " &amp;amp; objItem.DHCPServer
    Wscript.Echo "DNS Domain: " &amp;amp; objItem.DNSDomain
    Wscript.Echo "DNS Domain Suffix Search Order: " &amp;amp; _
        objItem.DNSDomainSuffixSearchOrder
    Wscript.Echo "DNS Enabled For WINS Resolution: " &amp;amp; _
        objItem.DNSEnabledForWINSResolution
    Wscript.Echo "DNS Host Name: " &amp;amp; objItem.DNSHostName
    Wscript.Echo "DNS Server Search Order: " &amp;amp; objItem.DNSServerSearchOrder
    Wscript.Echo "Domain DNS Registration Enabled: " &amp;amp; _
        objItem.DomainDNSRegistrationEnabled
    Wscript.Echo "Forward Buffer Memory: " &amp;amp; objItem.ForwardBufferMemory
    Wscript.Echo "Full DNS Registration Enabled: " &amp;amp; _
        objItem.FullDNSRegistrationEnabled
    Wscript.Echo "Gateway Cost Metric: " &amp;amp; objItem.GatewayCostMetric
    Wscript.Echo "IGMP Level: " &amp;amp; objItem.IGMPLevel
    Wscript.Echo "Index: " &amp;amp; objItem.Index
    Wscript.Echo "IP Address: " &amp;amp; objItem.IPAddress
    Wscript.Echo "IP Connection Metric: " &amp;amp; objItem.IPConnectionMetric
    Wscript.Echo "IP Enabled: " &amp;amp; objItem.IPEnabled
    Wscript.Echo "IP Filter Security Enabled: " &amp;amp; _
        objItem.IPFilterSecurityEnabled
    Wscript.Echo "IP Port Security Enabled: " &amp;amp; objItem.IPPortSecurityEnabled
    Wscript.Echo "IPSec Permit IP Protocols: " &amp;amp; objItem.IPSecPermitIPProtocols
    Wscript.Echo "IPSec Permit TCP Ports: " &amp;amp; objItem.IPSecPermitTCPPorts
    Wscript.Echo "IPSec Permit UDP Ports: " &amp;amp; objItem.IPSecPermitUDPPorts
    Wscript.Echo "IP Subnet: " &amp;amp; objItem.IPSubnet
    Wscript.Echo "IP Use Zero Broadcast: " &amp;amp; objItem.IPUseZeroBroadcast
    Wscript.Echo "IPX Address: " &amp;amp; objItem.IPXAddress
    Wscript.Echo "IPX Enabled: " &amp;amp; objItem.IPXEnabled
    Wscript.Echo "IPX Frame Type: " &amp;amp; objItem.IPXFrameType
    Wscript.Echo "IPX Media Type: " &amp;amp; objItem.IPXMediaType
    Wscript.Echo "IPX Network Number: " &amp;amp; objItem.IPXNetworkNumber
    Wscript.Echo "IPX Virtual Net Number: " &amp;amp; objItem.IPXVirtualNetNumber
    Wscript.Echo "Keep Alive Interval: " &amp;amp; objItem.KeepAliveInterval
    Wscript.Echo "Keep Alive Time: " &amp;amp; objItem.KeepAliveTime
    Wscript.Echo "MAC Address: " &amp;amp; objItem.MACAddress
    Wscript.Echo "MTU: " &amp;amp; objItem.MTU
    Wscript.Echo "Number of Forward Packets: " &amp;amp; objItem.NumForwardPackets
    Wscript.Echo "PMTUBH Detect Enabled: " &amp;amp; objItem.PMTUBHDetectEnabled
    Wscript.Echo "PMTU Discovery Enabled: " &amp;amp; objItem.PMTUDiscoveryEnabled
    Wscript.Echo "Service Name: " &amp;amp; objItem.ServiceName
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "TCPIP Netbios Options: " &amp;amp; objItem.TcpipNetbiosOptions
    Wscript.Echo "TCP Maximum Connect Retransmissions: " &amp;amp; _
        objItem.TcpMaxConnectRetransmissions
    Wscript.Echo "TCP Maximum Data Retransmissions: " &amp;amp; _
        objItem.TcpMaxDataRetransmissions
    Wscript.Echo "TCP NumC onnections: " &amp;amp; objItem.TcpNumConnections
    Wscript.Echo "TCP Use RFC1122 Urgent Pointer: " &amp;amp; _
        objItem.TcpUseRFC1122UrgentPointer
    Wscript.Echo "TCP Window Size: " &amp;amp; objItem.TcpWindowSize
    Wscript.Echo "WINS Enable LMHosts Lookup: " &amp;amp; _
        objItem.WINSEnableLMHostsLookup
    Wscript.Echo "WINS Host Lookup File: " &amp;amp; objItem.WINSHostLookupFile
    Wscript.Echo "WINS Primary Server: " &amp;amp; objItem.WINSPrimaryServer
    Wscript.Echo "WINS Scope ID: " &amp;amp; objItem.WINSScopeID
    Wscript.Echo "WINS Secondary Server: " &amp;amp; objItem.WINSSecondaryServer
Next
</vb><vb name="List Network Adapter Properties" n="812">' List Network Adapter Properties


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_NetworkAdapter")

For Each objItem in colItems
    Wscript.Echo "Adapter Type: " &amp;amp; objItem.AdapterType
 
    Select Case objItem.AdapterTypeID
        Case 0 strAdapterType = "Ethernet 802.3" 
        Case 1 strAdapterType = "Token Ring 802.5" 
        Case 2 strAdapterType = "Fiber Distributed Data Interface (FDDI)" 
        Case 3 strAdapterType = "Wide Area Network (WAN)" 
        Case 4 strAdapterType = "LocalTalk" 
        Case 5 strAdapterType = "Ethernet using DIX header format" 
        Case 6 strAdapterType = "ARCNET" 
        Case 7 strAdapterType = "ARCNET (878.2)" 
        Case 8 strAdapterType = "ATM" 
        Case 9 strAdapterType = "Wireless" 
        Case 10 strAdapterType = "Infrared Wireless" 
        Case 11 strAdapterType = "Bpc" 
        Case 12 strAdapterType = "CoWan" 
        Case 13 strAdapterType = "1394"
    End Select
 
    Wscript.Echo "Adapter Type Id: " &amp;amp; strAdapterType
    Wscript.Echo "AutoSense: " &amp;amp; objItem.AutoSense
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Index: " &amp;amp; objItem.Index
    Wscript.Echo "MAC Address: " &amp;amp; objItem.MACAddress
    Wscript.Echo "Manufacturer: " &amp;amp; objItem.Manufacturer
    Wscript.Echo "Maximum Number Controlled: " &amp;amp; objItem.MaxNumberControlled
    Wscript.Echo "Maximum Speed: " &amp;amp; objItem.MaxSpeed
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Net Connection ID: " &amp;amp; objItem.NetConnectionID
    Wscript.Echo "Net Connection Status: " &amp;amp; objItem.NetConnectionStatus
    For Each strNetworkAddress in objItem.NetworkAddresses
        Wscript.Echo "NetworkAddress: " &amp;amp; strNetworkAddress
    Next
    Wscript.Echo "Permanent Address: " &amp;amp; objItem.PermanentAddress
    Wscript.Echo "PNP Device ID: " &amp;amp; objItem.PNPDeviceID
    Wscript.Echo "Product Name: " &amp;amp; objItem.ProductName
    Wscript.Echo "Service Name: " &amp;amp; objItem.ServiceName
    Wscript.Echo "Speed: " &amp;amp; objItem.Speed
Next
</vb><vb name="List Network Client Information" n="813">' List Network Client Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_NetworkClient")

For Each objItem in colItems
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Manufacturer: " &amp;amp; objItem.Manufacturer
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo
Next
</vb><vb name="List Network Login Profiles" n="814">' List Network Login Profiles


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_NetworkLoginProfile")

For Each objItem in colItems
    dtmWMIDate = objItem.AccountExpires
    strReturn = WMIDateStringToDate(dtmWMIDate)
    Wscript.Echo "Account Expires: " &amp;amp; strReturn
    Wscript.Echo "Authorization Flags: " &amp;amp; objItem.AuthorizationFlags
    Wscript.Echo "Bad Password Count: " &amp;amp; objItem.BadPasswordCount
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "CodePage: " &amp;amp; objItem.CodePage
    Wscript.Echo "Comment: " &amp;amp; objItem.Comment
    Wscript.Echo "Country Code: " &amp;amp; objItem.CountryCode
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Flags: " &amp;amp; objItem.Flags
    Wscript.Echo "Full Name: " &amp;amp; objItem.FullName
    Wscript.Echo "Home Directory: " &amp;amp; objItem.HomeDirectory
    Wscript.Echo "Home Directory Drive: " &amp;amp; objItem.HomeDirectoryDrive
    dtmWMIDate = objItem.LastLogoff
    strReturn = WMIDateStringToDate(dtmWMIDate)
    Wscript.Echo "Last Logoff: " &amp;amp; strReturn
    dtmWMIDate = objItem.LastLogon
    strReturn = WMIDateStringToDate(dtmWMIDate)
    Wscript.Echo "Last Logon: " &amp;amp; strReturn
    Wscript.Echo "Logon Hours: " &amp;amp; objItem.LogonHours
    Wscript.Echo "Logon Server: " &amp;amp; objItem.LogonServer
    Wscript.Echo "Maximum Storage: " &amp;amp; objItem.MaximumStorage
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Number Of Logons: " &amp;amp; objItem.NumberOfLogons
    Wscript.Echo "Password Age: " &amp;amp; objItem.PasswordAge
    dtmWMIDate = objItem.PasswordExpires
    strReturn = WMIDateStringToDate(dtmWMIDate)
    Wscript.Echo "Password Expires: " &amp;amp; strReturn
    Wscript.Echo "Primary Group ID: " &amp;amp; objItem.PrimaryGroupId
    Wscript.Echo "Privileges: " &amp;amp; objItem.Privileges
    Wscript.Echo "Profile: " &amp;amp; objItem.Profile
    Wscript.Echo "Script Path: " &amp;amp; objItem.ScriptPath
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Units Per Week: " &amp;amp; objItem.UnitsPerWeek
    Wscript.Echo "User Comment: " &amp;amp; objItem.UserComment
    Wscript.Echo "User Id: " &amp;amp; objItem.UserId
    Wscript.Echo "User Type: " &amp;amp; objItem.UserType
    Wscript.Echo "Workstations: " &amp;amp; objItem.Workstations
    Wscript.Echo
Next
 
Function WMIDateStringToDate(dtmWMIDate)
    If Not IsNull(dtmWMIDate) Then
    WMIDateStringToDate = CDate(Mid(dtmWMIDate, 5, 2) &amp;amp; "/" &amp;amp; _
         Mid(dtmWMIDate, 7, 2) &amp;amp; "/" &amp;amp; Left(dtmWMIDate, 4) _
             &amp;amp; " " &amp;amp; Mid (dtmWMIDate, 9, 2) &amp;amp; ":" &amp;amp; _
                 Mid(dtmWMIDate, 11, 2) &amp;amp; ":" &amp;amp; Mid(dtmWMIDate, 13, 2))
    End If
End Function
</vb><vb name="List Proxy Server Information" n="815">' List Proxy Server Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_Proxy")

For Each objItem in colItems
    Wscript.Echo "Proxy Port Number: " &amp;amp; objItem.ProxyPortNumber
    Wscript.Echo "Proxy Server: " &amp;amp; objItem.ProxyServer
    Wscript.Echo "Server Name: " &amp;amp; objItem.ServerName
    Wscript.Echo
Next
</vb><vb name="List the Network Protocols on a Computer" n="816">' List the Network Protocols on a Computer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_NetworkProtocol")

For Each objItem in colItems
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Connectionless Service: " &amp;amp; objItem.ConnectionlessService
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Guarantees Delivery: " &amp;amp; objItem.GuaranteesDelivery
    Wscript.Echo "Guarantees Sequencing: " &amp;amp; objItem.GuaranteesSequencing
    strInstallDate = WMIDateStringToDate(objItem.InstallDate)
    Wscript.Echo "Install Date: " &amp;amp; strInstallDate
    Wscript.Echo "Maximum Address Size: " &amp;amp; objItem.MaximumAddressSize
    Wscript.Echo "Maximum Message Size: " &amp;amp; objItem.MaximumMessageSize
    Wscript.Echo "Message Oriented: " &amp;amp; objItem.MessageOriented
    Wscript.Echo "Minimum Address Size: " &amp;amp; objItem.MinimumAddressSize
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Pseudo Stream Oriented: " &amp;amp; objItem.PseudoStreamOriented
    Wscript.Echo "Supports Broadcasting: " &amp;amp; objItem.SupportsBroadcasting
    Wscript.Echo "Supports Connect Data: " &amp;amp; objItem.SupportsConnectData
    Wscript.Echo "Supports Disconnect Data: " &amp;amp; objItem.SupportsDisconnectData
    Wscript.Echo "Supports Encryption: " &amp;amp; objItem.SupportsEncryption
    Wscript.Echo "Supports Expedited Data: " &amp;amp; objItem.SupportsExpeditedData
    Wscript.Echo "Supports Fragmentation: " &amp;amp; objItem.SupportsFragmentation
    Wscript.Echo "Supports Graceful Closing: " &amp;amp; _
        objItem.SupportsGracefulClosing
    Wscript.Echo "Supports Guaranteed Bandwidth: " &amp;amp; _
        objItem.SupportsGuaranteedBandwidth
    Wscript.Echo "Supports Multicasting: " &amp;amp; objItem.SupportsMulticasting
    Wscript.Echo "Supports Quality of Service: " &amp;amp; _
        objItem.SupportsQualityofService
Next
 
Function WMIDateStringToDate(dtmDate)
    WMIDateStringToDate = CDate(Mid(dtmDate, 5, 2) &amp;amp; "/" &amp;amp; _
        Mid(dtmDate, 7, 2) &amp;amp; "/" &amp;amp; Left(dtmDate, 4) _
            &amp;amp; " " &amp;amp; Mid (dtmDate, 9, 2) &amp;amp; ":" &amp;amp; _
                Mid(dtmDate, 11, 2) &amp;amp; ":" &amp;amp; Mid(dtmDate,13, 2))
End Function
</vb><vb name="Ping Multiple Computers" n="817">' Ping Multiple Computers


strMachines = "atl-dc-01;atl-win2k-01;atl-nt4-01;atl-dc-02"
aMachines = split(strMachines, ";")
 
For Each machine in aMachines
    Set objPing = GetObject("winmgmts:{impersonationLevel=impersonate}")._
        ExecQuery("select * from Win32_PingStatus where address = '"_
            &amp;amp; machine &amp;amp; "'")
    For Each objStatus in objPing
        If IsNull(objStatus.StatusCode) or objStatus.StatusCode&amp;lt;&amp;gt;0 Then 
            WScript.Echo("Computer " &amp;amp; machine &amp;amp; " is not reachable") 
        End If
    Next
Next
</vb></dd>
		</dd>
		<dd name="Clustering" code="cluster" desc="Sample scripts for managing Windows Cluster Server."><vb name="List Cluster Node Information" n="818">' List Cluster Node Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\mscluster")

Set colItems = objWMIService.ExecQuery("Select * from MSCluster_Node")

For Each objItem in colItems
    Wscript.Echo "Build number: " &amp;amp; objItem.BuildNumber
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Characteristics: " &amp;amp; objItem.Characteristics
    Wscript.Echo "CSD version: " &amp;amp; objItem.CSDVersion
    Wscript.Echo "Dedicated: " &amp;amp; objItem.Dedicated
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Enable event log replication: " &amp;amp; _
        objItem.EnableEventLogReplication
    Wscript.Echo "Flags: " &amp;amp; objItem.Flags
    Wscript.Echo "Identifying descriptions: " &amp;amp; objItem.IdentifyingDescriptions
    Wscript.Echo "Initial load info: " &amp;amp; objItem.InitialLoadInfo
    Wscript.Echo "Installation date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Last load info: " &amp;amp; objItem.LastLoadInfo
    Wscript.Echo "Major version: " &amp;amp; objItem.MajorVersion
    Wscript.Echo "Minor version: " &amp;amp; objItem.MinorVersion
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Name format: " &amp;amp; objItem.NameFormat
    Wscript.Echo "Node highest version: " &amp;amp; objItem.NodeHighestVersion
    Wscript.Echo "Node lowest version: " &amp;amp; objItem.NodeLowestVersion
    Wscript.Echo "Other identifying info: " &amp;amp; objItem.OtherIdentifyingInfo
    Wscript.Echo "Power state: " &amp;amp; objItem.PowerState
    Wscript.Echo "Primary owner contact: " &amp;amp; objItem.PrimaryOwnerContact
    Wscript.Echo "Primary owner name: " &amp;amp; objItem.PrimaryOwnerName
    Wscript.Echo "Reset capability: " &amp;amp; objItem.ResetCapability
    Wscript.Echo "Roles: " &amp;amp; objItem.Roles
    Wscript.Echo "State: " &amp;amp; objItem.State
    Wscript.Echo "Status: " &amp;amp; objItem.Status
    Wscript.Echo
Next
</vb><vb name="List Cluster Resource Group Information" n="819">' List Cluster Resource Group Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\mscluster")

Set colItems = objWMIService.ExecQuery("Select * from MSCluster_ResourceGroup")

For Each objItem in colItems
    Wscript.Echo "Auto-failback type: " &amp;amp; objItem.AutoFailbackType
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Characteristics: " &amp;amp; objItem.Characteristics
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Failback window end: " &amp;amp; objItem.FailbackWindowEnd
    Wscript.Echo "Failback window start: " &amp;amp; objItem.FailbackWindowStart
    Wscript.Echo "Failover period: " &amp;amp; objItem.FailoverPeriod
    Wscript.Echo "Failover threshold: " &amp;amp; objItem.FailoverThreshold
    Wscript.Echo "Flags: " &amp;amp; objItem.Flags
    Wscript.Echo "Installation date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Load balance state: " &amp;amp; objItem.LoadBalState
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Persistent state: " &amp;amp; objItem.PersistentState
    Wscript.Echo "State: " &amp;amp; objItem.State
    Wscript.Echo "Status: " &amp;amp; objItem.Status
    Wscript.Echo
Next
</vb><vb name="List Cluster Resource Type Information" n="820">' List Cluster Resource Type Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\mscluster")

Set colItems = objWMIService.ExecQuery("Select * from MSCluster_ResourceType")

For Each objItem in colItems
    Wscript.Echo "Administrator extensions: " &amp;amp; objItem.AdminExtensions
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Characteristics: " &amp;amp; objItem.Characteristics
    Wscript.Echo "Delete requires all nodes: " &amp;amp; objItem.DeleteRequiresAllNodes
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Display name: " &amp;amp; objItem.DisplayName
    Wscript.Echo "DLL name: " &amp;amp; objItem.DllName
    Wscript.Echo "Flags: " &amp;amp; objItem.Flags
    Wscript.Echo "Installation date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Is alive poll interval: " &amp;amp; objItem.IsAlivePollInterval
    Wscript.Echo "Local quorum capable: " &amp;amp; objItem.LocalQuorumCapable
    Wscript.Echo "Looks alive poll interval: " &amp;amp; objItem.LooksAlivePollInterval
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Quorum capable: " &amp;amp; objItem.QuorumCapable
    Wscript.Echo "Status: " &amp;amp; objItem.Status
    Wscript.Echo
Next
</vb><vb name="List Cluster Service Information" n="821">' List Cluster Service Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\mscluster")

Set colItems = objWMIService.ExecQuery("Select * from MSCluster_Service")

For Each objItem in colItems
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Enable event log replication: " &amp;amp; _
        objItem.EnableEventLogReplication
    Wscript.Echo "Installation date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Node highest version: " &amp;amp; objItem.NodeHighestVersion
    Wscript.Echo "Node lowest version: " &amp;amp; objItem.NodeLowestVersion
    Wscript.Echo "Started: " &amp;amp; objItem.Started
    Wscript.Echo "Start mode: " &amp;amp; objItem.StartMode
    Wscript.Echo "State: " &amp;amp; objItem.State
    Wscript.Echo "Status: " &amp;amp; objItem.Status
    Wscript.Echo "System name: " &amp;amp; objItem.SystemName
    Wscript.Echo
Next
</vb><vb name="List Network Information" n="822">' List Network Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\mscluster")

Set colItems = objWMIService.ExecQuery("Select * from MSCluster_Network")

For Each objItem in colItems
    Wscript.Echo "Address: " &amp;amp; objItem.Address
    Wscript.Echo "Address mask: " &amp;amp; objItem.AddressMask
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Characteristics: " &amp;amp; objItem.Characteristics
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Flags: " &amp;amp; objItem.Flags
    Wscript.Echo "Installation date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Role: " &amp;amp; objItem.Role
    Wscript.Echo "State: " &amp;amp; objItem.State
    Wscript.Echo "Status: " &amp;amp; objItem.Status
    Wscript.Echo
Next
</vb><vb name="List Network Interface Information" n="823">' List Network Interface Information


On Error Resume Next 

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\mscluster")

Set colItems = objWMIService.ExecQuery _
    ("Select * from MSCluster_NetworkInterface")

For Each objItem in colItems
    Wscript.Echo "Adapter: " &amp;amp; objItem.Adapter
    Wscript.Echo "Address: " &amp;amp; objItem.Address
    Wscript.Echo "Availability: " &amp;amp; objItem.Availability
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Characteristics: " &amp;amp; objItem.Characteristics
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Flags: " &amp;amp; objItem.Flags
    Wscript.Echo "Identifying descriptions: " &amp;amp; objItem.IdentifyingDescriptions
    Wscript.Echo "Installation date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Network: " &amp;amp; objItem.Network
    Wscript.Echo "Other identifying info: " &amp;amp; objItem.OtherIdentifyingInfo
    Wscript.Echo "Power-on hours: " &amp;amp; objItem.PowerOnHours
    Wscript.Echo "State: " &amp;amp; objItem.State
    Wscript.Echo "Status: " &amp;amp; objItem.Status
    Wscript.Echo "Status info: " &amp;amp; objItem.StatusInfo
    Wscript.Echo "System name: " &amp;amp; objItem.SystemName
    Wscript.Echo "Total power-on hours: " &amp;amp; objItem.TotalPowerOnHours
    Wscript.Echo
Next
</vb><vb name="Listing Cluster Resource Information" n="824">' Listing Cluster Resource Information


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\mscluster")

Set colItems = objWMIService.ExecQuery("Select * from MSCluster_Resource")

For Each objItem in colItems
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Characteristics: " &amp;amp; objItem.Characteristics
    Wscript.Echo "Core resource: " &amp;amp; objItem.CoreResource
    Wscript.Echo "Cryptographic checkpoints: " &amp;amp; objItem.CryptoCheckpoints
    Wscript.Echo "Debug prefix: " &amp;amp; objItem.DebugPrefix
    Wscript.Echo "Delete requires all nodes: " &amp;amp; _
        objItem.DeleteRequiresAllNodes
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Flags: " &amp;amp; objItem.Flags
    Wscript.Echo "Installation date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Is alive poll interval: " &amp;amp; objItem.IsAlivePollInterval
    Wscript.Echo "Load balance analysis interval: " &amp;amp; _
        objItem.LoadBalAnalysisInterval
    Wscript.Echo "Load balance minimum memory units: " &amp;amp; _
        objItem.LoadBalMinMemoryUnits
    Wscript.Echo "Load balance minimum processor units: " &amp;amp; _
        objItem.LoadBalMinProcessorUnits
    Wscript.Echo "Load balance sample interval: " &amp;amp; _
        objItem.LoadBalSampleInterval
    Wscript.Echo "Load balance startup interval: " &amp;amp; _
        objItem.LoadBalStartupInterval
    Wscript.Echo "Local quorum capable: " &amp;amp; objItem.LocalQuorumCapable
    Wscript.Echo "Looks alive poll interval: " &amp;amp; _
        objItem.LooksAlivePollInterval
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Pending timeout: " &amp;amp; objItem.PendingTimeout
    Wscript.Echo "Persistent state: " &amp;amp; objItem.PersistentState
    Wscript.Echo "Private properties: " &amp;amp; objItem.PrivateProperties
    Wscript.Echo "Quorum capable: " &amp;amp; objItem.QuorumCapable
    Wscript.Echo "Registry checkpoints: " &amp;amp; objItem.RegistryCheckpoints
    Wscript.Echo "Resource class: " &amp;amp; objItem.ResourceClass
    Wscript.Echo "Restart action: " &amp;amp; objItem.RestartAction
    Wscript.Echo "Restart period: " &amp;amp; objItem.RestartPeriod
    Wscript.Echo "Restart threshold: " &amp;amp; objItem.RestartThreshold
    Wscript.Echo "Retry period on failure: " &amp;amp; _
        objItem.RetryPeriodOnFailure
    Wscript.Echo "Separate monitor: " &amp;amp; objItem.SeparateMonitor
    Wscript.Echo "State: " &amp;amp; objItem.State
    Wscript.Echo "Status: " &amp;amp; objItem.Status
    Wscript.Echo "Subclass: " &amp;amp; objItem.Subclass
    Wscript.Echo "Type: " &amp;amp; objItem.Type
    Wscript.Echo
Next
</vb><vb name="Retrieving Clustering Information" n="825">' Retrieving Clustering Information


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\mscluster")

Set colItems = objWMIService.ExecQuery("Select * from MSCluster_Cluster")

For Each objItem in colItems
    Wscript.Echo "Administrator extensions: " &amp;amp; objItem.AdminExtensions
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Dedicated: " &amp;amp; objItem.Dedicated
    Wscript.Echo "Default network role: " &amp;amp; objItem.DefaultNetworkRole
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Enable event log replication: " &amp;amp; _
        objItem.EnableEventLogReplication
    Wscript.Echo "Group administrator extensions: " &amp;amp; _
        objItem.GroupAdminExtensions
    Wscript.Echo "Identifying descriptions: " &amp;amp; objItem.IdentifyingDescriptions
    Wscript.Echo "Installation date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Maintenance file: " &amp;amp; objItem.MaintenanceFile
    Wscript.Echo "Maximum number of nodes: " &amp;amp; objItem.MaxNumberOfNodes
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Name format: " &amp;amp; objItem.NameFormat
    Wscript.Echo "Network administrator extensions: " &amp;amp; _
        objItem.NetworkAdminExtensions
    Wscript.Echo "Network interface administrator extensions: " &amp;amp; _
        objItem.NetworkInterfaceAdminExtensions
    Wscript.Echo "Network priorities: " &amp;amp; objItem.NetworkPriorities
    Wscript.Echo "Node administrator xtensions: " &amp;amp; objItem.NodeAdminExtensions
    Wscript.Echo "Other identifying info: " &amp;amp; objItem.OtherIdentifyingInfo
    Wscript.Echo "Primary owner contact: " &amp;amp; objItem.PrimaryOwnerContact
    Wscript.Echo "Primary owner name: " &amp;amp; objItem.PrimaryOwnerName
    Wscript.Echo "Quorum log file size: " &amp;amp; objItem.QuorumLogFileSize
    Wscript.Echo "Resource administrator extensions: " &amp;amp; _
        objItem.ResourceAdminExtensions
    Wscript.Echo "Resource type administrator extensions: " &amp;amp; _
        objItem.ResourceTypeAdminExtensions
    Wscript.Echo "Roles: " &amp;amp; objItem.Roles
    Wscript.Echo "Security: " &amp;amp; objItem.Security
    Wscript.Echo "Security descriptor: " &amp;amp; objItem.Security_Descriptor
    Wscript.Echo "Status: " &amp;amp; objItem.Status
    Wscript.Echo
Next
</vb></dd>
		<dd name="DNS Server" code="dns" desc="Sample scripts for managing Microsoft's DNS Server.">
			<dd name="DNS Records" code="records" desc="Sample scripts for creating, deleting, and modifying DNS Server records."><vb name="Create a Mail Agent for Domain DNS Record" n="826">' Create a Mail Agent for Domain DNS Record


strDNSServer = "atl-dc-03.fabrikam.com"
strContainer = "fabrikam.com"
strOwner = "workstation5.fabrikam.com"
intRecordClass = 1
intTTL = 600 
strMailAgent = "mailagent.fabrikam.com"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set objItem = objWMIService.Get("MicrosoftDNS_MDType")
errResult = objItem.CreateInstanceFromPropertyData _
    (strDNSServer, strContainer, strOwner, intRecordClass, intTTL, _
        strMailAgent)
</vb><vb name="Create a Mail Exchanger DNS Record" n="827">' Create a Mail Exchanger DNS Record


strDNSServer = "atl-dc-03.fabrikam.com"
strContainer = "fabrikam.com"
strOwner = "atl-srv-01.fabrikam.com"
intRecordClass = 1
intTTL = 600 
intPreference = 0
strMailExchanger = "mailexchanger.fabrikam.com"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set objItem = objWMIService.Get("MicrosoftDNS_MXType")
errResult = objItem.CreateInstanceFromPropertyData _
    (strDNSServer, strContainer, strOwner, intRecordClass, intTTL, _
        intPreference, strMailExchanger)
</vb><vb name="Create a Mail Forwarding Agent DNS Record" n="828">' Create a Mail Forwarding Agent DNS Record


strDNSServer = "atl-dc-03.fabrikam.com"
strContainer = "fabrikam.com"
strOwner = "atl-srv-01.fabrikam.com"
intRecordClass = 1
intTTL = 600 
strMailForwarder = "mailforwarder.fabrikam.com"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set objItem = objWMIService.Get("MicrosoftDNS_MFType")
errResult = objItem.CreateInstanceFromPropertyData _
    (strDNSServer, strContainer, strOwner, intRecordClass, _
        intTTL, strMailForwarder)
</vb><vb name="Create a Mail Group DNS Record" n="829">' Create a Mail Group DNS Record


strDNSServer = "atl-dc-03.fabrikam.com"
strContainer = "fabrikam.com"
strOwner = "admin.fabrikam.com"
intRecordClass = 1
intTTL = 600 
strMailbox = "netadmins.fabrikam.com"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set objItem = objWMIService.Get("MicrosoftDNS_MGType")
errResult = objItem.CreateInstanceFromPropertyData _
    (strDNSServer, strContainer, strOwner, intRecordClass, intTTL, strMailbox)
</vb><vb name="Create a Mail Information DNS Record" n="830">' Create a Mail Information DNS Record


strDNSServer = "atl-dc-03.fabrikam.com"
strContainer = "fabrikam.com"
strOwner = "administrator.fabrikam.com"
intRecordClass = 1
intTTL = 600 
strAdminMailbox = "dnsadmin.fabrikam.com"
strErrorMailbox = "support.fabrikam.com"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set objItem = objWMIService.Get("MicrosoftDNS_MInfoType")
errResult = objItem.CreateInstanceFromPropertyData _
    (strDNSServer, strContainer, strOwner, intRecordClass, intTTL, _
        strAdminMailbox, strErrorMailbox)
</vb><vb name="Create a Mailbox DNS Record" n="831">' Create a Mailbox DNS Record


strDNSServer = "atl-dc-03.fabrikam.com"
strContainer = "fabrikam.com"
strOwner = "atl-srv-01.fabrikam.com"
intRecordClass = 1
intTTL = 600 
strMailboxHost = "admin.mailserver.fabrikam.com"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set objItem = objWMIService.Get("MicrosoftDNS_MBType")
errResult = objItem.CreateInstanceFromPropertyData _
    (strDNSServer, strContainer, strOwner, intRecordClass, _
        intTTL, strMailboxHost)
</vb><vb name="Create a Mailbox Rename DNS Record" n="832">' Create a Mailbox Rename DNS Record


strDNSServer = "atl-dc-03.fabrikam.com"
strContainer = "fabrikam.com"
strOwner = "old-mailbox.fabrikam.com"
intRecordClass = 1
intTTL = 600 
strMailbox = "newmailbox.fabrikam.com"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set objItem = objWMIService.Get("MicrosoftDNS_MRType")
errResult = objItem.CreateInstanceFromPropertyData _
    (strDNSServer, strContainer, strOwner, intRecordClass, intTTL, strMailbox)
</vb><vb name="Create a Name Server DNS Record" n="833">' Create a Name Server DNS Record


strDNSServer = "atl-dc-03.fabrikam.com"
strContainer = "fabrikam.com"
strOwner = "atl-srv-01.fabrikam.com"
intRecordClass = 1
intTTL = 600 
strNSHost = "nameserver.fabrikam.com"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set objItem = objWMIService.Get("MicrosoftDNS_NSType")
errResult = objItem.CreateInstanceFromPropertyData _
    (strDNSServer, strContainer, strOwner, intRecordClass, intTTL, strNSHost)
</vb><vb name="Create a Responsible Person DNS Record" n="834">' Create a Responsible Person DNS Record


strDNSServer = "atl-dc-03.fabrikam.com"
strContainer = "fabrikam.com"
strOwner = "atl-srv-01.fabrikam.com"
intRecordClass = 1
intTTL = 600 
strRPMAilbox = "admin.fabrikam.com"
strText = "Network Administrator, (555) 555-1219"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set objItem = objWMIService.Get("MicrosoftDNS_RPType")
errResult = objItem.CreateInstanceFromPropertyData _
    (strDNSServer, strContainer, strOwner, intRecordClass, _
        intTTL, strRPMailbox, strText)
</vb><vb name="Create a Route Through DNS Record" n="835">' Create a Route Through DNS Record


strDNSServer = "atl-dc-03.fabrikam.com"
strContainer = "fabrikam.com"
strOwner = "atl-srv-01.fabrikam.com"
intRecordClass = 1
intTTL = 600 
intPreference = 1
strRouter = "router.fabrikam.com"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set objItem = objWMIService.Get("MicrosoftDNS_RTType")
errResult = objItem.CreateInstanceFromPropertyData _
    (strDNSServer, strContainer, strOwner, intRecordClass, _
        intTTL, intPreference, strRouter)
</vb><vb name="Create a Text DNS Record" n="836">' Create a Text DNS Record


strDNSServer = "atl-dc-03.fabrikam.com"
strContainer = "fabrikam.com"
strOwner = "atl-dc-01.fabrikam.com"
intRecordClass = 1
intTTL = 600 
strText = "This domain is reserved for employees of Fabrikam."
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set objItem = objWMIService.Get("MicrosoftDNS_TXTType")
errResult = objItem.CreateInstanceFromPropertyData _
    (strDNSServer, strContainer, strOwner, intRecordClass, intTTL, strText)
</vb><vb name="Create a Well-Known Services DNS Record" n="837">' Create a Well-Known Services DNS Record


strDNSServer = "atl-dc-03.fabrikam.com"
strContainer = "fabrikam.com"
strOwner = "ftp.fabrikam.com"
intRecordClass = 1
intTTL = 600 
strIPAddress = "192.168.1.150"
strProtocol = "TCP"
strServices = "FTP"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set objItem = objWMIService.Get("MicrosoftDNS_WKSType")
errResult = objItem.CreateInstanceFromPropertyData _
    (strDNSServer, strContainer, strOwner, intRecordClass, intTTL, _
        strIPAddress, strProtocol, strServices)
</vb><vb name="Create an Andrew File System Database Server DNS Record" n="838">' Create an Andrew File System Database Server DNS Record


strDNSServer = "atl-dc-03.fabrikam.com"
strContainer = "fabrikam.com"
strOwner = "atl-srv-01.fabrikam.com"
intRecordClass = 1
intTTL = 600 
intSubtype = 1
strServerName = "afs.fabrikam.com"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set objItem = objWMIService.Get("MicrosoftDNS_AFSDBType")
errResult = objItem.CreateInstanceFromPropertyData _
    (strDNSServer, strContainer, strOwner, intRecordClass, intTTL, _
        intSubType, strServerName)
</vb><vb name="Create an ATM Address to Name DNS Record" n="839">' Create an ATM Address to Name DNS Record


strDNSServer = "atl-dc-03.fabrikam.com"
strContainer = "fabrikam.com"
strOwner = "atm.fabrikam.com"
intRecordClass = 1
intTTL = 600 
intFormat = 1
strATMAddress = "47.0079.00010200000000000000.00a03e000002.00"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set objItem = objWMIService.Get("MicrosoftDNS_ATMAType")
errResult = objItem.CreateInstanceFromPropertyData _
    (strDNSServer, strContainer, strOwner, intRecordClass, intTTL, _
        intFormat, strATMAddress)
</vb><vb name="Create an IPv6 Address DNS Record" n="840">' Create an IPv6 Address DNS Record


strDNSServer = "atl-dc-03.fabrikam.com"
strContainer = "fabrikam.com"
strOwner = "ipv6.fabrikam.com"
intRecordClass = 1
intTTL = 600 
strIPv6Address = "4321:0:1:2:3:4:567:89ab"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set objItem = objWMIService.Get("MicrosoftDNS_AAAAType")
errResult = objItem.CreateInstanceFromPropertyData _
    (strDNSServer, strContainer, strOwner, intRecordClass, _
        intTTL, strIPv6Address)
</vb><vb name="List Andrew File System Database Server DNS Records" n="841">' List Andrew File System Database Server DNS Records


strComputer = "."
SSet objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_AFSDBType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Server Name: " &amp;amp; objItem.ServerName
    Wscript.Echo "Subtype: " &amp;amp; objItem.Subtype
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List ATM Address to Name DNS Records" n="842">' List ATM Address to Name DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_ATMAType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "ATM Address: " &amp;amp; objItem.ATMAddress
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Format: " &amp;amp; objItem.Format
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List Canonical Name  DNS Records" n="843">' List Canonical Name  DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_CNAMEType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Primary Name: " &amp;amp; objItem.PrimaryName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List Host Address DNS Records" n="844">' List Host Address DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_AType")

For Each objItem in colItems
    Wscript.Echo "IP Address: " &amp;amp; objItem.IPAddress
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List Host Information DNS Records" n="845">' List Host Information DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_HINFOType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "CPU: " &amp;amp; objItem.CPU
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Operating System: " &amp;amp; objItem.OS
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List IPv6 Address DNS Records" n="846">' List IPv6 Address DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_AAAAType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "IPv6 Address: " &amp;amp; objItem.IPv6Address
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List ISDN DNS Records" n="847">' List ISDN DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_ISDNType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Serve Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "ISDN Number: " &amp;amp; objItem.ISDNNumber
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "SubAddress: " &amp;amp; objItem.SubAddress
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List KEY DNS Records" n="848">' List KEY DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_KEYType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Algorithm: " &amp;amp; objItem.Algorithm
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Flags: " &amp;amp; objItem.Flags
    Wscript.Echo "Protocol: " &amp;amp; objItem.Protocol
    Wscript.Echo "Public Key: " &amp;amp; objItem.PublicKey
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List Mail Agent DNS Records" n="849">' List Mail Agent DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_MDType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "MD Host: " &amp;amp; objItem.MDHost
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List Mail Exchanger DNS Records" n="850">' List Mail Exchanger DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_MXType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS sServer Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Mail Exchange: " &amp;amp; objItem.MailExchange
    Wscript.Echo "Preference: " &amp;amp; objItem.Preference
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List Mail Forwarding Agent DNS Records" n="851">' List Mail Forwarding Agent DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_MFType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "MF Host: " &amp;amp; objItem.MFHost
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List Mail Group DNS Records" n="852">' List Mail Group DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_MGType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "MG Mailbox: " &amp;amp; objItem.MGMailbox
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List Mail Information DNS Records" n="853">' List Mail Information DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_MINFOType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Error Mailbox: " &amp;amp; objItem.ErrorMailbox
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Responsible Mailbox: " &amp;amp; objItem.ResponsibleMailbox
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List Mailbox DNS Records" n="854">' List Mailbox DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_MBType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "MB Host: " &amp;amp; objItem.MBHost
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List Mailbox Rename DNS Records" n="855">' List Mailbox Rename DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_MRType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS ServerName: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "MR Mailbox: " &amp;amp; objItem.MRMailbox
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List Name Server DNS Records" n="856">' List Name Server DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_NSType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "NS Host: " &amp;amp; objItem.NSHost
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List Next DNS Records" n="857">' List Next DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_NXTType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Next Domain Name: " &amp;amp; objItem.NextDomainName
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo "Types: " &amp;amp; objItem.Types
    Wscript.Echo
Next
</vb><vb name="List Pointer DNS Records" n="858">' List Pointer DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_PTRType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "PTR Domain Name: " &amp;amp; objItem.PTRDomainName
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List Responsible PersonDNS Records" n="859">' List Responsible PersonDNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_RPType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS sServer Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "RP Mailbox: " &amp;amp; objItem.RPMailbox
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo "TXT Domain Name: " &amp;amp; objItem.TXTDomainName
    Wscript.Echo
Next
</vb><vb name="List Route Through DNS Records" n="860">' List Route Through DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_RTType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Intermediate Host: " &amp;amp; objItem.IntermediateHost
    Wscript.Echo "Preference: " &amp;amp; objItem.Preference
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List Service DNS Records" n="861">' List Service DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_SRVType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Port: " &amp;amp; objItem.Port
    Wscript.Echo "Priority: " &amp;amp; objItem.Priority
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo "Weight: " &amp;amp; objItem.Weight
    Wscript.Echo
Next
</vb><vb name="List Signature DNS Records" n="862">' List Signature DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_SIGType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Algorithm: " &amp;amp; objItem.Algorithm
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Key Tag: " &amp;amp; objItem.KeyTag
    Wscript.Echo "Labels: " &amp;amp; objItem.Labels
    Wscript.Echo "Original Time-to-Live: " &amp;amp; objItem.OriginalTTL
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Signature: " &amp;amp; objItem.Signature
    Wscript.Echo "Signature Expiration: " &amp;amp; objItem.SignatureExpiration
    Wscript.Echo "Signature Inception: " &amp;amp; objItem.SignatureInception
    Wscript.Echo "Signer Name: " &amp;amp; objItem.SignerName
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo "Type Covered: " &amp;amp; objItem.TypeCovered
    Wscript.Echo
Next
</vb><vb name="List Start of Authority DNS Records" n="863">' List Start of Authority DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_SOAType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Expire Limit: " &amp;amp; objItem.ExpireLimit
    Wscript.Echo "Minimum Time-to-Live: " &amp;amp; objItem.MinimumTTL
    Wscript.Echo "Primary Server: " &amp;amp; objItem.PrimaryServer
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Refresh Interval: " &amp;amp; objItem.RefreshInterval
    Wscript.Echo "Responsible Party: " &amp;amp; objItem.ResponsibleParty
    Wscript.Echo "Retry Delay: " &amp;amp; objItem.RetryDelay
    Wscript.Echo "Serial Number: " &amp;amp; objItem.SerialNumber
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List Text DNS Records" n="864">' List Text DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_TXTType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "Descriptive Text: " &amp;amp; objItem.DescriptiveText
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List Well-Known Services DNS Records" n="865">' List Well-Known Services DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_WKSType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Internet Address: " &amp;amp; objItem.InternetAddress
    Wscript.Echo "IP Protocol: " &amp;amp; objItem.IPProtocol
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Services: " &amp;amp; objItem.Services
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List WINS DNS Records" n="866">' List WINS DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_WINSType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Cache Timeout: " &amp;amp; objItem.CacheTimeout
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Lookup Timeout: " &amp;amp; objItem.LookupTimeout
    Wscript.Echo "Mapping Flag: " &amp;amp; objItem.MappingFlag
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live : " &amp;amp; objItem.TTL
    Wscript.Echo "WINS Servers: " &amp;amp; objItem.WinsServers
    Wscript.Echo
Next
</vb><vb name="List WINS Reverse Lookup DNS Records" n="867">' List WINS Reverse Lookup DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_WINSRType")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Cache Timeout: " &amp;amp; objItem.CacheTimeout
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "Lookup Timeout: " &amp;amp; objItem.LookupTimeout
    Wscript.Echo "Mapping Flag: " &amp;amp; objItem.MappingFlag
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Result Domain: " &amp;amp; objItem.ResultDomain
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb><vb name="List X.25 DNS Records" n="868">' List X.25 DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_X25Type")

For Each objItem in colItems
    Wscript.Echo "Owner Name: " &amp;amp; objItem.OwnerName
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Domain Name: " &amp;amp; objItem.DomainName
    Wscript.Echo "PSDN Address: " &amp;amp; objItem.PSDNAddress
    Wscript.Echo "Record Class: " &amp;amp; objItem.RecordClass
    Wscript.Echo "Record Data: " &amp;amp; objItem.RecordData
    Wscript.Echo "Text Representation: " &amp;amp; objItem.TextRepresentation
    Wscript.Echo "Timestamp: " &amp;amp; objItem.Timestamp
    Wscript.Echo "Time-to-Live: " &amp;amp; objItem.TTL
    Wscript.Echo
Next
</vb></dd>
			<dd name="DNS Server Management" code="manage" desc="Sample scripts for managing Microsoft DNS Server, including pausing and restarting zones; changing zone types; and clearing the DNS Server cache."><vb name="Age All DNS Records" n="869">' Age All DNS Records


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery _
    ("Select * from MicrosoftDNS_Zone Where Name = 'accounting.fabrikam.com'")

For Each objItem in colItems
    errResult = objItem.AgeAllRecords(,1)
Next
</vb><vb name="Clear the DNS Server Cache" n="870">' Clear the DNS Server Cache


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * From MicrosoftDNS_Cache")

For Each objItem in colItems
    objItem.ClearCache()
Next
</vb><vb name="Create a Primary DNS Zone" n="871">' Create a Primary DNS Zone


strZoneName = "accounting.fabrikam.com"
intPrimaryZone = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set objItem = objWMIService.Get("MicrosoftDNS_Zone")
errResult = objItem.CreateZone(strZoneName, intPrimaryZone)
</vb><vb name="Force a Refresh of a DNS Zone" n="872">' Force a Refresh of a DNS Zone


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery _
    ("Select * from MicrosoftDNS_Zone Where Name = 'accounting.fabrikam.com'")

For Each objItem in colItems
    objItem.ForceRefresh()
Next
</vb><vb name="List DNS Domain Properties" n="873">' List DNS Domain Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_Domain")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo
Next
</vb><vb name="List DNS Server Cache Properties" n="874">' List DNS Server Cache Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_Cache")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DNSServerName
    Wscript.Echo
Next
</vb><vb name="List DNS Server Properties" n="875">' List DNS Server Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_Server")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Address Answer Limit: " &amp;amp; objItem.AddressAnswerLimit
    Wscript.Echo "Allow Update: " &amp;amp; objItem.AllowUpdate
    Wscript.Echo "Autocache Update: " &amp;amp; objItem.AutoCacheUpdate
    Wscript.Echo "Autoconfig File Zones: " &amp;amp; objItem.AutoConfigFileZones
    Wscript.Echo "Bind Secondaries: " &amp;amp; objItem.BindSecondaries
    Wscript.Echo "Boot Method: " &amp;amp; objItem.BootMethod
    Wscript.Echo "Default Aging State: " &amp;amp; objItem.DefaultAgingState
    Wscript.Echo "Default No-Refresh Interval: " &amp;amp; _
        objItem.DefaultNoRefreshInterval
    Wscript.Echo "Default Refresh Interval: " &amp;amp; objItem.DefaultRefreshInterval
    Wscript.Echo "Disable AutoReverse Zones: " &amp;amp; _
        objItem.DisableAutoReverseZones
    Wscript.Echo "Disjoint Nets: " &amp;amp; objItem.DisjointNets
    Wscript.Echo "Directory Service Available: " &amp;amp; objItem.DsAvailable
    Wscript.Echo "Directory Service Polling Interval: " &amp;amp; _
        objItem.DsPollingInterval
    Wscript.Echo "Directory Service Tombstone Interval: " &amp;amp; _
        objItem.DsTombstoneInterval
    Wscript.Echo "EDNS Cache Timeout: " &amp;amp; objItem.EDnsCacheTimeout
    Wscript.Echo "Enable Directory Partitions: " &amp;amp; _
        objItem.EnableDirectoryPartitions
    Wscript.Echo "Enable DNSSec: " &amp;amp; objItem.EnableDnsSec
    Wscript.Echo "Enable EDNS Probes: " &amp;amp; objItem.EnableEDnsProbes
    Wscript.Echo "Event Log Level: " &amp;amp; objItem.EventLogLevel
    Wscript.Echo "Forward Delegations: " &amp;amp; objItem.ForwardDelegations
    If Not IsNull(objItem.Forwarders) Then
        strForwarders = Join(objItem.Forwarders, ",")
        Wscript.Echo "Forwarders: " &amp;amp; strForwarders
    Else
        Wscript.Echo "Forwarders:"
    End If
    Wscript.Echo "Forwarding Timeout: " &amp;amp; objItem.ForwardingTimeout
    Wscript.Echo "Is Slave: " &amp;amp; objItem.IsSlave
    If Not IsNull(objItem.ListenAddresses) Then
        strListenAddresses = Join(objItem.ListenAddresses, ",")
        Wscript.Echo "Listen Addresses: " &amp;amp; strListenAddresses
    Else
        Wscript.Echo "Listen Addresses:"
    End If
    Wscript.Echo "Local Net Priority: " &amp;amp; objItem.LocalNetPriority
    Wscript.Echo "Logfile Maximum Size: " &amp;amp; objItem.LogFileMaxSize
    Wscript.Echo "Logfile Path: " &amp;amp; objItem.LogFilePath
    If Not IsNull(objItem.LogIPFilterList) Then
        strIPFilter = Join(objItem.LogIPFilterList, ",")
        Wscript.Echo "Log IPFilter List: " &amp;amp; strIPFilter
    Else
        Wscript.Echo "Log IPFilter List:"
    End If
    Wscript.Echo "Log Level: " &amp;amp; objItem.LogLevel
    Wscript.Echo "Loose Wildcarding: " &amp;amp; objItem.LooseWildcarding
    Wscript.Echo "Maximum Cache Time-to-Live: " &amp;amp; objItem.MaxCacheTTL
    Wscript.Echo "Maximum Negative Cache Time-to-Live: " &amp;amp; _
        objItem.MaxNegativeCacheTTL
    Wscript.Echo "Name Check Flag: " &amp;amp; objItem.NameCheckFlag
    Wscript.Echo "No Recursion: " &amp;amp; objItem.NoRecursion
    Wscript.Echo "Recursion Retry: " &amp;amp; objItem.RecursionRetry
    Wscript.Echo "Recursion Timeout: " &amp;amp; objItem.RecursionTimeout
    Wscript.Echo "RoundRobin: " &amp;amp; objItem.RoundRobin
    Wscript.Echo "Rpc Protocol: " &amp;amp; objItem.RpcProtocol
    Wscript.Echo "Scavenging Interval: " &amp;amp; objItem.ScavengingInterval
    Wscript.Echo "Secure Responses: " &amp;amp; objItem.SecureResponses
    Wscript.Echo "Send Port: " &amp;amp; objItem.SendPort
    If Not IsNull(objItem.ServerAddresses) Then
        strServerAddress = Join(objItem.ServerAddresses, ",")
        Wscript.Echo "Server Addresses: " &amp;amp; strServerAddress
    Else
        Wscript.Echo "Server Addresses:"
    End If
    Wscript.Echo "Started: " &amp;amp; objItem.Started
    Wscript.Echo "Start Mode: " &amp;amp; objItem.StartMode
    Wscript.Echo "Strict File Parsing: " &amp;amp; objItem.StrictFileParsing
    Wscript.Echo "Update Options: " &amp;amp; objItem.UpdateOptions
    Wscript.Echo "Version: " &amp;amp; objItem.Version
    Wscript.Echo "Write Authority NS: " &amp;amp; objItem.WriteAuthorityNS
    Wscript.Echo "Xfr Connect Timeout: " &amp;amp; objItem.XfrConnectTimeout
Next
</vb><vb name="List DNS Server Root Hints Properties" n="876">' List DNS Server Root Hints Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery _
    ("Select * from MicrosoftDNS_RootHints")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo
Next
</vb><vb name="List DNS Server Statistics" n="877">' List DNS Server Statistics


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_Statistic")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Collection Name: " &amp;amp; objItem.CollectionName
    Wscript.Echo "Collection ID: " &amp;amp; objItem.CollectionId
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "String Value: " &amp;amp; objItem.StringValue
    Wscript.Echo "Value: " &amp;amp; objItem.Value
    Wscript.Echo
Next
</vb><vb name="List DNS Zones" n="878">' List DNS Zones


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * from MicrosoftDNS_Zone")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Zone Type: " &amp;amp; objItem.ZoneType
    Wscript.Echo "Aging: " &amp;amp; objItem.Aging
    Wscript.Echo "Allow Update: " &amp;amp; objItem.AllowUpdate
    Wscript.Echo "Autocreated: " &amp;amp; objItem.AutoCreated
    Wscript.Echo "Available For Scavenge Time: " &amp;amp; _
        objItem.AvailForScavengeTime
    Wscript.Echo "Container Name: " &amp;amp; objItem.ContainerName
    Wscript.Echo "Data File: " &amp;amp; objItem.DataFile
    Wscript.Echo "Disable WINS Record Replication: " &amp;amp; _
        objItem.DisableWINSRecordReplication
    Wscript.Echo "DNS Server Name: " &amp;amp; objItem.DnsServerName
    Wscript.Echo "Directory Service-Integrated: " &amp;amp; objItem.DsIntegrated
    Wscript.Echo "Forwarder Slave: " &amp;amp; objItem.ForwarderSlave
    Wscript.Echo "Forwarder Timeout: " &amp;amp; objItem.ForwarderTimeout
    Wscript.Echo "Last Successful SOA Check: " &amp;amp; _
        objItem.LastSuccessfulSoaCheck
    Wscript.Echo "LastSuccessful Xfr: " &amp;amp; objItem.LastSuccessfulXfr
    Wscript.Echo "Local Master Servers: " &amp;amp; objItem.LocalMasterServers
    Wscript.Echo "Master Servers: " &amp;amp; objItem.MasterServers
    Wscript.Echo "No-Refresh Interval: " &amp;amp; objItem.NoRefreshInterval
    Wscript.Echo "Notify: " &amp;amp; objItem.Notify
    Wscript.Echo "Notify Servers: " &amp;amp; objItem.NotifyServers
    Wscript.Echo "Paused: " &amp;amp; objItem.Paused
    Wscript.Echo "Refresh Interval: " &amp;amp; objItem.RefreshInterval
    Wscript.Echo "Reverse: " &amp;amp; objItem.Reverse
    Wscript.Echo "Scavenge Servers: " &amp;amp; objItem.ScavengeServers
    Wscript.Echo "Secondary Servers: " &amp;amp; objItem.SecondaryServers
    Wscript.Echo "Secure Secondaries: " &amp;amp; objItem.SecureSecondaries
    Wscript.Echo "Shutdown: " &amp;amp; objItem.Shutdown
    Wscript.Echo "Use Wins: " &amp;amp; objItem.UseWins
    Wscript.Echo
Next
</vb><vb name="Modify the DNS Zone Type" n="879">' Modify the DNS Zone Type


intPrimaryZone = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery _
    ("Select * from MicrosoftDNS_Zone Where Name = 'accounting.fabrikam.com'")

For Each objItem in colItems
    errResult = objItem.ChangeZoneType(intPrimaryZone, true)
Next
</vb><vb name="Pause a DNS Zone" n="880">' Pause a DNS Zone


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery _
    ("Select * from MicrosoftDNS_Zone Where Name = 'accounting.fabrikam.com'")

For Each objItem in colItems
    objItem.PauseZone()
Next
</vb><vb name="Reload a DNS Zone" n="881">' Reload a DNS Zone


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery _
    ("Select * from MicrosoftDNS_Zone Where Name = 'fabrikam.com'")

For Each objItem in colItems
    objItem.ReloadZone()
Next
</vb><vb name="Resume a Paused DNS Zone" n="882">' Resume a Paused DNS Zone


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery _
    ("Select * from MicrosoftDNS_Zone Where Name = 'accounting.fabrikam.com'")

For Each objItem in colItems
    objItem.ResumeZone()
Next
</vb><vb name="Start DNS Server Scavenging" n="883">' Start DNS Server Scavenging


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * From MicrosoftDNS_Server")

For Each objItem in colItems
    objItem.StartScavenging()
Next
</vb><vb name="Start the DNS Server Service" n="884">' Start the DNS Server Service


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * From MicrosoftDNS_Server")

For Each objItem in colItems
    objItem.StartService()
Next
</vb><vb name="Stop the DNS Server Service" n="885">' Stop the DNS Server Service


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery("Select * From MicrosoftDNS_Server")

For Each objItem in colItems
    objItem.StopService()
Next
</vb><vb name="Update a DNS Zone" n="886">' Update a DNS Zone


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery _
    ("Select * from MicrosoftDNS_Zone Where Name = 'accounting.fabrikam.com'")

For Each objItem in colItems
    objItem.UpdateFromDS()
Next
</vb><vb name="Write-Back a DNS Zone" n="887">' Write-Back a DNS Zone


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\MicrosoftDNS")

Set colItems = objWMIService.ExecQuery _
    ("Select * from MicrosoftDNS_Zone Where Name = 'accounting.fabrikam.com'")

For Each objItem in colItems
    objItem.WriteBackZone()
Next
</vb></dd>
		</dd>
		<dd name="Home Networking" code="home" desc="Sample scripts for managing the Internet Connection Firewall included in Windows XP."><vb name="List Home Networking Connection Properties" n="888">' List Home Networking Connection Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\microsoft\homenet")

Set colItems = objWMIService.ExecQuery _
    ("Select * from HNet_ConnectionProperties")

For Each objItem in colItems
    Wscript.Echo "Connection: " &amp;amp; objItem.Connection
    Wscript.Echo "Is Bridge: " &amp;amp; objItem.IsBridge
    Wscript.Echo "Is Bridge Member: " &amp;amp; objItem.IsBridgeMember
    Wscript.Echo "Is Firewalled: " &amp;amp; objItem.IsFirewalled
    Wscript.Echo "Is ICS Private: " &amp;amp; objItem.IsICSPrivate
    Wscript.Echo "Is ICS Public: " &amp;amp; objItem.IsICSPublic
Next
</vb><vb name="List Home Networking Connections" n="889">' List Home Networking Connections


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\microsoft\homenet")

Set colItems = objWMIService.ExecQuery("Select * from HNet_Connection")

For Each objItem in colItems
    Wscript.Echo "GUID: " &amp;amp; objItem.GUID
    Wscript.Echo "Is LAN Connection: " &amp;amp; objItem.IsLANConnection
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Phone Book Path: " &amp;amp; objItem.PhoneBookPath
Next
</vb><vb name="List Home Networking Firewall Logging Settings" n="890">' List Home Networking Firewall Logging Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\microsoft\homenet")

Set colItems = objWMIService.ExecQuery _
    ("Select * from HNet_FirewallLoggingSettings")

For Each objItem in colItems
    Wscript.Echo "ID: " &amp;amp; objItem.ID
    Wscript.Echo "Log Connections: " &amp;amp; objItem.LogConnections
    Wscript.Echo "Log Dropped Packets: " &amp;amp; objItem.LogDroppedPackets
    Wscript.Echo "Max File Size: " &amp;amp; objItem.MaxFileSize
    Wscript.Echo "Path: " &amp;amp; objItem.Path
Next
</vb><vb name="List Home Networking Firewall Settings" n="891">' List Home Networking Firewall Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\microsoft\homenet")

Set colItems = objWMIService.ExecQuery("Select * from HNet_FwIcmpSettings")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Allow Inbound Echo request: " &amp;amp; _
        objItem.AllowInboundEchoRequest
    Wscript.Echo "Allow Inbound Mask Requestt: " &amp;amp; _
        objItem.AllowInboundMaskRequest
    Wscript.Echo "Allow Inbound Router Request: " &amp;amp; _
        objItem.AllowInboundRouterRequest
    Wscript.Echo "Allow Inbound Timestamp Request: " &amp;amp; _
        objItem.AllowInboundTimestampRequest
    Wscript.Echo "Allow Outbound Destination Unreachable: " &amp;amp; _
        objItem.AllowOutboundDestinationUnreachable
    Wscript.Echo "Allow Outbound Parameter Problem: " &amp;amp; _
        objItem.AllowOutboundParameterProblem
    Wscript.Echo "Allow Outbound Source Quench: " &amp;amp; _
        objItem.AllowOutboundSourceQuench
    Wscript.Echo "Allow Outbound Time Exceeded: " &amp;amp; _
        objItem.AllowOutboundTimeExceeded
    Wscript.Echo "Allow redirect: " &amp;amp; objItem.AllowRedirect
Next
</vb><vb name="List Home Networking ICMP Settings" n="892">' List Home Networking ICMP Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\microsoft\homenet")

Set colItems = objWMIService.ExecQuery _
    ("Select * from HNet_ConnectionICMPSetting")

For Each objItem in colItems
    Wscript.Echo "Connection: " &amp;amp; objItem.Connection
    Wscript.Echo "ICMP Settings: " &amp;amp; objItem.ICMPSettings
Next
</vb><vb name="List Home Networking ICS Settings" n="893">' List Home Networking ICS Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\microsoft\homenet")

Set colItems = objWMIService.ExecQuery("Select * from HNet_ICSSettings")

For Each objItem in colItems
    Wscript.Echo "DHCP Enabled: " &amp;amp; objItem.DHCPEnabled
    Wscript.Echo "DNS Enabled: " &amp;amp; objItem.DNSEnabled
    Wscript.Echo "ID: " &amp;amp; objItem.ID
Next
</vb><vb name="List Home Networking Port Mapping Protocols" n="894">' List Home Networking Port Mapping Protocols


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\microsoft\homenet")

Set colItems = objWMIService.ExecQuery _
    ("Select * from HNet_PortMappingProtocol")

For Each objItem in colItems
    Wscript.Echo "Built In: " &amp;amp; objItem.BuiltIn
    Wscript.Echo "ID: " &amp;amp; objItem.ID
    Wscript.Echo "IP Protocol: " &amp;amp; objItem.IPProtocol
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Port: " &amp;amp; objItem.Port
Next
</vb><vb name="List Home Networking Port Mappings" n="895">' List Home Networking Port Mappings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\microsoft\homenet")

Set colItems = objWMIService.ExecQuery _
    ("Select * from HNet_ConnectionPortMapping2")

For Each objItem in colItems
    Wscript.Echo "Connection: " &amp;amp; objItem.Connection
    Wscript.Echo "Enabled: " &amp;amp; objItem.Enabled
    Wscript.Echo "Name Active: " &amp;amp; objItem.NameActive
    Wscript.Echo "Protocol: " &amp;amp; objItem.Protocol
    Wscript.Echo "Target IP Address: " &amp;amp; objItem.TargetIPAddress
    Wscript.Echo "Target Name: " &amp;amp; objItem.TargetName
    Wscript.Echo "Target Port: " &amp;amp; objItem.TargetPort
Next
</vb><vb name="Modify Home Networking Firewall Logging Settings" n="896">' Modify Home Networking Firewall Logging Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\microsoft\homenet")

Set colItems = objWMIService.ExecQuery _
    ("Select * from HNet_FirewallLoggingSettings")

For Each objItem in colItems
    objItem.LogDroppedPackets = False
    objItem.Put_
Next
</vb><vb name="Modify Home Networking Firewall Settings" n="897">' Modify Home Networking Firewall Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; _
        "\root\microsoft\homenet")

Set colItems = objWMIService.ExecQuery("Select * from HNet_FwIcmpSettings")

For Each objItem in colItems
    objItem.AllowInboundEchoRequest = False
    objItem.Put_
Next
</vb></dd>
		<dd name="Monitoring" code="monitor" desc="Sample scripts for monitoring network traffic and activity."><vb name="Monitor HTTP Indexing Service Performance" n="898">' Monitor HTTP Indexing Service Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService," &amp;amp; _
    "Win32_PerfFormattedData_ISAPISearch_HTTPIndexingService").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Active Queries: " &amp;amp; objItem.Activequeries
        Wscript.Echo "Cache Items: " &amp;amp; objItem.Cacheitems
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Current Requests Queued: " &amp;amp; _
            objItem.Currentrequestsqueued
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Percent Cache Hits: " &amp;amp; objItem.PercentCachehits
        Wscript.Echo "Percent Cache Misses: " &amp;amp; objItem.PercentCachemisses
        Wscript.Echo "Queries Per Minute: " &amp;amp; objItem.Queriesperminute
        Wscript.Echo "Total Queries: " &amp;amp; objItem.Totalqueries
        Wscript.Echo "Total Requests Rejected: " &amp;amp; _
            objItem.Totalrequestsrejected
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor IPSec 4 Driver Performance" n="899">' Monitor IPSec 4 Driver Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_IPSec4Driver").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Pending key exchange operations: " &amp;amp; _
            objItem.PendingKeyExchangeOperations
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor IPSec 4 IKE Performance" n="900">' Monitor IPSec 4 IKE Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_IPSec4Driver").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Acquire heap size: " &amp;amp; _
            objItem.AcquireHeapSize
        Wscript.Echo "Main mode SA list entries: " &amp;amp; _
            objItem.MainModeSAListEntries
        Wscript.Echo "Quick mode SA list entries: " &amp;amp; _
            objItem.QuickModeSAListEntries
        Wscript.Echo "Receive heap size: " &amp;amp; _
            objItem.ReceiveHeapSize
        Wscript.Echo "Total authentication failures: " &amp;amp; _
            objItem.TotalAuthenticationFailures
        Wscript.Echo "Total main mode SAs: " &amp;amp; _
            objItem.TotalMainModeSAs
        Wscript.Echo "Total negotiation failures: " &amp;amp; _
            objItem.TotalNegotiationFailures
        Wscript.Echo "Total quick mode SAs: " &amp;amp; _
            objItem.TotalQuickModeSAs
        Wscript.Echo "Total soft associations: " &amp;amp; _
            objItem.TotalSoftAssociations
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor MSDTC Distributed Transaction Coordinator Performance" n="901">' Monitor MSDTC Distributed Transaction Coordinator Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService," &amp;amp; _
    "Win32_PerfFormattedData_MSDTC_DistributedTransactionCoordinator"). _
        objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Aborted Transactions: " &amp;amp; objItem.AbortedTransactions
        Wscript.Echo "Aborted Transactions Per Second: " &amp;amp; _
            objItem.AbortedTransactionsPersec
        Wscript.Echo "Active Transactions: " &amp;amp; objItem.ActiveTransactions
        Wscript.Echo "Active Transactions Maximum: " &amp;amp; _
            objItem.ActiveTransactionsMaximum
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Committed Transactions: " &amp;amp; objItem.CommittedTransactions
        Wscript.Echo "Committed Transactions Per Second: " &amp;amp; _
            objItem.CommittedTransactionsPersec
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Force Aborted Transactions: " &amp;amp; _
            objItem.ForceAbortedTransactions
        Wscript.Echo "Force Committed Transactions: " &amp;amp; _
            objItem.ForceCommittedTransactions
        Wscript.Echo "In-Doubt Transactions: " &amp;amp; objItem.InDoubtTransactions
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Response Time Average: " &amp;amp; objItem.ResponseTimeAverage
        Wscript.Echo "Response Time Maximum: " &amp;amp; objItem.ResponseTimeMaximum
        Wscript.Echo "Response Time Minimum: " &amp;amp; objItem.ResponseTimeMinimum
        Wscript.Echo "Transactions Per Second: " &amp;amp; objItem.TransactionsPersec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor PSched Flow Performance" n="902">' Monitor PSched Flow Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PSched_PSchedFlow").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Average Packets in Netcard: " &amp;amp; _
            objItem.AveragePacketsinnetcard
        Wscript.Echo "Average Packets in Sequencer: " &amp;amp; _
            objItem.Averagepacketsinsequencer
        Wscript.Echo "Average Packets in Shaper: " &amp;amp; _
            objItem.Averagepacketsinshaper
        Wscript.Echo "Bytes Scheduled: " &amp;amp; objItem.Bytesscheduled
        Wscript.Echo "Bytes Scheduled Per Second: " &amp;amp; _
            objItem.BytesscheduledPersec
        Wscript.Echo "Bytes Transmitted: " &amp;amp; objItem.Bytestransmitted
        Wscript.Echo "Bytes Transmitted Per Second: " &amp;amp; _
            objItem.BytestransmittedPersec
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Maximum Packets in Netcard: " &amp;amp; _
            objItem.MaximumPacketsinnetcard
        Wscript.Echo "Maximum Packets in Sequencer: " &amp;amp; _
            objItem.Maxpacketsinsequencer
        Wscript.Echo "Maximum Packets in Shaper: " &amp;amp; _
            objItem.Maxpacketsinshaper
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Non-conforming Packets Scheduled: " &amp;amp; _
            objItem.Nonconformingpacketsscheduled
        Wscript.Echo "Non-conforming Packets ScheduledPersec: " &amp;amp; _
            objItem.NonconformingpacketsscheduledPersec
        Wscript.Echo "Non-conforming Packets Transmitted: " &amp;amp; _
            objItem.Nonconformingpacketstransmitted
        Wscript.Echo "Non-conforming Packets TransmittedPersec: " &amp;amp; _
            objItem.NonconformingpacketstransmittedPersec
        Wscript.Echo "Packets Dropped: " &amp;amp; objItem.Packetsdropped
        Wscript.Echo "Packets Dropped Per Second: " &amp;amp; _
            objItem.PacketsdroppedPersec
        Wscript.Echo "Packets Scheduled: " &amp;amp; objItem.Packetsscheduled
        Wscript.Echo "Packets Scheduled Per Second: " &amp;amp; _
            objItem.PacketsscheduledPersec
        Wscript.Echo "Packets Transmitted: " &amp;amp; objItem.Packetstransmitted
        Wscript.Echo "Packets Transmitted Per Second: " &amp;amp; _
            objItem.PacketstransmittedPersec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor PSched Pipe Performance" n="903">' Monitor PSched Pipe Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PSched_PSchedPipe").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Average Packets in Netcard: " &amp;amp; _
            objItem.Averagepacketsinnetcard
        Wscript.Echo "Average Packets in Sequencer: " &amp;amp; _
            objItem.Averagepacketsinsequencer
        Wscript.Echo "Average Packets in Shaper: " &amp;amp; _
            objItem.Averagepacketsinshaper
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Flow Mods Rejected: " &amp;amp; objItem.Flowmodsrejected
        Wscript.Echo "Flows Closed: " &amp;amp; objItem.Flowsclosed
        Wscript.Echo "Flows Modified: " &amp;amp; objItem.Flowsmodified
        Wscript.Echo "Flows Opened: " &amp;amp; objItem.Flowsopened
        Wscript.Echo "Flows Rejected: " &amp;amp; objItem.Flowsrejected
        Wscript.Echo "Maximum Packets in Netcard: " &amp;amp; _
            objItem.Maxpacketsinnetcard
        Wscript.Echo "Maximum Packets in Sequencer: " &amp;amp; _
            objItem.Maxpacketsinsequencer
        Wscript.Echo "Maximum Packets in Shaper: " &amp;amp; _
            objItem.Maxpacketsinshaper
        Wscript.Echo "Maximum Simultaneous Flows: " &amp;amp; _
            objItem.Maxsimultaneousflows
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Non-conforming Packets Scheduled: " &amp;amp; _
            objItem.Nonconformingpacketsscheduled
        Wscript.Echo "Non-conforming Packets ScheduledPersec: " &amp;amp; _
            objItem.NonconformingpacketsscheduledPersec
        Wscript.Echo "Non-conforming Packets Transmitted: " &amp;amp; _
            objItem.Nonconformingpacketstransmitted
        Wscript.Echo "Non-conforming Packets TransmittedPersec: " &amp;amp; _
            objItem.NonconformingpacketstransmittedPersec
        Wscript.Echo "Out-of-packets: " &amp;amp; objItem.Outofpackets
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Redirector Service Performance" n="904">' Monitor Redirector Service Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PerfNet_Redirector").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Bytes Received Per Second: " &amp;amp; _
            objItem.BytesReceivedPersec
        Wscript.Echo "Bytes Total Per Second: " &amp;amp; objItem.BytesTotalPersec
        Wscript.Echo "Bytes Transmitted Per Second: " &amp;amp; _
            objItem.BytesTransmittedPersec
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Connects Core: " &amp;amp; objItem.ConnectsCore
        Wscript.Echo "Connects Lan Manager 2.0: " &amp;amp; _
            objItem.ConnectsLanManager20
        Wscript.Echo "Connects Lan Manager 2.1: " &amp;amp; _
            objItem.ConnectsLanManager21
        Wscript.Echo "Connects Windows NT: " &amp;amp; objItem.ConnectsWindowsNT
        Wscript.Echo "Current Commands: " &amp;amp; objItem.CurrentCommands
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "File Data Operations Per Second: " &amp;amp; _
            objItem.FileDataOperationsPersec
        Wscript.Echo "File Read Operations Per Second: " &amp;amp; _
            objItem.FileReadOperationsPersec
        Wscript.Echo "File Write Operations Per Second: " &amp;amp; _
            objItem.FileWriteOperationsPersec
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Network Errors Per Second: " &amp;amp; _
            objItem.NetworkErrorsPersec
        Wscript.Echo "Packets Per Second: " &amp;amp; objItem.PacketsPersec
        Wscript.Echo "Packets Received Per Second: " &amp;amp; _
            objItem.PacketsReceivedPersec
        Wscript.Echo "Packets Transmitted Per Second: " &amp;amp; _
            objItem.PacketsTransmittedPersec
        Wscript.Echo "Read Bytes Cache Per Second: " &amp;amp; _
            objItem.ReadBytesCachePersec
        Wscript.Echo "Read Bytes Network Per Second: " &amp;amp; _
            objItem.ReadBytesNetworkPersec
        Wscript.Echo "Read Bytes NonPaging Per Second: " &amp;amp; _
            objItem.ReadBytesNonPagingPersec
        Wscript.Echo "Read Bytes Paging Per Second: " &amp;amp; _
            objItem.ReadBytesPagingPersec
        Wscript.Echo "Read Operations Random Per Second: " &amp;amp; _
            objItem.ReadOperationsRandomPersec
        Wscript.Echo "Read Packets Per Second: " &amp;amp; objItem.ReadPacketsPersec
        Wscript.Echo "Read Packets Small Per Second: " &amp;amp; _
            objItem.ReadPacketsSmallPersec
        Wscript.Echo "Reads Denied Per Second: " &amp;amp; objItem.ReadsDeniedPersec
        Wscript.Echo "Reads Large Per Second: " &amp;amp; objItem.ReadsLargePersec
        Wscript.Echo "Server Disconnects: " &amp;amp; objItem.ServerDisconnects
        Wscript.Echo "Server Reconnects: " &amp;amp; objItem.ServerReconnects
        Wscript.Echo "Server Sessions: " &amp;amp; objItem.ServerSessions
        Wscript.Echo "Server Sessions Hung: " &amp;amp; objItem.ServerSessionsHung
        Wscript.Echo "Write Bytes Cache Per Second: " &amp;amp; _
            objItem.WriteBytesCachePersec
        Wscript.Echo "Write Bytes Network Per Second: " &amp;amp; _
            objItem.WriteBytesNetworkPersec
        Wscript.Echo "Write Bytes NonPaging Per Second: " &amp;amp; _
            objItem.WriteBytesNonPagingPersec
        Wscript.Echo "Write Bytes Paging Per Second: " &amp;amp; _
            objItem.WriteBytesPagingPersec
        Wscript.Echo "Write Operations Random Per Second: " &amp;amp; _
            objItem.WriteOperationsRandomPersec
        Wscript.Echo "Write Packets Per Second: " &amp;amp; _
            objItem.WritePacketsPersec
        Wscript.Echo "Write PacketsSmall Per Second: " &amp;amp; _
            objItem.WritePacketsSmallPersec
        Wscript.Echo "Writes Denied Per Second: " &amp;amp; objItem.WritesDeniedPersec
        Wscript.Echo "Writes Large Per Second: " &amp;amp; objItem.WritesLargePersec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Remote Access Performance" n="905">' Monitor Remote Access Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService," &amp;amp; _
    "Win32_PerfFormattedData_PerfProc_RemoteAccess_RASTotal").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Alignment Errors: " &amp;amp; objItem.AlignmentErrors
        Wscript.Echo "Buffer Overrun Errors: " &amp;amp; objItem.BufferOverrunErrors
        Wscript.Echo "Bytes Received: " &amp;amp; objItem.BytesReceived
        Wscript.Echo "Bytes Received Per Second: " &amp;amp; _
            objItem.BytesReceivedPerSec
        Wscript.Echo "Bytes Transmitted: " &amp;amp; objItem.BytesTransmitted
        Wscript.Echo "Bytes Transmitted Per Second: " &amp;amp; _
            objItem.BytesTransmittedPerSec
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "CRC Errors: " &amp;amp; objItem.CRCErrors
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Frames Received: " &amp;amp; objItem.FramesReceived
        Wscript.Echo "Frames Received Per Second: " &amp;amp; _
            objItem.FramesReceivedPerSec
        Wscript.Echo "Frames Transmitted: " &amp;amp; objItem.FramesTransmitted
        Wscript.Echo "Frames Transmitted Per Second: " &amp;amp; _
            objItem.FramesTransmittedPerSec
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Percent Compression In: " &amp;amp; objItem.PercentCompressionIn
        Wscript.Echo "Percent Compression Out: " &amp;amp; _
            objItem.PercentCompressionOut
        Wscript.Echo "Serial Overrun Errors: " &amp;amp; objItem.SerialOverrunErrors
        Wscript.Echo "Timeout Errors: " &amp;amp; objItem.TimeoutErrors
        Wscript.Echo "Total Connections: " &amp;amp; objItem.TotalConnections
        Wscript.Echo "Total Errors: " &amp;amp; objItem.TotalErrors
        Wscript.Echo "Total Errors Per Second: " &amp;amp; objItem.TotalErrorsPerSec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Remote Access RAS Port Performance" n="906">' Monitor Remote Access RAS Port Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService," &amp;amp; _
    "Win32_PerfFormattedData_PerfProc_RemoteAccess_RASPort").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Alignment Errors: " &amp;amp; objItem.AlignmentErrors
        Wscript.Echo "Buffer Overrun Errors: " &amp;amp; objItem.BufferOverrunErrors
        Wscript.Echo "Bytes Received: " &amp;amp; objItem.BytesReceived
        Wscript.Echo "Bytes Received Per Second: " &amp;amp; _
            objItem.BytesReceivedPerSec
        Wscript.Echo "Bytes Transmitted: " &amp;amp; objItem.BytesTransmitted
        Wscript.Echo "Bytes Transmitted Per Second: " &amp;amp; _
            objItem.BytesTransmittedPerSec
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "CRC Errors: " &amp;amp; objItem.CRCErrors
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Frames Received: " &amp;amp; objItem.FramesReceived
        Wscript.Echo "Frames Received Per Second: " &amp;amp; _
            objItem.FramesReceivedPerSec
        Wscript.Echo "Frames Transmitted: " &amp;amp; objItem.FramesTransmitted
        Wscript.Echo "Frames Transmitted Per Second: " &amp;amp; _
            objItem.FramesTransmittedPerSec
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Percent Compression In: " &amp;amp; objItem.PercentCompressionIn
        Wscript.Echo "Percent Compression Out: " &amp;amp; _
            objItem.PercentCompressionOut
        Wscript.Echo "Serial Overrun Errors: " &amp;amp; objItem.SerialOverrunErrors
        Wscript.Echo "Timeout Errors: " &amp;amp; objItem.TimeoutErrors
        Wscript.Echo "Total Errors: " &amp;amp; objItem.TotalErrors
        Wscript.Echo "Total Errors Per Second: " &amp;amp; objItem.TotalErrorsPerSec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor RSVP ACSRVP Interfaces Performance" n="907">' Monitor RSVP ACSRVP Interfaces Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_RSVP_RSVPService").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Bytes in QoS Notifications: " &amp;amp; _
            objItem.BytesinQoSnotifications
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Failed QoS Requests: " &amp;amp; objItem.FailedQoSrequests
        Wscript.Echo "Failed QoS Sends: " &amp;amp; objItem.FailedQoSsends
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Network Interfaces: " &amp;amp; objItem.NetworkInterfaces
        Wscript.Echo "Network Sockets: " &amp;amp; objItem.Networksockets
        Wscript.Echo "QoS Clients: " &amp;amp; objItem.QoSclients
        Wscript.Echo "QoS-Enabled Receivers: " &amp;amp; objItem.QoSenabledreceivers
        Wscript.Echo "QoS-Enabled Senders: " &amp;amp; objItem.QoSenabledsenders
        Wscript.Echo "QoS Notifications: " &amp;amp; objItem.QoSnotifications
        Wscript.Echo "RSVP Sessions: " &amp;amp; objItem.RSVPsessions
        Wscript.Echo "Timers: " &amp;amp; objItem.Timers
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor RSVP ACSRVPS Service Performance" n="908">' Monitor RSVP ACSRVPS Service Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_RSVP_RVPInterfaces").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Blocked RESVs: " &amp;amp; objItem.BlockedRESVs
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "General Failures: " &amp;amp; objItem.Generalfailures
        Wscript.Echo "Maximum Admitted Bandwidth: " &amp;amp; _
            objItem.Maximumadmittedbandwidth
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Number of Active Flows: " &amp;amp; objItem.Numberofactiveflows
        Wscript.Echo "Number of Incoming Messages Dropped: " &amp;amp; _ 
            objItem.Numberofincomingmessagesdropped
        Wscript.Echo "Number of Outgoing Messages Dropped: " &amp;amp; _
            objItem.Numberofoutgoingmessagesdropped
        Wscript.Echo "PATH Error Messages Received: " &amp;amp; _
            objItem.PATHERRmessagesreceived
        Wscript.Echo "PATH Error Messages Sent: " &amp;amp; _
            objItem.PATHERRmessagessent
        Wscript.Echo "PATH Messages Received: " &amp;amp; objItem.PATHmessagesreceived
        Wscript.Echo "PATH Messages Sent: " &amp;amp; objItem.PATHmessagessent
        Wscript.Echo "PATH State Block Timeouts: " &amp;amp; _
            objItem.PATHstateblocktimeouts
        Wscript.Echo "PATH TEAR Messages Received: " &amp;amp; _
            objItem.PATHTEARmessagesreceived
        Wscript.Echo "PATH TEAR Messages Sent: " &amp;amp; _
            objItem.PATHTEARmessagessent
        Wscript.Echo "Policy Control Failures: " &amp;amp; _
        objItem.Policycontrolfailures
        Wscript.Echo "Receive Messages Errors Big Messages: " &amp;amp; _
            objItem.ReceivemessageserrorsBigmessages
        Wscript.Echo "Receive Messages Errors No Memory: " &amp;amp; _
             objItem.ReceivemessageserrorsNomemory
        Wscript.Echo "Reserved Bandwidth: " &amp;amp; objItem.Reservedbandwidth
        Wscript.Echo "Resource Control Failures: " &amp;amp; _
            objItem.Resourcecontrolfailures
        Wscript.Echo "RESV CONFIRM Messages Received: " &amp;amp; _
            objItem.RESVCONFIRMmessagesreceived
        Wscript.Echo "RESV CONFIRM Messages Sent: " &amp;amp; _
            objItem.RESVCONFIRMmessagessent
        Wscript.Echo "RESV Error Messages Received: " &amp;amp; _
            objItem.RESVERRmessagesreceived
        Wscript.Echo "RESV Error Messages Sent: " &amp;amp; _
            objItem.RESVERRmessagessent
        Wscript.Echo "RESV Messages Received: " &amp;amp; objItem.RESVmessagesreceived
        Wscript.Echo "RESV Messages Sent: " &amp;amp; objItem.RESVmessagessent
        Wscript.Echo "RESV State Block Timeouts: " &amp;amp; _
            objItem.RESVstateblocktimeouts
        Wscript.Echo "RESV TEAR Messages Received: " &amp;amp; _
            objItem.RESVTEARmessagesreceived
        Wscript.Echo "RESV TEAR Messages Sent: " &amp;amp; _
            objItem.RESVTEARmessagessent
        Wscript.Echo "Send Messages Errors Big Messages: " &amp;amp; _
            objItem.SendmessageserrorsBigmessages
        Wscript.Echo "Send Messages Errors No Memory: " &amp;amp; _
            objItem.SendmessageserrorsNomemory
        Wscript.Echo "Signaling Bytes Received: " &amp;amp; _
            objItem.Signalingbytesreceived
        Wscript.Echo "Signaling Bytes Sent: " &amp;amp; objItem.Signalingbytessent
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor TAPI Server Telephony Performance" n="909">' Monitor TAPI Server Telephony Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_TAPISrv_Telephony").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Active Lines: " &amp;amp; objItem.ActiveLines
        Wscript.Echo "Active Telephones: " &amp;amp; objItem.ActiveTelephones
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Client Applications: " &amp;amp; objItem.ClientApps
        Wscript.Echo "Current Incoming Calls: " &amp;amp; objItem.CurrentIncomingCalls
        Wscript.Echo "Current Outgoing Calls: " &amp;amp; objItem.CurrentOutgoingCalls
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Incoming Calls Per Second: " &amp;amp; _
            objItem.IncomingCallsPersec
        Wscript.Echo "Lines: " &amp;amp; objItem.Lines
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Outgoing Calls Per Second: " &amp;amp; _
        objItem.OutgoingCallsPersec
        Wscript.Echo "Telephone Devices: " &amp;amp; objItem.TelephoneDevices
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor TCP NBT Connection Performance" n="910">' Monitor TCP NBT Connection Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_TCP_NBTConnection").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Bytes Received Per Second: " &amp;amp; _
            objItem.BytesReceivedPersec
        Wscript.Echo "Bytes Sent Per Second: " &amp;amp; objItem.BytesSentPersec
        Wscript.Echo "Bytes Total Per Second: " &amp;amp; objItem.BytesTotalPersec
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor TCP-IP ICMP Performance" n="911">' Monitor TCP-IP ICMP Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_Tcpip_ICMP").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Messages Outbound Errors: " &amp;amp; _
            objItem.MessagesOutboundErrors
        Wscript.Echo "Messages Per Second: " &amp;amp; objItem.MessagesPersec
        Wscript.Echo "Messages Received Errors: " &amp;amp; _
            objItem.MessagesReceivedErrors
        Wscript.Echo "Messages Received Per Second: " &amp;amp; _
            objItem.MessagesReceivedPersec
        Wscript.Echo "Messages Sent Per Second: " &amp;amp; objItem.MessagesSentPersec
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Received Address Mask: " &amp;amp; objItem.ReceivedAddressMask
        Wscript.Echo "Received Address Mask Reply: " &amp;amp; _
            objItem.ReceivedAddressMaskReply
        Wscript.Echo "Received Destination Unreachable: " &amp;amp; _
            objItem.ReceivedDestUnreachable
        Wscript.Echo "Received Echo Per Second: " &amp;amp; objItem.ReceivedEchoPersec
        Wscript.Echo "Received Echo Reply Per Second: " &amp;amp; _
            objItem.ReceivedEchoReplyPersec
        Wscript.Echo "Received Parameter Problem: " &amp;amp; _
            objItem.ReceivedParameterProblem
        Wscript.Echo "Received Redirect Per Second: " &amp;amp; _
            objItem.ReceivedRedirectPersec
        Wscript.Echo "Received Source Quench: " &amp;amp; _
            objItem.ReceivedSourceQuench
        Wscript.Echo "Received Time Exceeded: " &amp;amp; _
        objItem.ReceivedTimeExceeded
        Wscript.Echo "Received Timestamp Per Second: " &amp;amp; _
            objItem.ReceivedTimestampPersec
        Wscript.Echo "Received Timestamp Reply Per Second: " &amp;amp; _
            objItem.ReceivedTimestampReplyPersec
        Wscript.Echo "Sent Address Mask: " &amp;amp; objItem.SentAddressMask
        Wscript.Echo "Sent Address Mask Reply: " &amp;amp; _
            objItem.SentAddressMaskReply
        Wscript.Echo "Sent Destination Unreachable: " &amp;amp; _
            objItem.SentDestinationUnreachable
        Wscript.Echo "Sent Echo Per Second: " &amp;amp; objItem.SentEchoPersec
        Wscript.Echo "Sent Echo Reply Per Second: " &amp;amp; _
            objItem.SentEchoReplyPersec
        Wscript.Echo "Sent Parameter Problem: " &amp;amp; objItem.SentParameterProblem
        Wscript.Echo "Sent Redirect Per Second: " &amp;amp; objItem.SentRedirectPersec
        Wscript.Echo "Sent Source Quench: " &amp;amp; objItem.SentSourceQuench
        Wscript.Echo "Sent Time Exceeded: " &amp;amp; objItem.SentTimeExceeded
        Wscript.Echo "Sent Timestamp Per Second: " &amp;amp; _
            objItem.SentTimestampPersec
        Wscript.Echo "Sent Timestamp Reply Per Second: " &amp;amp; _
            objItem.SentTimestampReplyPersec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor TCP-IP ICMPv6 Performance" n="912">' Monitor TCP-IP ICMPv6 Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_TCPIP_ICMPv6").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Messages per second: " &amp;amp; objItem.MessagesPerSec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor TCP-IP IP Performance" n="913">' Monitor TCP-IP IP Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_TCPIP_IP").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Datagrams Forwarded Per Second: " &amp;amp; _
            objItem.DatagramsForwardedPersec
        Wscript.Echo "Datagrams Outbound Discarded: " &amp;amp; _
            objItem.DatagramsOutboundDiscarded
        Wscript.Echo "Datagrams Outbound No Route: " &amp;amp; _
            objItem.DatagramsOutboundNoRoute
        Wscript.Echo "Datagrams Per Second: " &amp;amp; objItem.DatagramsPersec
        Wscript.Echo "Datagrams Received Address Errors: " &amp;amp; _
            objItem.DatagramsReceivedAddressErrors
        Wscript.Echo "Datagrams Received Delivered Per Second: " &amp;amp; _
            objItem.DatagramsReceivedDeliveredPersec
        Wscript.Echo "Datagrams Received Discarded: " &amp;amp; _
            objItem.DatagramsReceivedDiscarded
        Wscript.Echo "Datagrams Received Header Errors: " &amp;amp; _
            objItem.DatagramsReceivedHeaderErrors
        Wscript.Echo "Datagrams Received Per Second: " &amp;amp; _
            objItem.DatagramsReceivedPersec
        Wscript.Echo "Datagrams Received Unknown Protocol: " &amp;amp; _
            objItem.DatagramsReceivedUnknownProtocol
        Wscript.Echo "Datagrams Sent Per Second: " &amp;amp; _
            objItem.DatagramsSentPersec
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Fragmentation Failures: " &amp;amp; _
            objItem.FragmentationFailures
        Wscript.Echo "Fragmented Datagrams Per Second: " &amp;amp; _
            objItem.FragmentedDatagramsPersec
        Wscript.Echo "Fragment Reassembly Failures: " &amp;amp; _
            objItem.FragmentReassemblyFailures
        Wscript.Echo "Fragments Created Per Second: " &amp;amp; _
            objItem.FragmentsCreatedPersec
        Wscript.Echo "Fragments Reassembled Per Second: " &amp;amp; _
            objItem.FragmentsReassembledPersec
        Wscript.Echo "Fragments Received Per Second: " &amp;amp; _
            objItem.FragmentsReceivedPersec
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor TCP-IP IPv4 Performance" n="914">' Monitor TCP-IP IPv4 Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_TCPIP_IPv4").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Datagrams per second: " &amp;amp; objItem.DatagramsPerSec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor TCP-IP IPv6 Performance" n="915">' Monitor TCP-IP IPv6 Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_TCPIP_IPv6").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Datagrams per second: " &amp;amp; objItem.DatagramsPerSec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor TCP-IP Network Interface Performance" n="916">' Monitor TCP-IP Network Interface Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_TCPIP_NetworkInterface").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Bytes Received Per Second: " &amp;amp; _
        objItem.BytesReceivedPersec
        Wscript.Echo "Bytes Sent Per Second: " &amp;amp; objItem.BytesSentPersec
        Wscript.Echo "Bytes Total Per Second: " &amp;amp; objItem.BytesTotalPersec
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Current Bandwidth: " &amp;amp; objItem.CurrentBandwidth
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Output Queue Length: " &amp;amp; objItem.OutputQueueLength
        Wscript.Echo "Packets Outbound Discarded: " &amp;amp; _
            objItem.PacketsOutboundDiscarded
        Wscript.Echo "Packets Outbound Errors: " &amp;amp; _
            objItem.PacketsOutboundErrors
        Wscript.Echo "Packets Per Second: " &amp;amp; objItem.PacketsPersec
        Wscript.Echo "Packets Received Discarded: " &amp;amp; _
            objItem.PacketsReceivedDiscarded
        Wscript.Echo "Packets Received Errors: " &amp;amp; _
            objItem.PacketsReceivedErrors
        Wscript.Echo "Packets Received Non-Unicast Per Second: " &amp;amp; _
            objItem.PacketsReceivedNonUnicastPersec
        Wscript.Echo "Packets Received Per Second: " &amp;amp; _
            objItem.PacketsReceivedPersec
        Wscript.Echo "Packets Received Unicast Per Second: " &amp;amp; _
            objItem.PacketsReceivedUnicastPersec
        Wscript.Echo "Packets Received Unknown: " &amp;amp; _
            objItem.PacketsReceivedUnknown
        Wscript.Echo "Packets Sent Non-Unicast Per Second: " &amp;amp; _
            objItem.PacketsSentNonUnicastPersec
        Wscript.Echo "Packets Sent Per Second: " &amp;amp; objItem.PacketsSentPersec
        Wscript.Echo "Packets Sent Unicast Per Second: " &amp;amp; _
            objItem.PacketsSentUnicastPersec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor TCP-IP TCP Performance" n="917">' Monitor TCP-IP TCP Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_TCPIP_TCP").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Connection Failures: " &amp;amp; objItem.ConnectionFailures
        Wscript.Echo "Connections Active: " &amp;amp; objItem.ConnectionsActive
        Wscript.Echo "Connections Established: " &amp;amp; _
            objItem.ConnectionsEstablished
        Wscript.Echo "Connections Passive: " &amp;amp; objItem.ConnectionsPassive
        Wscript.Echo "Connections Reset: " &amp;amp; objItem.ConnectionsReset
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Segments Per Second: " &amp;amp; objItem.SegmentsPersec
        Wscript.Echo "Segments Received Per Second: " &amp;amp; _\
            objItem.SegmentsReceivedPersec
        Wscript.Echo "Segments Retransmitted Per Second: " &amp;amp; _
            objItem.SegmentsRetransmittedPersec
        Wscript.Echo "Segments Sent Per Second: " &amp;amp; _
             objItem.SegmentsSentPersec
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor TCP-IP TCPv4 Performance" n="918">' Monitor TCP-IP TCPv4 Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_TCPIP_TCPv4").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Connection failures: " &amp;amp; objItem.ConnectionFailures
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor TCP-IP TCPv6 Performance" n="919">' Monitor TCP-IP TCPv6 Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_TCPIP_TCPv6").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Connection failures: " &amp;amp; objItem.ConnectionFailures
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor TCP-IP UDP Performance" n="920">' Monitor TCP-IP UDP Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_TCPIP_UDP").objectSet
objRefresher.Refresh
For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Datagrams No Port Per Second: " &amp;amp; _
            objItem.DatagramsNoPortPersec
        Wscript.Echo "Datagrams Per Second: " &amp;amp; objItem.DatagramsPersec
        Wscript.Echo "Datagrams Received Errors: " &amp;amp; _
            objItem.DatagramsReceivedErrors
        Wscript.Echo "Datagrams Received Per Second: " &amp;amp; _
            objItem.DatagramsReceivedPersec
        Wscript.Echo "Datagrams Sent Per Second: " &amp;amp; _
            objItem.DatagramsSentPersec
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor TCP-IP UDPv4 Performance" n="921">' Monitor TCP-IP UDPv4 Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_TCPIP_UDPv4").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Datagrams sent per second: " &amp;amp; _
            objItem.DatagramsSentPerSec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor TCP-IP UDPv6 Performance" n="922">' Monitor TCP-IP UDPv6 Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_TCPIP_UDPv6").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Datagrams sent per second: " &amp;amp; _
            objItem.DatagramsSentPerSec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb></dd>
		<dd name="SNMP" code="snmp" desc="Sample scripts for using WMI to retrieve data from SNMP devices."><vb name="List SNMP MIB-II Interface Table Information" n="923">' List SNMP MIB-II Interface Table Information


strTargetSnmpDevice = "192.168.0.1"
 
Set objWmiLocator = CreateObject("WbemScripting.SWbemLocator")
Set objWmiServices = objWmiLocator.ConnectServer("", "root\snmp\localhost")
 
Set objWmiNamedValueSet = CreateObject("WbemScripting.SWbemNamedValueSet")
objWmiNamedValueSet.Add "AgentAddress", strTargetSnmpDevice
objWmiNamedValueSet.Add "AgentReadCommunityName", "public"
 
Set colIfTable = objWmiServices.InstancesOf("SNMP_RFC1213_MIB_ifTable", , _
    objWmiNamedValueSet)
 
For Each objInterface In colIfTable
    WScript.Echo "ifIndex [Key]:        " &amp;amp; objInterface.ifIndex  &amp;amp; vbCrLf &amp;amp; _
        "   ifAdminStatus:     " &amp;amp; objInterface.ifAdminStatus     &amp;amp; vbCrLf &amp;amp; _
        "   ifDescr:           " &amp;amp; objInterface.ifDescr           &amp;amp; vbCrLf &amp;amp; _
        "   ifInDiscards:      " &amp;amp; objInterface.ifInDiscards      &amp;amp; vbCrLf &amp;amp; _
        "   ifInErrors:        " &amp;amp; objInterface.ifInErrors        &amp;amp; vbCrLf &amp;amp; _
        "   ifInNUcastPkts:    " &amp;amp; objInterface.ifInNUcastPkts    &amp;amp; vbCrLf &amp;amp; _
        "   ifInOctets:        " &amp;amp; objInterface.ifInOctets        &amp;amp; vbCrLf &amp;amp; _
        "   ifInUcastPkts:     " &amp;amp; objInterface.ifInUcastPkts     &amp;amp; vbCrLf &amp;amp; _
        "   ifInUnknownProtos: " &amp;amp; objInterface.ifInUnknownProtos &amp;amp; vbCrLf &amp;amp; _
        "   ifLastChange:      " &amp;amp; objInterface.ifLastChange      &amp;amp; vbCrLf &amp;amp; _
        "   ifMtu:             " &amp;amp; objInterface.ifMtu             &amp;amp; vbCrLf &amp;amp; _
        "   ifOperStatus:      " &amp;amp; objInterface.ifOperStatus      &amp;amp; vbCrLf &amp;amp; _
        "   ifOutDiscards:     " &amp;amp; objInterface.ifOutDiscards     &amp;amp; vbCrLf &amp;amp; _
        "   ifOutErrors:       " &amp;amp; objInterface.ifOutErrors       &amp;amp; vbCrLf &amp;amp; _
        "   ifOutNUcastPkts:   " &amp;amp; objInterface.ifOutNUcastPkts   &amp;amp; vbCrLf &amp;amp; _
        "   ifOutOctets:       " &amp;amp; objInterface.ifOutOctets       &amp;amp; vbCrLf &amp;amp; _
        "   ifOutQLen:         " &amp;amp; objInterface.ifOutQLen         &amp;amp; vbCrLf &amp;amp; _
        "   ifOutUcastPkts:    " &amp;amp; objInterface.ifOutUcastPkts    &amp;amp; vbCrLf &amp;amp; _
        "   ifPhysAddress:     " &amp;amp; objInterface.ifPhysAddress     &amp;amp; vbCrLf &amp;amp; _
        "   ifSpecific:        " &amp;amp; objInterface.ifSpecific        &amp;amp; vbCrLf &amp;amp; _
        "   ifSpeed:           " &amp;amp; objInterface.ifSpeed           &amp;amp; vbCrLf &amp;amp; _
        "   ifType:            " &amp;amp; objInterface.ifType            &amp;amp; vbCrLf
Next
</vb><vb name="List SNMP MIB-II System Group Information" n="924">' List SNMP MIB-II System Group Information


strTargetSnmpDevice = "192.168.0.1"
 
Set objWmiLocator = CreateObject("WbemScripting.SWbemLocator")
Set objWmiServices = objWmiLocator.ConnectServer("", "root\snmp\localhost")
 
Set objWmiNamedValueSet = CreateObject("WbemScripting.SWbemNamedValueSet")
objWmiNamedValueSet.Add "AgentAddress", strTargetSnmpDevice
objWmiNamedValueSet.Add "AgentReadCommunityName", "public"
 
Set colSystem = objWmiServices.InstancesOf("SNMP_RFC1213_MIB_system", , _
    objWmiNamedValueSet)
 
For Each objSystem In colSystem
    WScript.Echo "sysContact:  " &amp;amp; objSystem.sysContact  &amp;amp; vbCrLf &amp;amp; _
        "sysDescr:    " &amp;amp; objSystem.sysDescr    &amp;amp; vbCrLf &amp;amp; _
            "sysLocation: " &amp;amp; objSystem.sysLocation &amp;amp; vbCrLf &amp;amp; _
                "sysName:     " &amp;amp; objSystem.sysName     &amp;amp; vbCrLf &amp;amp; _
                    "sysObjectID: " &amp;amp; objSystem.sysObjectID &amp;amp; vbCrLf &amp;amp; _
                        "sysServices: " &amp;amp; objSystem.sysServices &amp;amp; vbCrLf &amp;amp; _
                            "sysUpTime:   " &amp;amp; objSystem.sysUpTime
Next
</vb><vb name="List SNMP MIB-II TCP and UDP Connections and Listening Ports" n="925">' List SNMP MIB-II TCP and UDP Connections and Listening Ports


strTargetSnmpDevice = "192.168.0.1"
 
Set objWmiLocator = CreateObject("WbemScripting.SWbemLocator")
Set objWmiServices = objWmiLocator.ConnectServer("", "root\snmp\localhost")
 
Set objWmiNamedValueSet = CreateObject("WbemScripting.SWbemNamedValueSet")
objWmiNamedValueSet.Add "AgentAddress", strTargetSnmpDevice
objWmiNamedValueSet.Add "AgentReadCommunityName", "public"
 
Set colTcpConnTable = _
    objWmiServices.InstancesOf("SNMP_RFC1213_MIB_tcpConnTable", , _
        objWmiNamedValueSet)
 
Set colUdpTable = _
    objWmiServices.InstancesOf("SNMP_RFC1213_MIB_udpTable", , _
        objWmiNamedValueSet)
 
 
WScript.Echo "TCP Connections and Listening Ports" &amp;amp; vbCrLf &amp;amp; _
    "-----------------------------------"
 
For Each objTcpConn In colTcpConnTable
    WScript.Echo objTcpConn.tcpConnLocalAddress &amp;amp; ":"    &amp;amp; _
        objTcpConn.tcpConnLocalPort    &amp;amp; " =&amp;gt; " &amp;amp; _
            objTcpConn.tcpConnRemAddress   &amp;amp; ":"    &amp;amp; _
                objTcpConn.tcpConnRemPort      &amp;amp; " "    &amp;amp; _
                    "[State: " &amp;amp; objTcpConn.tcpConnState &amp;amp; "]"
Next
 
WScript.Echo vbCrLf &amp;amp; "UDP Ports" &amp;amp; vbCrLf &amp;amp; "---------"
 
For Each objUdp In colUdpTable
    WScript.Echo objUdp.udpLocalAddress &amp;amp; ":" &amp;amp; objUdp.UdpLocalPort
Next
</vb></dd>
		<dd name="Windows Firewall" code="firewall" desc="Sample scripts for managing the Windows Firewall included in Windows XP Service Pack 2."><vb name="Add an Application to the Standard Profile" n="926">' Add an Application to the Standard Profile


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy
Set objProfile = objPolicy.GetProfileByType(1)

Set objApplication = CreateObject("HNetCfg.FwAuthorizedApplication")
objApplication.Name = "Free Cell"
objApplication.IPVersion = 2
objApplication.ProcessImageFileName = "c:\windows\system32\freecell.exe"
objApplication.RemoteAddresses = "*"
objApplication.Scope = 0
objApplication.Enabled = True

Set colApplications = objProfile.AuthorizedApplications
colApplications.Add(objApplication)
</vb><vb name="Add an Authorized Application" n="927">' Add an Authorized Application


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile

Set objApplication = CreateObject("HNetCfg.FwAuthorizedApplication")
objApplication.Name = "Free Cell"
objApplication.IPVersion = 2
objApplication.ProcessImageFileName = "c:\windows\system32\freecell.exe"
objApplication.RemoteAddresses = "*"
objApplication.Scope = 0
objApplication.Enabled = True

Set colApplications = objPolicy.AuthorizedApplications
colApplications.Add(objApplication)
</vb><vb name="Create a New Port" n="928">' Create a New Port


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile

Set objPort = CreateObject("HNetCfg.FwOpenPort")
objPort.Port = 9999
objPort.Name = "Test Port"
objPort.Enabled = FALSE
Set colPorts = objPolicy.GloballyOpenPorts

errReturn = colPorts.Add(objPort)
</vb><vb name="Delete an Authorized Application" n="929">' Delete an Authorized Application


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile

Set colApplications = objPolicy.AuthorizedApplications

errReturn = colApplications.Remove("c:\windows\system32\freecell.exe")
</vb><vb name="Delete an Open Port" n="930">' Delete an Open Port


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile

Set colPorts = objPolicy.GloballyOpenPorts
errReturn = colPorts.Remove(9999,6)
</vb><vb name="Disable Remote Administration" n="931">' Disable Remote Administration


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile

Set objAdminSettings = objPolicy.RemoteAdminSettings
objAdminSettings.Enabled = FALSE
</vb><vb name="Disable the Firewall" n="932">' Disable the Firewall


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile

objPolicy.FirewallEnabled = FALSE
</vb><vb name="Enable File and Printer Sharing Through Windows Firewall" n="933">' Enable File and Printer Sharing Through Windows Firewall


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile

Set colServices = objPolicy.Services
Set objService = colServices.Item(0)
objService.Enabled = TRUE
</vb><vb name="Enable Remote Administration" n="934">' Enable Remote Administration


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile

Set objAdminSettings = objPolicy.RemoteAdminSettings
objAdminSettings.Enabled = TRUE
</vb><vb name="Enable the Firewall" n="935">' Enable the Firewall


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile

objPolicy.FirewallEnabled = TRUE
</vb><vb name="List All Globally-Open Ports" n="936">' List All Globally-Open Ports


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile

Set colPorts = objPolicy.GloballyOpenPorts

For Each objPort in colPorts
    Wscript.Echo "Port name: " &amp;amp; objPort.Name
    Wscript.Echo "Port number: " &amp;amp; objPort.Port
    Wscript.Echo "Port IP version: " &amp;amp; objPort.IPVersion
    Wscript.Echo "Port protocol: " &amp;amp; objPort.Protocol
    Wscript.Echo "Port scope: " &amp;amp; objPort.Scope
    Wscript.Echo "Port remote addresses: " &amp;amp; objPort.RemoteAddresses
    Wscript.Echo "Port enabled: " &amp;amp; objPort.Enabled
    Wscript.Echo "Port built-in: " &amp;amp; objPort.Builtin
Next
</vb><vb name="List Authorized Applications" n="937">' List Authorized Applications


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile

Set colApplications = objPolicy.AuthorizedApplications

For Each objApplication in colApplications
    Wscript.Echo "Authorized application: " &amp;amp; objApplication.Name
    Wscript.Echo "Application enabled: " &amp;amp; objApplication.Enabled
    Wscript.Echo "Application IP version: " &amp;amp; objApplication.IPVersion
    Wscript.Echo "Application process image file name: " &amp;amp; _
        objApplication.ProcessImageFileName
    Wscript.Echo "Application remote addresses: " &amp;amp; _
        objApplication.RemoteAddresses
    Wscript.Echo "Application scope: " &amp;amp; objApplication.Scope
    Wscript.Echo
Next
</vb><vb name="List Authorized Applications in the Standard Profile" n="938">' List Authorized Applications in the Standard Profile


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy

Set objProfile = objPolicy.GetProfileByType(1)
Set colApplications = objProfile.AuthorizedApplications

For Each objApplication in colApplications
    Wscript.Echo "Authorized application: " &amp;amp; objApplication.Name
    Wscript.Echo "Application enabled: " &amp;amp; objApplication.Enabled
    Wscript.Echo "Application IP version: " &amp;amp; objApplication.IPVersion
    Wscript.Echo "Application process image file name: " &amp;amp; _
        objApplication.ProcessImageFileName
    Wscript.Echo "Application remote addresses: " &amp;amp; _
        objApplication.RemoteAddresses
    Wscript.Echo "Application scope: " &amp;amp; objApplication.Scope
    Wscript.Echo
Next
</vb><vb name="List Firewall Properties" n="939">' List Firewall Properties


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile
Wscript.Echo "Current profile type: " &amp;amp; objFirewall.CurrentProfileType

Wscript.Echo "Firewall enabled: " &amp;amp; objPolicy.FirewallEnabled
Wscript.Echo "Exceptions not allowed: " &amp;amp; objPolicy.ExceptionsNotAllowed
Wscript.Echo "Notifications disabled: " &amp;amp; objPolicy.NotificationsDisabled
Wscript.Echo "Unicast responses to multicast broadcast disabled: " &amp;amp; _
    objPolicy.UnicastResponsestoMulticastBroadcastDisabled
</vb><vb name="List Firewall Service Properties" n="940">' List Firewall Service Properties


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile

Set colServices = objPolicy.Services

For Each objService in colServices
    Wscript.Echo "Service name: " &amp;amp; objService.Name
    Wscript.Echo "Service enabled: " &amp;amp; objService.Enabled
    Wscript.Echo "Service type: " &amp;amp; objService.Type
    Wscript.Echo "Service IP version: " &amp;amp; objService.IPVersion
    Wscript.Echo "Service scope: " &amp;amp; objService.Scope
    Wscript.Echo "Service remote addresses: " &amp;amp; objService.RemoteAddresses
    Wscript.Echo "Service customized: " &amp;amp; objService.Customized
    Set colPorts = objService.GloballyOpenPorts
    For Each objPort in colPorts
        Wscript.Echo "Port name: " &amp;amp; objPort.Name
        Wscript.Echo "Port number: " &amp;amp; objPort.Port
        Wscript.Echo "Port enabled: " &amp;amp; objPort.Enabled
        Wscript.Echo "Port built-in: " &amp;amp; objPort.BuiltIn
        Wscript.Echo "Port IP version: " &amp;amp; objPort.IPVersion
        Wscript.Echo "Port protocol: " &amp;amp; objPort.Protocol
        Wscript.Echo "Port remote addresses: " &amp;amp; objPort.RemoteAddresses
        Wscript.Echo "Port scope: " &amp;amp; objPort.Scope
    Next
    Wscript.Echo
Next
</vb><vb name="List ICMP Settings" n="941">' List ICMP Settings


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile

Set objICMPSettings = objPolicy.ICMPSettings

Wscript.Echo "Allow inbound echo request: " &amp;amp; _
    objICMPSettings.AllowInboundEchoRequest
Wscript.Echo "Allow inbound mask request: " &amp;amp; _
    objICMPSettings.AllowInboundMaskRequest
Wscript.Echo "Allow inbound router request: " &amp;amp; _
    objICMPSettings.AllowInboundRouterRequest
Wscript.Echo "Allow inbound timestamp request: " &amp;amp; _
    objICMPSettings.AllowInboundTimestampRequest
Wscript.Echo "Allow outbound destination unreachable: " &amp;amp; _
    objICMPSettings.AllowOutboundDestinationUnreachable
Wscript.Echo "Allow outbound packet too big: " &amp;amp; _
    objICMPSettings.AllowOutboundPacketTooBig
Wscript.Echo "Allow outbound parameter problem: " &amp;amp; _
    objICMPSettings.AllowOutboundParameterProblem
Wscript.Echo "Allow outbound source quench: " &amp;amp; _
    objICMPSettings.AllowOutboundSourceQuench
Wscript.Echo "Allow outbound time exceeded: " &amp;amp; _
    objICMPSettings.AllowOutboundTimeExceeded
Wscript.Echo "Allow redirect: " &amp;amp; objICMPSettings.AllowRedirect
</vb><vb name="List Remote Administration Settings" n="942">' List Remote Administration Settings


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile

Set objAdminSettings = objPolicy.RemoteAdminSettings
Wscript.Echo "Remote administration settings enabled: " &amp;amp; _
    objAdminSettings.Enabled
Wscript.Echo "Remote administration addresses: " &amp;amp; _
    objAdminSettings.RemoteAddresses
Wscript.Echo "Remote administration scope: " &amp;amp; objAdminSettings.Scope
Wscript.Echo "Remote administration IP version: " &amp;amp; objAdminSettings.IPVersion
</vb><vb name="List Standard Profile Properties" n="943">' List Standard Profile Properties


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy
Set objProfile = objPolicy.GetProfileByType(1)

Wscript.Echo "Firewall enabled: " &amp;amp; objProfile.FirewallEnabled
Wscript.Echo "Exceptions not allowed: " &amp;amp; objProfile.ExceptionsNotAllowed
Wscript.Echo "Notifications disabled: " &amp;amp; objProfile.NotificationsDisabled
Wscript.Echo "Unicast responses to multicast broadcast disabled: " &amp;amp; -
    objProfile.UnicastResponsestoMulticastBroadcastDisabled
</vb><vb name="Modify a Firewall Property" n="944">' Modify a Firewall Property


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile

objPolicy.ExceptionsNotAllowed = TRUE
objPolicy.NotificationsDisabled = TRUE
objPolicy.UnicastResponsestoMulticastBroadcastDisabled = TRUE
</vb><vb name="Modify an ICMP Setting" n="945">' Modify an ICMP Setting


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile

Set objICMPSettings = objPolicy.ICMPSettings
objICMPSettings.AllowRedirect = TRUE
</vb><vb name="Open a Closed Port" n="946">' Open a Closed Port


Set objFirewall = CreateObject("HNetCfg.FwMgr")
Set objPolicy = objFirewall.LocalPolicy.CurrentProfile
Set colPorts = objPolicy.GloballyOpenPorts

Set objPort = colPorts.Item(9999,6)
objPort.Enabled = TRUE
</vb><vb name="Restore the Default Settings" n="947">' Restore the Default Settings


Set objFirewall = CreateObject("HNetCfg.FwMgr")
objFirewall.RestoreDefaults()
</vb></dd>
	</dd>
	<dd name="Operating System" code="os" desc="Sample scripts for managing and monitoring the Windows operating system.">
		<dd name="COM and DCOM" code="com" desc="Sample scripts for retrieving information about COM and DCOM settings and classes found on a computer."><vb name="List Classic COM Class Settings" n="948">' List Classic COM Class Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_ClassicCOMClassSetting")

For Each objItem in colItems
    Wscript.Echo "Application ID: " &amp;amp; objItem.AppID
    Wscript.Echo "Component ID: " &amp;amp; objItem.ComponentId
    Wscript.Echo "Control: " &amp;amp; objItem.Control
    Wscript.Echo "Default Icon: " &amp;amp; objItem.DefaultIcon
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "In-process Server 32: " &amp;amp; objItem.InprocServer32
    Wscript.Echo "Insertable: " &amp;amp; objItem.Insertable
    Wscript.Echo "Java Class: " &amp;amp; objItem.JavaClass
    Wscript.Echo "ProgId: " &amp;amp; objItem.ProgId
    Wscript.Echo "Version Independent ProgId: " &amp;amp; _
        objItem.VersionIndependentProgId
    Wscript.Echo
Next
</vb><vb name="List Classic COM Classes" n="949">' List Classic COM Classes


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_ClassicCOMClass")

For Each objItem in colItems
    Wscript.Echo "Component ID: " &amp;amp; objItem.ComponentId
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo
Next
</vb><vb name="List Component Categories" n="950">' List Component Categories


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_ComponentCategory")

For Each objItem in colItems
    Wscript.Echo "Category ID: " &amp;amp; objItem.CategoryId
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo
Next
</vb><vb name="List DCOM Application Settings" n="951">' List DCOM Application Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_DCOMApplicationSetting")

For Each objItem in colItems
    Wscript.Echo "Application ID: " &amp;amp; objItem.AppID
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Enable At Storage Activation: " &amp;amp; _
        objItem.EnableAtStorageActivation
    Wscript.Echo "Local Service: " &amp;amp; objItem.LocalService
    Wscript.Echo "Service Parameters: " &amp;amp; objItem.ServiceParameters
    Wscript.Echo "Use Surrogate: " &amp;amp; objItem.UseSurrogate
    Wscript.Echo
Next
</vb><vb name="List DCOM Applications" n="952">' List DCOM Applications


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_DCOMApplication")

For Each objItem in colItems
    Wscript.Echo "Application ID: " &amp;amp; objItem.AppID
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo
Next
</vb><vb name="List ProgIDs" n="953">' List ProgIDs


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_ProgIDSpecification")

For Each objItem in colItems
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Check ID: " &amp;amp; objItem.CheckID
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Parent: " &amp;amp; objItem.Parent
    Wscript.Echo "ProgID: " &amp;amp; objItem.ProgID
Next
</vb></dd>
		<dd name="Dates and Times" code="dates" desc="Sample scripts for retrieving date and time information (including local time and time zone information) from computers."><vb name="List the Local Time on a Computer" n="954">' List the Local Time on a Computer



strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
 &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colItems = objWMIService.ExecQuery("Select * from Win32_LocalTime")
For Each objItem in colItems
    Wscript.Echo "Year: " &amp;amp; objItem.Year
    Wscript.Echo "Month: " &amp;amp; objItem.Month
    Wscript.Echo "Day: " &amp;amp; objItem.Day
    Wscript.Echo "Hour: " &amp;amp; objItem.Hour
    Wscript.Echo "Minute: " &amp;amp; objItem.Minute
    Wscript.Echo "Second: " &amp;amp; objItem.Second
    Wscript.Echo "Quarter: " &amp;amp; objItem.Quarter
    Wscript.Echo "Week in the Month: " &amp;amp; objItem.WeekInMonth
    Wscript.Echo "Day of the Week: " &amp;amp; objItem.DayOfWeek
Next
</vb><vb name="List the Time Zone Offset from Greenwich Mean Time" n="955">' List the Time Zone Offset from Greenwich Mean Time


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colTimeZone = objWMIService.ExecQuery("Select * from Win32_TimeZone")
 
For Each objTimeZone in colTimeZone
    Wscript.Echo "Offset: "&amp;amp; objTimeZone.Bias 
Next
</vb><vb name="List Time Zone Information for a Computer" n="956">' List Time Zone Information for a Computer



On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TimeZone")

For Each objItem in colItems
    Wscript.Echo "Bias: " &amp;amp; objItem.Bias
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Daylight Bias: " &amp;amp; objItem.DaylightBias
    Wscript.Echo "Daylight Day: " &amp;amp; objItem.DaylightDay
    Wscript.Echo "Daylight Day of Week: " &amp;amp; objItem.DaylightDayOfWeek
    Wscript.Echo "Daylight Hour: " &amp;amp; objItem.DaylightHour
    Wscript.Echo "Daylight Millisecond: " &amp;amp; objItem.DaylightMillisecond
    Wscript.Echo "Daylight Minute: " &amp;amp; objItem.DaylightMinute
    Wscript.Echo "Daylight Month: " &amp;amp; objItem.DaylightMonth
    Wscript.Echo "Daylight Name: " &amp;amp; objItem.DaylightName
    Wscript.Echo "Daylight Second: " &amp;amp; objItem.DaylightSecond
    Wscript.Echo "Daylight Year: " &amp;amp; objItem.DaylightYear
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Standard Bias: " &amp;amp; objItem.StandardBias
    Wscript.Echo "Standard Day: " &amp;amp; objItem.StandardDay
    Wscript.Echo "Standard Day of Week: " &amp;amp; objItem.StandardDayOfWeek
    Wscript.Echo "Standard Hour: " &amp;amp; objItem.StandardHour
    Wscript.Echo "Standard Millisecond: " &amp;amp; objItem.StandardMillisecond
    Wscript.Echo "Standard Minute: " &amp;amp; objItem.StandardMinute
    Wscript.Echo "Standard Month: " &amp;amp; objItem.StandardMonth
    Wscript.Echo "Standard Name: " &amp;amp; objItem.StandardName
    Wscript.Echo "Standard Second: " &amp;amp; objItem.StandardSecond
    Wscript.Echo "Standard Year: " &amp;amp; objItem.StandardYear
    Wscript.Echo
Next
</vb><vb name="Set the Time Zone Offset from Greenwich Mean Time" n="957">' Set the Time Zone Offset from Greenwich Mean Time



On Error Resume Next

strComputer = "."
'Change value to reflect desired GMT offset in minutes.
intGMTOffset = -480

Set objWMIService = GetObject("winmgmts:" _
 &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colCompSys = objWMIService.ExecQuery _
 ("Select * from Win32_ComputerSystem")

For Each objCompSys in colCompSys
  objCompSys.CurrentTimeZone = intGMTOffset
  objCompSys.Put_
  If Err = 0 Then
    Wscript.Echo "Time zone set to specified value."
  Else
    Wscript.Echo "Unable to set time zone."
  End If
  Err.Clear
Next
</vb><vb name="List Time Zone and Daylight Savings" n="958">' List Time Zone and Daylight Savings

' Windows NT 4.0 SP4 and later : Yes


strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\CIMV2")
Set colItems = objWMIService.ExecQuery("SELECT * FROM Win32_ComputerSystem")
For Each objItem In colItems
  WScript.Echo "Current Time Zone (Hours Offset From GMT): " &amp;amp; (objItem.CurrentTimeZone / 60)
  WScript.Echo "Daylight Saving In Effect: " &amp;amp; objItem.DaylightInEffect
Next
</vb><vb name="List the UTC Time on a Computer" n="959">' List the UTC Time on a Computer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_UTCTime")

For Each objItem in colItems
    Wscript.Echo "Day: " &amp;amp; objItem.Day
    Wscript.Echo "Day of the Week: " &amp;amp; objItem.DayOfWeek
    Wscript.Echo "Hour: " &amp;amp; objItem.Hour
    Wscript.Echo "Milliseconds: " &amp;amp; objItem.Milliseconds
    Wscript.Echo "Minute: " &amp;amp; objItem.Minute
    Wscript.Echo "Month: " &amp;amp; objItem.Month
    Wscript.Echo "Quarter: " &amp;amp; objItem.Quarter
    Wscript.Echo "Second: " &amp;amp; objItem.Second
    Wscript.Echo "Week in the Month: " &amp;amp; objItem.WeekInMonth
    Wscript.Echo "Year: " &amp;amp; objItem.Year
Next
</vb></dd>
		<dd name="Monitoring" code="monitor" desc="Sample scripts for monitoring operating system activities and components."><vb name="Monitor Browser Service Performance" n="960">' Monitor Browser Service Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PerfNet_Browser").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Announcements Domain Per Second: " &amp;amp; _
            objItem.AnnouncementsDomainPersec
        Wscript.Echo "Announcements Server Per Second: " &amp;amp; _
            objItem.AnnouncementsServerPersec
        Wscript.Echo "Announcements Total Per Second: " &amp;amp; _
            objItem.AnnouncementsTotalPersec
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Duplicate Master Announcements: " &amp;amp; _
            objItem.DuplicateMasterAnnouncements
        Wscript.Echo "Election Packets Per Second: " &amp;amp; _
            objItem.ElectionPacketsPersec
        Wscript.Echo "Enumerations Domain Per Second: " &amp;amp; _
            objItem.EnumerationsDomainPersec
        Wscript.Echo "Enumerations Other Per Second: " &amp;amp; _
            objItem.EnumerationsOtherPersec
        Wscript.Echo "Enumerations Server Per Second: " &amp;amp; _
            objItem.EnumerationsServerPersec
        Wscript.Echo "Enumerations Total Per Second: " &amp;amp; _
            objItem.EnumerationsTotalPersec
        Wscript.Echo "Illegal Datagrams Per Second: " &amp;amp; _
            objItem.IllegalDatagramsPersec
        Wscript.Echo "Mailslot Allocations Failed: " &amp;amp; _
            objItem.MailslotAllocationsFailed
        Wscript.Echo "Mailslot Opens Failed Per Second: " &amp;amp; _
            objItem.MailslotOpensFailedPersec
        Wscript.Echo "Mailslot Receives Failed: " &amp;amp; _
            objItem.MailslotReceivesFailed
        Wscript.Echo "Mailslot Writes Failed: " &amp;amp; objItem.MailslotWritesFailed
        Wscript.Echo "Mailslot Writes Per Second: " &amp;amp; _
            objItem.MailslotWritesPersec
        Wscript.Echo "Missed Mailslot Datagrams: " &amp;amp; _
            objItem.MissedMailslotDatagrams
        Wscript.Echo "Missed Server Announcements: " &amp;amp; _
            objItem.MissedServerAnnouncements
        Wscript.Echo "Missed Server List Requests: " &amp;amp; _
            objItem.MissedServerListRequests
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Server Announce Allocations Failed Per Second: " &amp;amp; _
            objItem.ServerAnnounceAllocationsFailedPersec
        Wscript.Echo "Server List Requests Per Second: " &amp;amp; _
            objItem.ServerListRequestsPersec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Operating System Objects" n="961">' Monitor Operating System Objects


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PerfOS_Objects").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Events: " &amp;amp; objItem.Events
        Wscript.Echo "Mutexes: " &amp;amp; objItem.Mutexes
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Processes: " &amp;amp; objItem.Processes
        Wscript.Echo "Sections: " &amp;amp; objItem.Sections
        Wscript.Echo "Semaphores: " &amp;amp; objItem.Semaphores
        Wscript.Echo "Threads: " &amp;amp; objItem.Threads
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Operating System Performance" n="962">' Monitor Operating System Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PerfOS_System").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Alignment Fixups Per Second: " &amp;amp; _
            objItem.AlignmentFixupsPersec
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Context Switches Per Second: " &amp;amp; _
            objItem.ContextSwitchesPersec
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Exception Dispatches Per Second: " &amp;amp; _
            objItem.ExceptionDispatchesPersec
        Wscript.Echo "File Control Bytes Per Second: " &amp;amp; _
            objItem.FileControlBytesPersec
        Wscript.Echo "File Control Operations Per Second: " &amp;amp; _
            objItem.FileControlOperationsPersec
        Wscript.Echo "File Data Operations Per Second: " &amp;amp; _
            objItem.FileDataOperationsPersec
        Wscript.Echo "File Read Bytes Per Second: " &amp;amp; _
            objItem.FileReadBytesPersec
        Wscript.Echo "File Read Operations Per Second: " &amp;amp; _
            objItem.FileReadOperationsPersec
        Wscript.Echo "File Write Bytes Per Second: " &amp;amp; _
            objItem.FileWriteBytesPersec
        Wscript.Echo "File Write Operations Per Second: " &amp;amp; _
            objItem.FileWriteOperationsPersec
        Wscript.Echo "Floating Emulations Per Second: " &amp;amp; _
            objItem.FloatingEmulationsPersec
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Percent Registry Quota In Use: " &amp;amp; _
            objItem.PercentRegistryQuotaInUse
        Wscript.Echo "Processes: " &amp;amp; objItem.Processes
        Wscript.Echo "Processor Queue Length: " &amp;amp; _
            objItem.ProcessorQueueLength
        Wscript.Echo "System Calls Per Second: " &amp;amp; _
            objItem.SystemCallsPersec
        Wscript.Echo "System UpTime: " &amp;amp; objItem.SystemUpTime
        Wscript.Echo "Threads: " &amp;amp; objItem.Threads
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Server Performance" n="963">' Monitor Server Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PerfNet_Server").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Blocking Requests Rejected: " &amp;amp; _
            objItem.BlockingRequestsRejected
        Wscript.Echo "Bytes Received Per Second: " &amp;amp; _
            objItem.BytesReceivedPersec
        Wscript.Echo "Bytes Total Per Second: " &amp;amp; objItem.BytesTotalPersec
        Wscript.Echo "Bytes Transmitted Per Second: " &amp;amp; _
            objItem.BytesTransmittedPersec
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Context Blocks Queued Per Second: " &amp;amp; _
            objItem.ContextBlocksQueuedPersec
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Errors Access Permissions: " &amp;amp; _
            objItem.ErrorsAccessPermissions
        Wscript.Echo "Errors Granted Access: " &amp;amp; _
            objItem.ErrorsGrantedAccess
        Wscript.Echo "Errors Logon: " &amp;amp; objItem.ErrorsLogon
        Wscript.Echo "Errors System: " &amp;amp; objItem.ErrorsSystem
        Wscript.Echo "File Directory Searches: " &amp;amp; _
            objItem.FileDirectorySearches
        Wscript.Echo "Files Open: " &amp;amp; objItem.FilesOpen
        Wscript.Echo "Files Opened Total: " &amp;amp; objItem.FilesOpenedTotal
        Wscript.Echo "Logon Per Second: " &amp;amp; objItem.LogonPersec
        Wscript.Echo "Logon Total: " &amp;amp; objItem.LogonTotal
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Pool Nonpaged Bytes: " &amp;amp; objItem.PoolNonpagedBytes
        Wscript.Echo "Pool Nonpaged Failures: " &amp;amp; _
            objItem.PoolNonpagedFailures
        Wscript.Echo "Pool Nonpaged Peak: " &amp;amp; objItem.PoolNonpagedPeak
        Wscript.Echo "Pool Paged Bytes: " &amp;amp; objItem.PoolPagedBytes
        Wscript.Echo "Pool Paged Failures: " &amp;amp; objItem.PoolPagedFailures
        Wscript.Echo "Pool Paged Peak: " &amp;amp; objItem.PoolPagedPeak
        Wscript.Echo "Server Sessions: " &amp;amp; objItem.ServerSessions
        Wscript.Echo "Sessions Errored Out: " &amp;amp; objItem.SessionsErroredOut
        Wscript.Echo "Sessions Forced Off: " &amp;amp; objItem.SessionsForcedOff
        Wscript.Echo "Sessions Logged Off: " &amp;amp; objItem.SessionsLoggedOff
        Wscript.Echo "Sessions Timed Out: " &amp;amp; objItem.SessionsTimedOut
        Wscript.Echo "Work Item Shortages: " &amp;amp; objItem.WorkItemShortages
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Server Work Queues" n="964">' Monitor Server Work Queues


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService, _
    "Win32_PerfFormattedData_PerfNet_ServerWorkQueues").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Active Threads: " &amp;amp; objItem.ActiveThreads
        Wscript.Echo "Available Threads: " &amp;amp; objItem.AvailableThreads
        Wscript.Echo "Available Work Items: " &amp;amp; objItem.AvailableWorkItems
        Wscript.Echo "Borrowed Work Items: " &amp;amp; objItem.BorrowedWorkItems
        Wscript.Echo "Bytes Received Per Second: " &amp;amp; _
            objItem.BytesReceivedPersec
        Wscript.Echo "Bytes Sent Per Second: " &amp;amp; objItem.BytesSentPersec
        Wscript.Echo "Bytes Transferred Per Second: " &amp;amp; _
            objItem.BytesTransferredPersec
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Context Blocks Queued Per Second: " &amp;amp; _
            objItem.ContextBlocksQueuedPersec
        Wscript.Echo "Current Clients: " &amp;amp; objItem.CurrentClients
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Queue Length: " &amp;amp; objItem.QueueLength
        Wscript.Echo "Read Bytes Per Second: " &amp;amp; objItem.ReadBytesPersec
        Wscript.Echo "Read Operations Per Second: " &amp;amp; _
            objItem.ReadOperationsPersec
        Wscript.Echo "Total Bytes Per Second: " &amp;amp; objItem.TotalBytesPersec
        Wscript.Echo "Total Operations Per Second: " &amp;amp; _
            objItem.TotalOperationsPersec
        Wscript.Echo "Work Item Shortages: " &amp;amp; objItem.WorkItemShortages
        Wscript.Echo "Write Bytes Per Second: " &amp;amp; objItem.WriteBytesPersec
        Wscript.Echo "Write Operations Per Second: " &amp;amp; _
            objItem.WriteOperationsPersec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb></dd>
		<dd name=".NET Framework" code="dotnet" desc="Sample scripts for retrieving .NET Framework configuration information."><vb name="Monitor NET Framework NETCLR Exceptions Performance" n="965">' Monitor NET Framework NETCLR Exceptions Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService, " &amp;amp; _
    "Win32_PerfFormattedData_NETFramework_NETCLRExceptions").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Exceptions thrown: " &amp;amp; objItem.NumberOfExcepsThrown
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor NET Framework NETCLR Interop Performance" n="966">' Monitor NET Framework NETCLR Interop Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService, _
    "Win32_PerfFormattedData_NETFramework_NETCLRInterop").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Number of stubs: " &amp;amp; objItem.NumberOfStubs
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor NET Framework NETCLR JIT Performance" n="967">' Monitor NET Framework NETCLR JIT Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_NETFramework_NETCLRJit").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Percent time in JIT: " &amp;amp; objItem.PercentTimeInJIT
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor NET Framework NETCLR Locks and Threads Performance" n="968">' Monitor NET Framework NETCLR Locks and Threads Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService, _
    "Win32_PerfFormattedData_NETFramework_NETCLRLocksAndThreads").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Current queue length: " &amp;amp; objItem.CurrentQueueLength
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor NET Framework NETCLR Memory Performance" n="969">' Monitor NET Framework NETCLR Memory Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService, _
    "Win32_PerfFormattedData_NETFramework_NETCLRMemory").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Total bytes committed: " &amp;amp; _
            objItem.NumberTotalCommittedBytes
    Wscript.Sleep 2000
    objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor NET Framework NETCLR Remoting Performance" n="970">' Monitor NET Framework NETCLR Remoting Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService, _
    "Win32_PerfFormattedData_NETFRamework_NETCLRRemoting").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Remote calls per second: " &amp;amp; _
            objItem.RemoteCallsPerSec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor NET Framework NETCLR Security Performance" n="971">' Monitor NET Framework NETCLR Security Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService, _
    "Win32_PerfFormattedData_NETFramework_NETCLRSecurity").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Total runtime checks: " &amp;amp; objItem.TotalRuntimeChecks
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb></dd>
		<dd name="Page Files" code="pagefile" desc="Sample scripts for retrieving information from and configuring page files."><vb name="List Page File Performance" n="972">' List Page File Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PerfOS_PagingFile").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Percent Usage: " &amp;amp; objItem.PercentUsage
        Wscript.Echo "Percent Usage Peak: " &amp;amp; objItem.PercentUsagePeak
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="List Page File Properties" n="973">' List Page File Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPageFiles = objWMIService.ExecQuery("Select * from Win32_PageFile")

For Each objPageFile in colPageFiles
    Wscript.Echo "Creation Date: " &amp;amp; objPageFile.CreationDate
    Wscript.Echo "Description: " &amp;amp; objPageFile.Description
    Wscript.Echo "Drive: " &amp;amp; objPageFile.Drive        
    Wscript.Echo "File Name: " &amp;amp; objPageFile.FileName  
    Wscript.Echo "File Size: " &amp;amp; objPageFile.FileSize  
    Wscript.Echo "Initial Size: " &amp;amp; objPageFile.InitialSize
    Wscript.Echo "Install Date: " &amp;amp; objPageFile.InstallDate
    Wscript.Echo "Maximum Size: " &amp;amp; objPageFile.MaximumSize
    Wscript.Echo "Name: " &amp;amp; objPageFile.Name  
    Wscript.Echo "Path: " &amp;amp; objPageFile.Path  
Next
</vb><vb name="List Page File Use" n="974">' List Page File Use


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPageFiles = objWMIService.ExecQuery("Select * from Win32_PageFileUsage")

For Each objPageFile in colPageFiles
    Wscript.Echo "Allocated Base Size: " &amp;amp; objPageFile.AllocatedBaseSize
    Wscript.Echo "Current Usage: " &amp;amp; objPageFile.CurrentUsage
    Wscript.Echo "Description: " &amp;amp; objPageFile.Description
    Wscript.Echo "Install Date: " &amp;amp; objPageFile.InstallDate
    Wscript.Echo "Name: " &amp;amp; objPageFile.Name   
    Wscript.Echo "Peak Usage: " &amp;amp; objPageFile.PeakUsage 
Next
</vb><vb name="Modify Page File Properties" n="975">' Modify Page File Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPageFiles = objWMIService.ExecQuery _
    ("Select * from Win32_PageFileSetting")

For Each objPageFile in colPageFiles
    objPageFile.InitialSize = 300
    objPageFile.MaximumSize = 600
    objPageFile.Put_
Next
</vb></dd>
		<dd name="Processes" code="process" desc="Sample scripts for managing and monitoring the processes running on a computer.">
			<dd name="Monitoring" code="monitor" desc="Sample scripts for monitoring the processes running on a computer."><vb name="Monitor Job Object Details Performance" n="976">' Monitor Job Object Details Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService, _
    "Win32_PerfFormattedData_PerfProc_JobObjectDetails").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Creating Process ID: " &amp;amp; objItem.CreatingProcessID
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Elapsed Time: " &amp;amp; objItem.ElapsedTime
        Wscript.Echo "Handle Count: " &amp;amp; objItem.HandleCount
        Wscript.Echo "ID Process: " &amp;amp; objItem.IDProcess
        Wscript.Echo "I/O Data Bytes Per Second: " &amp;amp; objItem.IODataBytesPersec
        Wscript.Echo "I/O Data Operations Per Second: " &amp;amp; _
            objItem.IODataOperationsPersec
        Wscript.Echo "I/O Other Bytes Per Second: " &amp;amp; _
            objItem.IOOtherBytesPersec
        Wscript.Echo "I/O Other Operations Per Second: " &amp;amp; _
            objItem.IOOtherOperationsPersec
        Wscript.Echo "I/O Read Bytes Per Second: " &amp;amp; objItem.IOReadBytesPersec
        Wscript.Echo "I/O Read Operations Per Second: " &amp;amp; _
            objItem.IOReadOperationsPersec
        Wscript.Echo "I/O Write Bytes Per Second: " &amp;amp; _
            objItem.IOWriteBytesPersec
        Wscript.Echo "I/O Write Operations Per Second: " &amp;amp; _
            objItem.IOWriteOperationsPersec
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Page Faults Per Second: " &amp;amp; objItem.PageFaultsPersec
        Wscript.Echo "Page File Bytes: " &amp;amp; objItem.PageFileBytes
        Wscript.Echo "Page File Bytes Peak: " &amp;amp; objItem.PageFileBytesPeak
        Wscript.Echo "Percent Privileged Time: " &amp;amp; _
            objItem.PercentPrivilegedTime
        Wscript.Echo "Percent Processor Time: " &amp;amp; objItem.PercentProcessorTime
        Wscript.Echo "Percent User Time: " &amp;amp; objItem.PercentUserTime
        Wscript.Echo "Pool Nonpaged Bytes: " &amp;amp; objItem.PoolNonpagedBytes
        Wscript.Echo "Pool Paged Bytes: " &amp;amp; objItem.PoolPagedBytes
        Wscript.Echo "Priority Base: " &amp;amp; objItem.PriorityBase
        Wscript.Echo "Private Bytes: " &amp;amp; objItem.PrivateBytes
        Wscript.Echo "Thread Count: " &amp;amp; objItem.ThreadCount
        Wscript.Echo "Virtual Bytes: " &amp;amp; objItem.VirtualBytes
        Wscript.Echo "Virtual Bytes Peak: " &amp;amp; objItem.VirtualBytesPeak
        Wscript.Echo "Working Set: " &amp;amp; objItem.WorkingSet
        Wscript.Echo "Working Set Peak: " &amp;amp; objItem.WorkingSetPeak
        Wscript.Sleep 2000
    objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Job Object Performance" n="977">' Monitor Job Object Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PerfProc_JobObject").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Current Percent Kernel Mode Time: " &amp;amp; _
            objItem.CurrentPercentKernelModeTime
        Wscript.Echo "Current Percent Processor Time: " &amp;amp; _
            objItem.CurrentPercentProcessorTime
        Wscript.Echo "Current Percent User Mode Time: " &amp;amp; _\
            objItem.CurrentPercentUserModeTime
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Pages Per Second: " &amp;amp; objItem.PagesPerSec
        Wscript.Echo "Process Count Active: " &amp;amp; objItem.ProcessCountActive
        Wscript.Echo "Process Count Terminated: " &amp;amp; _
            objItem.ProcessCountTerminated
        Wscript.Echo "Process Count Total: " &amp;amp; objItem.ProcessCountTotal
        Wscript.Echo "This Period Milliseconds Kernel Mode: " &amp;amp; _
            objItem.ThisPeriodmSecKernelMode
        Wscript.Echo "This Period Milliseconds Processor: " &amp;amp; _
            objItem.ThisPeriodmSecProcessor
        Wscript.Echo "This Period Milliseconds User Mode: " &amp;amp; _
            objItem.ThisPeriodmSecUserMode
        Wscript.Echo "Total Milliseconds Kernel Mode: " &amp;amp; _
            objItem.TotalmSecKernelMode
        Wscript.Echo "Total Milliseconds Processor: " &amp;amp; _
            objItem.TotalmSecProcessor
        Wscript.Echo "Total Milliseconds User Mode: " &amp;amp; _
            objItem.TotalmSecUserMode
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Process Address Space Performance -- Costly" n="978">' Monitor Process Address Space Performance -- Costly


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService, _
    "Win32_PerfFormattedData_PerfProc_ProcessAddressSpace_Costly").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Bytes Free: " &amp;amp; objItem.BytesFree
        Wscript.Echo "Bytes Image Free: " &amp;amp; objItem.BytesImageFree
        Wscript.Echo "Bytes Image Reserved: " &amp;amp; objItem.BytesImageReserved
        Wscript.Echo "Bytes Reserved: " &amp;amp; objItem.BytesReserved
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "ID Process: " &amp;amp; objItem.IDProcess
        Wscript.Echo "Image Space Exec Read-Only: " &amp;amp; _
            objItem.ImageSpaceExecReadOnly
        Wscript.Echo "Image Space Exec Read Per Write: " &amp;amp; _
            objItem.ImageSpaceExecReadPerWrite
        Wscript.Echo "Image Space Executable: " &amp;amp; objItem.ImageSpaceExecutable
        Wscript.Echo "Image Space Exec Write Copy: " &amp;amp; _
            objItem.ImageSpaceExecWriteCopy
        Wscript.Echo "Image Space NoA ccess: " &amp;amp; objItem.ImageSpaceNoAccess
        Wscript.Echo "Image Space Read-Only: " &amp;amp; objItem.ImageSpaceReadOnly
        Wscript.Echo "Image Space Read Per Write: " &amp;amp; _
            objItem.ImageSpaceReadPerWrite
        Wscript.Echo "Image Space Write Copy: " &amp;amp; objItem.ImageSpaceWriteCopy
        Wscript.Echo "Mapped Space Exec Read-Only: " &amp;amp; _
            objItem.MappedSpaceExecReadOnly
        Wscript.Echo "Mapped Space Exec Read Per Write: " &amp;amp; _
            objItem.MappedSpaceExecReadPerWrite
        Wscript.Echo "Mapped Space Executable: " &amp;amp; _
            objItem.MappedSpaceExecutable
        Wscript.Echo "Mapped Space Exec Write Copy: " &amp;amp; _
            objItem.MappedSpaceExecWriteCopy
        Wscript.Echo "Mapped Space No Access: " &amp;amp; objItem.MappedSpaceNoAccess
        Wscript.Echo "Mapped Space Read Only: " &amp;amp; objItem.MappedSpaceReadOnly
        Wscript.Echo "Mapped Space Read Per Write: " &amp;amp; _
            objItem.MappedSpaceReadPerWrite
        Wscript.Echo "Mapped Space Write Copy: " &amp;amp; objItem.MappedSpaceWriteCopy
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Reserved Space Exec Read-Only: " &amp;amp; _
            objItem.ReservedSpaceExecReadOnly
        Wscript.Echo "Reserved Space Exec Read Per Write: " &amp;amp; _
            objItem.ReservedSpaceExecReadPerWrite
        Wscript.Echo "Reserved Space Executable: " &amp;amp; _
            objItem.ReservedSpaceExecutable
        Wscript.Echo "Reserved Space Exec Write Copy: " &amp;amp; _
            objItem.ReservedSpaceExecWriteCopy
        Wscript.Echo "Reserved Space No Access: " &amp;amp; _
            objItem.ReservedSpaceNoAccess
        Wscript.Echo "Reserved Space Read-Only: " &amp;amp; _
            objItem.ReservedSpaceReadOnly
        Wscript.Echo "Reserved Space Read Per Write: " &amp;amp; _
            objItem.ReservedSpaceReadPerWrite
        Wscript.Echo "Reserved Space Write Copy: " &amp;amp; _
            objItem.ReservedSpaceWriteCopy
        Wscript.Echo "Unassigned Space Exec Read-Only: " &amp;amp; _
            objItem.UnassignedSpaceExecReadOnly
        Wscript.Echo "Unassigned Space Exec Read Per Write: " &amp;amp; _
            objItem.UnassignedSpaceExecReadPerWrite
        Wscript.Echo "Unassigned Space Executable: " &amp;amp; _
            objItem.UnassignedSpaceExecutable
        Wscript.Echo "Unassigned Space Exec Write Copy: " &amp;amp; _
            objItem.UnassignedSpaceExecWriteCopy
        Wscript.Echo "Unassigned Space No Access: " &amp;amp; _
            objItem.UnassignedSpaceNoAccess
        Wscript.Echo "Unassigned Space Read-Only: " &amp;amp; _
            objItem.UnassignedSpaceReadOnly
        Wscript.Echo "Unassigned Space Read Per Write: " &amp;amp; _
            objItem.UnassignedSpaceReadPerWrite
        Wscript.Echo "Unassigned Space Write Copy: " &amp;amp; _
        objItem.UnassignedSpaceWriteCopy
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Process Creation" n="979">' Monitor Process Creation


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colMonitoredProcesses = objWMIService. _        
    ExecNotificationQuery("select * from __instancecreationevent " _ 
        &amp;amp; " within 1 where TargetInstance isa 'Win32_Process'")
i = 0

Do While i = 0
    Set objLatestProcess = colMonitoredProcesses.NextEvent
    Wscript.Echo objLatestProcess.TargetInstance.Name
Loop
</vb><vb name="Monitor Process Deletion" n="980">' Monitor Process Deletion


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colMonitoredProcesses = objWMIService. _
    ExecNotificationQuery("select * from __instancedeletionevent " _ 
            &amp;amp; "within 1 where TargetInstance isa 'Win32_Process'")
i = 0

Do While i = 0
    Set objLatestProcess = colMonitoredProcesses.NextEvent
    Wscript.Echo objLatestProcess.TargetInstance.Name
Loop
</vb><vb name="Monitor Process Full Image Performance -- Costly" n="981">' Monitor Process Full Image Performance -- Costly


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService, _
    "Win32_PerfFormattedData_PerfProc_FullImage_Costly").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Exec Read-Only: " &amp;amp; objItem.ExecReadOnly
        Wscript.Echo "Exec Read Per Write: " &amp;amp; objItem.ExecReadPerWrite
        Wscript.Echo "Executable: " &amp;amp; objItem.Executable
        Wscript.Echo "Exec Write Copy: " &amp;amp; objItem.ExecWriteCopy
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "No Access: " &amp;amp; objItem.NoAccess
        Wscript.Echo "Read-Only: " &amp;amp; objItem.ReadOnly
        Wscript.Echo "Read Per Write: " &amp;amp; objItem.ReadPerWrite
        Wscript.Echo "Write Copy: " &amp;amp; objItem.WriteCopy
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Process Image Performance -- Costly" n="982">' Monitor Process Image Performance -- Costly


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PerfProc_Image_Costly").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Exec Read-Only: " &amp;amp; objItem.ExecReadOnly
        Wscript.Echo "Exec Read Per Write: " &amp;amp; objItem.ExecReadPerWrite
        Wscript.Echo "Executable: " &amp;amp; objItem.Executable
        Wscript.Echo "Exec Write Copy: " &amp;amp; objItem.ExecWriteCopy
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "No Access: " &amp;amp; objItem.NoAccess
        Wscript.Echo "Read-Only: " &amp;amp; objItem.ReadOnly
        Wscript.Echo "Read Per Write: " &amp;amp; objItem.ReadPerWrite
        Wscript.Echo "Write Copy: " &amp;amp; objItem.WriteCopy
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Process Performance" n="983">' Monitor Process Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PerfProc_Process").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Creating Process ID: " &amp;amp; objItem.CreatingProcessID
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Elapsed Time: " &amp;amp; objItem.ElapsedTime
        Wscript.Echo "Handle Count: " &amp;amp; objItem.HandleCount
        Wscript.Echo "ID Process: " &amp;amp; objItem.IDProcess
        Wscript.Echo "I/O Data Bytes Per Second: " &amp;amp; _
            objItem.IODataBytesPersec
        Wscript.Echo "I/O Data Operations Per Second: " &amp;amp; _
            objItem.IODataOperationsPersec
        Wscript.Echo "I/O Other Bytes Per Second: " &amp;amp; _
            objItem.IOOtherBytesPersec
        Wscript.Echo "I/O Other Operations Per Second: " &amp;amp; _
            objItem.IOOtherOperationsPersec
        Wscript.Echo "I/O Read Bytes Per Second: " &amp;amp; _
            objItem.IOReadBytesPersec
        Wscript.Echo "I/O Read Operations Per Second: " &amp;amp; _
            objItem.IOReadOperationsPersec
        Wscript.Echo "I/O Write Bytes Per Second: " &amp;amp; _
            objItem.IOWriteBytesPersec
        Wscript.Echo "I/O Write Operations Per Second: " &amp;amp; _
            objItem.IOWriteOperationsPersec
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Page Faults Per Second: " &amp;amp; objItem.PageFaultsPersec
        Wscript.Echo "Page File Bytes: " &amp;amp; objItem.PageFileBytes
        Wscript.Echo "Page File Bytes Peak: " &amp;amp; objItem.PageFileBytesPeak
        Wscript.Echo "Percent Privileged Time: " &amp;amp; _
            objItem.PercentPrivilegedTime
        Wscript.Echo "Percent Processor Time: " &amp;amp; _
            objItem.PercentProcessorTime
        Wscript.Echo "Percent User Time: " &amp;amp; objItem.PercentUserTime
        Wscript.Echo "Pool Nonpaged Bytes: " &amp;amp; objItem.PoolNonpagedBytes
        Wscript.Echo "Pool Paged Bytes: " &amp;amp; objItem.PoolPagedBytes
        Wscript.Echo "Priority Base: " &amp;amp; objItem.PriorityBase
        Wscript.Echo "Private Bytes: " &amp;amp; objItem.PrivateBytes
        Wscript.Echo "Thread Count: " &amp;amp; objItem.ThreadCount
        Wscript.Echo "Virtual Bytes: " &amp;amp; objItem.VirtualBytes
        Wscript.Echo "Virtual Bytes Peak: " &amp;amp; objItem.VirtualBytesPeak
        Wscript.Echo "Working Set: " &amp;amp; objItem.WorkingSet
        Wscript.Echo "Working Set Peak: " &amp;amp; objItem.WorkingSetPeak
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Process Performance" n="984">' Monitor Process Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colProcessList = objWMIService.ExecQuery("Select * from Win32_Process")

For Each objProcess in colProcessList
    Wscript.Echo "Process: " &amp;amp; objProcess.Name 
    Wscript.Echo "Process ID: " &amp;amp; objProcess.ProcessID 
    Wscript.Echo "Thread Count: " &amp;amp; objProcess.ThreadCount 
    Wscript.Echo "Page File Size: " &amp;amp; objProcess.PageFileUsage 
    Wscript.Echo "Page Faults: " &amp;amp; objProcess.PageFaults 
    Wscript.Echo "Working Set Size: " &amp;amp; objProcess.WorkingSetSize 
Next
</vb><vb name="Monitor Processor Use by Process" n="985">' Monitor Processor Use by Process


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colProcesses = objWMIService.ExecQuery("Select * from Win32_Process")

For Each objProcess in colProcesses
    sngProcessTime = (CSng(objProcess.KernelModeTime) + _
            CSng(objProcess.UserModeTime)) / 10000000
    Wscript.Echo objProcess.name &amp;amp; VbTab &amp;amp; sngProcessTime
Next
</vb><vb name="Monitor Thread Details Performance -- Costly" n="986">' Monitor Thread Details Performance -- Costly


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService, _
    "Win32_PerfFormattedData_PerfProc_ThreadDetails_Costly").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "User PC: " &amp;amp; objItem.UserPC
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Thread Performance" n="987">' Monitor Thread Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_PerfProc_Thread").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Context Switches Per Second: " &amp;amp; _
            objItem.ContextSwitchesPersec
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Elapsed Time: " &amp;amp; objItem.ElapsedTime
        Wscript.Echo "ID Process: " &amp;amp; objItem.IDProcess
        Wscript.Echo "ID Thread: " &amp;amp; objItem.IDThread
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Percent Privileged Time: " &amp;amp; _
            objItem.PercentPrivilegedTime
        Wscript.Echo "Percent Processor Time: " &amp;amp; objItem.PercentProcessorTime
        Wscript.Echo "Percent User Time: " &amp;amp; objItem.PercentUserTime
        Wscript.Echo "Priority Base: " &amp;amp; objItem.PriorityBase
        Wscript.Echo "Priority Current: " &amp;amp; objItem.PriorityCurrent
        Wscript.Echo "Start Address: " &amp;amp; objItem.StartAddress
        Wscript.Echo "Thread State: " &amp;amp; objItem.ThreadState
        Wscript.Echo "Thread Wait Reason: " &amp;amp; objItem.ThreadWaitReason
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Verify Process Availability" n="988">' Verify Process Availability


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colProcesses = objWMIService.ExecQuery _
    ("Select * from Win32_Process Where Name = 'Database.exe'")

If colProcesses.Count = 0 Then
    Wscript.Echo "Database.exe is not running."
Else
    Wscript.Echo "Database.exe is running."
End If
</vb></dd>
			<dd name="Processes and Threads" code="procthd" desc="Sample scripts for managing processes and threads, including scripts for creating new processes and terminating existing processes."><vb name="Create a Higher Priority Process" n="989">' Create a Higher Priority Process


Const ABOVE_NORMAL = 32768

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set objStartup = objWMIService.Get("Win32_ProcessStartup")

Set objConfig = objStartup.SpawnInstance_
objConfig.PriorityClass = ABOVE_NORMAL
Set objProcess = GetObject("winmgmts:root\cimv2:Win32_Process")
objProcess.Create "Notepad.exe", Null, objConfig, intProcessID
</vb><vb name="Create a Process in a Hidden Window" n="990">' Create a Process in a Hidden Window


Const HIDDEN_WINDOW = 12

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set objStartup = objWMIService.Get("Win32_ProcessStartup")

Set objConfig = objStartup.SpawnInstance_
objConfig.ShowWindow = HIDDEN_WINDOW
Set objProcess = GetObject("winmgmts:root\cimv2:Win32_Process")
errReturn = objProcess.Create("Notepad.exe", null, objConfig, intProcessID)
</vb><vb name="Create a Process on a Remote Computer" n="991">' Create a Process on a Remote Computer


strComputer = "webserver"
Set objWMIService = GetObject _
    ("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2:Win32_Process")
 
Error = objWMIService.Create("notepad.exe", null, null, intProcessID)

If Error = 0 Then
    Wscript.Echo "Notepad was started with a process ID of " _
         &amp;amp; intProcessID &amp;amp; "."
Else
    Wscript.Echo "Notepad could not be started due to error " &amp;amp; _
        Error &amp;amp; "."
End If
</vb><vb name="List Process Owners" n="992">' List Process Owners


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colProcessList = objWMIService.ExecQuery("Select * from Win32_Process")

For Each objProcess in colProcessList
    colProperties = objProcess.GetOwner(strNameOfUser,strUserDomain)
    Wscript.Echo "Process " &amp;amp; objProcess.Name &amp;amp; " is owned by " _ 
        &amp;amp; strUserDomain &amp;amp; "\" &amp;amp; strNameOfUser &amp;amp; "."
Next
</vb><vb name="List the Scripts Running on a Computer" n="993">' List the Scripts Running on a Computer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colProcesses = objWMIService.ExecQuery _
    ("SELECT * FROM Win32_Process WHERE Name = " &amp;amp; _
        "'Wscript.exe' OR Name = 'Cscript.exe'")
 
If colProcesses.Count = 0 Then
    Wscript.Echo "No scripts are running."
Else
    For Each objProcess in colProcesses
        Wscript.Echo objProcess.CommandLine
    Next
End If
</vb><vb name="Modify the Priority Of a Running Process" n="994">' Modify the Priority Of a Running Process


Const ABOVE_NORMAL = 32768

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colProcesses = objWMIService.ExecQuery _
    ("Select * from Win32_Process Where Name = 'Notepad.exe'")

For Each objProcess in colProcesses
    objProcess.SetPriority(ABOVE_NORMAL) 
Next
</vb><vb name="Monitor Threads" n="995">' Monitor Threads


Set objDictionary = CreateObject("Scripting.Dictionary")

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colProcesses = objWMIService.ExecQuery("Select * from Win32_Process")

For each objProcess in colProcesses 
    objDictionary.Add objProcess.ProcessID, objProcess.Name 
Next

Set colThreads = objWMIService.ExecQuery _
    ("Select * from Win32_Thread")
For each objThread in colThreads
    intProcessID = CInt(objThread.ProcessHandle)
    strProcessName = objDictionary.Item(intProcessID) 
    Wscript.Echo strProcessName &amp;amp; VbTab &amp;amp; objThread.ProcessHandle &amp;amp; _
        VbTab &amp;amp; objThread.Handle &amp;amp; VbTab &amp;amp; objThread.ThreadState 
Next
</vb><vb name="Prevent a Process from Running" n="996">' Prevent a Process from Running


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colMonitoredProcesses = objWMIService. _        
    ExecNotificationQuery("select * from __instancecreationevent " _ 
        &amp;amp; " within 1 where TargetInstance isa 'Win32_Process'")
i = 0

Do While i = 0
    Set objLatestProcess = colMonitoredProcesses.NextEvent
    If objLatestProcess.TargetInstance.Name = "notepad.exe" Then
        objLatestProcess.TargetInstance.Terminate
    End If
Loop
</vb><vb name="Terminate a Process" n="997">' Terminate a Process


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colProcessList = objWMIService.ExecQuery _
    ("Select * from Win32_Process Where Name = 'Notepad.exe'")

For Each objProcess in colProcessList
    objProcess.Terminate()
Next
</vb></dd>
		</dd>
		<dd name="Registry" code="registry" desc="Sample scripts from retrieving information from and writing information to the Windows registry."><vb name="Create a MultiString Value" n="998">' Create a MultiString Value


Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

strComputer = "."
 
Set oReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\default:StdRegProv")
 
strKeyPath = "SOFTWARE\System Admin Scripting Guide"
strValueName = "Multi String Value Name"
arrStringValues = Array("first string", "second string", _
    "third string", "fourth string")
 
oReg.SetMultiStringValue HKEY_LOCAL_MACHINE,strKeyPath, _
    strValueName,arrStringValues
</vb><vb name="Create a Registry Key" n="999">' Create a Registry Key


Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

strComputer = "."
 
Set oReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\default:StdRegProv")
 
strKeyPath = "SOFTWARE\System Admin Scripting Guide"
oReg.CreateKey HKEY_LOCAL_MACHINE,strKeyPath
</vb><vb name="Create Expanded String Values" n="1000">' Create Expanded String Values


Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

strComputer = "."
 
Set oReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\default:StdRegProv")
 
strKeyPath = "SOFTWARE\System Admin Scripting Guide"
strValueName = "Expanded String Value Name"
strValue = "%PATHEXT%"
 
oReg.SetExpandedStringValue _
    HKEY_LOCAL_MACHINE,strKeyPath,strValueName,strValue
</vb><vb name="Create String and DWORD Values" n="1001">' Create String and DWORD Values


Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

strComputer = "."
 
Set oReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\default:StdRegProv")
 
strKeyPath = "SOFTWARE\System Admin Scripting Guide"
strValueName = "String Value Name"
strValue = "string value"
oReg.SetStringValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName,strValue
 
strValueName = "DWORD Value Name"
dwValue = 82
oReg.SetDWORDValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName,dwValue
</vb><vb name="Delete a Registry Key" n="1002">' Delete a Registry Key


Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

strComputer = "."
 
Set oReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\default:StdRegProv")
 
strKeyPath = "SOFTWARE\System Admin Scripting Guide"
 
oReg.DeleteKey HKEY_LOCAL_MACHINE, strKeyPath
</vb><vb name="Delete Registry Values" n="1003">' Delete Registry Values


Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

strComputer = "."
 
Set oReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\default:StdRegProv")
 
strKeyPath = "SOFTWARE\System Admin Scripting Guide"
strDWORDValueName = "DWORD Value Name"
strExpandedStringValueName = "Expanded String Value Name"
strMultiStringValueName = "Multi String Value Name"
strStringValueName = "String Value Name"
 
oReg.DeleteValue HKEY_LOCAL_MACHINE,strKeyPath,strDWORDValueName
oReg.DeleteValue HKEY_LOCAL_MACHINE,strKeyPath,strExpandedStringValueName
oReg.DeleteValue HKEY_LOCAL_MACHINE,strKeyPath,strMultiStringValueName
oReg.DeleteValue HKEY_LOCAL_MACHINE,strKeyPath,strStringValueName
</vb><vb name="List Registry Files" n="1004">' List Registry Files


Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

strComputer = "."
 
Set oReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\default:StdRegProv")
strKeyPath = "System\CurrentControlSet\Control\hivelist"
oReg.EnumValues HKEY_LOCAL_MACHINE, strKeyPath,_
    arrValueNames, arrValueTypes
 
For i=0 To UBound(arrValueNames)
    StdOut.WriteLine "File Name: " &amp;amp; arrValueNames(i) &amp;amp; " -- "      
    oReg.GetStringValue HKEY_LOCAL_MACHINE,strKeyPath, _
        arrValueNames(i),strValue
    Wscript.Echo "Location: " &amp;amp; strValue
    Wscript.Echo
Next
</vb><vb name="List Registry Key Access Rights" n="1005">' List Registry Key Access Rights


Const KEY_QUERY_VALUE = &amp;amp;H0001
Const KEY_SET_VALUE = &amp;amp;H0002
Const KEY_CREATE_SUB_KEY = &amp;amp;H0004
Const DELETE = &amp;amp;H00010000
 
Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002
 
strComputer = "."

Set oReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\default:StdRegProv")
 
strKeyPath = "SYSTEM\CurrentControlSet"
 
oReg.CheckAccess HKEY_LOCAL_MACHINE, strKeyPath, KEY_QUERY_VALUE, _
    bHasAccessRight
If bHasAccessRight = True Then
    Wscript.Echo "Have Query Value Access Rights on Key"
Else
    Wscript.Echo "Do Not Have Query Value Access Rights on Key"
End If   
 
oReg.CheckAccess HKEY_LOCAL_MACHINE, strKeyPath, KEY_SET_VALUE, _
    bHasAccessRight
If bHasAccessRight = True Then
    Wscript.Echo "Have Set Value Access Rights on Key"
Else
    Wscript.Echo "Do Not Have Set Value Access Rights on Key"
End If   
 
oReg.CheckAccess HKEY_LOCAL_MACHINE, strKeyPath, KEY_CREATE_SUB_KEY, _
    bHasAccessRight
If bHasAccessRight = True Then
    Wscript.Echo "Have Create SubKey Access Rights on Key"
Else
    StdOut.WriteLine "Do Not Have Create SubKey Access Rights on Key"
End If
 
oReg.CheckAccess HKEY_LOCAL_MACHINE, strKeyPath, DELETE, bHasAccessRight
If bHasAccessRight = True Then
    StdOut.WriteLine "Have Delete Access Rights on Key"
Else
    StdOut.WriteLine "Do Not Have Delete Access Rights on Key"
End If
</vb><vb name="List Registry Properties" n="1006">' List Registry Properties


On Error Resume Next

strComputer = "."
Set objWMIService=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_Registry")

For Each objItem in colItems
    Wscript.Echo "Current Size: " &amp;amp; objItem.CurrentSize
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Install Date: " &amp;amp; objItem.InstallDate
    Wscript.Echo "Maximum Size: " &amp;amp; objItem.MaximumSize
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Proposed Size: " &amp;amp; objItem.ProposedSize
Next
</vb><vb name="List Registry Subkeys" n="1007">' List Registry Subkeys


Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

strComputer = "."
 
Set oReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\default:StdRegProv")
 
strKeyPath = "SYSTEM\CurrentControlSet\Services"
oReg.EnumKey HKEY_LOCAL_MACHINE, strKeyPath, arrSubKeys
 
For Each subkey In arrSubKeys
    Wscript.Echo subkey
Next
</vb><vb name="List Registry Values and Types" n="1008">' List Registry Values and Types


Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002
Const REG_SZ = 1
Const REG_EXPAND_SZ = 2
Const REG_BINARY = 3
Const REG_DWORD = 4
Const REG_MULTI_SZ = 7
 
strComputer = "."
 
Set oReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\default:StdRegProv")
 
strKeyPath = "SYSTEM\CurrentControlSet\Control\Lsa"
 
oReg.EnumValues HKEY_LOCAL_MACHINE, strKeyPath, _
    arrValueNames, arrValueTypes
 
For i=0 To UBound(arrValueNames)
    Wscript.Echo "Value Name: " &amp;amp; arrValueNames(i) 
    
    Select Case arrValueTypes(i)
        Case REG_SZ
            Wscript.Echo "Data Type: String"
            Wscript.Echo
        Case REG_EXPAND_SZ
            Wscript.Echo "Data Type: Expanded String"
            Wscript.Echo
        Case REG_BINARY
            Wscript.Echo "Data Type: Binary"
            Wscript.Echo
        Case REG_DWORD
            Wscript.Echo "Data Type: DWORD"
            Wscript.Echo
        Case REG_MULTI_SZ
            Wscript.Echo "Data Type: Multi String"
            Wscript.Echo
    End Select 
Next
</vb><vb name="Monitor Registry Entry Level Events" n="1009">' Monitor Registry Entry Level Events


Set wmiServices = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set wmiSink = WScript.CreateObject("WbemScripting.SWbemSink", "SINK_") 
 
wmiServices.ExecNotificationQueryAsync wmiSink, _ 
    "SELECT * FROM RegistryValueChangeEvent WHERE " &amp;amp; _
        "Hive='HKEY_LOCAL_MACHINE' AND " &amp;amp; _ 
            "KeyPath='SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion'" _
                &amp;amp; " AND ValueName='CSDVersion'" 
 
WScript.Echo "Listening for Registry Change Events..." &amp;amp; vbCrLf 
 
While(1) 
    WScript.Sleep 1000 
Wend 
 
Sub SINK_OnObjectReady(wmiObject, wmiAsyncContext) 
    WScript.Echo "Received Registry Change Event" &amp;amp; vbCrLf &amp;amp; _ 
        wmiObject.GetObjectText_() 
End Sub
</vb><vb name="Monitor Registry Subkey Events" n="1010">' Monitor Registry Subkey Events


Set wmiServices = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\default")

Set wmiSink = WScript.CreateObject("WbemScripting.SWbemSink", "SINK_") 
 
wmiServices.ExecNotificationQueryAsync wmiSink, _ 
    "SELECT * FROM RegistryKeyChangeEvent WHERE Hive='HKEY_LOCAL_MACHINE' " &amp;amp; _
        "AND KeyPath='SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion'" 
 
WScript.Echo "Listening for Registry Change Events..." &amp;amp; vbCrLf 
 
While(1) 
    WScript.Sleep 1000 
Wend 
 
Sub SINK_OnObjectReady(wmiObject, wmiAsyncContext) 
    WScript.Echo "Received Registry Change Event" &amp;amp; vbCrLf &amp;amp; _ 
        wmiObject.GetObjectText_() 
End Sub
</vb><vb name="Monitor Registry Subtree Events" n="1011">' Monitor Registry Subtree Events


Set wmiServices = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\default")
 
Set wmiSink = WScript.CreateObject("WbemScripting.SWbemSink", "SINK_") 
 
wmiServices.ExecNotificationQueryAsync wmiSink, _ 
    "SELECT * FROM RegistryTreeChangeEvent WHERE Hive= " _
        &amp;amp; "'HKEY_LOCAL_MACHINE' AND RootPath=''" 
 
 
WScript.Echo "Listening for Registry Change Events..." &amp;amp; vbCrLf 
 
While(1) 
    WScript.Sleep 1000 
Wend 
 
Sub SINK_OnObjectReady(wmiObject, wmiAsyncContext) 
    WScript.Echo "Received Registry Change Event" &amp;amp; vbCrLf &amp;amp; _ 
        wmiObject.GetObjectText_() 
End Sub
</vb><vb name="Read a Binary Registry Value" n="1012">' Read a Binary Registry Value


Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

strComputer = "."
Set StdOut = WScript.StdOut
 
Set oReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\default:StdRegProv")
 
strKeyPath = "SOFTWARE\Microsoft\Windows NT\CurrentVersion"
strValueName = "LicenseInfo"
oReg.GetBinaryValue HKEY_LOCAL_MACHINE,strKeyPath, _
    strValueName,strValue
 
 
For i = lBound(strValue) to uBound(strValue)
    StdOut.WriteLine  strValue(i)
Next
</vb><vb name="Read a MultiString Value" n="1013">' Read a MultiString Value


Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

strComputer = "."

Set oReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\default:StdRegProv")
 
strKeyPath = "SYSTEM\CurrentControlSet\Services\Eventlog\System"
strValueName = "Sources"
oReg.GetMultiStringValue HKEY_LOCAL_MACHINE,strKeyPath, _
    strValueName,arrValues
 
For Each strValue In arrValues
    Wscript.Echo  strValue
Next
</vb><vb name="Read an Expanded String Registry Value" n="1014">' Read an Expanded String Registry Value


Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

strComputer = "."
 
Set oReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\default:StdRegProv")
 
strKeyPath = "SOFTWARE\Microsoft\Windows NT\CurrentVersion\WinLogon"
strValueName = "UIHost"
oReg.GetExpandedStringValue HKEY_LOCAL_MACHINE,strKeyPath, _
    strValueName,strValue
 
Wscript.Echo  "The Windows logon UI host is: " &amp;amp; strValue
</vb><vb name="Read String and DWORD Registry Values" n="1015">' Read String and DWORD Registry Values


Const HKEY_CURRENT_USER = &amp;amp;H80000001
Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

strComputer = "."
 
Set oReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _
    strComputer &amp;amp; "\root\default:StdRegProv")
 
strKeyPath = "Console"
strValueName = "HistoryBufferSize"
oReg.GetDWORDValue HKEY_CURRENT_USER,strKeyPath,strValueName,dwValue
Wscript.Echo "Current History Buffer Size: " &amp;amp; dwValue 
 
 
strKeyPath = "SOFTWARE\Microsoft\Windows Script Host\Settings"
strValueName = "TrustPolicy"
oReg.GetStringValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName,strValue
Wscript.Echo "Current WSH Trust Policy Value: " &amp;amp; strValue
</vb></dd>
		<dd name="Services" code="services" desc="Sample scripts for managing Windows services and for listing and/or modifying the properties of those services."><vb name="Delete a Service" n="1016">' Delete a Service


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colListOfServices = objWMIService.ExecQuery _
    ("Select * from Win32_Service Where Name = 'DbService'")

For Each objService in colListOfServices
    objService.StopService()
    objService.Delete()
Next
</vb><vb name="Install a Service" n="1017">' Install a Service


Const OWN_PROCESS = 16
Const NOT_INTERACTIVE = False
Const NORMAL_ERROR_CONTROL = 2

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set objService = objWMIService.Get("Win32_BaseService")

errReturn = objService.Create("DbService" ,"Personnel Database" , _
    "c:\windows\system32\db.exe", OWN_PROCESS, NORMAL_ERROR_CONTROL,_
        "Manual", NOT_INTERACTIVE, "NT AUTHORITY\LocalService", ""  )
</vb><vb name="List Antecedent Services for a Single Service" n="1018">' List Antecedent Services for a Single Service


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServiceList = objWMIService.ExecQuery("Associators of " _ 
     &amp;amp; "{Win32_service.Name='SMTPSVC'} Where " _
         &amp;amp; "AssocClass=Win32_DependentService " &amp;amp; "Role=Dependent")   
     
For Each objService in colServiceList
    Wscript.Echo objService.DisplayName 
Next
</vb><vb name="List Dependent Services for a Single Service" n="1019">' List Dependent Services for a Single Service


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServiceList = objWMIService.ExecQuery("Associators of " _
    &amp;amp; "{Win32_Service.Name='rasman'} Where " _
        &amp;amp; "AssocClass=Win32_DependentService " &amp;amp; "Role=Antecedent" )

For Each objService in colServiceList
    Wscript.Echo objService.DisplayName 
Next
</vb><vb name="List Dependent Services for All Services" n="1020">' List Dependent Services for All Services


Const ForAppending = 8
Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objLogFile = _
     objFSO.OpenTextFile("c:\scripts\service_dependencies.csv", _
         ForAppending, True)
objLogFile.Write("Service Dependencies") 
objLogFile.Writeline

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colListOfServices = objWMIService.ExecQuery _
    ("Select * from Win32_Service")
 
For Each objService in colListofServices
    objServiceRegistryName = objService.Name
    objServiceDisplayName = objService.DisplayName
 
Set colServiceList = objWMIService.ExecQuery("Associators of " _
   &amp;amp; "{Win32_Service.Name='" &amp;amp; objServiceRegistryName &amp;amp; "'} Where AssocClass=Win32_DependentService Role=Antecedent" )
 
 
 If colServiceList.Count = 0 then
        objLogFile.Write(objServiceDisplayName) &amp;amp; ", None"
        objLogFile.Writeline
    Else
        For Each objDependentService in colServiceList         
            objLogFile.Write(objServiceDisplayName) &amp;amp; ","
            objLogFile.Write(objDependentService.DisplayName)  
        Next 
        objLogFile.WriteLine
    End If
Next
objLogFile.Close
</vb><vb name="List Inactive Services" n="1021">' List Inactive Services


strComputer = "."
Set objWMIService = GetObject("winmgmts:" &amp;amp; _
    "{impersonationLevel=Impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colStoppedServices = objWMIService.ExecQuery _
    ("Select * From Win32_Service Where State &amp;lt;&amp;gt; 'Running'")
 
For Each objService in colStoppedServices
    Wscript.Echo objService.DisplayName  &amp;amp; " = " &amp;amp; objService.State
Next
</vb><vb name="List Service Load Order Groups" n="1022">' List Service Load Order Groups


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_LoadOrderGroup")

For Each objItem in colItems
    Wscript.Echo "Driver Enabled: " &amp;amp; objItem.DriverEnabled
    Wscript.Echo "Group Order: " &amp;amp; objItem.GroupOrder
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo
Next
</vb><vb name="List Service Properties" n="1023">' List Service Properties


Const ForAppending = 8
Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objLogFile = objFSO.OpenTextFile("c:\scripts\service_list.csv", _ 
    ForAppending, True)

objLogFile.Write _
    ("System Name,Service Name,Service Type,Service State, Exit " _ 
        &amp;amp; "Code,Process ID,Can Be Paused,Can Be Stopped,Caption," _ 
        &amp;amp; "Description,Can Interact with Desktop,Display Name,Error " _
        &amp;amp; "Control, Executable Path Name,Service Started," _ 
        &amp;amp; "Start Mode,Account Name ") 
objLogFile.Writeline

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colListOfServices = objWMIService.ExecQuery _
        ("Select * from Win32_Service")

For Each objService in colListOfServices
    objLogFile.Write(objService.SystemName) &amp;amp; "," 
    objLogFile.Write(objService.Name) &amp;amp; "," 
    objLogFile.Write(objService.ServiceType) &amp;amp; "," 
    objLogFile.Write(objService.State) &amp;amp; "," 
    objLogFile.Write(objService.ExitCode) &amp;amp; "," 
    objLogFile.Write(objService.ProcessID) &amp;amp; "," 
    objLogFile.Write(objService.AcceptPause) &amp;amp; "," 
    objLogFile.Write(objService.AcceptStop) &amp;amp; "," 
    objLogFile.Write(objService.Caption) &amp;amp; "," 
    objLogFile.Write(objService.Description) &amp;amp; "," 
    objLogFile.Write(objService.DesktopInteract) &amp;amp; "," 
    objLogFile.Write(objService.DisplayName) &amp;amp; "," 
    objLogFile.Write(objService.ErrorControl) &amp;amp; "," 
    objLogFile.Write(objService.PathName) &amp;amp; "," 
    objLogFile.Write(objService.Started) &amp;amp; "," 
    objLogFile.Write(objService.StartMode) &amp;amp; "," 
    objLogFile.Write(objService.StartName) &amp;amp; "," 
    objLogFile.writeline
Next
objLogFile.Close
</vb><vb name="List Service Status" n="1024">' List Service Status


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colRunningServices = objWMIService.ExecQuery("Select * from Win32_Service")

For Each objService in colRunningServices 
    Wscript.Echo objService.DisplayName  &amp;amp; VbTab &amp;amp; objService.State
Next
</vb><vb name="List Service Status Changes as recorded in the System Event Log" n="1025">' List Service Status Changes as recorded in the System Event Log


Set dtmConvertedDate = CreateObject("WbemScripting.SWbemDateTime")

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServiceEvents = objWMIService.ExecQuery _
    ("Select * from Win32_NTLogEvent Where Logfile = 'System' and " _
        &amp;amp; "EventCode = '7036'")

For Each strEvent in colServiceEvents
    dtmConvertedDate.Value = strEvent.TimeWritten
    Wscript.Echo dtmConvertedDate.GetVarDate    
    Wscript.Echo strEvent.Message
Next
</vb><vb name="List Services Running in a Process" n="1026">' List Services Running in a Process


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colListOfServices = objWMIService.ExecQuery _
    ("Select * from Win32_Service Where " &amp;amp; _
        "PathName = 'C:\\WINDOWS\\system32\\services.exe'")

For Each objService in colListOfServices
    Wscript.Echo objService.DisplayName
Next
</vb><vb name="List Services Running in All Processes" n="1027">' List Services Running in All Processes


Set objIdDictionary = CreateObject("Scripting.Dictionary")

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colServices = objWMIService.ExecQuery _
    ("Select * from Win32_Service Where State &amp;lt;&amp;gt; 'Stopped'")

For Each objService in colServices
    If objIdDictionary.Exists(objService.ProcessID) Then
    Else
        objIdDictionary.Add objService.ProcessID, objService.ProcessID
    End If
Next

colProcessIDs = objIdDictionary.Items

For i = 0 to objIdDictionary.Count - 1
    Set colServices = objWMIService.ExecQuery _
        ("Select * from Win32_Service Where ProcessID = '" &amp;amp; _
            colProcessIDs(i) &amp;amp; "'")
    Wscript.Echo "Process ID: " &amp;amp; colProcessIDs(i)
    For Each objService in colServices
        Wscript.Echo VbTab &amp;amp; objService.DisplayName 
    Next
Next
</vb><vb name="List Services that Can be Paused" n="1028">' List Services that Can be Paused


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServices = objWMIService.ExecQuery _
    ("Select * from Win32_Service Where AcceptPause = True")

For Each objService in colServices
    Wscript.Echo objService.DisplayName 
Next
</vb><vb name="List Services that Can be Stopped" n="1029">' List Services that Can be Stopped


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServices = objWMIService.ExecQuery _
    ("Select * from Win32_Service Where AcceptStop = True")

For Each objService in colServices
    Wscript.Echo objService.DisplayName 
Next
</vb><vb name="Modify a Service Account Password" n="1030">' Modify a Service Account Password



strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServiceList = objWMIService.ExecQuery _
    ("Select * from Win32_Service Where StartName = '.\\netsvc'")

For Each objService in colServiceList
    errReturn = objService.Change( , , , , , , , "password")  
Next
</vb><vb name="Modify Service Accounts" n="1031">' Modify Service Accounts


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServices = objWMIService.ExecQuery _
    ("SELECT * FROM Win32_Service WHERE StartName = '.\netsvc'")

For Each objService In colServices
    errServiceChange = objService.Change _
        ( , , , , , , "NT AUTHORITY\LocalService" , "")  
Next
</vb><vb name="Modify Service Error Control Codes" n="1032">' Modify Service Error Control Codes


Const NORMAL_ERROR_CONTROL = 2

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServiceList = objWMIService.ExecQuery _
    ("Select * from Win32_Service where ErrorControl = 'Ignore'")

For Each objService in colServiceList
    errReturn = objService.Change( , , , NORMAL_ERROR_CONTROL)   
Next
</vb><vb name="Modify Service Start Options" n="1033">' Modify Service Start Options


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServiceList = objWMIService.ExecQuery _
    ("Select * from Win32_Service where StartMode = 'Manual'")

For Each objService in colServiceList
    errReturnCode = objService.Change( , , , , "Disabled")   
Next
</vb><vb name="Monitor Changes in Service Status" n="1034">' Monitor Changes in Service Status


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServices = objWMIService. _ 
    ExecNotificationQuery("Select * from __instancemodificationevent " _ 
        &amp;amp; "within 30 where TargetInstance isa 'Win32_Service'")
i = 0

Do While i = 0
    Set objService = colServices.NextEvent
    If objService.TargetInstance.State &amp;lt;&amp;gt; _ 
        objService.PreviousInstance.State Then
        Wscript.Echo objService.TargetInstance.Name _ 
            &amp;amp;  " is " &amp;amp; objService.TargetInstance.State _
                &amp;amp; ". The service previously was " &amp;amp; _
                    objService.PreviousInstance.State &amp;amp; "."
    End If
Loop
</vb><vb name="Monitor Service Performance" n="1035">' Monitor Service Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colDHCPServer = objRefresher.AddEnum(objWMIService, _
    "Win32_PerfFormattedData_DHCPServer_DHCPServer").ObjectSet
objRefresher.Refresh

For i = 1 to 60
    For Each objDHCPServer in colDHCPServer
        Wscript.Echo "Acknowledgements per second: " &amp;amp; _
            objDHCPServer.AcksPerSec
        Wscript.Echo "Declines per second: " &amp;amp; _
            objDHCPServer.DeclinesPerSec
        Wscript.Echo "Discovers per second: " &amp;amp; _
            objDHCPServer.DiscoversPerSec
        Wscript.Echo "Informs per second: " &amp;amp; objDHCPServer.InformsPerSec
        Wscript.Echo "Offers per second: " &amp;amp; objDHCPServer.OffersPerSec
        Wscript.Echo "Releases per second: " &amp;amp; _
            objDHCPServer.ReleasesPerSec
        Wscript.Echo "Requests per second: " &amp;amp; _
            objDHCPServer.RequestsPerSec
    Next
    Wscript.Sleep 10000
    objRefresher.Refresh
Next
</vb><vb name="Pause Services Running Under a Specific Account" n="1036">' Pause Services Running Under a Specific Account


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServices = objWMIService.ExecQuery _
    ("Select * from Win32_Service Where StartName = '.\netsvc'")

For each objService in colServices 
    errReturnCode = objService.PauseService()
Next
</vb><vb name="Resume AutoStart Services that are Paused" n="1037">' Resume AutoStart Services that are Paused


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colListOfServices = objWMIService.ExecQuery _
 ("Select * from Win32_Service Where State = 'Paused' and StartMode = 'Auto'")

For Each objService in colListOfServices
    objService.ResumeService()
Next
</vb><vb name="Start a Service and Its Dependents" n="1038">' Start a Service and Its Dependents


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServiceList = objWMIService.ExecQuery _
    ("Select * from Win32_Service where Name='NetDDE'")

For Each objService in colServiceList
    errReturn = objService.StartService()
Next

Wscript.Sleep 20000

Set colServiceList = objWMIService.ExecQuery("Associators of " _
   &amp;amp; "{Win32_Service.Name='NetDDE'} Where " _
        &amp;amp; "AssocClass=Win32_DependentService " &amp;amp; "Role=Dependent" )
For Each objService in colServiceList
    objService.StartService()
Next
</vb><vb name="Start AutoStart Services that have Stopped" n="1039">' Start AutoStart Services that have Stopped


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colListOfServices = objWMIService.ExecQuery _
    ("Select * from Win32_Service Where State = 'Stopped' and StartMode = " _
        &amp;amp; "'Auto'")

For Each objService in colListOfServices
    objService.StartService()
Next
</vb><vb name="Stop a Service and Its Dependents" n="1040">' Stop a Service and Its Dependents


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServiceList = objWMIService.ExecQuery("Associators of " _
    &amp;amp; "{Win32_Service.Name='NetDDE'} Where " _
        &amp;amp; "AssocClass=Win32_DependentService " &amp;amp; "Role=Antecedent" )

For Each objService in colServiceList
    objService.StopService()
Next

Wscript.Sleep 20000

Set colServiceList = objWMIService.ExecQuery _
        ("Select * from Win32_Service where Name='NetDDE'")
For Each objService in colServiceList
    errReturn = objService.StopService()
Next
</vb><vb name="Stop Services Running Under a Specific Account" n="1041">' Stop Services Running Under a Specific Account


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServices = objWMIService.ExecQuery _
    ("Select * from Win32_Service Where StartName = '.\netsvc'")

For Each objService in colServices 
    errReturnCode = objService.StopService()
Next
</vb></dd>
		<dd name="Task Scheduling" code="tasks" desc="Sample scripts for creating, modifying, and deleting scheduled jobs on a computer."><vb name="Create a Scheduled Task" n="1042">' Create a Scheduled Task


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNewJob = objWMIService.Get("Win32_ScheduledJob")

errJobCreated = objNewJob.Create _
    ("Notepad.exe", "********123000.000000-420", _
        True , 1 OR 4 OR 16, , , JobID) 
Wscript.Echo errJobCreated
</vb><vb name="Delete a Scheduled Task" n="1043">' Delete a Scheduled Task


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objInstance = objWMIService.Get("Win32_ScheduledJob.JobID=1")

err = objInstance.Delete
</vb><vb name="Delete All Scheduled Tasks" n="1044">' Delete All Scheduled Tasks


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colScheduledTasks = objWMIService.ExecQuery _
    ("Select * from Win32_ScheduledJob")

For Each objTask in colScheduledTasks
    intJobID = objTask.JobID
    Set objInstance = objWMIService.Get _
        ("Win32_ScheduledJob.JobID=" &amp;amp; intJobID)
    objInstance.Delete
Next
</vb><vb name="List Scheduled Tasks" n="1045">' List Scheduled Tasks


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colScheduledJobs = objWMIService.ExecQuery _
    ("Select * from Win32_ScheduledJob")

For Each objJob in colScheduledJobs
    Wscript.Echo "Caption: " &amp;amp; objJob.Caption
    Wscript.Echo "Command: " &amp;amp; objJob.Command
    Wscript.Echo "Days of Month: " &amp;amp; objJob.DaysOfMonth
    Wscript.Echo "Days of Week: " &amp;amp; objJob.DaysOfWeek
    Wscript.Echo "Description: " &amp;amp; objJob.Description
    Wscript.Echo "Elapsed Time: " &amp;amp; objJob.ElapsedTime
    Wscript.Echo "Install Date: " &amp;amp; objJob.InstallDate
    Wscript.Echo "Interact with Desktop: " &amp;amp; objJob.InteractWithDesktop
    Wscript.Echo "Job ID: " &amp;amp; objJob.JobID
    Wscript.Echo "Job Status: " &amp;amp; objJob.JobStatus
    Wscript.Echo "Name: " &amp;amp; objJob.Name
    Wscript.Echo "Notify: " &amp;amp; objJob.Notify
    Wscript.Echo "Owner: " &amp;amp; objJob.Owner
    Wscript.Echo "Priority: " &amp;amp; objJob.Priority
    Wscript.Echo "Run Repeatedly: " &amp;amp; objJob.RunRepeatedly
    Wscript.Echo "Start Time: " &amp;amp; objJob.StartTime
    Wscript.Echo "Status: " &amp;amp; objJob.Status
    Wscript.Echo "Time Submitted: " &amp;amp; objJob.TimeSubmitted
    Wscript.Echo "Until Time: " &amp;amp; objJob.UntilTime
Next
</vb></dd>
		<dd name="Version Information" code="version" desc="Sample scripts for retrieving information about the version of Windows installed on a computer."><vb name="List Operating System Properties" n="1046">' List Operating System Properties


Set dtmConvertedDate = CreateObject("WbemScripting.SWbemDateTime")

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colOperatingSystems = objWMIService.ExecQuery _
    ("Select * from Win32_OperatingSystem")

For Each objOperatingSystem in colOperatingSystems
    Wscript.Echo "Boot Device: " &amp;amp; objOperatingSystem.BootDevice
    Wscript.Echo "Build Number: " &amp;amp; objOperatingSystem.BuildNumber
    Wscript.Echo "Build Type: " &amp;amp; objOperatingSystem.BuildType
    Wscript.Echo "Caption: " &amp;amp; objOperatingSystem.Caption
    Wscript.Echo "Code Set: " &amp;amp; objOperatingSystem.CodeSet
    Wscript.Echo "Country Code: " &amp;amp; objOperatingSystem.CountryCode
    Wscript.Echo "Debug: " &amp;amp; objOperatingSystem.Debug
    Wscript.Echo "Encryption Level: " &amp;amp; objOperatingSystem.EncryptionLevel
    dtmConvertedDate.Value = objOperatingSystem.InstallDate
    dtmInstallDate = dtmConvertedDate.GetVarDate
    Wscript.Echo "Install Date: " &amp;amp; dtmInstallDate 
    Wscript.Echo "Licensed Users: " &amp;amp; _
        objOperatingSystem.NumberOfLicensedUsers
    Wscript.Echo "Organization: " &amp;amp; objOperatingSystem.Organization
    Wscript.Echo "OS Language: " &amp;amp; objOperatingSystem.OSLanguage
    Wscript.Echo "OS Product Suite: " &amp;amp; objOperatingSystem.OSProductSuite
    Wscript.Echo "OS Type: " &amp;amp; objOperatingSystem.OSType
    Wscript.Echo "Primary: " &amp;amp; objOperatingSystem.Primary
    Wscript.Echo "Registered User: " &amp;amp; objOperatingSystem.RegisteredUser
    Wscript.Echo "Serial Number: " &amp;amp; objOperatingSystem.SerialNumber
    Wscript.Echo "Version: " &amp;amp; objOperatingSystem.Version
Next
</vb><vb name="List Operating System and Service Pack Information" n="1047">' List Operating System and Service Pack Information



strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
 &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
 
Set colOSes = objWMIService.ExecQuery("Select * from Win32_OperatingSystem")
For Each objOS in colOSes
  Wscript.Echo "Computer Name: " &amp;amp; objOS.CSName
  Wscript.Echo "Caption: " &amp;amp; objOS.Caption 'Name
  Wscript.Echo "Version: " &amp;amp; objOS.Version 'Version &amp;amp; build
  Wscript.Echo "Build Number: " &amp;amp; objOS.BuildNumber 'Build
  Wscript.Echo "Build Type: " &amp;amp; objOS.BuildType
  Wscript.Echo "OS Type: " &amp;amp; objOS.OSType
  Wscript.Echo "Other Type Description: " &amp;amp; objOS.OtherTypeDescription
  WScript.Echo "Service Pack: " &amp;amp; objOS.ServicePackMajorVersion &amp;amp; "." &amp;amp; _
   objOS.ServicePackMinorVersion
Next
</vb></dd>
	</dd>
	<dd name="Other Directory Services" code="ds" desc="Sample scripts for managing directory services other than Active Directory.">
		<dd name="Active Directory Application Mode (ADAM)" code="adam" desc="Sample scripts for managing Active Directory Application Mode (ADAM) objects.">
			<dd name="Creating, Deleting, and Modifying Objects" code="modify" desc="Sample scripts for creating, deleting, and modifying objects in ADAM (Active Directory Application Mode) domains."><vb name="Add a  User to an ADAM Group" n="1048">' Add a  User to an ADAM Group


On Error Resume Next

Set objGroup = GetObject _
    ("LDAP://localhost:389/cn=Accountants,ou=Accounting,dc=fabrikam,dc=com")

Set objUser = GetObject _
    ("LDAP://localhost:389/cn=kenmyer,ou=Accounting,dc=fabrikam,dc=com")
objGroup.Add objUser.AdsPath
</vb><vb name="Add a User to the ADAM Administrators Group" n="1049">' Add a User to the ADAM Administrators Group


On Error Resume Next

Set objGroup = GetObject _
    ("LDAP://localhost:389/CN=Administrators,CN=Roles,dc=fabrikam,dc=com")
Set objUser = GetObject _
    ("LDAP://localhost:389/cn=kenmyer,ou=Accounting,dc=fabrikam,dc=com")
objGroup.Add objUser.AdsPath
</vb><vb name="Add All Users in an ADAM OU to a Group" n="1050">' Add All Users in an ADAM OU to a Group


On Error Resume Next

Set objOU = GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")
Set objGroup = GetObject _
    ("LDAP://localhost:389/cn=Accountants,ou=Accounting,dc=fabrikam,dc=com")
objOU.Filter = Array("user")

For Each objUser in objOU
    objGroup.Add objUser.AdsPath
Next
</vb><vb name="Create a Child ADAM OU" n="1051">' Create a Child ADAM OU


On Error Resume Next

Set objParentOU = GetObject _
    ("LDAP://localhost:389/ou=Management2,ou=Management,dc=fabrikam,dc=com")

Set objChildOU = objParentOU.Create("organizationalUnit", "ou=Level3")
objChildOU.SetInfo
</vb><vb name="Create an ADAM Contact Account" n="1052">' Create an ADAM Contact Account


On Error Resume Next

Set objOU = GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")
Set objUser = objOU.Create("contact", "cn=jonathanhaas")
objUser.Put "displayName", "Jonathan Haas"  
objUser.SetInfo
</vb><vb name="Create an ADAM Container" n="1053">' Create an ADAM Container


On Error Resume Next

Set objDomain = GetObject("LDAP://localhost:389/dc=fabrikam,dc=com")
Set objOU = objDomain.Create("container", "cn=Users")
objOU.SetInfo
</vb><vb name="Create an ADAM Group" n="1054">' Create an ADAM Group


On Error Resume Next

Set objOU = GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")
Set objGroup = objOU.Create("group", "cn=Accountants")
objGroup.SetInfo
</vb><vb name="Create an ADAM inetOrgPerson Account" n="1055">' Create an ADAM inetOrgPerson Account


On Error Resume Next

Set objOU = GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")
Set objUser = objOU.Create("inetOrgPerson", "cn=syedabbas")
objUser.Put "displayName", "Syed Abbas"  
objUser.SetInfo
</vb><vb name="Create an ADAM OU" n="1056">' Create an ADAM OU


On Error Resume Next

Set objDomain = GetObject("LDAP://localhost:389/dc=fabrikam,dc=com")
Set objOU = objDomain.Create("organizationalUnit", "ou=Management")
objOU.SetInfo
</vb><vb name="Create an ADAM User Account" n="1057">' Create an ADAM User Account


On Error Resume Next

Set objOU = GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")
Set objUser = objOU.Create("user", "cn=gailerickson")
objUser.Put "displayName", "Gail Erickson"  
objUser.Put "userPrincipalName", "gailerickson@fabrikam.com"
objUser.SetInfo
</vb><vb name="Delete an ADAM Contact Account" n="1058">' Delete an ADAM Contact Account


On Error Resume Next

Set objOU = GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")
objOU.Delete "contact", "cn=carolphilips"
</vb><vb name="Delete an ADAM Container" n="1059">' Delete an ADAM Container


On Error Resume Next

Set objOU = GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")
objOU.Delete "container", "cn=Users"
</vb><vb name="Delete an ADAM Group" n="1060">' Delete an ADAM Group


On Error Resume Next

Set objOU = GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")
objOU.Delete "group", "cn=Accountants"
</vb><vb name="Delete an ADAM inetOrgPerson Account" n="1061">' Delete an ADAM inetOrgPerson Account


On Error Resume Next

Set objOU = GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")
objOU.Delete "inetOrgPerson", "cn=carolphilips"
</vb><vb name="Delete an ADAM OU" n="1062">' Delete an ADAM OU


On Error Resume Next

Set objOU = GetObject("LDAP://localhost:389/dc=fabrikam,dc=com")
objOU.Delete "organizationalUnit", "ou=Accounting"
</vb><vb name="Delete an ADAM User Account" n="1063">' Delete an ADAM User Account


On Error Resume Next

Set objOU = GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")
objOU.Delete "user", "cn=carolphilips"
</vb><vb name="List All the Contacts in an ADAM OU" n="1064">' List All the Contacts in an ADAM OU


On Error ResumeNext

Set objOU = GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")
objOU.Filter = Array("contact")

For Each objUser in objOU
    Wscript.Echo objUser.Name
Next
</vb><vb name="Modify an ADAM Contact Account Property" n="1065">' Modify an ADAM Contact Account Property


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://localhost:389/cn=carolphilips,ou=Accounting,dc=fabrikam,dc=com")

objUser.Put "description", "This is a practice contact account."  
objUser.SetInfo
</vb><vb name="Modify an ADAM Container Account Property" n="1066">' Modify an ADAM Container Account Property


On Error Resume Next

Set objUser = GetObject("LDAP://localhost:389/cn=users,dc=fabrikam,dc=com")

objUser.Put "description", "This is a practice container."  
objUser.SetInfo
</vb><vb name="Modify an ADAM Group Account Property" n="1067">' Modify an ADAM Group Account Property


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://localhost:389/cn=Accountants,ou=Accounting,dc=fabrikam,dc=com")

objUser.Put "description", "This is a practice group account."  
objUser.SetInfo
</vb><vb name="Modify an ADAM inetOrgPerson Account Property" n="1068">' Modify an ADAM inetOrgPerson Account Property


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://localhost:389/cn=syedabbas,ou=Accounting,dc=fabrikam,dc=com")

objUser.Put "description", "This is a practice inetOrgPerson account."  
objUser.SetInfo
</vb><vb name="Modify an ADAM OU  Property" n="1069">' Modify an ADAM OU  Property


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")

objUser.Put "description", "This is a practice organizational unit."  
objUser.SetInfo
</vb><vb name="Modify an ADAM User Account Expiration Date" n="1070">' Modify an ADAM User Account Expiration Date


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://localhost:389/cn=kenmyer,ou=Accounting,dc=fabrikam,dc=com")

objUser.AccountExpirationDate = "03/30/2005"
objUser.SetInfo
</vb><vb name="Modify an ADAM User Account Property" n="1071">' Modify an ADAM User Account Property


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://localhost:389/cn=kenmyer,ou=Accounting,dc=fabrikam,dc=com")

objUser.Put "description", "This is a practice user account."  
objUser.SetInfo
</vb><vb name="Remove a User from an ADAM Group" n="1072">' Remove a User from an ADAM Group


On Error Resume Next

Const ADS_PROPERTY_DELETE = 4 

Set objGroup = GetObject _
    ("LDAP://localhost:389/cn=Accountants,ou=Accounting,dc=fabrikam,dc=com")

objGroup.PutEx ADS_PROPERTY_DELETE, "member", Array("cn=TestUser,ou=Accounting,dc=fabrikam,dc=com")
objGroup.SetInfo
</vb><vb name="Rename an ADAM User Account" n="1073">' Rename an ADAM User Account


On Error Resume Next

Set objOU = GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")

objOU.MoveHere _
   "LDAP://cn=kimabercrombie, ou=Accounting,dc=fabrikam,dc=com", _
        "cn=dylanmiller"
</vb></dd>
			<dd name="Retrieving Information" code="list" desc="Sample scripts for retrieving information from ADAM (Active Directory Application Mode) domains."><vb name="List All ADAM Contact Attributes and Values" n="1074">' List All ADAM Contact Attributes and Values


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://localhost:389/cn=alexandrelobao,ou=Accounting,dc=fabrikam,dc=com")
Set objUserProperties = GetObject("LDAP://localhost:389/schema/contact")

For Each strAttribute in objUserProperties.MandatoryProperties
    strValues = objUser.GetEx(strAttribute)
    For Each strItem in strValues
        Wscript.Echo strAttribute &amp;amp; " -- " &amp;amp; strItem
    Next
Next

For Each strAttribute in objUserProperties.OptionalProperties
    strValues = objUser.GetEx(strAttribute)
    If Err = 0 Then
        For Each strItem in strValues
            Wscript.Echo strAttribute &amp;amp; " -- " &amp;amp; strItem
        Next
    Else
        Wscript.Echo strAttribute &amp;amp; " --  No value set"
        Err.Clear
    End If
Next
</vb><vb name="List All ADAM Container Attributes and Values" n="1075">' List All ADAM Container Attributes and Values


On Error Resume Next

Set objUser = GetObject("LDAP://localhost:389/cn=Users,dc=fabrikam,dc=com")
Set objUserProperties = GetObject("LDAP://localhost:389/schema/container")

For Each strAttribute in objUserProperties.MandatoryProperties
    strValues = objUser.GetEx(strAttribute)
    For Each strItem in strValues
        Wscript.Echo strAttribute &amp;amp; " -- " &amp;amp; strItem
    Next
Next

For Each strAttribute in objUserProperties.OptionalProperties
    strValues = objUser.GetEx(strAttribute)
    If Err = 0 Then
        For Each strItem in strValues
            Wscript.Echo strAttribute &amp;amp; " -- " &amp;amp; strItem
        Next
    Else
        Wscript.Echo strAttribute &amp;amp; " --  No value set"
        Err.Clear
    End If
Next
</vb><vb name="List All ADAM Group Attributes and Values" n="1076">' List All ADAM Group Attributes and Values


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://localhost:389/cn=Accountants,ou=Accounting,dc=fabrikam,dc=com")
Set objUserProperties = GetObject("LDAP://localhost:389/schema/group")

For Each strAttribute in objUserProperties.MandatoryProperties
    strValues = objUser.GetEx(strAttribute)
    For Each strItem in strValues
        Wscript.Echo strAttribute &amp;amp; " -- " &amp;amp; strItem
    Next
Next

For Each strAttribute in objUserProperties.OptionalProperties
    strValues = objUser.GetEx(strAttribute)
    If Err = 0 Then
        For Each strItem in strValues
            Wscript.Echo strAttribute &amp;amp; " -- " &amp;amp; strItem
        Next
    Else
        Wscript.Echo strAttribute &amp;amp; " --  No value set"
        Err.Clear
    End If
Next
</vb><vb name="List All ADAM inetOrgPerson Attributes and Values" n="1077">' List All ADAM inetOrgPerson Attributes and Values


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://localhost:389/cn=syedabbas,ou=Accounting,dc=fabrikam,dc=com")
Set objUserProperties = GetObject("LDAP://localhost:389/schema/inetOrgPerson")

For Each strAttribute in objUserProperties.MandatoryProperties
    strValues = objUser.GetEx(strAttribute)
    For Each strItem in strValues
        Wscript.Echo strAttribute &amp;amp; " -- " &amp;amp; strItem
    Next
Next

For Each strAttribute in objUserProperties.OptionalProperties
    strValues = objUser.GetEx(strAttribute)
    If Err = 0 Then
        For Each strItem in strValues
            Wscript.Echo strAttribute &amp;amp; " -- " &amp;amp; strItem
        Next
    Else
        Wscript.Echo strAttribute &amp;amp; " --  No value set"
        Err.Clear
    End If
Next
</vb><vb name="List All ADAM OU Attributes and Values" n="1078">' List All ADAM OU Attributes and Values


On Error Resume Next

Set objUser = _
    GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")
Set objUserProperties = GetObject _
    ("LDAP://localhost:389/schema/organizationalUnit")

For Each strAttribute in objUserProperties.MandatoryProperties
    strValues = objUser.GetEx(strAttribute)
    For Each strItem in strValues
        Wscript.Echo strAttribute &amp;amp; " -- " &amp;amp; strItem
    Next
Next

For Each strAttribute in objUserProperties.OptionalProperties
    strValues = objUser.GetEx(strAttribute)
    If Err = 0 Then
        For Each strItem in strValues
            Wscript.Echo strAttribute &amp;amp; " -- " &amp;amp; strItem
        Next
    Else
        Wscript.Echo strAttribute &amp;amp; " --  No value set"
        Err.Clear
    End If
Next
</vb><vb name="List All ADAM OUs" n="1079">' List All ADAM OUs


On Error Resume Next

Set objDomain = GetObject("LDAP://localhost:389/dc=fabrikam,dc=com")
objDomain.Filter = Array("organizationalUnit")

For Each objOU in objDomain
    strNames = strNames &amp;amp; objOU.Name &amp;amp; vbcrlf
    ShowOUS objOU.AdsPath
Next

Sub ShowOUs(OUName)
    Set objNextOU = GetObject(OUname)
    objNextOU.Filter = Array("organizationalUnit")
    For Each objSubOU in objNextOU
        strNames = strNames &amp;amp; "     " &amp;amp; objSubOU.Name &amp;amp; vbcrlf
        ShowOUS objSubOU.AdsPath
    Next
End Sub

Wscript.Echo strNames
</vb><vb name="List All ADAM User Attributes and Values" n="1080">' List All ADAM User Attributes and Values


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://localhost:389/cn=kenmyer,ou=Accounting,dc=fabrikam,dc=com")
Set objUserProperties = GetObject("LDAP://localhost:389/schema/user")

For Each strAttribute in objUserProperties.MandatoryProperties
    strValues = objUser.GetEx(strAttribute)
    For Each strItem in strValues
        Wscript.Echo strAttribute &amp;amp; " -- " &amp;amp; strItem
    Next
Next

For Each strAttribute in objUserProperties.OptionalProperties
    strValues = objUser.GetEx(strAttribute)
    If Err = 0 Then
        For Each strItem in strValues
            Wscript.Echo strAttribute &amp;amp; " -- " &amp;amp; strItem
        Next
    Else
        Wscript.Echo strAttribute &amp;amp; " --  No value set"
        Err.Clear
    End If
Next
</vb><vb name="List All the Accounts in an ADAM OU" n="1081">' List All the Accounts in an ADAM OU


On Error Resume Next

Set objOU = GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")

For Each objUser in objOU
    Wscript.Echo objUser.Name
Next
</vb><vb name="List All the Groups in an ADAM OU" n="1082">' List All the Groups in an ADAM OU


On Error Resume Next

Set objOU = GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")
objOU.Filter = Array("group")

For Each objUser in objOU
    Wscript.Echo objUser.Name
Next
</vb><vb name="List All the inetOrgPersons in an ADAM OU" n="1083">' List All the inetOrgPersons in an ADAM OU


On Error Resume Next

Set objOU = GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")
objOU.Filter = Array("inetOrgPerson")

For Each objUser in objOU
    Wscript.Echo objUser.Name
Next
</vb><vb name="List All the Members of an ADAM Group" n="1084">' List All the Members of an ADAM Group


On Error Resume Next

Set objGroup = GetObject _
    ("LDAP://localhost:389/cn=Accountants,ou=Accounting,dc=fabrikam,dc=com")

For Each objUser in objGroup.Members
    Wscript.Echo objUser.Name
Next
</vb><vb name="List All the Users in an ADAM OU" n="1085">' List All the Users in an ADAM OU


On Error Resume Next

Set objOU = GetObject("LDAP://localhost:389/ou=Accounting,dc=fabrikam,dc=com")
objOU.Filter = Array("user")

For Each objUser in objOU
    Wscript.Echo objUser.Name
Next
</vb><vb name="List the ADAM Contact Schema" n="1086">' List the ADAM Contact Schema


On Error Resume Next

Set objUserProperties = GetObject("LDAP://localhost:389/schema/contact")
WScript.Echo "Mandatory (Must-Contain) attributes"
For Each strAttribute in objUserProperties.MandatoryProperties
    WScript.Echo strAttribute
Next

Wscript.Echo

WScript.Echo VbCrLf &amp;amp; "Optional (May-Contain) attributes"
For Each strAttribute in objUserProperties.OptionalProperties
    WScript.Echo strAttribute
Next
</vb><vb name="List the ADAM Container Schema" n="1087">' List the ADAM Container Schema


On Error Resume Next

Set objUserProperties = GetObject("LDAP://localhost:389/schema/container")
WScript.Echo "Mandatory (Must-Contain) attributes"
For Each strAttribute in objUserProperties.MandatoryProperties
    WScript.Echo strAttribute
Next

Wscript.Echo

WScript.Echo VbCrLf &amp;amp; "Optional (May-Contain) attributes"
For Each strAttribute in objUserProperties.OptionalProperties
    WScript.Echo strAttribute
Next
</vb><vb name="List the ADAM Group Schema" n="1088">' List the ADAM Group Schema


On Error Resume Next

Set objUserProperties = GetObject("LDAP://localhost:389/schema/group")
WScript.Echo "Mandatory (Must-Contain) attributes"
For Each strAttribute in objUserProperties.MandatoryProperties
    WScript.Echo strAttribute
Next

Wscript.Echo

WScript.Echo VbCrLf &amp;amp; "Optional (May-Contain) attributes"
For Each strAttribute in objUserProperties.OptionalProperties
    WScript.Echo strAttribute
Next
</vb><vb name="List the ADAM inetOrgPerson Schema" n="1089">' List the ADAM inetOrgPerson Schema


On Error Resume Next

Set objUserProperties = GetObject("LDAP://localhost:389/schema/inetOrgPerson")
WScript.Echo "Mandatory (Must-Contain) attributes"
For Each strAttribute in objUserProperties.MandatoryProperties
    WScript.Echo strAttribute
Next

Wscript.Echo

WScript.Echo VbCrLf &amp;amp; "Optional (May-Contain) attributes"
For Each strAttribute in objUserProperties.OptionalProperties
    WScript.Echo strAttribute
Next
</vb><vb name="List the ADAM OU Schema" n="1090">' List the ADAM OU Schema


On Error Resume Next

Set objUserProperties = GetObject("LDAP://localhost:389/schema/organizationalUnit")
WScript.Echo "Mandatory (Must-Contain) attributes"
For Each strAttribute in objUserProperties.MandatoryProperties
    WScript.Echo strAttribute
Next

Wscript.Echo

WScript.Echo VbCrLf &amp;amp; "Optional (May-Contain) attributes"
For Each strAttribute in objUserProperties.OptionalProperties
    WScript.Echo strAttribute
Next
</vb><vb name="List the ADAM User Schema" n="1091">' List the ADAM User Schema


On Error Resume Next

Set objUserProperties = GetObject("LDAP://localhost:389/schema/user")
WScript.Echo "Mandatory (Must-Contain) attributes"
For Each strAttribute in objUserProperties.MandatoryProperties
    WScript.Echo strAttribute
Next

Wscript.Echo

WScript.Echo VbCrLf &amp;amp; "Optional (May-Contain) attributes"
For Each strAttribute in objUserProperties.OptionalProperties
    WScript.Echo strAttribute
Next
</vb><vb name="List the Groups an ADAM User Belongs to" n="1092">' List the Groups an ADAM User Belongs to


On Error Resume Next

Set objUser = GetObject _
    ("LDAP://localhost:389/cn=kenmyer,ou=Accounting,dc=fabrikam,dc=com")
arrMembersOf = objUser.GetEx("memberOf")

For Each strMemberOf in arrMembersOf
  WScript.Echo strMemberOf
Next
</vb><vb name="Verify that ADAM is Installed" n="1093">' Verify that ADAM is Installed


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServices = objWMIService.ExecQuery _
    ("Select * from Win32_Service where Name Like '%ADAM_%'")

If colServices.Count = 0 Then
    Wscript.Echo "ADAM is not installed."
Else
    For Each objService in colServices
        Wscript.Echo objService.Name &amp;amp; " -- " &amp;amp; objService.State
    Next
End If
</vb></dd>
		</dd>
		<dd name="Local Accounts and Windows NT 4.0 Accounts" code="local" desc="Sample scripts for managing user and group accounts on local computers and in Windows NT 4.0 domains.">
			<dd name="Groups" code="groups" desc="Sample scripts for managing security groups on local computers and/or in Windows NT 4.0 domains."><vb name="Create a Local Group on a Computer" n="1094">' Create a Local Group on a Computer


strComputer = "atl-ws-01"
Set colAccounts = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "")
Set objUser = colAccounts.Create("group", "FinanceUsers")
objUser.SetInfo
</vb><vb name="Delete a Local Group" n="1095">' Delete a Local Group


strComputer = "atl-ws-01"
Set objComputer = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "")
objComputer.Delete "group", "FinanceUsers"
</vb><vb name="Delete a User from a Local Group" n="1096">' Delete a User from a Local Group


strComputer = "atl-ws-01"
Set objGroup = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "/Adminstrators,group")
Set objUser = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "/kenmyer,user")
 
objGroup.Remove(objUser.ADsPath)
</vb><vb name="List All the Local Groups a User Belongs To" n="1097">' List All the Local Groups a User Belongs To


strComputer = "atl-win2k-01"
Set colGroups = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "")
colGroups.Filter = Array("group")

For Each objGroup In colGroups
    For Each objUser in objGroup.Members
        If objUser.name = "kenmyer" Then
            Wscript.Echo objGroup.Name
        End If
    Next
Next
</vb><vb name="List Local Groups and Their Members" n="1098">' List Local Groups and Their Members



strComputer = "atl-win2k-01"
Set colGroups = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "")
colGroups.Filter = Array("group")

For Each objGroup In colGroups
    Wscript.Echo objGroup.Name 
    For Each objUser in objGroup.Members
        Wscript.Echo vbTab &amp;amp; objUser.Name
    Next
Next
</vb><vb name="Add a User to a Local Group" n="1099">' Add a User to a Local Group



strComputer = "atl-ws-01"
strGroup = "Administrators"
strUser = "kenmyer"
Set objGroup = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "/" &amp;amp; strGroup &amp;amp; ",group")
Set objUser = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "/" &amp;amp; strUser &amp;amp; ",user")
objGroup.Add(objUser.ADsPath)
</vb><vb name="Add Users to a Local Group" n="1100">' Add Users to a Local Group



strComputer = "atl-ws-01"
strGroup = "Administrators"
arrUsers = Array("kenmyer", "adambarr", "lewjudy")
Set objGroup = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "/" &amp;amp; strGroup &amp;amp; ",group")
For Each strUser In arrUsers
  Set objUser = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "/" &amp;amp; strUser &amp;amp; ",user")
  objGroup.Add(objUser.ADsPath)
Next
</vb><vb name="List Members of a Local Group" n="1101">' List Members of a Local Group



Set objNetwork = CreateObject("WScript.Network")
strComputer = objNetwork.ComputerName
strGroup = "Administrators"
WScript.Echo "Computer: " &amp;amp; strComputer
Set objGroup = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "/" &amp;amp; strGroup &amp;amp; ",group")
WScript.Echo "  Administrators group members:"
For Each objMember In objGroup.Members
  WScript.Echo "    " &amp;amp; objMember.Name
Next
</vb><vb name="Delete Users from a Local Group" n="1102">' Delete Users from a Local Group



strComputer = "atl-ws-01"
strGroup = "Administrators"
arrUsers = Array("kenmyer", "adambarr", "lewjudy")
Set objGroup = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "/" &amp;amp; strGroup &amp;amp; ",group")
For Each strUser In arrUsers
  Set objUser = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "/" &amp;amp; strUser &amp;amp; ",user")
  objGroup.Remove(objUser.ADsPath)
Next
</vb><vb name="List Local Group Attributes" n="1103">' List Local Group Attributes



Set objNetwork = CreateObject("WScript.Network")
strComputer = objNetwork.ComputerName
strGroup = "Administrators"
WScript.Echo "Computer: " &amp;amp; strComputer
Set objGroup = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "/" &amp;amp; strGroup &amp;amp; ", group")
Set objClass = GetObject(objGroup.Schema)
WScript.Echo "Mandatory attributes:"
For Each strProperty In objClass.MandatoryProperties
  WScript.Echo strProperty
Next
Wscript.Echo
WScript.Echo "Optional attributes:"
For Each strProperty In objClass.OptionalProperties
  WScript.Echo strProperty
Next
</vb></dd>
			<dd name="User Accounts" code="users" desc="Sample scripts for managing user accounts on local computers and/or in Windows NT 4.0 domains."><vb name="List Account Expiration Dates in a Windows NT 4.0 Domain" n="1104">' List Account Expiration Dates in a Windows NT 4.0 Domain


On Error Resume Next

Set objDomain = GetObject("WinNT://fabrikam,domain")
objDomain.Filter = Array("User")

For Each objUser In objDomain
   If IsNull(objUser.AccountExpirationDate) Then
       Wscript.Echo objUser.Name, "Account has no expiration date."
   Else
       Wscript.Echo objUser.Name, objUser.AccountExpirationDate
   End If
Next
</vb><vb name="Change the Local Administrator Password" n="1105">' Change the Local Administrator Password


strComputer = "atl-ws-01"
Set objUser = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "/Administrator, user")

objUser.SetPassword "09iuy%4e"
objUser.SetInfo
</vb><vb name="Create a Local User Account" n="1106">' Create a Local User Account


strComputer = "atl-ws-01"
Set colAccounts = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "")
Set objUser = colAccounts.Create("user", "Admin2")
objUser.SetPassword "09iu%4et"
objUser.SetInfo
</vb><vb name="Delete a Local User Account" n="1107">' Delete a Local User Account


strComputer = "atl-ws-01"
strUser = "Admin2"

Set objComputer = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "")
objComputer.Delete "user", strUser
</vb><vb name="Disable a Local User Account" n="1108">' Disable a Local User Account


strComputer = "atl-ws-01"
Set objUser = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "/Guest")

objUser.AccountDisabled = True
objUser.SetInfo
</vb><vb name="Disable the Guest Account" n="1109">' Disable the Guest Account


Set objComputer = CreateObject("Shell.LocalMachine")
objComputer.DisableGuest(0)
</vb><vb name="Enable the Guest Account" n="1110">' Enable the Guest Account


Set objComputer = CreateObject("Shell.LocalMachine")
objComputer.EnableGuest(1)
</vb><vb name="List All the User Accounts in an NT 4.0 Domain" n="1111">' List All the User Accounts in an NT 4.0 Domain


Set objDomain = GetObject("WinNT://fabrikam,domain")
objDomain.Filter = Array("User")

For Each objUser In objDomain
    Wscript.Echo objUser.Name 
Next
</vb><vb name="List Attribute Values for a Local User Account" n="1112">' List Attribute Values for a Local User Account



On Error Resume Next
 
strComputer = "atl-win2k-01"
Set objUser = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "/kenmyer ")
Set objClass = GetObject(objUser.Schema)
 
WScript.Echo "Mandatory properties for " &amp;amp; objUser.Name &amp;amp; ":"
For Each property in objClass.MandatoryProperties
    WScript.Echo property, objUser.Get(property)
Next
 
WScript.Echo "Optional properties for " &amp;amp; objUser.Name &amp;amp; ":"
For Each property in objClass.OptionalProperties
    WScript.Echo property, objUser.Get(property)
Next
</vb><vb name="List Local Groups Using WMI" n="1113">' List Local Groups Using WMI


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_Group  Where LocalAccount = True")

For Each objItem in colItems
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Domain: " &amp;amp; objItem.Domain
    Wscript.Echo "Local Account: " &amp;amp; objItem.LocalAccount
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "SID: " &amp;amp; objItem.SID
    Wscript.Echo "SID Type: " &amp;amp; objItem.SIDType
    Wscript.Echo "Status: " &amp;amp; objItem.Status
    Wscript.Echo
Next
</vb><vb name="List Local User Accounts Using WMI" n="1114">' List Local User Accounts Using WMI


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_UserAccount Where LocalAccount = True")

For Each objItem in colItems
    Wscript.Echo "Account Type: " &amp;amp; objItem.AccountType
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Disabled: " &amp;amp; objItem.Disabled
    Wscript.Echo "Domain: " &amp;amp; objItem.Domain
    Wscript.Echo "Full Name: " &amp;amp; objItem.FullName
    Wscript.Echo "Local Account: " &amp;amp; objItem.LocalAccount
    Wscript.Echo "Lockout: " &amp;amp; objItem.Lockout
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Password Changeable: " &amp;amp; objItem.PasswordChangeable
    Wscript.Echo "Password Expires: " &amp;amp; objItem.PasswordExpires
    Wscript.Echo "Password Required: " &amp;amp; objItem.PasswordRequired
    Wscript.Echo "SID: " &amp;amp; objItem.SID
    Wscript.Echo "SID Type: " &amp;amp; objItem.SIDType
    Wscript.Echo "Status: " &amp;amp; objItem.Status
    Wscript.Echo
Next
</vb><vb name="List User Accounts on the Local Computer" n="1115">' List User Accounts on the Local Computer


Set objNetwork = CreateObject("Wscript.Network")
strComputer = objNetwork.ComputerName

Set colAccounts = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "")
colAccounts.Filter = Array("user")

For Each objUser In colAccounts
    Wscript.Echo objUser.Name 
Next
</vb><vb name="List userFlag Values for a Local User Account" n="1116">' List userFlag Values for a Local User Account


Const ADS_UF_SCRIPT = &amp;amp;H0001 
Const ADS_UF_ACCOUNTDISABLE = &amp;amp;H0002 
Const ADS_UF_HOMEDIR_REQUIRED = &amp;amp;H0008 
Const ADS_UF_LOCKOUT = &amp;amp;H0010 
Const ADS_UF_PASSWD_NOTREQD = &amp;amp;H0020 
Const ADS_UF_PASSWD_CANT_CHANGE = &amp;amp;H0040 
Const ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED = &amp;amp;H0080 
Const ADS_UF_DONT_EXPIRE_PASSWD = &amp;amp;H10000 
Const ADS_UF_SMARTCARD_REQUIRED = &amp;amp;H40000 
Const ADS_UF_PASSWORD_EXPIRED = &amp;amp;H800000 
 
Set usr = GetObject("WinNT://atl-win2k-01/kenmyer")
flag = usr.Get("UserFlags")
 
If flag AND ADS_UF_SCRIPT Then
    Wscript.Echo "Logon script will be executed."
Else
    Wscript.Echo "Logon script will not be executed."
End If
 
If flag AND ADS_UF_ACCOUNTDISABLE Then
    Wscript.Echo "Account is disabled."
Else
    Wscript.Echo "Account is not disabled."
End If
 
If flag AND ADS_UF_HOMEDIR_REQUIRED Then
    Wscript.Echo "Home directory required."
Else
    Wscript.Echo "Home directory not required."
End If
 
If flag AND ADS_UF_PASSWD_NOTREQD Then
    Wscript.Echo "Password not required."
Else
    Wscript.Echo "Password required."
End If
 
If flag AND ADS_PASSWORD_CANT_CHANGE Then
    Wscript.Echo "User cannot change password."
Else
    Wscript.Echo "User can change password."
End If
 
If flag AND ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED Then
    Wscript.Echo "Encrypted password allowed."
Else
    Wscript.Echo "Encrypted password not allowed."
End If
 
If flag AND ADS_UF_DONT_EXPIRE_PASSWD Then
    Wscript.Echo "Password does not expire."
Else
    Wscript.Echo "Password expires."
End If
 
If flag AND ADS_UF_SMARTCARD_REQUIRED Then
    Wscript.Echo "Smartcard required for logon."
Else
    Wscript.Echo "Smart card not required for logon."
End If
 
If flag AND ADS_UF_PASSWORD_EXPIRED Then
    Wscript.Echo "Password has expired."
Else
    Wscript.Echo "Password has not expired."
End If
</vb><vb name="Modify a Local User Account Password So It Never Expires" n="1117">' Modify a Local User Account Password So It Never Expires


Const ADS_UF_DONT_EXPIRE_PASSWD = &amp;amp;h10000
 
strDomainOrWorkgroup = "Fabrikam"
strComputer = "atl-win2k-01"
strUser = "KenMeyer"
 
Set objUser = GetObject("WinNT://" &amp;amp; strDomainOrWorkgroup &amp;amp; "/" &amp;amp; _
    strComputer &amp;amp; "/" &amp;amp; strUser &amp;amp; ",User")
 
objUserFlags = objUser.Get("UserFlags")
objPasswordExpirationFlag = objUserFlags OR ADS_UF_DONT_EXPIRE_PASSWD
objUser.Put "userFlags", objPasswordExpirationFlag 
objUser.SetInfo
</vb><vb name="Modify a Local User Account So It Never Expires" n="1118">' Modify a Local User Account So It Never Expires


Const ADS_UF_DONT_EXPIRE_PASSWD = &amp;amp;h10000

strComputer = "atl-win2k-01"
Set objUser = GetObject("WinNT:// " &amp;amp; strComputer &amp;amp; "/kenmyer")

objUserFlags = objUser.Get("UserFlags")
objPasswordExpirationFlag = objUserFlags OR ADS_UF_DONT_EXPIRE_PASSWD
objUser.Put "userFlags", objPasswordExpirationFlag 
objUser.SetInfo
</vb><vb name="Modify the Expiration Date for a Local User Account" n="1119">' Modify the Expiration Date for a Local User Account


strComputer = "atl-win2k-01"
Set objUser = GetObject("WinNT:// " &amp;amp; strComputer &amp;amp; "/kenmyer")

objUser.AccountExpirationDate = #03/01/2005# 
objUser.SetInfo
</vb><vb name="Require a Local User to Change His or Her Password" n="1120">' Require a Local User to Change His or Her Password


strComputer = "atl-win2k-01"
Set objUser = GetObject("WinNT:// " &amp;amp; strComputer &amp;amp; "/kenmyer")

objUser.Put "PasswordExpired", 1
objUser.SetInfo
</vb><vb name="Verify Whether an Account Exists in a Windows NT 4.0 Domain" n="1121">' Verify Whether an Account Exists in a Windows NT 4.0 Domain



strUserName = "kenmyer"
Set objDomain = GetObject("WinNT://fabrikam")
objDomain.Filter = Array("user")
intFound = 0

For Each User In objDomain
    If lcase(User.Name) = lcase(strUserName) Then
        intFound = 1   
    End If    
Next

If intFound = 1 Then
    WScript.Echo "The " &amp;amp; strUserName &amp;amp; " account already exists."
Else
    WScript.Echo "The " &amp;amp; strUserName &amp;amp; " account does not exist in the domain."
End If
</vb><vb name="Add a User to a Local Group" n="1122">' Add a User to a Local Group



strComputer = "atl-ws-01"
Set objGroup = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "/Administrators,group")

Set objUser = GetObject("WinNT://" &amp;amp; strComputer &amp;amp; "/kenmyer,user")
objGroup.Add(objUser.ADsPath)
</vb></dd>
		</dd>
	</dd>
	<dd name="Printing" code="printing" desc="Sample scripts for managing printers, print jobs, print servers, and other parts of the Windows printing infrastructure.">
		<dd name="Client-Side Printing" code="client" desc="Sample scripts for configuring printers on and retrieving printer information from client computers."><vb name="Add a Printer Connection" n="1123">' Add a Printer Connection


Set WshNetwork = CreateObject("WScript.Network")

WshNetwork.AddWindowsPrinterConnection "\\PrintServer1\Xerox300"
WshNetwork.SetDefaultPrinter "\\PrintServer1\Xerox300"
</vb><vb name="Assign a Default Printer" n="1124">' Assign a Default Printer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colInstalledPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_Printer Where Name = 'ScriptedPrinter'")

For Each objPrinter in colInstalledPrinters
    objPrinter.SetDefaultPrinter()
Next
</vb><vb name="Assign a Default Printer Based on Queue Length" n="1125">' Assign a Default Printer Based on Queue Length


intSmallestQueue = 1000

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPrintQueues =  objWMIService.ExecQuery _
    ("Select * from Win32_PerfFormattedData_Spooler_PrintQueue " _
        &amp;amp; "Where Name &amp;lt;&amp;gt; '_Total'")

For Each objPrintQueue in colPrintQueues
    intCurrentQueue = objPrintQueue.Jobs + objPrintQueue.JobsSpooling
    If intCurrentQueue &amp;lt;= intSmallestQueue Then
        strNewDefault = objPrintQueue.Name
        intSmallestQueue = intCurrentQueue
    End If
Next

Set colInstalledPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_Printer Where Name = '" &amp;amp; strNewDefault &amp;amp; "'")

For Each objPrinter in colInstalledPrinters
    objPrinter.SetDefaultPrinter()
Next
</vb><vb name="Delete a Printer" n="1126">' Delete a Printer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colInstalledPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_Printer where DeviceID = 'ScriptedPrinter'")

For Each objPrinter in colInstalledPrinters
    objPrinter.Delete_
Next
</vb><vb name="Delete a Printer Connection" n="1127">' Delete a Printer Connection


Set objNetwork = WScript.CreateObject("WScript.Network")
objNetwork.RemovePrinterConnection "\\PrintServer\xerox3006"
</vb><vb name="List Printer Connections" n="1128">' List Printer Connections


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colInstalledPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_Printer")

For Each objPrinter in colInstalledPrinters
    Wscript.Echo "Name: " &amp;amp; objPrinter.Name
    Wscript.Echo "Location: " &amp;amp; objPrinter.Location
    Wscript.Echo "Default: " &amp;amp; objPrinter.Default
Next
</vb><vb name="Rename a Printer" n="1129">' Rename a Printer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_Printer Where DeviceID = 'HP LaserJet 4Si M'")

For Each objPrinter in colPrinters
    objPrinter.RenamePrinter("ArtDepartmentPrinter")
Next

Set colPrinters = objWMIService.ExecQuery _
    ("Select * From Win32_Printer Where DeviceID = 'ArtDepartmentPrinter' ")

For Each objPrinter in colPrinters
    objPrinter.ShareName = "ArtDepartmentPrinter"
    objPrinter.Put_
Next
</vb></dd>
		<dd name="Print Servers, Print Queues, and Print Jobs" code="servers" desc="Sample scripts for managing print servers, print queues, and individual print jobs."><vb name="Delete All Large Print Jobs" n="1130">' Delete All Large Print Jobs


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPrintJobs =  objWMIService.ExecQuery _
    ("Select * from Win32_PrintJob Where Size &amp;gt; 1000000")

For Each objPrintJob in colPrintJobs 
    objPrintJob.Delete_
Next
</vb><vb name="Delete All Printers on a Print Server" n="1131">' Delete All Printers on a Print Server


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colInstalledPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_Printer")

For Each objPrinter in colInstalledPrinters
    objPrinter.Delete_
Next
</vb><vb name="Delete Specific Printers" n="1132">' Delete Specific Printers


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colInstalledPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_Printer Where DriverName = 'HP QuietJet'")

For Each objPrinter in colInstalledPrinters
    objPrinter.Delete_
Next
</vb><vb name="Install a Printer" n="1133">' Install a Printer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objPrinter = objWMIService.Get("Win32_Printer").SpawnInstance_

objPrinter.DriverName = "HP LaserJet 4000 Series PS"
objPrinter.PortName   = "IP_169.254.110.160"
objPrinter.DeviceID   = "ScriptedPrinter"
objPrinter.Location = "USA/Redmond/Building 37/Room 114"
objPrinter.Network = True
objPrinter.Shared = True
objPrinter.ShareName = "ScriptedPrinter"
objPrinter.Put_
</vb><vb name="Install Multiple Printers for One Print Device" n="1134">' Install Multiple Printers for One Print Device


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objPrinter = objWMIService.Get("Win32_Printer").SpawnInstance_

objPrinter.DriverName = "HP LaserJet 4000 Series PS"
objPrinter.PortName   = "IP_169.254.110.160"
objPrinter.DeviceID   = "PublicPrinter"
objPrinter.Location = "USA/Redmond/Building 37/Room 114"
objPrinter.Network = True
objPrinter.Shared = True
objPrinter.ShareName = "PublicPrinter"
objPrinter.Put_
 
objPrinter.DriverName = "HP LaserJet 4000 Series PS"
objPrinter.PortName   = "IP_169.254.110.160"
objPrinter.DeviceID   = "PrivatePrinter"
objPrinter.Location = "USA/Redmond/Building 37/Room 114"
objPrinter.Priority = 2
objPrinter.Network = True
objPrinter.Shared = True
objPrinter.Hidden = True
objPrinter.ShareName = "PrivatePrinter"
objPrinter.Put_
</vb><vb name="List All Published Printers" n="1135">' List All Published Printers


Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"

Set objCommand.ActiveConnection = objConnection
objCommand.CommandText = "Select printerName, serverName from " _     
    &amp;amp; " 'LDAP://DC=fabrikam,DC=com'  where objectClass='printQueue'"  
objCommand.Properties("Page Size") = 1000
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo "Printer Name: " &amp;amp; objRecordSet.Fields("printerName").Value
    Wscript.Echo "Server Name: " &amp;amp; objRecordSet.Fields("serverName").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="List Print Queue Statistics" n="1136">' List Print Queue Statistics


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPrintJobs =  objWMIService.ExecQuery _
    ("Select * from Win32_PrintJob")

For Each objPrintJob in colPrintJobs 
    intTotalJobs = intTotalJobs + 1
    intTotalPages = intTotalPages + objPrintJob.TotalPages
    If objPrintJob.TotalPages &amp;gt; intMaxPrintJob Then
        intMaxPrintJob = objPrintJob.TotalPages
    End If
Next

Wscript.Echo "Total print jobs in queue: " &amp;amp; intTotalJobs 
Wscript.Echo "Total pages in queue: " &amp;amp; intTotalPages
Wscript.Echo "Largest print job in queue: " &amp;amp; intMaxPrintJob
</vb><vb name="List Print Queue Statistics" n="1137">' List Print Queue Statistics


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPrintQueues =  objWMIService.ExecQuery _
    ("Select * from Win32_PerfFormattedData_Spooler_PrintQueue Where " &amp;amp; _
        "Name &amp;lt;&amp;gt; '_Total'")

For Each objPrintQueue in colPrintQueues
    Wscript.Echo "Name: " &amp;amp; objPrintQueue.Name
    Wscript.Echo "Jobs: " &amp;amp; objPrintQueue.Jobs
    Wscript.Echo "Current jobs spooling: " &amp;amp; objPrintQueue.JobsSpooling
    Wscript.Echo "Maximum jobs spooling: " &amp;amp; objPrintQueue.MaxJobsSpooling
    Wscript.Echo "Total jobs printed: " &amp;amp; objPrintQueue.TotalJobsPrinted
    Wscript.Echo "Job errors: " &amp;amp; objPrintQueue.JobErrors
    Wscript.Echo "Not ready errors: " &amp;amp; objPrintQueue.NotReadyErrors
    Wscript.Echo "Out of paper errors: " &amp;amp; objPrintQueue.OutOfPaperErrors
Next
</vb><vb name="List Printer Capabilities" n="1138">' List Printer Capabilities


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colInstalledPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_PrinterConfiguration")

For Each objPrinter in colInstalledPrinters
    Wscript.Echo "Name: " &amp;amp; objPrinter.Name
    Wscript.Echo "Collate: " &amp;amp; objPrinter.Collate
    Wscript.Echo "Copies: " &amp;amp; objPrinter.Copies
    Wscript.Echo "Driver Version: " &amp;amp; objPrinter.DriverVersion
    Wscript.Echo "Duplex: " &amp;amp; objPrinter.Duplex
    Wscript.Echo "Horizontal Resolution: " &amp;amp; _
        objPrinter.HorizontalResolution
    If objPrinter.Orientation = 1 Then
        strOrientation =  "Portrait"
    Else 
        strOrientation = "Landscape"
    End If
    Wscript.Echo "Orientation : " &amp;amp; strOrientation
    Wscript.Echo "Paper Length: " &amp;amp; objPrinter.PaperLength / 254
    Wscript.Echo "Paper Width: " &amp;amp; objPrinter.PaperWidth / 254
    Wscript.Echo "Print Quality: " &amp;amp; objPrinter.PrintQuality
    Wscript.Echo "Scale: " &amp;amp; objPrinter.Scale
    Wscript.Echo "Specification Version: " &amp;amp; _
        objPrinter.SpecificationVersion
    If objPrinter.TTOption = 1 Then
        strTTOption = "Print TrueType fonts as graphics."
    Elseif objPrinter.TTOption = 2 Then
        strTTOption = "Download TrueType fonts as soft fonts."
    Else
        strTTOption = "Substitute device fonts for TrueType fonts."
    End If
    Wscript.Echo "True Type Option: " &amp;amp; strTTOption
    Wscript.Echo "Vertical Resolution: " &amp;amp; objPrinter.VerticalResolution
Next
</vb><vb name="Modify Print Job Priority" n="1139">' Modify Print Job Priority


Set objPrinter = GetObject _
    ("WinNT://atl-dc-02/ArtDepartmentPrinter, printqueue")

For Each objPrintJob in objPrinter.PrintJobs
    If objPrintJob.Size &amp;gt; 400000 Then
        objPrintJob.Put "Priority" , 2
        objPrintJob.SetInfo
    Else
        objPrintJob.Put "Priority" , 3
        objPrintJob.SetInfo
    End If
Next
</vb><vb name="Modify Print Job Start Time" n="1140">' Modify Print Job Start Time


Set objPrinter = GetObject("WinNT://atl-dc-02/ArtDepartmentPrinter,printqueue")

For Each objPrintQueue in objPrinter.PrintJobs
    If objPrintQueue.Size &amp;gt; 400000 Then
        objPrintQueue.Put "StartTime" , TimeValue("2:00:00 AM")
        objPrintQueue.SetInfo
    End If
Next
</vb><vb name="Modify Printer Availability" n="1141">' Modify Printer Availability


dtmStartTime= "********080000.000000+000"
dtmEndTime= "********180000.000000+000"

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPrinters = objWMIService.ExecQuery _
    ("Select * From Win32_Printer Where DeviceID = 'ArtDepartmentPrinter' ")

For Each objPrinter in colPrinters
    objPrinter.StartTime = dtmStartTime
    objPrinter.UntilTime = dtmEndTime
    objPrinter.Put_
Next
</vb><vb name="Modify Printer Locations" n="1142">' Modify Printer Locations


Set objOU = GetObject("LDAP://OU = Finance, DC = fabrikam, DC = com")
objOU.Filter = Array("printqueue")

For Each objPrintQueue In objOU
    objPrintQueue.Put "Location" , "USA/Redmond/Finance Building"
    objPrintQueue.SetInfo
Next
</vb><vb name="Modify Printer Priority" n="1143">' Modify Printer Priority


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPrinters = objWMIService.ExecQuery _
    ("Select * From Win32_Printer where DeviceID = 'ArtDepartmentPrinter' ")

For Each objPrinter in colPrinters
    objPrinter.Priority = 2
    objPrinter.Put_
Next
</vb><vb name="Monitor Print Job Status" n="1144">' Monitor Print Job Status


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPrintJobs =  objWMIService.ExecQuery _
    ("Select * from Win32_PrintJob")

Wscript.Echo "Print Queue, Job ID, Owner, Total Pages"

For Each objPrintJob in colPrintJobs
    strPrinter = Split(objPrintJob.Name,",",-1,1)
    Wscript.Echo strPrinter(0) &amp;amp; ", " &amp;amp; _
        objPrintJob.JobID &amp;amp; ", " &amp;amp;  objPrintJob.Owner &amp;amp; ", " _
            &amp;amp; objPrintJob.TotalPages
Next
</vb><vb name="Monitor Print Queue Times" n="1145">' Monitor Print Queue Times


Const USE_LOCAL_TIME = True

Set DateTime = CreateObject("WbemScripting.SWbemDateTime")

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colInstalledPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_PrintJob")

Wscript.Echo "Print Queue, Job ID, TimeSubmitted, Total Pages"

For Each objPrinter in colInstalledPrinters
    DateTime.Value = objPrinter.TimeSubmitted
    dtmActualTime = DateTime.GetVarDate(USE_LOCAL_TIME)
    TimeinQueue = DateDiff("n", actualTime, Now)
    If TimeinQueue &amp;gt; 15 Then
        strPrinterName = Split(objPrinter.Name,",",-1,1)
        Wscript.Echo strPrinterName(0) &amp;amp; ", " _
            &amp;amp; objPrinter.JobID &amp;amp; ", " &amp;amp; dtmActualTime &amp;amp; ", " &amp;amp; _
                objPrinter.TotalPages
    End If
Next
</vb><vb name="Monitor Print Queues" n="1146">' Monitor Print Queues


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPrintQueues =  objWMIService.ExecQuery _
    ("Select * from Win32_PerfFormattedData_Spooler_PrintQueue " &amp;amp; _
        "Where Name &amp;lt;&amp;gt; '_Total'")

For Each objPrintQueue in colPrintQueues
    Wscript.Echo "Name: " &amp;amp; objPrintQueue.Name
    Wscript.Echo "Current jobs: " &amp;amp; objPrintQueue.Jobs
Next
</vb><vb name="Monitor Printer Status" n="1147">' Monitor Printer Status


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colInstalledPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_Printer")

For Each objPrinter in colInstalledPrinters
    Wscript.Echo  "Name: " &amp;amp; objPrinter.Name
    Wscript.Echo  "Location: " &amp;amp; objPrinter.Location
    Select Case objPrinter.PrinterStatus
        Case 1
            strPrinterStatus = "Other"
        Case 2
            strPrinterStatus = "Unknown"
        Case 3
            strPrinterStatus = "Idle"
        Case 4
            strPrinterStatus = "Printing"
        Case 5
            strPrinterStatus = "Warmup"
    End Select
    Wscript.Echo  "Printer Status: " &amp;amp; strPrinterStatus
    Wscript.Echo  "Server Name: " &amp;amp; objPrinter.ServerName
    Wscript.Echo  "Share Name: " &amp;amp; objPrinter.ShareName
    Wscript.Echo
Next
</vb><vb name="Monitor Printer Status" n="1148">' Monitor Printer Status


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colInstalledPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_Printer Where PrinterStatus = '1' " _
        &amp;amp; "or PrinterStatus = '2'")

If colInstalledPrinters.Count = 0 Then
    Wscript.Echo "All printers are functioning correctly."
Else
    For Each objPrinter in colInstalledPrinters
        Wscript.Echo "Printer " &amp;amp; objprinter.Name &amp;amp; " is not responding." 
    Next
End If
</vb><vb name="Monitor Printers with a Temporary Event Subscription" n="1149">' Monitor Printers with a Temporary Event Subscription


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPrinters = objWMIService. _ 
    ExecNotificationQuery("Select * from __instancemodificationevent " _ 
        &amp;amp; "within 30 where TargetInstance isa 'Win32_Printer'")
i = 0

Do While i = 0
    Set objPrinter = colPrinters.NextEvent
    If objPrinter.TargetInstance.PrinterStatus &amp;lt;&amp;gt; _ 
        objPrinter.PreviousInstance.PrinterStatus Then
        Select Case objPrinter.TargetInstance.PrinterStatus
            Case 1 strCurrentState = "Other" 
            Case 2 strCurrentState = "Unknown" 
            Case 3 strCurrentState = "Idle" 
            Case 4 strCurrentState = "Printing" 
            Case 5 strCurrentState = "Warming Up" 
        End Select
        Select Case objPrinter.PreviousInstance.PrinterStatus
            Case 1 strPreviousState = "Other" 
            Case 2 strPreviousState = "Unknown" 
            Case 3 strPreviousState = "Idle" 
            Case 4 strPreviousState = "Printing" 
            Case 5 strPreviousState = "Warming Up" 
        End Select
        Wscript.Echo objPrinter.TargetInstance.Name _ 
            &amp;amp;  " is " &amp;amp; strCurrentState _
                &amp;amp; ". The printer previously was " &amp;amp; strPreviousState &amp;amp; "."
    End If
Loop
</vb><vb name="Monitor Spooler Print Queue Performance" n="1150">' Monitor Spooler Print Queue Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_Spooler_PrintQueue").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Add Network Printer Calls: " &amp;amp; _
            objItem.AddNetworkPrinterCalls
        Wscript.Echo "Bytes Printed Per Second: " &amp;amp; objItem.BytesPrintedPersec
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Enumerate Network Printer Calls: " &amp;amp; _     
        objItem.EnumerateNetworkPrinterCalls
        Wscript.Echo "Job Errors: " &amp;amp; objItem.JobErrors
        Wscript.Echo "Jobs: " &amp;amp; objItem.Jobs
        Wscript.Echo "Jobs Spooling: " &amp;amp; objItem.JobsSpooling
        Wscript.Echo "Maximum Jobs Spooling: " &amp;amp; objItem.MaxJobsSpooling
        Wscript.Echo "Maximum References: " &amp;amp; objItem.MaxReferences
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Not-Ready Errors: " &amp;amp; objItem.NotReadyErrors
        Wscript.Echo "Out-of-Paper Errors: " &amp;amp; objItem.OutofPaperErrors
        Wscript.Echo "References: " &amp;amp; objItem.References
        Wscript.Echo "Total Jobs Printed: " &amp;amp; objItem.TotalJobsPrinted
        Wscript.Echo "Total Pages Printed: " &amp;amp; objItem.TotalPagesPrinted
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor the Print Service" n="1151">' Monitor the Print Service


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colRunningServices =  objWMIService.ExecQuery _
    ("Select * from Win32_Service Where Name = 'Spooler'")

For Each objService in colRunningServices 
    Wscript.Echo objService.DisplayName &amp;amp; " -- " &amp;amp; objService.State
Next
</vb><vb name="Notify Users When a Print Queue is Purged" n="1152">' Notify Users When a Print Queue is Purged


Set WshShell = Wscript.CreateObject("Wscript.Shell")
Set objDictionary = CreateObject("Scripting.Dictionary")

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colInstalledPrintJobs =  objWMIService.ExecQuery _
    ("Select * from Win32_PrintJob")

For Each objPrintJob in colInstalledPrintJobs
    strPrinterName = Split(objPrintJob.Name,",",-1,1)
    If objDictionary.Exists(objPrintJob.Notify) Then
    Else
        objDictionary.Add objPrintJob.Notify, strPrinterName(0)
    End If
Next

arrKeys = objDictionary.Keys
arrItems = objDictionary.Items

For i = 0 to objDictionary.Count - 1
    Message = "The documents you were printing on printer "
    Message = Message &amp;amp; arrItems(i)
    Message = Message &amp;amp; " had to be deleted from the print queue. "
    Message = Message &amp;amp; "You will need to reprint these documents."
    CommandString = "%comspec% /c msg " &amp;amp; arrKeys(i) &amp;amp; " " &amp;amp; Chr(34) _
        &amp;amp; Message &amp;amp; Chr(34)
    WshShell.Run CommandString, 0, True
Next

Set colInstalledPrinters = objWMIService.ExecQuery _
    ("Select * from Win32_Printer")
For Each objPrinter in colInstalledPrinters
    objPrinter.CancelAllJobs()
Next
</vb><vb name="Pause a Printer" n="1153">' Pause a Printer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colInstalledPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_Printer Where Name = 'ArtDepartmentPrinter'")

For Each objPrinter in colInstalledPrinters 
    ObjPrinter.Pause()
Next
</vb><vb name="Pause All Print Jobs" n="1154">' Pause All Print Jobs


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPrintJobs =  objWMIService.ExecQuery _
    ("Select * from Win32_PrintJob")

For Each objPrintJob in colPrintJobs 
    objPrintJob.Pause
Next
</vb><vb name="Pause All Printers with Empty Print Queues" n="1155">' Pause All Printers with Empty Print Queues


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colInstalledPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_Printer")

For Each objPrinter in colInstalledPrinters
    Set colPrintJobs = objWMIService.ExecQuery _
        ("Select * from Win32_PerfFormattedData_Spooler_PrintQueue " _
            &amp;amp; "Where Name = '" &amp;amp; objPrinter.Name &amp;amp; "'")
    For Each objPrintQueue in colPrintJobs
        If objPrintQueue.Jobs = 0 and objPrintQueue.Name &amp;lt;&amp;gt; "_Total" Then
            objPrinter.Pause()
        End If
    Next
Next
</vb><vb name="Purge a Print Queue" n="1156">' Purge a Print Queue


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colInstalledPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_Printer Where Name = 'HP QuietJet'")

For Each objPrinter in colInstalledPrinters
    objPrinter.CancelAllJobs()
Next
</vb><vb name="Rename a Printer Published in Active Directory" n="1157">' Rename a Printer Published in Active Directory


Set objOU = GetObject("LDAP://ou=HR,dc=NA,dc=fabrikam,dc=com")

objOU.MoveHere _
    "LDAP://cn=Printer1,ou=HR,dc=NA,dc=fabrikam,dc=com", "cn=HRPrn1"
</vb><vb name="Resume a Paused Printer" n="1158">' Resume a Paused Printer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colInstalledPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_Printer Where Name = 'ArtDepartmentPrinter'")

For Each objPrinter in colInstalledPrinters 
    ObjPrinter.Resume()
Next
</vb><vb name="Resume All Paused Printers" n="1159">' Resume All Paused Printers


Const PRINTER_IS_PAUSED = 8

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colInstalledPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_Printer where ExtendedPrinterStatus = 8")

For Each objPrinter in colInstalledPrinters 
    ObjPrinter.Resume()
Next
</vb><vb name="Resume All Print Jobs" n="1160">' Resume All Print Jobs


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPrintJobs =  objWMIService.ExecQuery _
    ("Select * from Win32_PrintJob")

For Each objPrintJob in colPrintJobs 
    objPrintJob.Resume
Next
</vb><vb name="Search Active Directory for Specific Printers" n="1161">' Search Active Directory for Specific Printers


Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")

objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCOmmand.ActiveConnection = objConnection
objCommand.CommandText = "Select printerName, serverName from " _
    &amp;amp; "'LDAP://DC=fabrikam,DC=com'  where objectClass='printQueue' and " _
        &amp;amp; " Priority = 2 "  
objCommand.Properties("Page Size") = 1000
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 

Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo "Printer Name: " &amp;amp; objRecordSet.Fields("printerName").Value
    Wscript.Echo "Server Name: " &amp;amp; objRecordSet.Fields("serverName").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Transfer Print Jobs to a Different Print Queue" n="1162">' Transfer Print Jobs to a Different Print Queue


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objPrinter = objWMIService.Get _
    ("Win32_Printer.DeviceID='ArtDepartmentPrinter'")

objPrinter.PortName = "IP_192.168.1.10"
objPrinter.Put_
</vb><vb name="Update Printer Locations" n="1163">' Update Printer Locations


Set objOU = GetObject("LDAP://OU=Finance, DC=fabrikam, DC=com")
objOU.Filter = Array("printqueue")

For Each objPrintQueue In objOU
    strNewLocation = "Redmond/" &amp;amp; objPrintQueue.Location
    objPrintQueue.Put "Location" , strNewLocation
    objPrintQueue.SetInfo
Next
</vb></dd>
		<dd name="Printer Ports and Printer Drivers" code="ports" desc="Sample scripts for retrieving information about and for configuring printer ports and printer drivers on a computer."><vb name="Delete A Printer Port" n="1164">' Delete A Printer Port


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colInstalledPorts =  objWMIService.ExecQuery _
    ("Select * from Win32_TCPIPPrinterPort Where Name = 'IP_169.254.110.14'")

For Each objPort in colInstalledPorts 
    objPort.Delete
Next
</vb><vb name="Delete Unused Printer Ports" n="1165">' Delete Unused Printer Ports


Set objDictionary = CreateObject("Scripting.Dictionary")

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_Printer")

For Each objPrinter in colPrinters 
    objDictionary.Add objPrinter.PortName, objPrinter.PortName
Next

Set colPorts = objWMIService.ExecQuery _
    ("Select * from Win32_TCPIPPrinterPort")
For Each objPort in colPorts
    If objDictionary.Exists(objPort.Name) Then
    Else
        ObjPort.Delete_
    End If
Next
</vb><vb name="Install a Printer Driver not Found in Drivers Cab" n="1166">' Install a Printer Driver not Found in Drivers Cab


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
objWMIService.Security_.Privileges.AddAsString "SeLoadDriverPrivilege", True

Set objDriver = objWMIService.Get("Win32_PrinterDriver")

objDriver.Name = "NewPrinter Model 2900"
objDriver.SupportedPlatform = "Windows NT x86"
objDriver.Version = "3"
objDriverPath = "C:\Scripts\NewPrinter.dll"
objInfname = "C:\Scripts\NewPrinter.inf"
intResult = objDriver.AddPrinterDriver(objDriver)
</vb><vb name="Install Printer Drivers" n="1167">' Install Printer Drivers


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objDriver = objWMIService.Get("Win32_PrinterDriver")
objWMIService.Security_.Privileges.AddAsString "SeLoadDriverPrivilege", True

objDriver.Name = "Apple LaserWriter 8500"
objDriver.SupportedPlatform = "Windows NT x86"
objDriver.Version = "3"
errResult = objDriver.AddPrinterDriver(objDriver)
</vb><vb name="Install Printer Ports" n="1168">' Install Printer Ports


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set objNewPort = objWMIService.Get _
    ("Win32_TCPIPPrinterPort").SpawnInstance_

objNewPort.Name = "IP_169.254.110.14"
objNewPort.Protocol = 1
objNewPort.HostAddress = "169.254.110.14"
objNewPort.PortNumber = "9999"
objNewPort.SNMPEnabled = False
objNewPort.Put_
</vb><vb name="List Printer Drivers" n="1169">' List Printer Drivers


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colInstalledPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_PrinterDriver")

For each objPrinter in colInstalledPrinters
    Wscript.Echo "Configuration File: " &amp;amp; objPrinter.ConfigFile
    Wscript.Echo "Data File: " &amp;amp; objPrinter.DataFile
    Wscript.Echo "Description: " &amp;amp; objPrinter.Description
    Wscript.Echo "Driver Path: " &amp;amp; objPrinter.DriverPath
    Wscript.Echo "File Path: " &amp;amp; objPrinter.FilePath
    Wscript.Echo "Help File: " &amp;amp; objPrinter.HelpFile
    Wscript.Echo "INF Name: " &amp;amp; objPrinter.InfName
    Wscript.Echo "Monitor Name: " &amp;amp; objPrinter.MonitorName
    Wscript.Echo "Name: " &amp;amp; objPrinter.Name
    Wscript.Echo "OEM Url: " &amp;amp; objPrinter.OEMUrl
    Wscript.Echo "Supported Platform: " &amp;amp; objPrinter.SupportedPlatform
    Wscript.Echo "Version: " &amp;amp; objPrinter.Version
Next
</vb><vb name="List Printer Port Availability" n="1170">' List Printer Port Availability


Set objDictionary = CreateObject("Scripting.Dictionary")

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPrinters =  objWMIService.ExecQuery _
    ("Select * from Win32_Printer")

For Each objPrinter in colPrinters 
    objDictionary.Add objPrinter.PortName, objPrinter.PortName
Next

Set colPorts = objWMIService.ExecQuery _
    ("Select * from Win32_TCPIPPrinterPort")
For Each objPort in colPorts
    If objDictionary.Exists(objPort.Name) Then
        strUsedPorts = strUsedPorts &amp;amp; _
            objDictionary.Item(objPort.Name) &amp;amp; VbCrLf
    Else
        strFreePorts = strFreePorts &amp;amp; objPort.Name &amp;amp; vbCrLf
    End If
Next

Wscript.Echo "The following ports are in use: " &amp;amp; VbCrLf &amp;amp; strUsedPorts
Wscript.Echo "The following ports are available: " &amp;amp; VbCrLf &amp;amp; strFreePorts
</vb><vb name="List Printer Port Properties" n="1171">' List Printer Port Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colPorts =  objWMIService.ExecQuery _
    ("Select * from Win32_TCPIPPrinterPort")

For Each objPort in colPorts
    Wscript.Echo "Description: " &amp;amp; objPort.Description
    Wscript.Echo "Host Address: " &amp;amp; objPort.HostAddress
    Wscript.Echo "Name: " &amp;amp; objPort.Name
    Wscript.Echo "Port Number: " &amp;amp; objPort.PortNumber
    Wscript.Echo "Protocol: " &amp;amp; objPort.Protocol
    Wscript.Echo "SNMP Community: " &amp;amp; objPort.SNMPCommunity
    Wscript.Echo "SNMP Dev Index: " &amp;amp; objPort.SnMPDevIndex
    Wscript.Echo "SNMP Enabled: " &amp;amp; objPort.SNMPEnabled
Next
</vb></dd>
	</dd>
	<dd name="Scripting Techniques" code="misc" desc="Sample scripts demonstrating a wide variety of scripting tips, tricks, and techniques useful to script writers.">
		<dd name="ADSI" code="adsi" desc="Sample scripts for retrieving information about objects that can be used in ADSI scripts."><vb name="Bind to Active Directory using rootDSE" n="1172">' Bind to Active Directory using rootDSE


Set objRootDSE = GetObject("LDAP://rootDSE")
 
strSchema = "LDAP://" &amp;amp; objRootDSE.Get("schemaNamingContext")
WScript.echo "ADsPath to schema: " &amp;amp; strSchema
Set objSchema = GetObject(strSchema)
WScript.Echo "Schema Object:"
WScript.Echo "Name: " &amp;amp; objSchema.Name
WScript.Echo "Class: " &amp;amp; objSchema.Class &amp;amp; VbCrLf
 
strConfiguration = "LDAP://" &amp;amp; objRootDSE.Get("configurationNamingContext")
WScript.Echo "ADsPath to configuration container: " &amp;amp; strConfiguration
Set objConfiguration = GetObject(strConfiguration)
WScript.Echo "Configuration Object:"
WScript.Echo "Name: " &amp;amp; objConfiguration.Name
WScript.Echo "Class: " &amp;amp; objConfiguration.Class &amp;amp; VbCrLf
 
strDomain = "LDAP://" &amp;amp; objRootDSE.Get("defaultNamingContext")
WScript.Echo "ADsPath to current domain container: " &amp;amp; strDomain
Set objDomain = GetObject(strDomain)
WScript.Echo "Current Domain Object:"
WScript.Echo "Name: " &amp;amp; objDomain.Name
WScript.Echo "Class: " &amp;amp; objDomain.Class &amp;amp; VbCrLf
 
strRootDomain = "LDAP://" &amp;amp; objRootDSE.Get("rootDomainNamingContext")
WScript.Echo "ADsPath to root domain container: " &amp;amp; strDomain
Set objRootDomain = GetObject(strRootDomain)
WScript.Echo "Current Domain Object:"
WScript.Echo "Name: " &amp;amp; objRootDomain.Name
WScript.Echo "Class: " &amp;amp; objRootDomain.Class &amp;amp; VbCrLf
</vb><vb name="List Active Directory Auxiliary Classes" n="1173">' List Active Directory Auxiliary Classes


On Error Resume Next

strClassName = "cn=user"
 
Set objSchemaClass = GetObject _
    ("LDAP://" &amp;amp; strClassName &amp;amp; _
        ",cn=schema,cn=configuration,dc=fabrikam,dc=com")
 
arrSystemAuxiliaryClass = _
objSchemaClass.GetEx("systemAuxiliaryClass")
 
If isEmpty(arrSystemAuxiliaryClass) Then
    WScript.Echo "There are no auxiliary classes" &amp;amp; _
        " applied directly to this class."
    Else
        WScript.StdOut.Write "Auxiliary classes: "
    For Each strAuxiliaryClass in arrSystemAuxiliaryClass
        WScript.StdOut.Write strAuxiliaryClass &amp;amp; " | "
    Next
    WScript.Echo
End If
</vb><vb name="List Active Directory System Information" n="1174">' List Active Directory System Information


On Error Resume Next
Set objSysInfo = CreateObject("ADSystemInfo")

Wscript.Echo "User name: " &amp;amp; objSysInfo.UserName
Wscript.Echo "Computer name: " &amp;amp; objSysInfo.ComputerName
Wscript.Echo "Site name: " &amp;amp; objSysInfo.SiteName
Wscript.Echo "Domain short name: " &amp;amp; objSysInfo.DomainShortName
Wscript.Echo "Domain DNS name: " &amp;amp; objSysInfo.DomainDNSName
Wscript.Echo "Forest DNS name: " &amp;amp; objSysInfo.ForestDNSName
Wscript.Echo "PDC role owner: " &amp;amp; objSysInfo.PDCRoleOwner
Wscript.Echo "Schema role owner: " &amp;amp; objSysInfo.SchemaRoleOwner
Wscript.Echo "Domain is in native mode: " &amp;amp; objSysInfo.IsNativeMode
</vb><vb name="List All the Attributes of an Active Directory Class" n="1175">' List All the Attributes of an Active Directory Class


Set objSchemaComputer = GetObject("LDAP://schema/computer")
 
WScript.Echo "Mandatory (Must-Contain) attributes"
For Each strAttribute in objSchemaComputer.MandatoryProperties
    WScript.Echo strAttribute
Next
 
WScript.Echo VbCrLf &amp;amp; "Optional (May-Contain) attributes"
For Each strAttribute in objSchemaComputer.OptionalProperties
    WScript.Echo strAttribute
Next
</vb><vb name="List Domain Object Property Values" n="1176">' List Domain Object Property Values


Set objDomain = GetObject("LDAP://dc=NA,dc=fabrikam,dc=com")

WScript.Echo "Ads Path:" &amp;amp; objDomain.ADsPath
WScript.Echo "Class:" &amp;amp; objDomain.Class
WScript.Echo "GUID:" &amp;amp; objDomain.GUID
WScript.Echo "Name:" &amp;amp; objDomain.Name
WScript.Echo "Parent:" &amp;amp; objDomain.Parent
WScript.Echo "Schema:" &amp;amp; objDomain.Schema
</vb><vb name="List the Active Directory Class Type for an Object" n="1177">' List the Active Directory Class Type for an Object


strClassName = "cn=organizational-person"
 
Set objSchemaClass = GetObject _
    ("LDAP://" &amp;amp; strClassName &amp;amp; _
        ",cn=schema,cn=configuration,dc=fabrikam,dc=com")
 
intClassCategory = objSchemaClass.Get("objectClassCategory")

Select Case intClassCategory
    Case 0
        strCategory = "88"
    Case 1
        strCategory = "structural"
    Case 2
        strCategory = "abstract"
    Case 3
        strCategory = "auxiliary"
End Select

Wscript.Echo strClassName &amp;amp; " is categorized as " &amp;amp; strCategory &amp;amp; "."
</vb><vb name="List the Names of All Objects in the Configuration Container" n="1178">' List the Names of All Objects in the Configuration Container


Set objConfiguration = GetObject _
    ("LDAP://cn=Configuration,dc=fabrikam,dc=com")
 
For Each objContainer in objConfiguration
    WScript.Echo objContainer.Name
Next
</vb><vb name="List the Parent Class of an Active Directory Object" n="1179">' List the Parent Class of an Active Directory Object


strClassName = "cn=computer"
 
Set objSchemaClass = GetObject _
    ("LDAP://" &amp;amp; strClassName &amp;amp; _
        ",cn=schema,cn=configuration,dc=fabrikam,dc=com")
 
strSubClassOf = objSchemaClass.Get("subClassOf")
WScript.Echo "The " &amp;amp; strClassName &amp;amp; _
    " class is a child of the " &amp;amp; strSubClassOf &amp;amp; " class."
</vb><vb name="Use a Search  to Move Similar Active Directory Objects" n="1180">' Use a Search  to Move Similar Active Directory Objects


Set objConnection = CreateObject("ADODB.Connection")
objConnection.Open "Provider=ADsDSOObject;"
 
Set objCommand = CreateObject("ADODB.Command")
objCommand.ActiveConnection = objConnection
 
objCommand.CommandText = _
    "&amp;lt;LDAP://dc=NA,dc=fabrikam,dc=com&amp;gt;;" &amp;amp; _
        "(&amp;amp;(&amp;amp;(objectCategory=person)(objectClass=user)" &amp;amp; _
            "(department=Human Resources)));" &amp;amp; _
                "ADsPath,distinguishedName, name;subtree"
  
Set objRecordSet = objCommand.Execute
Set objOU = GetObject("LDAP://ou=HR,dc=NA,dc=fabrikam,dc=com")
 
Do Until objRecordset.EOF
    strADsPath = objRecordset.Fields("ADsPath")
  
    strDNRecord=lcase(objRecordset.Fields("distinguishedName"))
    strDNCompare=lcase("cn=" &amp;amp; objRecordset.Fields("name") &amp;amp; _
        ",ou=HR,dc=NA,dc=fabrikam,dc=com")
 
    If strDNRecord &amp;lt;&amp;gt; strDNCompare Then
        objOU.MoveHere strADsPath, vbNullString
        WScript.Echo objRecordset.Fields("distinguishedName") &amp;amp; " Moved."
    Else
        Wscript.Echo objRecordset.Fields("distinguishedName") &amp;amp; " Not Moved."
    End If
    objRecordSet.MoveNext
Loop
 
objConnection.Close
</vb><vb name="Use a Search to Modify Similar Active Directory Objects" n="1181">' Use a Search to Modify Similar Active Directory Objects



Set objConnection = CreateObject("ADODB.Connection")
objConnection.Open "Provider=ADsDSOObject;"
 
Set objCommand = CreateObject("ADODB.Command")
objCommand.ActiveConnection = objConnection
 
objCommand.CommandText = _
    "&amp;lt;LDAP://dc=NA,dc=fabrikam,dc=com&amp;gt;;" &amp;amp; _
        "(&amp;amp;(objectCategory=Computer)(cn=ATL*));" &amp;amp; _
            "ADsPath;subtree"
  
Set objRecordSet = objCommand.Execute
 
Do Until objRecordset.EOF
    strADsPath = objRecordset.Fields("ADsPath")
    Set objComputer = GetObject(strADsPath)
    objComputer.Put "location", "Atlanta, Georgia"
    objComputer.SetInfo
    objRecordSet.MoveNext
Loop
 
WScript.Echo objRecordSet.RecordCount &amp;amp; _
   " computers objects modified."
 
objConnection.Close
</vb><vb name="Verify That an Attribute is in the Global Catalog" n="1182">' Verify That an Attribute is in the Global Catalog


strAttributeName = "cn=given-name"
 
Set objSchemaAttribute = GetObject _
    ("LDAP://" &amp;amp; strAttributeName &amp;amp; _
        ",cn=schema,cn=configuration,dc=fabrikam,dc=com") 
 
blnInGC = objSchemaAttribute.Get("isMemberOfPartialAttributeSet")
 
If blnInGC Then
    WScript.Echo "The " &amp;amp; strAttributeName &amp;amp; _
        " attribute is replicated to the Global Catalog."
Else
    WScript.Echo "The " &amp;amp; strAttributeName &amp;amp; _
        " attribute is not replicated to the Global Catalog."
End If
</vb><vb name="Verify That an Attribute is Operational" n="1183">' Verify That an Attribute is Operational


Const ADS_SYSTEMFLAG_ATTR_IS_CONSTRUCTED = &amp;amp;h00000004
 
strAttributeName = "cn=Canonical-Name"
 
Set objSchemaAttribute = GetObject _
    ("LDAP://" &amp;amp; strAttributeName &amp;amp; _
        ",cn=schema,cn=configuration,dc=fabrikam,dc=com")
 
intSystemFlags = objSchemaAttribute.Get("systemFlags")
 
If intSystemFlags AND ADS_SYSTEMFLAG_ATTR_IS_CONSTRUCTED Then
    WScript.Echo strAttributeName &amp;amp; " is operational."
Else
    WScript.Echo strAttributeName &amp;amp; " is not operational."
End If
</vb><vb name="Verify Whether Attributes are Indexed and-or in the Global Catalog" n="1184">' Verify Whether Attributes are Indexed and-or in the Global Catalog


Const IS_INDEXED = 1
 
Set objConnection = CreateObject("ADODB.Connection")
objConnection.Open "Provider=ADsDSOObject;"
 
Set objCommand = CreateObject("ADODB.Command")
objCommand.ActiveConnection = objConnection
 
objCommand.Properties("Sort On") = "isMemberOfPartialAttributeSet" 
 
objCommand.CommandText = _
    "&amp;lt;LDAP://CN=Schema,CN=Configuration,DC=fabrikam,DC=com&amp;gt;;" &amp;amp; _
        "(objectClass=attributeSchema);" &amp;amp; _
            "lDAPDisplayName, isMemberOfPartialAttributeSet,searchFlags;onelevel"
 
Set objRecordSet = objCommand.Execute
 
Do Until objRecordSet.EOF
    WScript.Echo objRecordset.Fields("lDAPDisplayName") 
    If objRecordset.Fields("isMemberOfPartialAttributeSet")Then
        WScript.Echo "In the global catalog."
    Else
        WScript.Echo "Not in the global catlog."
    End If
 
    If IS_INDEXED AND objRecordset.Fields("searchFlags") Then
        WScript.Echo "Is indexed."
    Else
        WScript.Echo "Is not indexed."
    End If
    Wscript.Echo VbCrLf
    objRecordSet.MoveNext
Loop
 
objConnection.Close
</vb></dd>
		<dd name="Comments" code="comments" desc="Sample scripts for working with comments included in VBScript scripts."><vb name="Create  Documentation Based on Script Comments" n="1185">' Create  Documentation Based on Script Comments


Const ForReading = 1
Const ForWriting = 2

Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objScriptFile = objFSO.OpenTextFile("c:\scripts\Service_Monitor.vbs", _
    ForReading)
Set objCommentFile = objFSO.OpenTextFile("c:\scripts\Comments.txt", _ 
    ForWriting, TRUE)

Do While objScriptFile.AtEndOfStream &amp;lt;&amp;gt; TRUE
    strCurrentLine = objScriptFile.ReadLine
    intIsComment = Instr(1,strCurrentLine,"'*")
    If intIsComment &amp;gt; 0 Then
        objCommentFile.Write strCurrentLine &amp;amp; VbCrLf
    End If
Loop

objScriptFile.Close
objCommentFile.Close
</vb><vb name="Delete Debugging Comments" n="1186">' Delete Debugging Comments


Const ForReading = 1
Const ForWriting = 2

Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objTextFile = objFSO.OpenTextFile("C:\Scripts\CreateUser.vbs", ForReading)
 
Do While objTextFile.AtEndOfStream &amp;lt;&amp;gt; true
    strNextLine = objTextFile.Readline
    intCheckForBugComment = Instr(strNextLine, "'* BUG")
    If intCheckForBugComment = 0 Then
        strSavedLines = strSavedLines &amp;amp; strNextLine &amp;amp; VbCrLf
    End If
Loop
 
Set objTextFile = objFSO.OpenTextFile _
    ("c:\scripts\CreateUser.vbs ", ForWriting)
objTextFile.Write strSavedLines 
objTextFile.Close
</vb></dd>
		<dd name="Dates and Times" code="dates" desc="Sample scripts for manipulating dates and times, particularly the UTC times used by WMI."><vb name="Convert WMI Date-Time Values" n="1187">' Convert WMI Date-Time Values


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objOS = objWMIService.ExecQuery("Select * from Win32_OperatingSystem")
 
For Each strOS in objOS
    dtmInstallDate = strOS.InstallDate
    strReturn = WMIDateStringToDate(dtmInstallDate)
    Wscript.Echo strReturn 
Next
 
Function WMIDateStringToDate(dtmInstallDate)
    WMIDateStringToDate = CDate(Mid(dtmInstallDate, 5, 2) &amp;amp; "/" &amp;amp; _
        Mid(dtmInstallDate, 7, 2) &amp;amp; "/" &amp;amp; Left(dtmInstallDate, 4) _
            &amp;amp; " " &amp;amp; Mid (dtmInstallDate, 9, 2) &amp;amp; ":" &amp;amp; _
                Mid(dtmInstallDate, 11, 2) &amp;amp; ":" &amp;amp; Mid(dtmInstallDate, _
                    13, 2))
End Function
</vb><vb name="Convert Seconds To Hours" n="1188">' Convert Seconds To Hours

' Windows NT 4.0 SP4 and later : Yes


intTotalSecs = 15438
intHours = intTotalSecs \ 3600
intMinutes = (intTotalSecs Mod 3600) \ 60
intSeconds = intTotalSecs Mod 60
WScript.Echo "Hours: " &amp;amp; intHours
WScript.Echo "Minutes: " &amp;amp; intMinutes
WScript.Echo "Seconds: " &amp;amp; intSeconds
</vb><vb name="Convert DATETIME to VT_DATE" n="1189">' Convert DATETIME to VT_DATE

' Windows NT 4.0 SP4 and later : No


Set dateTime = CreateObject("WbemScripting.SWbemDateTime")
For Each os In GetObject("winmgmts:").InstancesOf("Win32_OperatingSystem")
    ' the InstallDate property is a CIM_DATETIME. 
    WScript.Echo "Operating system installation date:"
    WScript.Echo "  WMI DATETIME format: " &amp;amp;  os.InstallDate
    dateTime.Value = os.InstallDate
    WScript.Echo "  VT_DATE format: " &amp;amp; dateTime.GetVarDate
Next
</vb><vb name="Convert DATETIME to FILETIME" n="1190">' Convert DATETIME to FILETIME

' Windows NT 4.0 SP4 and later : No


Set dateTime = CreateObject("WbemScripting.SWbemDateTime")
For Each os In GetObject("winmgmts:").InstancesOf("Win32_OperatingSystem")
    WScript.Echo "Operating system installation date:"
    WScript.Echo "  WMI DATETIME format: " &amp;amp;  os.InstallDate
    dateTime.Value = os.InstallDate
    WScript.Echo "  FILETIME format: " &amp;amp; dateTime.GetFileTime 
Next
</vb><vb name="Convert VT_DATE to FILETIME" n="1191">' Convert VT_DATE to FILETIME

' Windows NT 4.0 SP4 and later : No


Set dateTime = CreateObject("WbemScripting.SWbemDateTime")
dateTime.SetVarDate Now
WScript.Echo "Current date and time:"
WScript.Echo "  VT_DATE format: " &amp;amp;  dateTime.GetVarDate
WScript.Echo "  FILETIME format: " &amp;amp; dateTime.GetFileTime
</vb><vb name="Convert VT_DATE to DATETIME" n="1192">' Convert VT_DATE to DATETIME

' Windows NT 4.0 SP4 and later : No


Set dateTime = CreateObject("WbemScripting.SWbemDateTime")
dateTime.SetVarDate Now
WScript.Echo "Current date and time:"
WScript.Echo "  VT_DATE format: " &amp;amp;  dateTime.GetVarDate
WScript.Echo "  DATETIME format: " &amp;amp; dateTime.Value
</vb><vb name="Convert FILETIME to DATETIME" n="1193">' Convert FILETIME to DATETIME

' Windows NT 4.0 SP4 and later : No


Set dateTime = CreateObject("WbemScripting.SWbemDateTime")
strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colMonitorProcess = objWMIService.ExecNotificationQuery _
 ("SELECT * FROM __InstanceOperationEvent " _ 
 &amp;amp; " WITHIN 1 WHERE TargetInstance ISA 'Win32_Process'")

Set objLatestEvent = colMonitorProcess.NextEvent
Wscript.Echo "Event Class: " &amp;amp; objLatestEvent.Path_.Class
WScript.Echo "Event Time:"
WScript.Echo "  FILETIME format: " &amp;amp; objLatestEvent.TIME_CREATED
dateTime.SetFileTime objLatestEvent.TIME_CREATED, False
WScript.Echo "  DATETIME format: " &amp;amp;  dateTime.Value
</vb><vb name="Convert FILETIME to VT_DATE" n="1194">' Convert FILETIME to VT_DATE

' Windows NT 4.0 SP4 and later : No


Set dateTime = CreateObject("WbemScripting.SWbemDateTime")
strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colMonitorProcess = objWMIService.ExecNotificationQuery _
 ("SELECT * FROM __InstanceOperationEvent " _ 
 &amp;amp; " WITHIN 1 WHERE TargetInstance ISA 'Win32_Process'")

Set objLatestEvent = colMonitorProcess.NextEvent
Wscript.Echo "Event Class: " &amp;amp; objLatestEvent.Path_.Class
WScript.Echo "Event Time:"
WScript.Echo "  FILETIME format: " &amp;amp; objLatestEvent.TIME_CREATED
dateTime.SetFileTime objLatestEvent.TIME_CREATED, False
WScript.Echo "  VT_DATE format: " &amp;amp;  dateTime.GetVarDate
</vb></dd>
		<dd name="Dialog Boxes" code="dialogs" desc="Sample scripts for accessing Windows dialog boxes from within a script."><vb name="Locate a File Using a File Open Dialog Box" n="1195">' Locate a File Using a File Open Dialog Box


Set objDialog = CreateObject("UserAccounts.CommonDialog")

objDialog.Filter = "VBScript Scripts|*.vbs|All Files|*.*"
objDialog.FilterIndex = 1
objDialog.InitialDir = "C:\Scripts"
intResult = objDialog.ShowOpen
 
If intResult = 0 Then
    Wscript.Quit
Else
    Wscript.Echo objDialog.FileName
End If
</vb><vb name="Save a File Using a File Save Dialog Box" n="1196">' Save a File Using a File Save Dialog Box


Set objDialog = CreateObject("SAFRCFileDlg.FileSave")

objDialog.FileName = "C:\Scripts\Script1.vbs"
objDialog.FileType = "VBScript Script"
intReturn = objDialog.OpenFileSaveDlg

If intReturn Then
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Set objFile = objFSO.CreateTextFile(objDialog.FileName)
    objFile.WriteLine Date
    objFile.Close
Else
    Wscript.Quit
End If
</vb></dd>
		<dd name="Dictionary Objects" code="diction" desc="Sample scripts demonstrating how to create, populate, and modify arrays using the Script Runtime Dictionary object."><vb name="Add Elements to a Dictionary" n="1197">' Add Elements to a Dictionary


Set objDictionary = CreateObject("Scripting.Dictionary")

objDictionary.Add "Printer 1", "Printing"   
objDictionary.Add "Printer 2", "Offline"
objDictionary.Add "Printer 3", "Printing"
</vb><vb name="Delete All Elements from a Dictionary" n="1198">' Delete All Elements from a Dictionary


Set objDictionary = CreateObject("Scripting.Dictionary")

objDictionary.Add "Printer 1", "Printing"   
objDictionary.Add "Printer 2", "Offline"
objDictionary.Add "Printer 3", "Printing"
colKeys = objDictionary.Keys

Wscript.Echo "First run: "
For Each strKey in colKeys
    Wscript.Echo strKey
Next

objDictionary.RemoveAll
colKeys = objDictionary.Keys

Wscript.Echo VbCrLf &amp;amp; "Second run: "
For Each strKey in colKeys
    Wscript.Echo strKey
Next
</vb><vb name="Delete One Element from a Dictionary" n="1199">' Delete One Element from a Dictionary


Set objDictionary = CreateObject("Scripting.Dictionary")

objDictionary.Add "Printer 1", "Printing"   
objDictionary.Add "Printer 2", "Offline"
objDictionary.Add "Printer 3", "Printing"

colKeys = objDictionary.Keys

Wscript.Echo "First run: " 
For Each strKey in colKeys
    Wscript.Echo strKey
Next
 
objDictionary.Remove("Printer 2")
colKeys = objDictionary.Keys

Wscript.Echo VbCrLf &amp;amp; "Second run: " 
For Each strKey in colKeys
    Wscript.Echo strKey
Next
</vb><vb name="List the Number of Items in a Dictionary" n="1200">' List the Number of Items in a Dictionary


Set objDictionary = CreateObject("Scripting.Dictionary")

objDictionary.Add "Printer 1", "Printing"   
objDictionary.Add "Printer 2", "Offline"
objDictionary.Add "Printer 3", "Printing"
Wscript.Echo objDictionary.Count
</vb><vb name="Verify the Existence of a Dictionary Key" n="1201">' Verify the Existence of a Dictionary Key


Set objDictionary = CreateObject("Scripting.Dictionary")

objDictionary.Add "Printer 1", "Printing"   
objDictionary.Add "Printer 2", "Offline"
objDictionary.Add "Printer 3", "Printing"

If objDictionary.Exists("Printer 4") Then
    Wscript.Echo "Printer 4 is in the Dictionary."
Else
    Wscript.Echo "Printer 4 is not in the Dictionary."
End If
</vb></dd>
		<dd name="Displaying Output" code="output" desc="Sample scripts demonstrating alternate methods of displaying output."><vb name="List Real Time Events in a Command Window" n="1202">' List Real Time Events in a Command Window



strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate,(Security)}!\\" &amp;amp; _
        strComputer &amp;amp; "\root\cimv2")

Set colMonitoredEvents = objWMIService.ExecNotificationQuery _
    ("Select * from __InstanceCreationEvent within 5 where TargetInstance " &amp;amp; _
        "isa 'Win32_NTLogEvent' and TargetInstance.EventType = '1'")

Do
    Set objLatestEvent = colMonitoredEvents.NextEvent
        Wscript.Echo "Record No.: " &amp;amp; _
            objLatestEvent.TargetInstance.RecordNumber
        Wscript.Echo "Event ID: " &amp;amp; objLatestEvent.TargetInstance.EventCode
        Wscript.Echo "Time: " &amp;amp; objLatestEvent.TargetInstance.TimeWritten
        Wscript.Echo "Source: " &amp;amp; objLatestEvent.TargetInstance.SourceName
        Wscript.Echo "Category: " &amp;amp; _
            objLatestEvent.TargetInstance.CategoryString
        Wscript.Echo "Event Type: " &amp;amp; objLatestEvent.TargetInstance.Type
        Wscript.Echo "Computer: " &amp;amp; _
            objLatestEvent.TargetInstance.ComputerName
        Wscript.Echo "User: " &amp;amp; objLatestEvent.TargetInstance.User
        Wscript.echo "Text: " &amp;amp; objLatestEvent.TargetInstance.Message
Loop
</vb><vb name="List Tabular Output in a Command Window" n="1203">' List Tabular Output in a Command Window


Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServices = objWMIService.ExecQuery("Select * from Win32_Service")

For Each objService in colServices
    intPadding = 50 - Len(objService.DisplayName)
    intPadding2 = 17 - Len(objService.StartMode)
    strDisplayName = objService.DisplayName &amp;amp; Space(intPadding)
    strStartMode = objService.StartMode &amp;amp; Space(intPadding2)
    Wscript.Echo strDisplayName &amp;amp; strStartMode &amp;amp; objService.State 
Next
</vb><vb name="Sort WMI Data with Disconnected Record Set" n="1204">' Sort WMI Data with Disconnected Record Set



Dim arrNames()
intSize = 0
strComputer = "."
strClass = "Win32_Process" 'Can use Win32_Service or Win32_Directory
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colItems = objWMIService.ExecQuery("Select * from " &amp;amp; strClass)

For Each objItem in colItems
  ReDim Preserve arrNames(intSize)
  arrNames(intSize) = objItem.Name
  intSize = intSize + 1
Next

Const adVarChar = 200' Set the data type to variant.
Const MaxCharacters = 200
Set DataList = CreateObject("ADOR.Recordset")
DataList.Fields.Append "Name", adVarChar, MaxCharacters
DataList.Open
For Each strName In arrNames
  DataList.AddNew
  DataList("Name") = strName
  DataList.Update
Next
DataList.Sort = "Name"
DataList.MoveFirst
Do Until DataList.EOF
  Wscript.Echo DataList.Fields.Item("Name")
  DataList.MoveNext
Loop
DataList.Close
</vb><vb name="Sort Data with Bubble Sort" n="1205">' Sort Data with Bubble Sort



arrSample = Array(4, 6, 2, 7, 3, 5, 1)
WScript.Echo vbCrLf &amp;amp; "array before"
For Each intNumber In arrSample
  WScript.Echo intNumber
Next
For i = LBound(arrSample) to UBound(arrSample)
  For j = LBound(arrSample) to UBound(arrSample)
    If j &amp;lt;&amp;gt; UBound(arrSample) Then
      If arrSample(j) &amp;gt; arrSample(j + 1) Then
         TempValue = arrSample(j + 1)
         arrSample(j + 1) = arrSample(j)
         arrSample(j) = TempValue
      End If
    End If
  Next
Next
WScript.Echo vbCrLf &amp;amp; "array after"
For Each intNumber In arrSample
  WScript.Echo intNumber
Next
</vb><vb name="Sort Data with Disconnected Record Set" n="1206">' Sort Data with Disconnected Record Set



Const adVarChar = 200' Set the data type to variant.
Const MaxCharacters = 10
arrSample = Array(4, 6, 2, 7, 3, 5, 1)
WScript.Echo vbCrLf &amp;amp; "array before"
For Each intNumber In arrSample
  WScript.Echo intNumber
Next
Set DataList = CreateObject("ADOR.Recordset")
DataList.Fields.Append "Number", adVarChar, MaxCharacters
DataList.Open
For Each intNumber In arrSample
  DataList.AddNew
  DataList("Number") = intNumber
  DataList.Update
Next
DataList.Sort = "Number"
DataList.MoveFirst
WScript.Echo vbCrLf &amp;amp; "array after"
Do Until DataList.EOF
  Wscript.Echo DataList.Fields.Item("Number")
  DataList.MoveNext
Loop
DataList.Close
</vb><vb name="Sort WMI Data with Bubble Sort" n="1207">' Sort WMI Data with Bubble Sort



Dim arrNames()
intSize = 0
strComputer = "."
strClass = "Win32_Process" 'Can use Win32_Service or Win32_Directory
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colItems = objWMIService.ExecQuery("Select * from " &amp;amp; strClass)

For Each objItem in colItems
  ReDim Preserve arrNames(intSize)
  arrNames(intSize) = objItem.Name
  intSize = intSize + 1
Next

For i = (UBound(arrNames) - 1) to 0 Step -1
  For j = 0 to i
    If UCase(arrNames(j)) &amp;gt; UCase(arrNames(j + 1)) Then
      strHolder = arrNames(j + 1)
      arrNames(j + 1) = arrNames(j)
      arrNames(j) = strHolder
    End If
  Next
Next 

For Each strName in arrNames
  Wscript.Echo strName
Next
</vb></dd>
		<dd name="Events and Monitoring" code="events" desc="Sample scripts demonstrating methods for monitoring computers."><vb name="Suppress Multiple Event Notifications" n="1208">' Suppress Multiple Event Notifications


dtmStartTime = Now
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objDiskDrives = objWMIService.ExecQuery _
    ("Select * from Win32_LogicalDisk")

For Each objDrive in objDiskDrives
    If objDrive.FreeSpace &amp;lt; 10000000 Then
        Wscript.Echo "Drive is low on disk space."
    End If
Next

Do
    Set objDiskDrives = objWMIService.ExecQuery _
        ("Select * from Win32_LogicalDisk")
    For Each objDrive in objDiskDrives
        If objDrive.FreeSpace &amp;lt; 10000000 Then
            intElapsedHours = DateDiff("h", dtmStartTime, Now)
            If intElapsedHours &amp;gt;= 1 Then
                Wscript.Echo "Drive is low on disk space." 
                dtmStartTime = Now
            End If  
        End If
    Next
    Wscript.Sleep 1000
Loop
</vb><vb name="Monitor process event" n="1209">' Monitor process event



strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colMonitorProcess = objWMIService.ExecNotificationQuery _
 ("SELECT * FROM __InstanceOperationEvent WITHIN 1" &amp;amp; _
 "WHERE TargetInstance ISA 'Win32_Process'") 
WScript.Echo "Waiting for process change event ..."
Set objLatestEvent = colMonitorProcess.NextEvent
WScript.Echo VbCrLf &amp;amp; objLatestEvent.Path_.Class
Wscript.Echo "Process Name: " &amp;amp; objLatestEvent.TargetInstance.Name
Wscript.Echo "Process ID: " &amp;amp; objLatestEvent.TargetInstance.ProcessId
WScript.Echo "Time: " &amp;amp; Now
</vb><vb name="Monitor process creation event" n="1210">' Monitor process creation event



strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colMonitorProcess = objWMIService.ExecNotificationQuery _
 ("SELECT * FROM __InstanceCreationEvent WITHIN 1" &amp;amp; _
 "WHERE TargetInstance ISA 'Win32_Process'") 
WScript.Echo "Waiting for process to be created ..."
Set objLatestEvent = colMonitorProcess.NextEvent
Wscript.Echo VbCrLf &amp;amp; "Process Name: " &amp;amp; objLatestEvent.TargetInstance.Name
Wscript.Echo "Process ID: " &amp;amp; objLatestEvent.TargetInstance.ProcessId
WScript.Echo "Time: " &amp;amp; Now
</vb><vb name="Monitor process modification event" n="1211">' Monitor process modification event



strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colMonitorProcess = objWMIService.ExecNotificationQuery _
 ("SELECT * FROM __InstanceModificationEvent WITHIN 1" &amp;amp; _
 "WHERE TargetInstance ISA 'Win32_Process'") 
WScript.Echo "Waiting for process to be modified ..."
Set objLatestEvent = colMonitorProcess.NextEvent
Wscript.Echo VbCrLf &amp;amp; "Process Name: " &amp;amp; objLatestEvent.TargetInstance.Name
Wscript.Echo "Process ID: " &amp;amp; objLatestEvent.TargetInstance.ProcessId
WScript.Echo "Time: " &amp;amp; Now
</vb><vb name="Monitor process deletion event" n="1212">' Monitor process deletion event



strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colMonitorProcess = objWMIService.ExecNotificationQuery _
 ("SELECT * FROM __InstanceDeletionEvent WITHIN 1" &amp;amp; _
 "WHERE TargetInstance ISA 'Win32_Process'") 
WScript.Echo "Waiting for process to be terminated ..."
Set objLatestEvent = colMonitorProcess.NextEvent
Wscript.Echo VbCrLf &amp;amp; "Process Name: " &amp;amp; objLatestEvent.TargetInstance.Name
Wscript.Echo "Process ID: " &amp;amp; objLatestEvent.TargetInstance.ProcessId
WScript.Echo "Time: " &amp;amp; Now
</vb><vb name="Get start and stop times for process deletion events" n="1213">' Get start and stop times for process deletion events



strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colMonitorProcess = objWMIService.ExecNotificationQuery _
 ("SELECT * FROM __InstanceDeletionEvent " _ 
 &amp;amp; " Within 1 WHERE TargetInstance ISA 'Win32_Process'")
WScript.Echo "Waiting for a process to stop ..."
Do
  Set objLatestEvent = colMonitorProcess.NextEvent
  WScript.Echo VbCrLf &amp;amp; objLatestEvent.Path_.Class
  Wscript.Echo "Process Name: " &amp;amp; objLatestEvent.TargetInstance.Name
  Wscript.Echo "Process ID: " &amp;amp; objLatestEvent.TargetInstance.ProcessId
  Wscript.Echo "Time Created: " &amp;amp; _
   objLatestEvent.TargetInstance.CreationDate
  WScript.Echo "Time Deleted: " &amp;amp; Now
Loop
</vb><vb name="Get duration of processes from events" n="1214">' Get duration of processes from events



strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colMonitorProcess = objWMIService.ExecNotificationQuery _
 ("SELECT * FROM __InstanceDeletionEvent " _ 
 &amp;amp; " WITHIN 1 WHERE TargetInstance ISA 'Win32_Process'")
WScript.Echo "Waiting for process to stop ..."
Do
  Set objLatestEvent = colMonitorProcess.NextEvent
  Wscript.Echo vbCrLf &amp;amp; "Process Name: " &amp;amp; objLatestEvent.TargetInstance.Name
  Wscript.Echo "Process ID: " &amp;amp; objLatestEvent.TargetInstance.ProcessId
  strDateTime = WMIDateToString(objLatestEvent.TargetInstance.CreationDate)
  Wscript.Echo "Time created: " &amp;amp; strDateTime
  WScript.Echo "Time deleted: " &amp;amp; Now
  intSeconds = DateDiff("s", strDateTime, Now)
  WScript.Echo "Duration: " &amp;amp; intSeconds &amp;amp; " seconds"
Loop

Function WMIDateToString(dtmDate)

WMIDateToString = CDate(Mid(dtmDate, 5, 2) &amp;amp; "/" &amp;amp; _
                  Mid(dtmDate, 7, 2) &amp;amp; "/" &amp;amp; _
                  Left(dtmDate, 4) &amp;amp; " " &amp;amp; _
                  Mid(dtmDate, 9, 2) &amp;amp; ":" &amp;amp; _
                  Mid(dtmDate, 11, 2) &amp;amp; ":" &amp;amp; _
                  Mid(dtmDate, 13, 2))

End Function
</vb><vb name="Get duration of processes from events (Windows XP &amp;amp; Windows Server 2003 only)" n="1215">' Get duration of processes from events (Windows XP &amp;amp; Windows Server 2003 only)



strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colMonitorProcess = objWMIService.ExecNotificationQuery _
 ("SELECT * FROM __InstanceDeletionEvent " _ 
 &amp;amp; " WITHIN 1 WHERE TargetInstance ISA 'Win32_Process'")
WScript.Echo "Waiting for process to stop ..."
Do
  Set objLatestEvent = colMonitorProcess.NextEvent
  Set objDateTime = CreateObject("WbemScripting.SWbemDateTime")
  Wscript.Echo vbCrLf &amp;amp; "Process Name: " &amp;amp; objLatestEvent.TargetInstance.Name
  Wscript.Echo "Process ID: " &amp;amp; objLatestEvent.TargetInstance.ProcessId
  objDateTime.Value = objLatestEvent.TargetInstance.CreationDate
  Wscript.Echo "Time created: " &amp;amp; objDateTime.GetVarDate
  WScript.Echo "Time deleted: " &amp;amp; Now
  intSeconds = DateDiff("s", objDateTime.GetVarDate, Now)
  WScript.Echo "Duration: " &amp;amp; intSeconds &amp;amp; " seconds"
Loop
</vb><vb name="Monitor process trace events" n="1216">' Monitor process trace events



strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
 &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colProcessTrace = objWMIService.ExecNotificationQuery _
 ("SELECT * FROM Win32_ProcessTrace")
WScript.Echo "Waiting for process event ..."
Do
  Set objLatestEvent = colProcessTrace.NextEvent
  WScript.Echo
  Wscript.Echo "Process Name: " &amp;amp; objLatestEvent.ProcessName
  Wscript.Echo "Process ID: " &amp;amp; objLatestEvent.ProcessId
  Wscript.Echo "Time: " &amp;amp; objLatestEvent.TIME_CREATED
Loop
</vb><vb name="Monitor process start trace events." n="1217">' Monitor process start trace events.



strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
 &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colProcessStartTrace = objWMIService.ExecNotificationQuery _
 ("SELECT * FROM Win32_ProcessStartTrace")
WScript.Echo "Waiting for process to start ..."
Do
  Set objLatestEvent = colProcessStartTrace.NextEvent
  WScript.Echo
  Wscript.Echo "Process Name: " &amp;amp; objLatestEvent.ProcessName
  Wscript.Echo "Process ID: " &amp;amp; objLatestEvent.ProcessId
  Wscript.Echo "Time: " &amp;amp; objLatestEvent.TIME_CREATED
Loop
</vb><vb name="Monitor process stop trace events." n="1218">' Monitor process stop trace events.



strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
 &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colProcessStopTrace = objWMIService.ExecNotificationQuery _
 ("SELECT * FROM Win32_ProcessStopTrace")
WScript.Echo "Waiting for process to stop ..."
Do
  Set objLatestEvent = colProcessStopTrace.NextEvent
  WScript.Echo
  Wscript.Echo "Process Name: " &amp;amp; objLatestEvent.ProcessName
  Wscript.Echo "Process ID: " &amp;amp; objLatestEvent.ProcessId
  Wscript.Echo "Time: " &amp;amp; objLatestEvent.TIME_CREATED
'Property is new for Windows Server 2003.
  Wscript.Echo "Exit Code: " &amp;amp; objLatestEvent.ExitStatus
Loop
</vb><vb name="Monitor service modification events" n="1219">' Monitor service modification events



strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colMonitorProcess = objWMIService.ExecNotificationQuery _
 ("SELECT * FROM __InstanceModificationEvent WITHIN 1" &amp;amp; _
 "WHERE TargetInstance ISA 'Win32_Service'") 
WScript.Echo "Waiting for service to be modified ..."
Set objLatestEvent = colMonitorProcess.NextEvent

Do
Set objLatestEvent = colMonitorProcess.NextEvent
Wscript.Echo VbCrLf &amp;amp; "Service Name: " &amp;amp; objLatestEvent.TargetInstance.Name
Wscript.Echo "Status: " &amp;amp; objLatestEvent.TargetInstance.State
Wscript.Echo "Startup Type: " &amp;amp; objLatestEvent.TargetInstance.StartMode
Wscript.Echo "Time: " &amp;amp; Now
Loop
</vb><vb name="Monitor creation event for specific process name" n="1220">' Monitor creation event for specific process name



strComputer = "."
strProcName = "notepad.exe"
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colMonitorProcess = objWMIService.ExecNotificationQuery _
 ("SELECT * FROM __InstanceCreationEvent WITHIN 1" &amp;amp; _
 "WHERE TargetInstance ISA 'Win32_Process' AND TargetInstance.Name='" &amp;amp; _
 strProcName &amp;amp; "'") 
WScript.Echo "Waiting for " &amp;amp; strProcName &amp;amp; " process to be created ..."
Set objLatestEvent = colMonitorProcess.NextEvent
Wscript.Echo VbCrLf &amp;amp; "Process Name: " &amp;amp; objLatestEvent.TargetInstance.Name
Wscript.Echo "Process ID: " &amp;amp; objLatestEvent.TargetInstance.ProcessId
WScript.Echo "Time: " &amp;amp; Now
</vb><vb name="Asynchronously monitor process creation events." n="1221">' Asynchronously monitor process creation events.



strComputer = "."
Set SINK = WScript.CreateObject("WbemScripting.SWbemSink","SINK_")
Set objWMIService = GetObject("winmgmts:" _
 &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
objWMIService.ExecNotificationQueryAsync SINK, _
 "SELECT * FROM __InstanceCreationEvent WITHIN 1 " &amp;amp; _
 "WHERE TargetInstance ISA 'Win32_Process'"
WScript.Echo "Waiting for process to be created ..."
Do
   WScript.Sleep 1000
Loop

Sub SINK_OnObjectReady(objLatestEvent, objAsyncContext)

Wscript.Echo VbCrLf &amp;amp; "Process Name: " &amp;amp; objLatestEvent.TargetInstance.Name
Wscript.Echo "Process ID: " &amp;amp; objLatestEvent.TargetInstance.ProcessID
Wscript.Echo "Time: " &amp;amp; Now

End Sub
</vb><vb name="Asynchronously monitor service modification events." n="1222">' Asynchronously monitor service modification events.



strComputer = "."
Set SINK = WScript.CreateObject("WbemScripting.SWbemSink","SINK_")
Set objWMIService = GetObject("winmgmts:" _
 &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
objWMIService.ExecNotificationQueryAsync SINK, _
 "SELECT * FROM __InstanceModificationEvent WITHIN 1 " &amp;amp; _
 "WHERE TargetInstance ISA 'Win32_Service'"
WScript.Echo "Waiting for service to be modified ..."
Do
   WScript.Sleep 1000
Loop

Sub SINK_OnObjectReady(objLatestEvent, objAsyncContext)

Wscript.Echo VbCrLf &amp;amp; "Service Name: " &amp;amp; objLatestEvent.TargetInstance.Name
Wscript.Echo "Status: " &amp;amp; objLatestEvent.TargetInstance.State
Wscript.Echo "Startup Type: " &amp;amp; objLatestEvent.TargetInstance.StartMode
Wscript.Echo "Time: " &amp;amp; Now

End Sub
</vb><vb name="Asynchronously monitor process start trace events." n="1223">' Asynchronously monitor process start trace events.



strComputer = "."
Set SINK = WScript.CreateObject("WbemScripting.SWbemSink","SINK_")
Set objWMIService = GetObject("winmgmts:" _
 &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
objWMIService.ExecNotificationQueryAsync SINK, _
 "SELECT * FROM Win32_ProcessStartTrace"
WScript.Echo "Waiting for process to start ..."
Do
   WScript.Sleep 1000
Loop

Sub SINK_OnObjectReady(objLatestEvent, objAsyncContext)

Wscript.Echo VbCrLf &amp;amp; "Process Name: " &amp;amp; objLatestEvent.ProcessName
Wscript.Echo "Process ID: " &amp;amp; objLatestEvent.ProcessId
Wscript.Echo "Time: " &amp;amp; Now

End Sub
</vb></dd>
		<dd name="Masking Passwords" code="password" desc="Sample scripts demonstrating methods for masking passwords."><vb name="Mask Command Line Passwords" n="1224">' Mask Command Line Passwords


Set objPassword = CreateObject("ScriptPW.Password") 
WScript.StdOut.Write "Please enter your password:" 

strPassword = objPassword.GetPassword() 
Wscript.Echo
Wscript.Echo "Your password is: " &amp;amp; strPassword
</vb><vb name="Mask Passwords Using Internet Explorer" n="1225">' Mask Passwords Using Internet Explorer


Set objExplorer = WScript.CreateObject _
    ("InternetExplorer.Application", "IE_")

objExplorer.Navigate "file:///c:\scripts\password.htm"   
objExplorer.Visible = 1             
objExplorer.ToolBar = 0
objExplorer.StatusBar = 0
objExplorer.Width=400
objExplorer.Height = 250 
objExplorer.Left = 0
objExplorer.Top = 0

Do While (objExplorer.Document.Body.All.OKClicked.Value = "")
    Wscript.Sleep 250                 
Loop 

strPassword = objExplorer.Document.Body.All.PasswordBox.Value
objExplorer.Quit

Wscript.Sleep 250
Wscript.Echo strPassword
</vb></dd>
		<dd name="Regular Expressions" code="regexp" desc="Sample scripts demonstrating how to use VBScript's RegExp object to work with regular expressions."><vb name="Match File Names in Directory Against Regular Expression" n="1226">' Match File Names in Directory Against Regular Expression



Set objFS = CreateObject("Scripting.FileSystemObject")
Set objShell = CreateObject("WScript.Shell")
strCurrentDirectory = objShell.CurrentDirectory

Set objFolder = objFS.GetFolder(strCurrentDirectory)
Set colFiles = objFolder.Files

Set objRE = New RegExp
objRE.Global     = True
objRE.IgnoreCase = False
objRE.Pattern    = WScript.Arguments(0)

For Each objFile In colFiles
   bMatch = objRE.Test(objFile.Name)
   If bMatch Then
      WScript.Echo objFile.Name
   End If
Next
</vb><vb name="Match Content in a File Against a Regular Expression" n="1227">' Match Content in a File Against a Regular Expression



strFileName = "C:\scripts\test.txt"
Set objFS = CreateObject("Scripting.FileSystemObject")

Set objTS = objFS.OpenTextFile(strFileName)
strFileContents = objTS.ReadAll
WScript.Echo "Searching Within: "
WScript.Echo strFileContents
objTS.Close

Set objRE = New RegExp
objRE.Global     = True
objRE.IgnoreCase = False
objRE.Pattern    = WScript.Arguments(0)

Set colMatches = objRE.Execute(strFileContents)
WScript.Echo vbNewLine &amp;amp; "Resulting Matches:"
For Each objMatch In colMatches
   WScript.Echo "At position " &amp;amp; objMatch.FirstIndex &amp;amp; " matched " &amp;amp; objMatch.Value
Next
</vb></dd>
		<dd name="Progress Bars" code="progress" desc="Sample scripts demonstrating methods for displaying pseudo-progress bars in a script."><vb name="Track Script Progress in a Command Window" n="1228">' Track Script Progress in a Command Window


Wscript.Echo "Processing information. This might take several minutes."

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colServices = objWMIService.ExecQuery("Select * from Win32_Service")

For Each objService in colServices
    Wscript.StdOut.Write(".")
Next

Wscript.StdOut.WriteLine
Wscript.Echo "Service information processed."
</vb><vb name="Track Script Progress Using Internet Explorer" n="1229">' Track Script Progress Using Internet Explorer



Set objExplorer = WScript.CreateObject("InternetExplorer.Application")
objExplorer.Navigate "about:blank"   
objExplorer.ToolBar = 0
objExplorer.StatusBar = 0
objExplorer.Width=400
objExplorer.Height = 200 
objExplorer.Left = 0
objExplorer.Top = 0

Do While (objExplorer.Busy)
    Wscript.Sleep 200
Loop    

objExplorer.Visible = 1             
objExplorer.Document.Body.InnerHTML = "Retrieving service information. " _
    &amp;amp; "This might take several minutes to complete."

strComputer = "."
Set colServices = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2"). _
    ExecQuery("Select * from Win32_Service")
For Each objService in colServices
    Wscript.Sleep 200
Next

objExplorer.Document.Body.InnerHTML = "Service information retrieved."
Wscript.Sleep 3000
objExplorer.Quit
</vb></dd>
		<dd name="Retrieving Input" code="input" desc="Sample scripts demonstrating ways (such as text files and command-line arguments) to get input into a script."><vb name="Read Arguments from a Text File" n="1230">' Read Arguments from a Text File


Const ForReading = 1

Set objDictionary = CreateObject("Scripting.Dictionary")
Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objTextFile = objFSO.OpenTextFile("c:\scripts\servers.txt", ForReading)
i = 0

Do Until objTextFile.AtEndOfStream 
    strNextLine = objTextFile.Readline
    objDictionary.Add i, strNextLine
    i = i + 1
Loop

For Each objItem in objDictionary
    Set colServices = GetObject("winmgmts://" &amp;amp; _
        objDictionary.Item(objItem) _
            &amp;amp; "").ExecQuery("Select * from Win32_Service")
    Wscript.Echo colServices.Count
Next
</vb><vb name="Read Arguments from an Active Directory Container" n="1231">' Read Arguments from an Active Directory Container


Set objDictionary = CreateObject("Scripting.Dictionary")

i = 0
Set objOU = GetObject("LDAP://CN=Computers, DC=fabrikam, DC=com")
objOU.Filter = Array("Computer")

For Each objComputer in objOU 
    objDictionary.Add i, objComputer.CN
    i = i + 1
Next

For Each objItem in objDictionary
    Set colServices = GetObject("winmgmts://" &amp;amp; _
        objDictionary.Item(objItem) _
            &amp;amp; "").ExecQuery("Select * from Win32_Service")
    Wscript.Echo colServices.Count
Next
</vb><vb name="Use a Text  File as a Command Line Argument" n="1232">' Use a Text  File as a Command Line Argument


Const ForReading = 1
Set objArgs = WScript.Arguments

Set objDictionary = CreateObject("Scripting.Dictionary")
Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objTextFile = objFSO.OpenTextFile(objArgs(0), ForReading)
i = 0
 
Do While objTextFile.AtEndOfStream &amp;lt;&amp;gt; True
  strNextLine = objTextFile.Readline
  objDictionary.Add i, strNextLine
  i = i + 1
Loop
 
For Each objItem in objDictionary
  Set colServices = GetObject("winmgmts://" &amp;amp; objDictionary.Item(objItem) _
      &amp;amp; "").ExecQuery("Select * from Win32_Service")
  Wscript.Echo colServices.Count
Next
</vb></dd>
		<dd name="Retrieving Internet Resources" code="intnet" desc="Sample scripts demonstrating methods of retrieving information from Web pages and RSS feeds."><vb name="List the Contents of a Web Page" n="1233">' List the Contents of a Web Page


url="http://www.microsoft.com"
Set objHTTP = CreateObject("MSXML2.XMLHTTP")

Call objHTTP.Open("GET", url, FALSE)
objHTTP.Send

WScript.Echo(objHTTP.ResponseText)
</vb><vb name="Save an RSS Feed to a Text File" n="1234">' Save an RSS Feed to a Text File


Const ForWriting = 2

strURL="http://blogs.msdn.com/gstemp/Rss.aspx"
Set objHTTP = CreateObject("MSXML2.XMLHTTP") 
Call objHTTP.Open("GET", strURL, FALSE) 
objHTTP.Send

Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFile = objFSO.CreateTextFile _
    ("C:\Scripts\scripting_guys.xml", ForWriting)
objFile.Write objHTTP.ResponseText
objFile.Close
</vb></dd>
		<dd name="Searching Active Directory" code="searchad" desc="Sample scripts showing techniques and queries useful in searching Active Directory."><vb name="Add Specific Users to a Group" n="1235">' Add Specific Users to a Group


On Error Resume Next

Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand = CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection
objCommand.CommandText = _
    "SELECT ADsPath FROM 'LDAP://DC=fabrikam,DC=com' " _
        &amp;amp; "WHERE objectCategory='User' AND Title='Accountant'"  
objCommand.Properties("Page Size") = 1000
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 
Set objRecordSet = objCommand.Execute

Set objGroup = GetObject _
    ("LDAP://cn=Accountants,ou=NA,dc=fabrikam,dc=com")
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    objGroup.Add(objRecordSet.Fields("ADsPath").Value)
    objRecordSet.MoveNext
Loop
</vb><vb name="Create a Department Phone List" n="1236">' Create a Department Phone List


On Error Resume Next

Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand = CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection
objCommand.CommandText = _
    "SELECT givenName,SN,telephoneNumber FROM " &amp;amp; _
        "'LDAP://DC=fabrikam,DC=com' " _
            &amp;amp; "WHERE objectCategory='User' AND department='Finance'"  
objCommand.Properties("Page Size") = 1000
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("SN").Value &amp;amp; ", " &amp;amp; _
        objRecordSet.Fields("givenName").Value &amp;amp; " " &amp;amp; _
            objRecordSet.Fields("telephoneNumber").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Perform a Search Using Alternate Credentials" n="1237">' Perform a Search Using Alternate Credentials


On Error Resume Next

Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Properties("User ID") = "Administrator"
objConnection.Properties("Password") = "+77m5trgJo!"
objConnection.Properties("Encrypt Password") = TRUE
objConnection.Properties("ADSI Flag") = 1
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 

objCommand.CommandText = _
    "SELECT Name FROM 'LDAP://dc=fabrikam,dc=com' WHERE objectCategory='user'"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("Name").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Search for a SAM Account Name" n="1238">' Search for a SAM Account Name


On Error Resume Next

Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand = CreateObject("ADODB.Command")
objConnection.Provider = ("ADsDSOObject")
objConnection.Open "Active Directory Provider"
objCommand.ActiveConnection = objConnection
objCommand.CommandText = "SELECT samAccountName FROM " &amp;amp; _
    "'LDAP://dc=fabrikam,dc=com' " &amp;amp; _
        "WHERE samAccountName = 'kenmyer'"
objCommand.Properties("SearchScope") = ADS_SCOPE_SUBTREE
Set objRecordSet = objCommand.Execute

If objRecordSet.RecordCount = 0 Then
    Wscript.Echo "The samAccount name is not being used."
Else
    Wscript.Echo "The samAccount name is being used."
End If
</vb><vb name="Search for All Groups in Active Directory" n="1239">' Search for All Groups in Active Directory


On Error Resume Next

Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 

objCommand.CommandText = _
    "SELECT cn FROM 'LDAP://dc=fabrikam,dc=com' WHERE " _
        &amp;amp; "objectCategory='group'"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("cn").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Search for All Non-User Accounts" n="1240">' Search for All Non-User Accounts


On Error Resume Next

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000

objCommand.CommandText = _
    "&amp;lt;LDAP://dc=fabrikam,dc=com&amp;gt;;(!(objectCategory=User));Name;Subtree"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("Name").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Search for All Users in Active Directory" n="1241">' Search for All Users in Active Directory


On Error Resume Next

Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 

objCommand.CommandText = _
    "SELECT Name FROM 'LDAP://dc=fabrikam,dc=com' WHERE objectCategory='user'"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("Name").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Search for All Users That Have a Phone Number" n="1242">' Search for All Users That Have a Phone Number


On Error Resume Next

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000

objCommand.CommandText = _
    "&amp;lt;LDAP://dc=fabrikam,dc=com&amp;gt;;(&amp;amp;(objectCategory=User)" &amp;amp; _
        "(telephoneNumber=*));Name;Subtree"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("Name").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Search for All Users Using an LDAP Query" n="1243">' Search for All Users Using an LDAP Query


On Error Resume Next

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000

objCommand.CommandText = _
    "&amp;lt;LDAP://dc=fabrikam,dc=com&amp;gt;;(objectCategory=User);Name;Subtree"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("Name").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Search for Attributes in the Global Catalog" n="1244">' Search for Attributes in the Global Catalog


On Error Resume Next

Const IS_INDEXED = 1
Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
objConnection.Open "Provider=ADsDSOObject;"
Set objCommand = CreateObject("ADODB.Command")
objCommand.ActiveConnection = objConnection
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE
objCommand.CommandText = _
    "SELECT lDAPDisplayName,isMemberOfPartialAttributeSet,searchFlags " _
        &amp;amp; "FROM 'LDAP://CN=Schema,CN=Configuration,DC=fabrikam,DC=com'"_
            &amp;amp; " WHERE objectClass='attributeSchema'"
Set objRecordSet = objCommand.Execute

Do Until objRecordSet.EOF
    WScript.Echo objRecordset.Fields("lDAPDisplayName") 
    If objRecordset.Fields("isMemberOfPartialAttributeSet") Then
        WScript.Echo "In the global catalog."
    End If
    If IS_INDEXED AND objRecordset.Fields("searchFlags") Then
        WScript.Echo "Indexed."
    End If
    Wscript.Echo
    objRecordSet.MoveNext
Loop
objConnection.Close
</vb><vb name="Search for Computers Running Windows 2003" n="1245">' Search for Computers Running Windows 2003


On Error Resume Next

Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand = CreateObject("ADODB.Command")
objConnection.Provider = ("ADsDSOObject")
objConnection.Open "Active Directory Provider"
objCommand.ActiveConnection = objConnection
objCommand.Properties("Page Size") = 1000 
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE  
objCommand.CommandText = _ 
    "SELECT Name, operatingSystemVersion FROM " _   
        &amp;amp; "'LDAP://DC=fabrikam,DC=com'" _ 
            &amp;amp; " WHERE objectClass='computer' AND " _
                &amp;amp;"operatingSystemVersion = '5.2 (3790)'" 
Set objRecordSet = objCommand.Execute 
objRecordSet.MoveFirst 

Do Until objRecordSet.EOF 
    Wscript.Echo "Name: " &amp;amp; objRecordSet.Fields("Name").Value 
    objRecordSet.MoveNext 
Loop
</vb><vb name="Search for Global Security Groups" n="1246">' Search for Global Security Groups


On Error Resume Next

Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 

objCommand.CommandText = _
    "SELECT cn FROM 'LDAP://dc=fabrikam,dc=com' WHERE " _
        &amp;amp; "objectCategory='group' AND " _
            &amp;amp; "groupType= -2147483646 "  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("cn").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Search for Multiple Attributes" n="1247">' Search for Multiple Attributes


On Error Resume Next

Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 

objCommand.CommandText = _
    "SELECT AdsPath,givenName,SN,title,telephoneNumber " _
        &amp;amp; "FROM 'LDAP://dc=fabrikam,dc=com' WHERE " _
            &amp;amp; "objectCategory='user'"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("ADsPath").Value
    Wscript.Echo objRecordSet.Fields("givenName").Value
    Wscript.Echo objRecordSet.Fields("SN").Value
    Wscript.Echo objRecordSet.Fields("title").Value
    Wscript.Echo _
        objRecordSet.Fields("telephoneNumber").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Search for User Accounts That Have Been Disabled" n="1248">' Search for User Accounts That Have Been Disabled


On Error Resume Next

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000

objCommand.CommandText = _
    "&amp;lt;LDAP://dc=fabrikam,dc=com&amp;gt;;(&amp;amp;(objectCategory=User)" &amp;amp; _
        "(userAccountControl:1.2.840.113556.1.4.803:=2));Name;Subtree"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("Name").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Search for User Phone Numbers Beginning with 425" n="1249">' Search for User Phone Numbers Beginning with 425


On Error Resume Next

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000

objCommand.CommandText = _
    "&amp;lt;LDAP://dc=fabrikam,dc=com&amp;gt;;(&amp;amp;(objectCategory=User)" &amp;amp; _
        "(telephoneNumber=425*));Name;Subtree"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("Name").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Search for Users Accounts That are Locked Out" n="1250">' Search for Users Accounts That are Locked Out


On Error Resume Next

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000

objCommand.CommandText = _
    "&amp;lt;LDAP://dc=fabrikam,dc=com&amp;gt;;(&amp;amp;(objectCategory=User)" &amp;amp; _
        "(userAccountControl:1.2.840.113556.1.4.803:=10));Name;Subtree"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("Name").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Search for Users in a Specific Department" n="1251">' Search for Users in a Specific Department


On Error Resume Next

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000

objCommand.CommandText = _
    "&amp;lt;LDAP://dc=fabrikam,dc=com&amp;gt;;(&amp;amp;(objectCategory=User)" &amp;amp; _
        "(department=Finance));Name;Subtree"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("Name").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Search for Users in One of Two Departments" n="1252">' Search for Users in One of Two Departments


On Error Resume Next

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000

objCommand.CommandText = _
    "&amp;lt;LDAP://dc=fabrikam,dc=com&amp;gt;;(|(department=Finance)" &amp;amp; _
        "(department=Research));Name;Subtree"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("Name").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Search for Users Not in a Specific Department" n="1253">' Search for Users Not in a Specific Department


On Error Resume Next

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000

objCommand.CommandText = _
    "&amp;lt;LDAP://dc=fabrikam,dc=com&amp;gt;;(&amp;amp;(objectCategory=User)" &amp;amp; _
        "(!(department=Finance)));Name;Subtree"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("Name").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Search For Users with Non-Expiring Passwords" n="1254">' Search For Users with Non-Expiring Passwords


On Error Resume Next

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000

objCommand.CommandText = _
    "&amp;lt;LDAP://dc=fabrikam,dc=com&amp;gt;;(&amp;amp;(objectCategory=User)" &amp;amp; _
        "(userAccountControl:1.2.840.113556.1.4.803:=65536));Name;Subtree"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("Name").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Search for Users Without a Phone Number" n="1255">' Search for Users Without a Phone Number


On Error Resume Next

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000

objCommand.CommandText = _
    "&amp;lt;LDAP://dc=fabrikam,dc=com&amp;gt;;(&amp;amp;(objectCategory=User)" &amp;amp; _
        "(!(telephoneNumber=*)));Name;Subtree"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("Name").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Sort a Recordset by User Name" n="1256">' Sort a Recordset by User Name


On Error Resume Next

Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 
objCommand.Properties("Sort on") = "Name"

objCommand.CommandText = _
    "SELECT Name FROM 'LDAP://dc=fabrikam,dc=com' WHERE " _
        &amp;amp; "objectCategory='user'"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("Name").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Use a Search to Modify Objects" n="1257">' Use a Search to Modify Objects


On Error Resume Next

Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 

objCommand.CommandText = _
    "SELECT ADsPath FROM 'LDAP://dc=fabrikam,dc=com' WHERE " _
        &amp;amp; "objectCategory='user' AND Department='Accounting'"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    strPath = objRecordSet.Fields("AdsPath").Value
    Set objUser = GetObject(strPath)
    objUser.Department = "Finance"
    objUser.SetInfo
objRecordSet.MoveNext
Loop
</vb><vb name="Use a Wildcard in a SQL Query" n="1258">' Use a Wildcard in a SQL Query


On Error Resume Next

Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 

objCommand.CommandText = _
    "SELECT cn FROM 'LDAP://dc=fabrikam,dc=com' WHERE " _
        &amp;amp; "objectCategory='group' AND cn = 'HR*' "  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("cn").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Use an LDAP OR Filter in a Search" n="1259">' Use an LDAP OR Filter in a Search


On Error Resume Next

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"
Set objCommand.ActiveConnection = objConnection

objCommand.Properties("Page Size") = 1000

objCommand.CommandText = _
    "&amp;lt;LDAP://dc=fabrikam,dc=com&amp;gt;;(&amp;amp;(objectCategory=User)" &amp;amp; _
        "(|(department=Finance)(department=Research)));Name;Subtree"  
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields("Name").Value
    objRecordSet.MoveNext
Loop
</vb></dd>
		<dd name="Text Files" code="text" desc="Sample scripts for creating and for reading and writing text files using the FileSystemObject."><vb name="Auto-Generate a File Name" n="1260">' Auto-Generate a File Name


Set objFSO = CreateObject("Scripting.FileSystemObject")

For i = 1 to 10
    strTempFile = objFSO.GetTempName
    Wscript.Echo strTempFile
Next
</vb><vb name="Create a Text File" n="1261">' Create a Text File


Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFile = objFSO.CreateTextFile("C:\FSO\ScriptLog.txt")
</vb><vb name="Create and Auto-Name a Text File" n="1262">' Create and Auto-Name a Text File


Set objFSO = CreateObject("Scripting.FileSystemObject")

strPath = "C:\FSO"
strFileName = objFSO.GetTempName
strFullName = objFSO.BuildPath(strPath, strFileName)
Set objFile = objFSO.CreateTextFile(strFullName)
objFile.Close
objFSO.DeleteFile(strFullName)
</vb><vb name="Modify the ODBC Default Value to Comma-Delimited When Reading Text Files" n="1263">' Modify the ODBC Default Value to Comma-Delimited When Reading Text Files


Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

strComputer = "."
Set objReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\default:StdRegProv")

strKeyPath = "SOFTWARE\Microsoft\Jet\4.0\Engines\Text"
strValueName = "Format"
strValue = "CSVDelimited"
objReg.SetStringValue _
    HKEY_LOCAL_MACHINE,strKeyPath,strValueName,strValue
</vb><vb name="Modify the ODBC Default Value to Tab-Delimited When Reading Text Files" n="1264">' Modify the ODBC Default Value to Tab-Delimited When Reading Text Files


Const HKEY_LOCAL_MACHINE = &amp;amp;H80000002

strComputer = "."
Set objReg=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\default:StdRegProv")

strKeyPath = "SOFTWARE\Microsoft\Jet\4.0\Engines\Text"
strValueName = "Format"
strValue = "TabDelimited"
objReg.SetStringValue HKEY_LOCAL_MACHINE,strKeyPath,strValueName,strValue
</vb><vb name="Read a CSV File Using Database Techniques" n="1265">' Read a CSV File Using Database Techniques


On Error Resume Next

Const adOpenStatic = 3
Const adLockOptimistic = 3
Const adCmdText = &amp;amp;H0001

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

strPathtoTextFile = "C:\Databases\"

objConnection.Open "Provider=Microsoft.Jet.OLEDB.4.0;" &amp;amp; _
          "Data Source=" &amp;amp; strPathtoTextFile &amp;amp; ";" &amp;amp; _
          "Extended Properties=""text;HDR=YES;FMT=Delimited"""

objRecordset.Open "SELECT * FROM PhoneList.csv", _
          objConnection, adOpenStatic, adLockOptimistic, adCmdText

Do Until objRecordset.EOF
    Wscript.Echo "Name: " &amp;amp; objRecordset.Fields.Item("Name")
    Wscript.Echo "Department: " &amp;amp; _
        objRecordset.Fields.Item("Department")
    Wscript.Echo "Extension: " &amp;amp; objRecordset.Fields.Item("Extension")   
    objRecordset.MoveNext
Loop
</vb><vb name="Read a Fixed-Width Text File Using Database Techniques" n="1266">' Read a Fixed-Width Text File Using Database Techniques


On Error Resume Next

Const adOpenStatic = 3
Const adLockOptimistic = 3
Const adCmdText = &amp;amp;H0001

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

strPathtoTextFile = "C:\Databases\"

objConnection.Open "Provider=Microsoft.Jet.OLEDB.4.0;" &amp;amp; _
          "Data Source=" &amp;amp; strPathtoTextFile &amp;amp; ";" &amp;amp; _
          "Extended Properties=""text;HDR=YES;FMT=FixedLength"""

objRecordset.Open "SELECT * FROM PhoneList.txt", _
          objConnection, adOpenStatic, adLockOptimistic, adCmdText

Do Until objRecordset.EOF
    Wscript.Echo "Name: " &amp;amp; objRecordset.Fields.Item("FirstName")
    Wscript.Echo "Department: " &amp;amp; objRecordset.Fields.Item("LastName")
    Wscript.Echo "Extension: " &amp;amp; objRecordset.Fields.Item("ID")   
    objRecordset.MoveNext
Loop
</vb><vb name="Read a Text File Character-by-Character" n="1267">' Read a Text File Character-by-Character


Set objFSO = CreateObject("Scripting.FileSystemObject")

Set objFile = objFSO.OpenTextFile("C:\FSO\New Text Document.txt", 1)
Do Until objFile.AtEndOfStream
    strCharacters = objFile.Read(1)
    Wscript.Echo strCharacters
Loop
</vb><vb name="Read a Text File from the Bottom Up" n="1268">' Read a Text File from the Bottom Up


Dim arrFileLines()
i = 0

Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFile = objFSO.OpenTextFile("C:\FSO\ScriptLog.txt", 1)

Do Until objFile.AtEndOfStream
     Redim Preserve arrFileLines(i)
     arrFileLines(i) = objFile.ReadLine
     i = i + 1
Loop

objFile.Close

For l = Ubound(arrFileLines) to LBound(arrFileLines) Step -1
    Wscript.Echo arrFileLines(l)
Next
</vb><vb name="Read a Text File into an Array" n="1269">' Read a Text File into an Array


Const ForReading = 1

Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objTextFile = objFSO.OpenTextFile _
    ("c:\scripts\servers and services.txt", ForReading)

Do Until objTextFile.AtEndOfStream
    strNextLine = objTextFile.Readline
    arrServiceList = Split(strNextLine , ",")
    Wscript.Echo "Server name: " &amp;amp; arrServiceList(0)
    For i = 1 to Ubound(arrServiceList)
        Wscript.Echo "Service: " &amp;amp; arrServiceList(i)
    Next
Loop
</vb><vb name="Verify the Size of a File Before Reading It" n="1270">' Verify the Size of a File Before Reading It


Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFile = objFSO.GetFile("C:\Windows\Netlogon.log")

If objFile.Size &amp;gt; 0 Then
    Set objReadFile = objFSO.OpenTextFile("C:\Windows\Netlogon.log", 1)
    strContents = objReadFile.ReadAll
    Wscript.Echo strContents
    objReadFile.Close
Else
    Wscript.Echo "The file is empty."
End If
</vb><vb name="Writing Data to a Text File" n="1271">' Writing Data to a Text File


Const ForAppending = 8

Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objTextFile = objFSO.OpenTextFile _
    ("c:\scripts\service_status.txt", ForAppending, True)

Set objWMIService=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\cimv2")
Set colServices = objWMIService.ExecQuery("Select * from Win32_Service")

For Each objService in colServices    
    objTextFile.WriteLine(objService.DisplayName &amp;amp; vbTab &amp;amp; _
        objService.State)
Next
objTextFile.Close
</vb><vb name="Writing String Content to End of Existing Text File" n="1272">' Writing String Content to End of Existing Text File



Const FOR_APPENDING = 8
strFileName = "C:\scripts\testfile.txt"
strContent  = "sample string content"

Set objFS = CreateObject("Scripting.FileSystemObject")
Set objTS = objFS.OpenTextFile(strFileName,FOR_APPENDING)
objTS.Write strContent
</vb><vb name="Writing String Content to Beginning of Existing Text File" n="1273">' Writing String Content to Beginning of Existing Text File



Const FOR_READING = 1
Const FOR_WRITING = 2

strFileName = "C:\scripts\test.txt"
strNewContent  = "sample string content"

Set objFS = CreateObject("Scripting.FileSystemObject")
Set objTS = objFS.OpenTextFile(strFileName,FOR_READING)
strContents = objTS.ReadAll
objTS.Close
Set objTS = objFS.OpenTextFile(strFileName,FOR_WRITING)
objTS.WriteLine strNewContent
objTS.Write strContents
</vb><vb name="Writing String Content Following n-th Line of Existing Text File" n="1274">' Writing String Content Following n-th Line of Existing Text File



Const FOR_READING = 1
Const FOR_WRITING = 2

strFileName = "C:\scripts\test.txt"
strNewContent = "sample string content"
iInsertAfterLineNumber = 3

Set objFS = CreateObject("Scripting.FileSystemObject")
Set objTS = objFS.OpenTextFile(strFileName,FOR_READING)
strContents = objTS.ReadAll
objTS.Close

Set objTS = objFS.OpenTextFile(strFileName,FOR_WRITING)
arrLines  = Split(strContents, vbNewLine)

For i=0 To UBound(arrLines)
   If i = iInsertAfterLineNumber Then
      objTS.WriteLine strNewContent
   End If
   objTS.WriteLine arrLines(i)
Next
</vb><vb name="Deleting Files in a Directory with Names That Match a Regular Expression" n="1275">' Deleting Files in a Directory with Names That Match a Regular Expression



strFolderName = "C:\scripts\textfiles\delete\"
strREPattern = "log\d\d_\d\d05\.txt"

Set objFS = CreateObject("Scripting.FileSystemObject")

Set objFolder = objFS.GetFolder(strFolderName)
Set objRE = new RegExp
objRE.Pattern    = strREPattern
objRE.IgnoreCase = True

For Each objFile In objFolder.Files
   If objRE.Test(objFile.Name) Then
      objFS.DeleteFile(strFolderName &amp;amp; objFile.Name)
   End If
Next
</vb><vb name="Read n-th Line of a Text File" n="1276">' Read n-th Line of a Text File



Const FOR_READING = 1
strFilePath = "C:\scripts\test.txt"
iLineNumber = 5

Set objFS = CreateObject("Scripting.FileSystemObject")
Set objTS = objFS.OpenTextFile(strFilePath, FOR_READING)

For i=1 To (iLineNumber-1)
   objTS.SkipLine
Next

WScript.Echo objTS.Readline
</vb><vb name="Delete n-th Line of a Text File" n="1277">' Delete n-th Line of a Text File



Const FOR_READING = 1
Const FOR_WRITING = 2
strFileName = "C:\scripts\test.txt"
iLineNumber = 3

Set objFS = CreateObject("Scripting.FileSystemObject")
Set objTS = objFS.OpenTextFile(strFileName, FOR_READING)
strContents = objTS.ReadAll
objTS.Close

Set objTS = objFS.OpenTextFile(strFileName, FOR_WRITING)

arrLines = Split(strContents,vbNewLine)
For i=0 To UBound(arrLines)
   If i&amp;lt;&amp;gt; (iLineNumber-1) Then
      objTS.WriteLine arrLines(i)
   End If
Next
</vb><vb name="Delete First n Lines of a Text File" n="1278">' Delete First n Lines of a Text File



Const FOR_READING = 1
Const FOR_WRITING = 2
strFileName = "C:\scripts\test.txt"
iNumberOfLinesToDelete = 5

Set objFS = CreateObject("Scripting.FileSystemObject")
Set objTS = objFS.OpenTextFile(strFileName, FOR_READING)
strContents = objTS.ReadAll
objTS.Close

arrLines = Split(strContents, vbNewLine)
Set objTS = objFS.OpenTextFile(strFileName, FOR_WRITING)

For i=0 To UBound(arrLines)
   If i &amp;gt; (iNumberOfLinesToDelete - 1) Then
      objTS.WriteLine arrLines(i)
   End If
Next
</vb><vb name="Delete Last n Lines of a Text File" n="1279">' Delete Last n Lines of a Text File



Const FOR_READING = 1
Const FOR_WRITING = 2
strFileName = "C:\scripts\test.txt"
iNumberOfLinesToDelete = 5

Set objFS = CreateObject("Scripting.FileSystemObject")
Set objTS = objFS.OpenTextFile(strFileName, FOR_READING)
strContents = objTS.ReadAll
objTS.Close

arrLines = Split(strContents, vbNewLine)
Set objTS = objFS.OpenTextFile(strFileName, FOR_WRITING)
iIndexToDeleteFrom = UBound(arrLines)- iNumberOfLinesToDelete + 1

For i=0 To UBound(arrLines)
   If i &amp;lt; iIndexToDeleteFrom Then
      objTS.WriteLine arrLines(i)
   End If
Next
</vb><vb name="Delete Line Range within a Text File" n="1280">' Delete Line Range within a Text File



Const FOR_READING = 1
Const FOR_WRITING = 2
strFileName = "C:\scripts\test.txt"
iStartAtLineNumber = 3
iEndAtLineNumber   = 7

Set objFS = CreateObject("Scripting.FileSystemObject")
Set objTS = objFS.OpenTextFile(strFileName, FOR_READING)
strContents = objTS.ReadAll
objTS.Close

arrLines = Split(strContents, vbNewLine)
Set objTS = objFS.OpenTextFile(strFileName, FOR_WRITING)

For i=0 To UBound(arrLines)
   If i &amp;lt; (iStartAtLineNumber-1) OR i &amp;gt; (iEndAtLineNumber-1) Then
      objTS.WriteLine arrLines(i)
   End If
Next
</vb><vb name="Delete Lines of a Text File Beginning with a Specified String" n="1281">' Delete Lines of a Text File Beginning with a Specified String



Const FOR_READING = 1
Const FOR_WRITING = 2
strFileName = "C:\scripts\test.txt"
strCheckForString = UCase("july")

Set objFS = CreateObject("Scripting.FileSystemObject")
Set objTS = objFS.OpenTextFile(strFileName, FOR_READING)
strContents = objTS.ReadAll
objTS.Close

arrLines = Split(strContents, vbNewLine)
Set objTS = objFS.OpenTextFile(strFileName, FOR_WRITING)

For Each strLine In arrLines
   If Not(Left(UCase(LTrim(strLine)),Len(strCheckForString)) = strCheckForString) Then  
      objTS.WriteLine strLine
   End If
Next
</vb><vb name="Delete All Contents of a Text File" n="1282">' Delete All Contents of a Text File



Const FOR_WRITING = 2
strFileName = "C:\scripts\test.txt"

Set objFS = CreateObject("Scripting.FileSystemObject")
Set objTS = objFS.OpenTextFile(strFileName, FOR_WRITING)
</vb></dd>
		<dd name="Web Pages and HTML Applications (HTAs)" code="web" desc="Sample scripts for both adding items (buttons, dropdown lists, text boxes, etc.) to Web pages and HTAs (HTML Applications), and for creating scripts that run in response to user interactions with those Web pages or HTAs."><vb name=" Modify the Value of a Text Area" n="1283">'  Modify the Value of a Text Area


Sub RunScript
    BasicTextArea.Value = "This information will be placed in the " &amp;amp; _
        "multi-line text box named BasicTextArea."
End Sub
</vb><vb name="Add a Button to a Web Page" n="1284">' Add a Button to a Web Page


&amp;lt;input id=runbutton  class="button" type="button" value="Run Button" name="run_button"  onClick="RunScript"&amp;gt;
</vb><vb name="Add a Checkbox to a Web Page" n="1285">' Add a Checkbox to a Web Page


&amp;lt;input type="checkbox"name="BasicCheckbox"value="1"&amp;gt; Option 1
</vb><vb name="Add a Hyperlink" n="1286">' Add a Hyperlink


&amp;lt;a href="/technet/scriptcenter" target="blank"&amp;gt;Script Center&amp;lt;/a href&amp;gt;
</vb><vb name="Add a Listbox" n="1287">' Add a Listbox


&amp;lt;select size="3" name="Listbox1" onChange="RunScript"&amp;gt;
    &amp;lt;option value="1"&amp;gt;Option 1&amp;lt;/option&amp;gt;
    &amp;lt;option value="2"&amp;gt;Option 2&amp;lt;/option&amp;gt;
    &amp;lt;option value="3"&amp;gt;Option 3&amp;lt;/option&amp;gt;
    &amp;lt;option value="4"&amp;gt;Option 4&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
</vb><vb name="Add a Multi-select Listbox" n="1288">' Add a Multi-select Listbox


&amp;lt;select size="3" name="DropDown1" multiple&amp;gt;
    &amp;lt;option value="1"&amp;gt;Option 1&amp;lt;/option&amp;gt;
    &amp;lt;option value="2"&amp;gt;Option 2&amp;lt;/option&amp;gt;
    &amp;lt;option value="3"&amp;gt;Option 3&amp;lt;/option&amp;gt;
    &amp;lt;option value="4"&amp;gt;Option 4&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
</vb><vb name="Add a Password Box" n="1289">' Add a Password Box


&amp;lt;input type="password" name="PasswordArea" size="30"&amp;gt;
</vb><vb name="Add a SPAN" n="1290">' Add a SPAN


&amp;lt;span id=DataArea&amp;gt;This is a span named DataArea.&amp;lt;/span&amp;gt;
</vb><vb name="Add a Text Area" n="1291">' Add a Text Area


&amp;lt;textarea name="BasicTextArea" rows="5" cols="75"&amp;gt;&amp;lt;/textarea&amp;gt;
</vb><vb name="Add a Text Box" n="1292">' Add a Text Box


&amp;lt;input type="text" name="BasicTextBox" size="50"&amp;gt;
</vb><vb name="Add a Tooltip to a Button" n="1293">' Add a Tooltip to a Button


&amp;lt;input id=runbutton  class="button" type="button" value="Run Button" name="run_button"  onClick="RunScript" title="Click here to change the tool tip."&amp;gt;
</vb><vb name="Add Radio Buttons" n="1294">' Add Radio Buttons


&amp;lt;input type="radio" name="UserOption" value="1"&amp;gt;Option 1&amp;lt;BR&amp;gt;
&amp;lt;input type="radio" name="UserOption" value="2"&amp;gt;Option 2&amp;lt;BR&amp;gt;
&amp;lt;input type="radio" name="UserOption" value="3"&amp;gt;Option 3&amp;lt;BR&amp;gt;
</vb><vb name="Copy Text to the Clipboard" n="1295">' Copy Text to the Clipboard


Sub RunScript
    strCopy = BasicTextArea.Value
    document.parentwindow.clipboardData.SetData "text", strCopy
End Sub
</vb><vb name="Create a Basic HTA" n="1296">' Create a Basic HTA


&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;HTA Helpomatic&amp;lt;/title&amp;gt;

&amp;lt;HTA:APPLICATION 
     ID="objHTAHelpomatic"
     APPLICATIONNAME="HTAHelpomatic"
     SCROLL="yes"
     SINGLEINSTANCE="yes"
     WINDOWSTATE="maximize"
&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;SCRIPT Language="VBScript"&amp;gt;
&amp;lt;/SCRIPT&amp;gt;
&amp;lt;body&amp;gt;


&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
</vb><vb name="Create a Disabled Control" n="1297">' Create a Disabled Control


&amp;lt;select size="3" name="Dropdown1" Disabled=True&amp;gt;
    &amp;lt;option value="1"&amp;gt;Option 1&amp;lt;/option&amp;gt;
    &amp;lt;option value="2"&amp;gt;Option 2&amp;lt;/option&amp;gt;
    &amp;lt;option value="3"&amp;gt;Option 3&amp;lt;/option&amp;gt;
    &amp;lt;option value="4"&amp;gt;Option 4&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
</vb><vb name="Create a Dropdown List" n="1298">' Create a Dropdown List


&amp;lt;select size="1" name="DropDown1" onChange="RunScript"&amp;gt;
    &amp;lt;option value="1"&amp;gt;Option 1&amp;lt;/option&amp;gt;
    &amp;lt;option value="2"&amp;gt;Option 2&amp;lt;/option&amp;gt;
    &amp;lt;option value="3"&amp;gt;Option 3&amp;lt;/option&amp;gt;
    &amp;lt;option value="4"&amp;gt;Option 4&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
</vb><vb name="Create a Formatted Table" n="1299">' Create a Formatted Table


&amp;lt;table width="100%"&amp;gt;
&amp;lt;tr bgcolor="white" align="center" valign="top"&amp;gt;
    &amp;lt;td&amp;gt;Row 1, Column 1&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;Row 1, Column 2&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
  &amp;lt;tr bgcolor="yellow" align="right" valign="top"&amp;gt;
    &amp;lt;td&amp;gt;Row 1, Column 1&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;Row 1, Column 2&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
</vb><vb name="Create a Four-Column Table" n="1300">' Create a Four-Column Table


&amp;lt;table width="100%" border&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td width="25%" valign="top"&amp;gt;Row 1, Column 1&amp;lt;/td&amp;gt;
    &amp;lt;td width="25%" valign="top"&amp;gt;Row 1, Column 2&amp;lt;/td&amp;gt;
    &amp;lt;td width="25%" valign="top"&amp;gt;Row 1, Column 3&amp;lt;/td&amp;gt;
    &amp;lt;td width="25%" valign="top"&amp;gt;Row 1, Column 4&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
</vb><vb name="Create a Three-Column Table" n="1301">' Create a Three-Column Table


&amp;lt;table width="100%" border&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td width="33%" valign="top" border= "black"&amp;gt;Row 1, Column 1&amp;lt;/td&amp;gt;
    &amp;lt;td width="33%" valign="top"&amp;gt;Row 1, Column 2&amp;lt;/td&amp;gt;
    &amp;lt;td width="33%" valign="top"&amp;gt;Row 1, Column 3&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
</vb><vb name="Create a Timer" n="1302">' Create a Timer


Sub Window_OnLoad
    iTimerID = window.setInterval("RunScript", 5000, "VBScript")
End Sub
</vb><vb name="Create a Two-Column Table" n="1303">' Create a Two-Column Table


&amp;lt;table width="100%" border&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td width="50%" valign="top"&amp;gt;Row 1, Column 1&amp;lt;/td&amp;gt;
    &amp;lt;td width="50%" valign="top"&amp;gt;Row 1, Column 2&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
</vb><vb name="Create an Instance of Internet Explorer" n="1304">' Create an Instance of Internet Explorer


Set objExplorer = WScript.CreateObject("InternetExplorer.Application")

objExplorer.Navigate "about:blank"   
objExplorer.ToolBar = 0
objExplorer.StatusBar = 0
objExplorer.Width=300
objExplorer.Height = 150 
objExplorer.Left = 0
objExplorer.Top = 0
objExplorer.Visible = 1
</vb><vb name="Disable a Control" n="1305">' Disable a Control


Sub RunScript
    DropDown1.Disabled = False
End Sub
</vb><vb name="Display a Confirmation Box" n="1306">' Display a Confirmation Box


Sub RunScript
    blnAnswer = window.confirm("Are you sure you want to continue?")
    If blnAnswer Then
        Msgbox "You clicked the OK button"
    Else
        Msgbox "You clicked the Cancel button."
    End If
End Sub
</vb><vb name="Display a Message Box" n="1307">' Display a Message Box


Sub RunScript
    Msgbox "Test"
End Sub
</vb><vb name="Display Data in a New Window" n="1308">' Display Data in a New Window


Sub RunScript
    Set objIE = CreateObject("InternetExplorer.Application")
    objIE.Navigate("about:blank")
    objIE.ToolBar = 0
    objIE.StatusBar = 0
    Set objDoc = objIE.Document.Body
    strHTML = "&amp;lt;B&amp;gt;This information is displayed in a separate window.&amp;lt;/B&amp;gt;"
    objDoc.InnerHTML = strHTML
    objIE.Visible = True
End Sub
</vb><vb name="Display the Print Dialog Box" n="1309">' Display the Print Dialog Box


Sub RunScript
    Window.Print()
End Sub
</vb><vb name="Format Fonts" n="1310">' Format Fonts


&amp;lt;font color="red" face="Times New Roman" size="6"&amp;gt;Your text goes here&amp;lt;/font&amp;gt;
</vb><vb name="List Selected Items in a Multi-select Listbox" n="1311">' List Selected Items in a Multi-select Listbox


Sub RunScript
    For i = 0 to (Dropdown1.Options.Length - 1)
        If (Dropdown1.Options(i).Selected) Then
            strComputer = strComputer &amp;amp; Dropdown1.Options(i).Value &amp;amp; vbcrlf
        End If
    Next
    Msgbox strComputer
End Sub
</vb><vb name="List the Value of a Checkbox" n="1312">' List the Value of a Checkbox


Sub RunScript
    If BasicCheckbox.Checked Then
        Msgbox "The checkbox has been checked."
    Else
        Msgbox "The checkbox has not been checked."
    End If
End Sub
</vb><vb name="List the Value of a Dropdown List" n="1313">' List the Value of a Dropdown List


Sub RunScript
    Msgbox DropDown1.Value
End Sub
</vb><vb name="List the Value of a Listbox" n="1314">' List the Value of a Listbox


Sub RunScript
    Msgbox Listbox1.Value
End Sub
</vb><vb name="List the Value of a Password Box" n="1315">' List the Value of a Password Box


Sub RunScript
    Msgbox PasswordArea.Value
End Sub
</vb><vb name="List the Value of a Text Box" n="1316">' List the Value of a Text Box


Sub RunScript
    Msgbox BasicTextBox.Value
End Sub
</vb><vb name="Modify the Cursor Type" n="1317">' Modify the Cursor Type


Sub RunScript
    document.body.style.cursor = "wait"
End Sub
</vb><vb name="Modify the Value of a SPAN" n="1318">' Modify the Value of a SPAN


Sub RunScript
    DataArea.InnerHTML = "&amp;lt;B&amp;gt;The computer did not respond when pinged.&amp;lt;/B&amp;gt;"
End Sub
</vb><vb name="Modify the Value of a Tooltip" n="1319">' Modify the Value of a Tooltip


Sub RunScript
    Run_Button.Title = "You successfully changed the tool tip."
End Sub
</vb><vb name="Paste Text from the Clipboard" n="1320">' Paste Text from the Clipboard


Sub RunScript
    DataArea.InnerHTML = document.parentwindow.clipboardData.GetData("text")
End Sub
</vb><vb name="Populate a Listbox Using the Contents of a Text File" n="1321">' Populate a Listbox Using the Contents of a Text File


Sub Window_Onload
    ForReading = 1
    strNewFile = "computers.txt"
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    Set objFile = objFSO.OpenTextFile _
        (strNewFile, ForReading)
    Do Until objFile.AtEndOfStream
        strLine = objFile.ReadLine
        Set objOption = Document.createElement("OPTION")
        objOption.Text = strLine
        objOption.Value = strLine
        AvailableComputers.Add(objOption)
    Loop
    objFile.Close
End Sub
</vb><vb name="Prompt a User for Input" n="1322">' Prompt a User for Input


Sub RunScript
    strAnswer = window.prompt("Please enter the domain name.", "fabrikam.com")
    If IsNull(strAnswer) Then
        Msgbox "You clicked the Cancel button"
    Else
        Msgbox "You entered: " &amp;amp; strAnswer
    End If
End Sub
</vb><vb name="Reload a Page" n="1323">' Reload a Page


Sub RunScript
    Location.Reload(True)
End Sub
</vb><vb name="Run a Script Each Time a Page Loads" n="1324">' Run a Script Each Time a Page Loads


Sub Window_Onload
    Msgbox "The application has started."
End Sub
</vb><vb name="Save Data to an HTML File" n="1325">' Save Data to an HTML File


Sub RunScript
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    objFSO.CreateTextFile("test.htm")
    Set objFile = objFSO.OpenTextFile("test.htm", 2)
    objFile.WriteLine DataArea.InnerHTML
    objFile.Close
End Sub
</vb><vb name="Verify That a Radio Button Has Been Selected" n="1326">' Verify That a Radio Button Has Been Selected


Sub RunScript
    If UserOption(0).Checked Then
        Msgbox "Option 1 was selected."
    End If
    If UserOption(1).Checked Then
        Msgbox "Option 2 was selected."
    End If
    If UserOption(2).Checked Then
        Msgbox "Option 3 was selected."
    End If
End Sub
</vb></dd>
		<dd name="WMI" code="wmi" desc="Sample scripts for retrieving information about objects that can be used in WMI scripts."><vb name="Monitor Baseline Performance" n="1327">' Monitor Baseline Performance


Const ForAppending = 8

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
  &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

set objRefresher = CreateObject("WbemScripting.Swbemrefresher")
Set objMemory = objRefresher.AddEnum _
  (objWMIService, "Win32_PerfFormattedData_PerfOS_Memory").objectSet
Set objDiskSpace = objRefresher.AddEnum _
  (objWMIService, "Win32_PerfFormattedData_PerfDisk_LogicalDisk").objectSet
Set objQueueLength = objRefresher.AddEnum _
  (objWMIService, "Win32_PerfFormattedData_PerfNet_ServerWorkQueues").objectSet
objRefresher.Refresh

Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objLogFile = objFSO.OpenTextFile _
  ("c:\scripts\performance.csv", ForAppending, True)

For i = 1 to 10
  For Each intAvailableBytes in objMemory
      objLogFile.Write(intAvailableBytes.AvailableMBytes) &amp;amp; "," 
  Next
  For each intQueueLength in objDiskSpace
      objLogFile.Write(intQueueLength.CurrentDiskQueueLength) &amp;amp; "," 
  Next
  For each intServerQueueLength in objQueueLength
      objLogFile.Write(intServerQueueLength.QueueLength) &amp;amp; ","
  Next
  objLogFile.Write VbCrLf
  Wscript.Sleep 10000
  objRefresher.Refresh
Next
objLogFile.Close
</vb><vb name="Create a Permanent Event Consumer" n="1328">' Create a Permanent Event Consumer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\default")

Set objConsumerType = objWMIService.get("SMTPEventConsumer")
Set objConsumer = objConsumerType.SpawnInstance_
objConsumer.Name = "Service Monitor Consumer"
objConsumer.Message = "A service has changed state."
objConsumer.SMTPServer = "mailserver.fabrikam.com"
objConsumer.Subject = "Service state change"
objConsumer.ToLine = "administrator@fabrikam.com"
objConsumer.Put_
</vb><vb name="Create a Permanent Event Filter" n="1329">' Create a Permanent Event Filter


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\default")

strFilterQuery = "Select * from __InstanceModificationEvent within 3 " &amp;amp; _
    "where TargetInstance isa 'Win32_Service'"
Set objFilterClass = objWMIService.get("__EventFilter")
Set objFilter = objFilterClass.SpawnInstance_
objFilter.Name = "Service Monitor Filter"
objFilter.QueryLanguage = "wql"
objFilter.Query = strFilterQuery
objFilter.Put_
</vb><vb name="List All Abstract Classes in WMI" n="1330">' List All Abstract Classes in WMI


strComputer = "."
 
Set objWMIService=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\cimv2")

Set colClasses = objWMIService.SubclassesOf()
 
For Each objClass in colClasses
    For Each objClassQualifier In objClass.Qualifiers_
        If LCase(objClassQualifier.Name) = "abstract" Then
            WScript.Echo objClass.Path_.Class &amp;amp; ": " &amp;amp; _
            objClassQualifier.Name &amp;amp; "=" &amp;amp; _
            objClassQualifier.Value
        End If
    Next
Next
</vb><vb name="List All Dynamic Classes in WMI" n="1331">' List All Dynamic Classes in WMI


strComputer = "."
 
Set objWMIService=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\cimv2")

Set colClasses = objWMIService.SubclassesOf()
 
For Each objClass in colClasses
    For Each objClassQualifier In objClass.Qualifiers_
        If LCase(objClassQualifier.Name) = "dynamic" Then
            WScript.Echo objClass.Path_.Class &amp;amp; ": " &amp;amp; _
            objClassQualifier.Name &amp;amp; "=" &amp;amp; _
            objClassQualifier.Value
        End If
    Next
Next
</vb><vb name="List All the Properties and Methods for a WMI Class" n="1332">' List All the Properties and Methods for a WMI Class


strComputer = "."
strNameSpace = "root\cimv2"
strClass = "Win32_Service"
 
Set objClass = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\" &amp;amp; strNameSpace &amp;amp; ":" &amp;amp; strClass)
 
WScript.Echo strClass &amp;amp; " Class Qualifiers"
WScript.Echo "------------------------------"
i = 1
 
For Each objClassQualifier In objClass.Qualifiers_
    If VarType(objClassQualifier.Value) = (vbVariant + vbArray) Then
        strQualifier = i &amp;amp; ". " &amp;amp; objClassQualifier.Name &amp;amp; " = " &amp;amp; _
            Join(objClassQualifier.Value, ",")
    Else
        strQualifier = i &amp;amp; ". " &amp;amp; objClassQualifier.Name &amp;amp; " = " &amp;amp; _
        objClassQualifier.Value
    End If
    WScript.Echo strQualifier
    strQualifier = ""
    i = i + 1
Next
 
WScript.Echo
WScript.Echo strClass &amp;amp; " Class Properties and Property Qualifiers"
WScript.Echo "------------------------------------------------------"
i = 1 : j = 1
 
For Each objClassProperty In objClass.Properties_
    WScript.Echo i &amp;amp; ". " &amp;amp; objClassProperty.Name
    For Each objPropertyQualifier In objClassProperty.Qualifiers_
        If VarType(objPropertyQualifier.Value) = (vbVariant + vbArray) Then
            strQualifier = i &amp;amp; "." &amp;amp; j &amp;amp; ". " &amp;amp; _
                objPropertyQualifier.Name &amp;amp; " = " &amp;amp; _
            Join(objPropertyQualifier.Value, ",")
        Else
            strQualifier = i &amp;amp; "." &amp;amp; j &amp;amp; ". " &amp;amp; _
                objPropertyQualifier.Name &amp;amp; " = " &amp;amp; _
            objPropertyQualifier.Value
        End If
        WScript.Echo strQualifier
        strQualifier = ""
        j = j + 1
    Next
    WScript.Echo
    i = i + 1 : j = 1
Next
 
WScript.Echo
WScript.Echo strClass &amp;amp; " Class Methods and Method Qualifiers"
WScript.Echo "-------------------------------------------------"
i = 1 : j = 1
 
For Each objClassMethod In objClass.Methods_
    WScript.Echo i &amp;amp; ". " &amp;amp; objClassMethod.Name
    For Each objMethodQualifier In objClassMethod.Qualifiers_
        If VarType(objMethodQualifier.Value) = (vbVariant + vbArray) Then
            strQualifier = i &amp;amp; "." &amp;amp; j &amp;amp; ". " &amp;amp; _
                objMethodQualifier.Name &amp;amp; " = " &amp;amp; _
            Join(objMethodQualifier.Value, ",")
        Else
            strQualifier = i &amp;amp; "." &amp;amp; j &amp;amp; ". " &amp;amp; _
                objMethodQualifier.Name &amp;amp; " = " &amp;amp; _
                    objMethodQualifier.Value
        End If
    WScript.Echo strQualifier
    strQualifier = ""
    j = j + 1
    Next
 
    WScript.Echo
    i = i + 1 : j = 1
Next
</vb><vb name="List All the Properties and Methods of the Win32 Classes" n="1333">' List All the Properties and Methods of the Win32 Classes


strComputer = "."
Set objWMIService=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\cimv2")
 
For Each objclass in objWMIService.SubclassesOf()
    intCounter=0
    If Left(objClass.Path_.Class,5) = "Win32" Then
        For Each Qualifier in objClass.Qualifiers_
            If UCase(Trim(Qualifier.Name)) = "ASSOCIATION" Then
                intCounter = 1
            End If
        Next
        If x = 0 Then
            strComputer = "."
            Set objWMIService = GetObject _
                ("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _
                    strComputer &amp;amp; "\root\cimv2")
            Set strClass = objWMIService.Get(objClass.Path_.Class)
            Wscript.Echo "PROPERTIES:"
            For each strItem in strClass.properties_
                Wscript.Echo objClass.Path_.Class &amp;amp; vbTab &amp;amp; strItem.name 
            Next
            Wscript.Echo "METHODS:"
            For Each strItem in strClass.methods_
                Wscript.Echo objClass.Path_.Class &amp;amp; vbTab &amp;amp; strItem.name 
            Next
        End If
    End If
Next
</vb><vb name="List All the Properties for a WMI Class" n="1334">' List All the Properties for a WMI Class


strComputer = "."
strNameSpace = "root\cimv2"
strClass = "Win32_Service"
 
Set objClass = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\" &amp;amp; strNameSpace &amp;amp; ":" &amp;amp; strClass)
 
WScript.Echo strClass &amp;amp; " Class Properties"
WScript.Echo "------------------------------"
 
For Each objClassProperty In objClass.Properties_
    WScript.Echo objClassProperty.Name
Next
</vb><vb name="List All the Qualifiers for a WMI Class" n="1335">' List All the Qualifiers for a WMI Class


strComputer = "."
strNameSpace = "root\cimv2"
strClass = "Win32_Service"
 
Set objClass = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\" &amp;amp; strNameSpace &amp;amp; ":" &amp;amp; strClass)
 
WScript.Echo strClass &amp;amp; " Class Qualifiers"
WScript.Echo "------------------------------"
 
For Each objClassQualifier In objClass.Qualifiers_
    If VarType(objClassQualifier.Value) = (vbVariant + vbArray) Then
        strQualifier = objClassQualifier.Name &amp;amp; " = " &amp;amp; _
            Join(objClassQualifier.Value, ",")
    Else
        strQualifier = objClassQualifier.Name &amp;amp; " = " &amp;amp; _
            objClassQualifier.Value
    End If
    WScript.Echo strQualifier
    strQualifier = ""
Next
</vb><vb name="List All the WMI cimV2 Classes" n="1336">' List All the WMI cimV2 Classes


strComputer = "."
Set objWMIService=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\cimv2")
 
For Each objclass in objWMIService.SubclassesOf()
    Wscript.Echo objClass.Path_.Class
Next
</vb><vb name="List All the WMI Methods for a Class" n="1337">' List All the WMI Methods for a Class


strComputer = "."
strNameSpace = "root\cimv2"
strClass = "Win32_Service"
 
Set objClass = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\" &amp;amp; strNameSpace &amp;amp; ":" &amp;amp; strClass)
 
WScript.Echo strClass &amp;amp; " Class Methods"
WScript.Echo "---------------------------"
 
For Each objClassMethod In objClass.Methods_
    WScript.Echo objClassMethod.Name
Next
</vb><vb name="List All the WMI Namespaces" n="1338">' List All the WMI Namespaces


strComputer = "."
 
Set objWMIService=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root")

Set colNameSpaces = objWMIService.InstancesOf("__NAMESPACE")
 
For Each objNameSpace In colNameSpaces
    WScript.Echo objNameSpace.Name
Next
</vb><vb name="List All the WMI Providers" n="1339">' List All the WMI Providers


strComputer = "."
 
Set objWMIService=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\cimv2")

Set colWin32Providers = objWMIService.InstancesOf("__Win32Provider")
 
For Each objWin32Provider In colWin32Providers
    WScript.Echo objWin32Provider.Name
Next
</vb><vb name="List All the WMI Settings" n="1340">' List All the WMI Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colWMISettings = objWMIService.ExecQuery _
    ("Select * from Win32_WMISetting")

For Each objWMISetting in colWMISettings
    Wscript.Echo "Default namespace: " &amp;amp; _
        objWMISetting.ASPScriptDefaultNamespace
    Wscript.Echo "Backup interval: " &amp;amp; objWMISetting.BackupInterval
    Wscript.Echo "Last backup: " &amp;amp; objWMISetting.BackupLastTime
    Wscript.Echo "Build version: " &amp;amp; objWMISetting.BuildVersion
    Wscript.Echo "Repository directory: " &amp;amp; _
        objWMISetting.DatabaseDirectory
    Wscript.Echo "Enable events: " &amp;amp; objWMISetting.EnableEvents
    Wscript.Echo "High threshold on client objects: " &amp;amp; _
        objWMISetting.HighThresholdOnClientObjects
    Wscript.Echo "High threshold on events: " &amp;amp; _
        objWMISetting.HighThresholdOnEvents
    Wscript.Echo "Installation folder: " &amp;amp; _
        objWMISetting.InstallationDirectory
    Wscript.Echo "Logging folder: " &amp;amp; objWMISetting.LoggingDirectory
    Wscript.Echo "Logging level: " &amp;amp; objWMISetting.LoggingLevel
    Wscript.Echo "Low threshold on client objects: " &amp;amp; _
        objWMISetting.LowThresholdOnClientObjects
    Wscript.Echo "Low threshold on events: " &amp;amp; _
        objWMISetting.LowThresholdOnEvents
    Wscript.Echo "Maximum log file size: " &amp;amp; objWMISetting.MaxLogFileSize
    Wscript.Echo "Maximum wait time on client objects: " &amp;amp; _
        objWMISetting.MaxWaitOnClientObjects
    Wscript.Echo "Maximum wait time on events: " &amp;amp; _
        objWMISetting.MaxWaitOnEvents
    Wscript.Echo "MOF Self-install folder: " &amp;amp; _
        objWMISetting.MofSelfInstallDirectory
    For i = 0 to Ubound(objWMISetting.AutorecoverMofs)
        Wscript.Echo "Autorecover MOF: " &amp;amp; _
            objWMISetting.AutorecoverMofs(i)
    Next
Next
</vb><vb name="List All WMI Namespaces" n="1341">' List All WMI Namespaces


strComputer = "."
Call EnumNameSpaces("root")
 
Sub EnumNameSpaces(strNameSpace)
    WScript.Echo strNameSpace
    Set objWMIService=GetObject _
        ("winmgmts:{impersonationLevel=impersonate}\\" &amp;amp; _ 
            strComputer &amp;amp; "\" &amp;amp; strNameSpace)

    Set colNameSpaces = objWMIService.InstancesOf("__NAMESPACE")

    For Each objNameSpace In colNameSpaces
        Call EnumNameSpaces(strNameSpace &amp;amp; "\" &amp;amp; objNameSpace.Name)
    Next
End Sub
</vb><vb name="List Computer Hardware" n="1342">' List Computer Hardware


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colMice = objWMIService.ExecQuery _
    ("Select * from Win32_PointingDevice")

For Each objMouse in colMice
    Wscript.Echo "Hardware Type: " &amp;amp; objMouse.HardwareType
    Wscript.Echo "Number of Buttons: " &amp;amp; objMouse.NumberOfButtons    
    Wscript.Echo "Status: " &amp;amp; objMouse.Status
    Wscript.Echo "PNP Device ID: " &amp;amp; objMouse.PNPDeviceID
Next
</vb><vb name="List System Information" n="1343">' List System Information


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colSettings = objWMIService.ExecQuery _
    ("Select * from Win32_OperatingSystem")

For Each objOperatingSystem in colSettings 
    Wscript.Echo "OS Name: " &amp;amp; objOperatingSystem.Name
    Wscript.Echo "Version: " &amp;amp; objOperatingSystem.Version
    Wscript.Echo "Service Pack: " &amp;amp; _
        objOperatingSystem.ServicePackMajorVersion _
            &amp;amp; "." &amp;amp; objOperatingSystem.ServicePackMinorVersion
    Wscript.Echo "OS Manufacturer: " &amp;amp; objOperatingSystem.Manufacturer
    Wscript.Echo "Windows Directory: " &amp;amp; _
        objOperatingSystem.WindowsDirectory
    Wscript.Echo "Locale: " &amp;amp; objOperatingSystem.Locale
    Wscript.Echo "Available Physical Memory: " &amp;amp; _
        objOperatingSystem.FreePhysicalMemory
    Wscript.Echo "Total Virtual Memory: " &amp;amp; _
        objOperatingSystem.TotalVirtualMemorySize
    Wscript.Echo "Available Virtual Memory: " &amp;amp; _
        objOperatingSystem.FreeVirtualMemory
    Wscript.Echo "Size stored in paging files: " &amp;amp; _
        objOperatingSystem.SizeStoredInPagingFiles
Next

Set colSettings = objWMIService.ExecQuery _
    ("Select * from Win32_ComputerSystem")

For Each objComputer in colSettings 
    Wscript.Echo "System Name: " &amp;amp; objComputer.Name
    Wscript.Echo "System Manufacturer: " &amp;amp; objComputer.Manufacturer
    Wscript.Echo "System Model: " &amp;amp; objComputer.Model
    Wscript.Echo "Time Zone: " &amp;amp; objComputer.CurrentTimeZone
    Wscript.Echo "Total Physical Memory: " &amp;amp; _
        objComputer.TotalPhysicalMemory
Next

Set colSettings = objWMIService.ExecQuery _
    ("Select * from Win32_Processor")

For Each objProcessor in colSettings 
    Wscript.Echo "System Type: " &amp;amp; objProcessor.Architecture
    Wscript.Echo "Processor: " &amp;amp; objProcessor.Description
Next

Set colSettings = objWMIService.ExecQuery _
    ("Select * from Win32_BIOS")

For Each objBIOS in colSettings 
    Wscript.Echo "BIOS Version: " &amp;amp; objBIOS.Version
Next
</vb><vb name="List the Default WMI Namespace" n="1344">' List the Default WMI Namespace



strComputer = "."
 
Set objWMIService=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\cimv2")

Set colWMISettings = objWMIService.InstancesOf("Win32_WMISetting")
 
For Each objWMISetting in colWMISettings
    Wscript.Echo "Default namespace for scripting: " &amp;amp; _
    objWMISetting.ASPScriptDefaultNamespace 
Next
</vb><vb name="List the Definition of a WMI Class in MOF Format" n="1345">' List the Definition of a WMI Class in MOF Format


strComputer = "."
strNameSpace = "root\cimv2"
strClass = "Win32_Service"
 
Const wbemFlagUseAmendedQualifiers = &amp;amp;h20000
 
Set objClass = GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\" &amp;amp; strNameSpace)

Set objClass = objWMIService.Get(strClass, wbemFlagUseAmendedQualifiers)
strMOF = objClass.GetObjectText_
 
WScript.Echo strMOF
</vb><vb name="Modify the Default WMI Namespace" n="1346">' Modify the Default WMI Namespace



strComputer = "."
 
Set objWMIService=GetObject("winmgmts:{impersonationLevel=impersonate}!\\" &amp;amp; _ 
    strComputer &amp;amp; "\root\cimv2")

Set colWMISettings = objWMIService.InstancesOf("Win32_WMISetting")
 
For Each objWMISetting in colWMISettings
    objWMISetting.ASPScriptDefaultNamespace = "root\cimv2"
    objWMISetting.Put_
Next
</vb><vb name="Modify WMI Settings" n="1347">' Modify WMI Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colWMISettings = objWMIService.ExecQuery _
    ("Select * from Win32_WMISetting")

For Each objWMISetting in colWMISettings
    objWMISetting.BackupInterval = 60
    objWMISetting.LoggingLevel = 2
    objWMISetting.Put_
Next
</vb></dd>
		<dd name="Working with Databases" code="database" desc="Sample scripts for connecting to and working with databases using ADO (ActiveX Database Objects)."><vb name="Add a New Record to a Table" n="1348">' Add a New Record to a Table


Const adOpenStatic = 3
Const adLockOptimistic = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Provider = Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source = inventory.mdb" 

objRecordSet.Open "SELECT * FROM GeneralProperties" , _
    objConnection, adOpenStatic, adLockOptimistic

objRecordSet.AddNew
objRecordSet("ComputerName") = "atl-ws-01"
objRecordSet("Department") = "Human Resources"
objRecordSet("OSName") = "Microsoft Windows XP Professional"
objRecordSet("OSVersion") = "5.1.2600"
objRecordSet("OSManufacturer") = "Microsoft Corporation"
objRecordSet.Update

objRecordSet.Close
objConnection.Close
</vb><vb name="Clear a Database Table" n="1349">' Clear a Database Table


Const adOpenStatic = 3
Const adLockOptimistic = 3
Const adUseClient = 3
Set objConnection = CreateObject("ADODB.Connection")
Set objRecordset = CreateObject("ADODB.Recordset")
objConnection.Open "DSN=Inventory;"
objRecordset.CursorLocation = adUseClient
objRecordset.Open "Delete * FROM Hardware" , objConnection, _
    adOpenStatic, adLockOptimistic
objConnection.Close
</vb><vb name="Connect to a SQL Server Database" n="1350">' Connect to a SQL Server Database


Const adOpenStatic = 3
Const adLockOptimistic = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Provider=SQLOLEDB;Data Source=atl-sql-01;" &amp;amp; _
        "Trusted_Connection=Yes;Initial Catalog=Northwind;" &amp;amp; _
             "User ID=fabrikam\kenmyer;Password=34DE6t4G!;"

objRecordSet.Open "SELECT * FROM Customers", _
        objConnection, adOpenStatic, adLockOptimistic

objRecordSet.MoveFirst

Wscript.Echo objRecordSet.RecordCount
</vb><vb name="Connect to an ADO Database" n="1351">' Connect to an ADO Database


Const adOpenStatic = 3
Const adLockOptimistic = 3
Const adUseClient = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordset = CreateObject("ADODB.Recordset")

objConnection.Open "DSN=Inventory;"
objRecordset.CursorLocation = adUseClient
objRecordset.Open "SELECT * FROM Hardware" , objConnection, _
    adOpenStatic, adLockOptimistic
objRecordset.Close
objConnection.Close
</vb><vb name="Create a JET Database" n="1352">' Create a JET Database


Set objConnection = CreateObject("ADOX.Catalog")

objConnection.Create _
    "Provider = Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source = new_db.mdb"
</vb><vb name="Create a Table in a JET Database" n="1353">' Create a Table in a JET Database


Set objConnection = CreateObject("ADODB.Connection")

objConnection.Open _
    "Provider= Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source=new_db.mdb" 

objConnection.Execute "CREATE TABLE EventTable(" &amp;amp; _
    "EventKey COUNTER ," &amp;amp; _
    "Category TEXT(50) ," &amp;amp; _
    "ComputerName TEXT(50) ," &amp;amp; _
    "EventCode INTEGER ," &amp;amp; _
    "RecordNumber INTEGER ," &amp;amp; _
    "SourceName TEXT(50) ," &amp;amp; _
    "TimeWritten DATETIME ," &amp;amp; _
    "UserName TEXT(50) ," &amp;amp; _
    "EventType TEXT(50) ," &amp;amp; _
    "Logfile TEXT(50) ," &amp;amp; _
    "Message MEMO)" 

objConnection.Close
</vb><vb name="Delete a Record from a Recordset" n="1354">' Delete a Record from a Recordset


Const adOpenStatic = 3
Const adLockOptimistic = 3
Const adUseClient = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordset = CreateObject("ADODB.Recordset")

objConnection.Open "DSN=Inventory;"
objRecordset.CursorLocation = adUseClient
objRecordset.Open "SELECT * FROM Hardware" , objConnection, _
    adOpenStatic, adLockOptimistic
strSearchCriteria = "ComputerName = 'WebServer'"
objRecordSet.Find strSearchCriteria
objRecordset.Delete
objRecordset.Close
objConnection.Close
</vb><vb name="Delete Multiple Records from a Table" n="1355">' Delete Multiple Records from a Table


Const adOpenStatic = 3
Const adLockOptimistic = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Provider = Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source = inventory.mdb" 

objRecordSet.Open "DELETE * FROM GeneralProperties WHERE " &amp;amp; _
    "Department = 'Human Resources'", _
        objConnection, adOpenStatic, adLockOptimistic

objConnection.Close
</vb><vb name="List Basic Statistics Derived from a Recordset" n="1356">' List Basic Statistics Derived from a Recordset


Const adOpenStatic = 3
Const adLockOptimistic = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Provider = Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source = inventory.mdb" 

objRecordSet.Open "SELECT OSName, Count(OSName) AS CountOfOSName" &amp;amp; _
   " FROM GeneralProperties GROUP BY OSName ORDER BY Count(OSName) DESC", _
        objConnection, adOpenStatic, adLockOptimistic

objRecordSet.MoveFirst

Do Until objRecordset.EOF
    Wscript.Echo objRecordset.Fields.Item("OSName") &amp;amp; _
        vbTab &amp;amp; objRecordset.Fields.Item("CountOfOSName")
    objRecordset.MoveNext
Loop

objRecordSet.Close
objConnection.Close
</vb><vb name="List the Number of Records in a Recordset" n="1357">' List the Number of Records in a Recordset


Const adOpenStatic = 3
Const adLockOptimistic = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Provider = Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source = eventlogs.mdb" 

objRecordSet.Open "SELECT * FROM EventTable" , _
    objConnection, adOpenStatic, adLockOptimistic

objRecordSet.MoveFirst

Wscript.Echo "Number of records: " &amp;amp; objRecordset.RecordCount

objRecordSet.Close
objConnection.Close
</vb><vb name="List the Top 25 Records in a Recordset" n="1358">' List the Top 25 Records in a Recordset


Const adOpenStatic = 3
Const adLockOptimistic = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Provider = Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source = inventory.mdb" 

objRecordSet.Open "SELECT TOP 25 * FROM GeneralProperties " &amp;amp; _
    "ORDER BY TotalPhysicalMemory DESC", _
        objConnection, adOpenStatic, adLockOptimistic

objRecordSet.MoveFirst

Do Until objRecordset.EOF
    Wscript.Echo objRecordset.Fields.Item("ComputerName") &amp;amp; _
        vbTab &amp;amp; objRecordset.Fields.Item("TotalPhysicalMemory")
    objRecordset.MoveNext
Loop

objRecordSet.Close
objConnection.Close
</vb><vb name="List Unique Records in a Recordset" n="1359">' List Unique Records in a Recordset


Const adOpenStatic = 3
Const adLockOptimistic = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Provider = Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source = inventory.mdb" 

objRecordSet.Open "SELECT DISTINCT OSName FROM " &amp;amp; _
    "GeneralProperties ORDER BY OSName", _
        objConnection, adOpenStatic, adLockOptimistic

objRecordSet.MoveFirst

Do Until objRecordset.EOF
    Wscript.Echo objRecordset.Fields.Item("OSName")
    objRecordset.MoveNext
Loop

objRecordSet.Close
objConnection.Close
</vb><vb name="Open a Database Using a DSN" n="1360">' Open a Database Using a DSN


Const adOpenStatic = 3
Const adLockOptimistic = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Northwind;fabrikam\kenmyer;34ghfn&amp;amp;!j"

objRecordSet.Open "SELECT * FROM Customers", _
        objConnection, adOpenStatic, adLockOptimistic

objRecordSet.MoveFirst

Wscript.Echo objRecordSet.RecordCount
</vb><vb name="Open Two Recordsets" n="1361">' Open Two Recordsets


Const adOpenStatic = 3
Const adLockOptimistic = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")
Set objRecordSet2 = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Provider= Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source=inventory.mdb" 

objRecordSet.Open "SELECT * FROM GeneralProperties Where ComputerName = 'Computer1'", _
        objConnection, adOpenStatic, adLockOptimistic

objRecordSet.MoveFirst


objRecordSet2.Open "SELECT * FROM Storage Where ComputerName = 'Computer1'", _
        objConnection, adOpenStatic, adLockOptimistic

objRecordSet2.MoveFirst

Do Until objRecordset.EOF
    Wscript.Echo objRecordset.Fields.Item("ComputerName")
    Wscript.Echo objRecordset.Fields.Item("OSName")
    objRecordSet.MoveNext
Loop

Do Until objRecordset2.EOF
    Wscript.Echo objRecordset2.Fields.Item("DriveName"), _
        objRecordset2.Fields.Item("DriveDescription")
    objRecordSet2.MoveNext
Loop

objRecordSet.Close
objRecordSet2.Close
objConnection.Close
</vb><vb name="Save a Recordset in XML format" n="1362">' Save a Recordset in XML format


Const adOpenStatic = 3
Const adLockOptimistic = 3
Const adPersistXML = 1

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Provider= Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source=eventlogs.mdb" 
objRecordSet.Open "SELECT * FROM EventTable" , _
    objConnection, adOpenStatic, adLockOptimistic

objRecordSet.MoveFirst 

objRecordSet.Save "output.xml", adPersistXML

objRecordSet.Close
objConnection.Close
</vb><vb name="Search a Database Using a LIKE Query" n="1363">' Search a Database Using a LIKE Query


Const adOpenStatic = 3
Const adLockOptimistic = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Provider = Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source = eventlogs.mdb" 

objRecordSet.Open "SELECT * FROM EventTable WHERE " &amp;amp; _
    "Message Like '%PowerPoint%'", _
        objConnection, adOpenStatic, adLockOptimistic

objRecordSet.MoveFirst

Wscript.Echo "Number of records: " &amp;amp; objRecordset.RecordCount

objRecordSet.Close
objConnection.Close
</vb><vb name="Search a Database Using Numeric Criteria" n="1364">' Search a Database Using Numeric Criteria


Const adOpenStatic = 3
Const adLockOptimistic = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Provider = Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source = eventlogs.mdb" 

objRecordSet.Open "SELECT * FROM EventTable " &amp;amp; _
    "WHERE EventCode = 1054", _
        objConnection, adOpenStatic, adLockOptimistic

objRecordSet.MoveFirst

Wscript.Echo "Number of records: " &amp;amp; objRecordset.RecordCount

objRecordSet.Close
objConnection.Close
</vb><vb name="Search a Database Using Variable Criteria" n="1365">' Search a Database Using Variable Criteria


Const adOpenStatic = 3
Const adLockOptimistic = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Provider= Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source=eventlogs.mdb" 

dtmDate = "#1/7/2004#"

objRecordSet.Open "SELECT * FROM EventTable Where TimeWritten = " &amp;amp; dtmDate, objconnection, adOpenStatic, adLockOptimistic

objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordset.Fields.Item("EventCode") &amp;amp; vbTab _
        &amp;amp; objRecordset.Fields.Item("Logfile")
    objRecordSet.MoveNext
Loop
</vb><vb name="Search for a Record in a Recordset" n="1366">' Search for a Record in a Recordset


Const adOpenStatic = 3
Const adLockOptimistic = 3
Const adUseClient = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordset = CreateObject("ADODB.Recordset")

objConnection.Open "DSN=Inventory;"
objRecordset.CursorLocation = adUseClient
objRecordset.Open "SELECT * FROM Hardware" , objConnection, _
    adOpenStatic, adLockOptimistic
strSearchCriteria = "ComputerName = 'WebServer'"
objRecordSet.Find strSearchCriteria

If objRecordset.EOF Then 
    Wscript.Echo "Record cannot be found."
Else
    Wscript.Echo "Record found."
End If

objRecordset.Close
objConnection.Close
</vb><vb name="Searching a Database Using String Criteria" n="1367">' Searching a Database Using String Criteria


Const adOpenStatic = 3
Const adLockOptimistic = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Provider = Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source = eventlogs.mdb" 

objRecordSet.Open "SELECT * FROM EventTable " &amp;amp; _
    "WHERE Type = 'Error'", objConnection, adOpenStatic, _
         adLockOptimistic

objRecordSet.MoveFirst

Wscript.Echo "Number of records: " &amp;amp; objRecordset.RecordCount

objRecordSet.Close
objConnection.Close
</vb><vb name="Sort a Recordset" n="1368">' Sort a Recordset


Const adOpenStatic = 3
Const adLockOptimistic = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Provider = Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source = eventlogs.mdb" 

objRecordSet.Open "SELECT * FROM EventTable " &amp;amp; _
    "ORDER BY EventCode ASC", _
        objConnection, adOpenStatic, adLockOptimistic

objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields.Item("EventCode"), objRecordSet.Fields.Item("Logfile")
    objRecordSet.MoveNext
Loop

objRecordSet.Close
objConnection.Close
</vb><vb name="Sort a Recordset on Multiple Fields" n="1369">' Sort a Recordset on Multiple Fields


Const adOpenStatic = 3
Const adLockOptimistic = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Provider = Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source = eventlogs.mdb" 

objRecordSet.Open "SELECT * FROM EventTable " &amp;amp; _
    "ORDER BY EventCode ASC, Logfile DESC", _
        objConnection, adOpenStatic, adLockOptimistic

objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo objRecordSet.Fields.Item("EventCode"), objRecordSet.Fields.Item("Logfile")
    objRecordSet.MoveNext
Loop

objRecordSet.Close
objConnection.Close
</vb><vb name="Update a  Record in a Recordset" n="1370">' Update a  Record in a Recordset


Const adOpenStatic = 3
Const adLockOptimistic = 3
Const adUseClient = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordset = CreateObject("ADODB.Recordset")

objConnection.Open "DSN=Inventory;"
objRecordset.CursorLocation = adUseClient
objRecordset.Open "SELECT * FROM Hardware" , objConnection, _
    adOpenStatic, adLockOptimistic
strSearchCriteria = "ComputerName = 'WebServer'"
objRecordSet.Find strSearchCriteria

Set colSoundCards = GetObject("winmgmts:").ExecQuery _
    ("Select * from Win32_SoundDevice")

For Each objSoundCard in colSoundCards
    objRecordset("ComputerName") = objSoundCard.SystemName
    objRecordset("Manufacturer") = objSoundCard.Manufacturer
    objRecordset("ProductName") = objSoundCard.ProductName
    objRecordset.Update
Next

objRecordset.Close
objConnection.Close
</vb><vb name="Update Multiple Records in a Recordset" n="1371">' Update Multiple Records in a Recordset


Const adOpenStatic = 3
Const adLockOptimistic = 3

Set objConnection = CreateObject("ADODB.Connection")
Set objRecordSet = CreateObject("ADODB.Recordset")

objConnection.Open _
    "Provider = Microsoft.Jet.OLEDB.4.0; " &amp;amp; _
        "Data Source = inventory.mdb" 

objRecordSet.Open "UPDATE GeneralProperties SET " &amp;amp; _
    "Department = 'Accounting'", _
        objConnection, adOpenStatic, adLockOptimistic

objConnection.Close
</vb></dd>
	</dd>
	<dd name="Security" code="security" desc="Sample scripts for managing security and securable objects in the Windows operating system.">
		<dd name="Active Directory" code="ad" desc="Sample scripts for managing security and security descriptors in Active Directory."><vb name="Read an Active Directory Security Descriptor" n="1372">' Read an Active Directory Security Descriptor


Const ADS_RIGHT_DELETE = &amp;amp;H10000
Const ADS_RIGHT_READ_CONTROL = &amp;amp;H20000
Const ADS_RIGHT_WRITE_DAC = &amp;amp;H40000
Const ADS_RIGHT_OWNER = &amp;amp;H80000
Const ADS_RIGHT_SYNCHRONIZE = &amp;amp;H100000
Const ADS_RIGHT_ACCESS_SYSTEM_SECURITY = &amp;amp;H1000000
Const ADS_RIGHT_GENERIC_READ = &amp;amp;H80000000
Const ADS_RIGHT_GENERIC_WRITE = &amp;amp;H40000000
Const ADS_RIGHT_GENERIC_EXECUTE = &amp;amp;H20000000
Const ADS_RIGHT_GENERIC_ALL = &amp;amp;H10000000
Const ADS_RIGHT_DS_CREATE_CHILD = &amp;amp;H1
Const ADS_RIGHT_DS_DELETE_CHILD = &amp;amp;H2
Const ADS_RIGHT_ACTRL_DS_LIST = &amp;amp;H4
Const ADS_RIGHT_DS_SELF = &amp;amp;H8
Const ADS_RIGHT_DS_READ_PROP = &amp;amp;H10
Const ADS_RIGHT_DS_WRITE_PROP = &amp;amp;H20
Const ADS_RIGHT_DS_DELETE_TREE = &amp;amp;H40
Const ADS_RIGHT_DS_LIST_OBJECT = &amp;amp;H80
Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100
Const ADS_ACETYPE_ACCESS_ALLOWED = &amp;amp;H0
Const ADS_ACETYPE_ACCESS_DENIED = &amp;amp;H1
Const ADS_ACETYPE_SYSTEM_AUDIT = &amp;amp;H2
Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = &amp;amp;H5
Const ADS_ACETYPE_ACCESS_DENIED_OBJECT = &amp;amp;H6
Const ADS_ACETYPE_SYSTEM_AUDIT_OBJECT = &amp;amp;H7

Set objSdUtil = GetObject("LDAP://OU=Finance,DC=fabrikam,DC=Com")
Set objSD = objSdUtil.Get("ntSecurityDescriptor")
Set objDACL = objSD.DiscretionaryACL

For Each objACE in objDACL
    Wscript.Echo "Trustee: " &amp;amp; objACE.Trustee

    If objACE.AceType = ADS_ACETYPE_ACCESS_ALLOWED Then
        Wscript.Echo "Ace Type: Access Allowed"
    ElseIf objACE.AceType = ADS_ACETYPE_ACCESS_DENIED Then
        Wscript.Echo "Ace Type: Access Denied"
    ElseIf objACE.AceType = ADS_ACETYPE_SYSTEM_AUDIT Then
        Wscript.Echo "Ace Type: System Audit "
    ElseIf objACE.AceType = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT Then
        Wscript.Echo "Ace Type: Access Allowed"
    ElseIf objACE.AceType = ADS_ACETYPE_ACCESS_DENIED_OBJECT Then
        Wscript.Echo "Ace Type: Access Denied"
    ElseIf objACE.AceType = ADS_ACETYPE_SYSTEM_AUDIT_OBJECT Then
        Wscript.Echo "Ace Type: System Audit"
    Else
        Wscript.Echo "Ace type could not be determined."
    End If

    If objACE.AccessMask And ADS_RIGHT_DELETE Then
        Wscript.Echo vbTab &amp;amp; "Delete"
    End If

    If objACE.AccessMask And ADS_RIGHT_READ_CONTROL Then
        Wscript.Echo vbTab &amp;amp; "Read from the security descriptor (not including the SACL)"
    End If

    If objACE.AccessMask And ADS_RIGHT_WRITE_DAC Then
        Wscript.Echo vbTab &amp;amp; "Modify the DACL"
    End If

    If objACE.AccessMask And ADS_RIGHT_OWNER Then
        Wscript.Echo vbTab &amp;amp; "Take ownership"
    End If

    If objACE.AccessMask And ADS_RIGHT_SYNCHRONIZE Then
        Wscript.Echo vbTab &amp;amp; "Use the object for synchronization"
    End If

    If objACE.AccessMask And RIGHT_ACCESS_SYSTEM_SECURITY Then
        Wscript.Echo vbTab &amp;amp; "Get or set the SACL"
    End If

    If objACE.AccessMask And ADS_RIGHT_GENERIC_READ Then
        Wscript.Echo vbTab &amp;amp; "Read permissions and properties"
    End If

    If objACE.AccessMask And ADS_RIGHT_GENERIC_WRITE Then
        Wscript.Echo vbTab &amp;amp; "Write permissions and properties"
    End If

    If objACE.AccessMask And ADS_RIGHT_GENERIC_EXECUTE Then
        Wscript.Echo vbTab &amp;amp; "Read permissions on and list the contents of the container"
    End If

    If objACE.AccessMask And ADS_RIGHT_GENERIC_ALL Then
        Wscript.Echo vbTab &amp;amp; "Create or delete child objects, delete a subtree, read and write " &amp;amp; _
            "properties, examine child objects and the object itself, add and remove the " &amp;amp; _
                "object from the directory, and read or write with an extended right"
    End If
  
    If objACE.AccessMask And ADS_RIGHT_DS_CREATE_CHILD Then
        Wscript.Echo vbTab &amp;amp; "Create child objects"
    End If

    If objACE.AccessMask And ADS_RIGHT_DS_DELETE_CHILD Then
        Wscript.Echo vbTab &amp;amp; "Delete child objects"
    End If

    If objACE.AccessMask And ADS_RIGHT_ACTRL_DS_LIST Then
        Wscript.Echo vbTab &amp;amp; "List child objects"
    End If

    If objACE.AccessMask And ADS_RIGHT_DS_SELF Then
        Wscript.Echo vbTab &amp;amp; "Perform an operation controlled by a validated write access right"
    End If

    If objACE.AccessMask And ADS_RIGHT_DS_READ_PROP Then
        Wscript.Echo vbTab &amp;amp; "Read properties"
    End If

    If objACE.AccessMask And ADS_RIGHT_DS_WRITE_PROP Then
        Wscript.Echo vbTab &amp;amp; "Write properties"
    End If

    If objACE.AccessMask And ADS_RIGHT_DS_DELETE_TREE Then
        Wscript.Echo vbTab &amp;amp; "Delete all child objects"
    End If

    If objACE.AccessMask And ADS_RIGHT_DS_LIST_OBJECT Then
        Wscript.Echo vbTab &amp;amp; "List the object"
    End If

    If objACE.AccessMask And ADS_RIGHT_DS_CONTROL_ACCESS Then
        Wscript.Echo vbTab &amp;amp; "Perform an operation controlled by an extended access right"
    End If

    Wscript.Echo

Next
</vb><vb name="Remove an ACE from a Security Descriptor" n="1373">' Remove an ACE from a Security Descriptor


Set objSdUtil = GetObject("LDAP://OU=Finance,DC=fabrikam,DC=Com")
Set objSD = objSdUtil.Get("ntSecurityDescriptor")
Set objDACL = objSD.DiscretionaryACL

For Each objACE in objDACL
    If objACE.Trustee = "FABRIKAM\kmyer" Then
        objDACL.RemoveAce objACE
    End If
Next

objSD.DiscretionaryAcl = objDacl
objSDUtil.Put "ntSecurityDescriptor", Array(objSD)
objSDUtil.SetInfo
</vb><vb name="Delegate the Send As Extended Right for an Entire OU" n="1374">' Delegate the Send As Extended Right for an Entire OU


Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = &amp;amp;H5
Const ADS_FLAG_OBJECT_TYPE_PRESENT = &amp;amp;H1
Const ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT = &amp;amp;H2
Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100
Const ADS_ACEFLAG_INHERIT_ACE = &amp;amp;H2

Set objSdUtil = GetObject("LDAP://OU=Finance, DC=fabrikam,DC=Com")
Set objSD = objSdUtil.Get("ntSecurityDescriptor")
Set objDACL = objSD.DiscretionaryACL

Set objAce = CreateObject("AccessControlEntry")

objAce.Trustee = "FABRIKAM\kmyer"
objAce.AceFlags = ADS_ACEFLAG_INHERIT_ACE
objAce.AceType = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objAce.Flags = ADS_FLAG_OBJECT_TYPE_PRESENT OR ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT
objAce.ObjectType = "{ab721a54-1e2f-11d0-9819-00aa0040529b}"                     
objACE.InheritedObjectType = "{BF967ABA-0DE6-11D0-A285-00AA003049E2}"
objAce.AccessMask = ADS_RIGHT_DS_CONTROL_ACCESS
objDacl.AddAce objAce

objSD.DiscretionaryAcl = objDacl

objSDUtil.Put "ntSecurityDescriptor", Array(objSD)
objSDUtil.SetInfo
</vb><vb name="Delegate the Receive As Extended Right for an Entire OU" n="1375">' Delegate the Receive As Extended Right for an Entire OU


Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = &amp;amp;H5
Const ADS_FLAG_OBJECT_TYPE_PRESENT = &amp;amp;H1
Const ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT = &amp;amp;H2
Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100
Const ADS_ACEFLAG_INHERIT_ACE = &amp;amp;H2

Set objSdUtil = GetObject("LDAP://OU=Finance, DC=fabrikam,DC=Com")
Set objSD = objSdUtil.Get("ntSecurityDescriptor")
Set objDACL = objSD.DiscretionaryACL

Set objAce = CreateObject("AccessControlEntry")

objAce.Trustee = "FABRIKAM\kmyer"
objAce.AceFlags = ADS_ACEFLAG_INHERIT_ACE
objAce.AceType = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objAce.Flags = ADS_FLAG_OBJECT_TYPE_PRESENT OR ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT
objAce.ObjectType = "{ab721a56-1e2f-11d0-9819-00aa0040529b}"                     
objACE.InheritedObjectType = "{BF967ABA-0DE6-11D0-A285-00AA003049E2}"
objAce.AccessMask = ADS_RIGHT_DS_CONTROL_ACCESS
objDacl.AddAce objAce

objSD.DiscretionaryAcl = objDacl

objSDUtil.Put "ntSecurityDescriptor", Array(objSD)
objSDUtil.SetInfo
</vb><vb name="Delegate the Reset Password Extended Right for an Entire OU" n="1376">' Delegate the Reset Password Extended Right for an Entire OU


Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = &amp;amp;H5
Const ADS_FLAG_OBJECT_TYPE_PRESENT = &amp;amp;H1
Const ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT = &amp;amp;H2
Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100
Const ADS_ACEFLAG_INHERIT_ACE = &amp;amp;H2

Set objSdUtil = GetObject("LDAP://OU=Finance, DC=fabrikam,DC=Com")
Set objSD = objSdUtil.Get("ntSecurityDescriptor")
Set objDACL = objSD.DiscretionaryACL

Set objAce = CreateObject("AccessControlEntry")

objAce.Trustee = "FABRIKAM\kmyer"
objAce.AceFlags = ADS_ACEFLAG_INHERIT_ACE
objAce.AceType = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objAce.Flags = ADS_FLAG_OBJECT_TYPE_PRESENT OR ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT
objAce.ObjectType = "{00299570-246d-11d0-a768-00aa006e0529}"                     
objACE.InheritedObjectType = "{BF967ABA-0DE6-11D0-A285-00AA003049E2}"
objAce.AccessMask = ADS_RIGHT_DS_CONTROL_ACCESS
objDacl.AddAce objAce

objSD.DiscretionaryAcl = objDacl

objSDUtil.Put "ntSecurityDescriptor", Array(objSD)
objSDUtil.SetInfo
</vb><vb name="Delegate the Change Password Extended Right for an Entire OU" n="1377">' Delegate the Change Password Extended Right for an Entire OU


Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = &amp;amp;H5
Const ADS_FLAG_OBJECT_TYPE_PRESENT = &amp;amp;H1
Const ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT = &amp;amp;H2
Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100
Const ADS_ACEFLAG_INHERIT_ACE = &amp;amp;H2

Set objSdUtil = GetObject("LDAP://OU=Finance, DC=fabrikam,DC=Com")
Set objSD = objSdUtil.Get("ntSecurityDescriptor")
Set objDACL = objSD.DiscretionaryACL

Set objAce = CreateObject("AccessControlEntry")

objAce.Trustee = "FABRIKAM\kmyer"
objAce.AceFlags = ADS_ACEFLAG_INHERIT_ACE
objAce.AceType = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objAce.Flags = ADS_FLAG_OBJECT_TYPE_PRESENT OR ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT
objAce.ObjectType = "{ab721a53-1e2f-11d0-9819-00aa0040529b}"                     
objACE.InheritedObjectType = "{BF967ABA-0DE6-11D0-A285-00AA003049E2}"
objAce.AccessMask = ADS_RIGHT_DS_CONTROL_ACCESS
objDacl.AddAce objAce

objSD.DiscretionaryAcl = objDacl

objSDUtil.Put "ntSecurityDescriptor", Array(objSD)
objSDUtil.SetInfo
</vb><vb name="Delegate the Allowed to Authenticate Extended Right for an Entire OU" n="1378">' Delegate the Allowed to Authenticate Extended Right for an Entire OU


Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = &amp;amp;H5
Const ADS_FLAG_OBJECT_TYPE_PRESENT = &amp;amp;H1
Const ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT = &amp;amp;H2
Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100
Const ADS_ACEFLAG_INHERIT_ACE = &amp;amp;H2

Set objSdUtil = GetObject("LDAP://OU=Finance, DC=fabrikam,DC=Com")
Set objSD = objSdUtil.Get("ntSecurityDescriptor")
Set objDACL = objSD.DiscretionaryACL

Set objAce = CreateObject("AccessControlEntry")

objAce.Trustee = "FABRIKAM\kmyer"
objAce.AceFlags = ADS_ACEFLAG_INHERIT_ACE
objAce.AceType = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objAce.Flags = ADS_FLAG_OBJECT_TYPE_PRESENT OR ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT
objAce.ObjectType = "{68b1d179-0d15-4d4f-ab71-46152e79a7bc}"                     
objACE.InheritedObjectType = "{BF967ABA-0DE6-11D0-A285-00AA003049E2}"
objAce.AccessMask = ADS_RIGHT_DS_CONTROL_ACCESS
objDacl.AddAce objAce

objSD.DiscretionaryAcl = objDacl

objSDUtil.Put "ntSecurityDescriptor", Array(objSD)
objSDUtil.SetInfo
</vb><vb name="Delegate the Send As Extended Right for a Single User" n="1379">' Delegate the Send As Extended Right for a Single User


Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = &amp;amp;H5
Const ADS_FLAG_OBJECT_TYPE_PRESENT = &amp;amp;H1
Const ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT = &amp;amp;H2
Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100

Set objSdUtil = GetObject("LDAP://CN=Rob Young, OU=Finance, DC=fabrikam,DC=Com")
Set objSD = objSdUtil.Get("ntSecurityDescriptor")
Set objDACL = objSD.DiscretionaryACL

Set objAce = CreateObject("AccessControlEntry")

objAce.Trustee = "FABRIKAM\kmyer"
objAce.AceFlags = 0
objAce.AceType = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objAce.Flags = ADS_FLAG_OBJECT_TYPE_PRESENT OR ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT
objAce.ObjectType = "{ab721a54-1e2f-11d0-9819-00aa0040529b}"                     
objAce.AccessMask = ADS_RIGHT_DS_CONTROL_ACCESS
objDacl.AddAce objAce

objSD.DiscretionaryAcl = objDacl

objSDUtil.Put "ntSecurityDescriptor", Array(objSD)
objSDUtil.SetInfo
</vb><vb name="Delegate the Receive As Extended Right for a Single User" n="1380">' Delegate the Receive As Extended Right for a Single User


Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = &amp;amp;H5
Const ADS_FLAG_OBJECT_TYPE_PRESENT = &amp;amp;H1
Const ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT = &amp;amp;H2
Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100

Set objSdUtil = GetObject("LDAP://CN=Rob Young, OU=Finance, DC=fabrikam,DC=Com")
Set objSD = objSdUtil.Get("ntSecurityDescriptor")
Set objDACL = objSD.DiscretionaryACL

Set objAce = CreateObject("AccessControlEntry")

objAce.Trustee = "FABRIKAM\kmyer"
objAce.AceFlags = 0
objAce.AceType = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objAce.Flags = ADS_FLAG_OBJECT_TYPE_PRESENT OR ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT
objAce.ObjectType = "{ab721a56-1e2f-11d0-9819-00aa0040529b}"                     
objAce.AccessMask = ADS_RIGHT_DS_CONTROL_ACCESS
objDacl.AddAce objAce

objSD.DiscretionaryAcl = objDacl

objSDUtil.Put "ntSecurityDescriptor", Array(objSD)
objSDUtil.SetInfo
</vb><vb name="Delegate the Reset Password Extended Right for a Single User" n="1381">' Delegate the Reset Password Extended Right for a Single User


Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = &amp;amp;H5
Const ADS_FLAG_OBJECT_TYPE_PRESENT = &amp;amp;H1
Const ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT = &amp;amp;H2
Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100

Set objSdUtil = GetObject("LDAP://CN=Rob Young, OU=Finance, DC=fabrikam,DC=Com")
Set objSD = objSdUtil.Get("ntSecurityDescriptor")
Set objDACL = objSD.DiscretionaryACL

Set objAce = CreateObject("AccessControlEntry")

objAce.Trustee = "FABRIKAM\kmyer"
objAce.AceFlags = 0
objAce.AceType = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objAce.Flags = ADS_FLAG_OBJECT_TYPE_PRESENT OR ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT
objAce.ObjectType = "{00299570-246d-11d0-a768-00aa006e0529}"                     
objAce.AccessMask = ADS_RIGHT_DS_CONTROL_ACCESS
objDacl.AddAce objAce

objSD.DiscretionaryAcl = objDacl

objSDUtil.Put "ntSecurityDescriptor", Array(objSD)
objSDUtil.SetInfo
</vb><vb name="Delegate the Change Password Extended Right for a Single User" n="1382">' Delegate the Change Password Extended Right for a Single User


Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = &amp;amp;H5
Const ADS_FLAG_OBJECT_TYPE_PRESENT = &amp;amp;H1
Const ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT = &amp;amp;H2
Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100

Set objSdUtil = GetObject("LDAP://CN=Rob Young, OU=Finance, DC=fabrikam,DC=Com")
Set objSD = objSdUtil.Get("ntSecurityDescriptor")
Set objDACL = objSD.DiscretionaryACL

Set objAce = CreateObject("AccessControlEntry")

objAce.Trustee = "FABRIKAM\kmyer"
objAce.AceFlags = 0
objAce.AceType = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objAce.Flags = ADS_FLAG_OBJECT_TYPE_PRESENT OR ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT
objAce.ObjectType = "{ab721a53-1e2f-11d0-9819-00aa0040529b}"                     
objAce.AccessMask = ADS_RIGHT_DS_CONTROL_ACCESS
objDacl.AddAce objAce

objSD.DiscretionaryAcl = objDacl

objSDUtil.Put "ntSecurityDescriptor", Array(objSD)
objSDUtil.SetInfo
</vb><vb name="Delegate the Allowed to Authenticate Extended Right for a Single User" n="1383">' Delegate the Allowed to Authenticate Extended Right for a Single User


Const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = &amp;amp;H5
Const ADS_FLAG_OBJECT_TYPE_PRESENT = &amp;amp;H1
Const ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT = &amp;amp;H2
Const ADS_RIGHT_DS_CONTROL_ACCESS = &amp;amp;H100

Set objSdUtil = GetObject("LDAP://CN=Rob Young, OU=Finance, DC=fabrikam,DC=Com")
Set objSD = objSdUtil.Get("ntSecurityDescriptor")
Set objDACL = objSD.DiscretionaryACL

Set objAce = CreateObject("AccessControlEntry")

'Receive As
objAce.Trustee = "FABRIKAM\kmyer"
objAce.AceFlags = 0
objAce.AceType = ADS_ACETYPE_ACCESS_ALLOWED_OBJECT
objAce.Flags = ADS_FLAG_OBJECT_TYPE_PRESENT OR ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT
objAce.ObjectType = "{68b1d179-0d15-4d4f-ab71-46152e79a7bc}"                     
objAce.AccessMask = ADS_RIGHT_DS_CONTROL_ACCESS
objDacl.AddAce objAce

objSD.DiscretionaryAcl = objDacl

objSDUtil.Put "ntSecurityDescriptor", Array(objSD)
objSDUtil.SetInfo
</vb></dd>
		<dd name="DACLs" code="dacls" desc="Sample scripts for retrieving and managing discretionary access control lists (DACLs)."><vb name="Read a File DACL" n="1384">' Read a File DACL



strFileName = "C:\scripts\center\test.txt"
SE_DACL_PRESENT = &amp;amp;h4
ACCESS_ALLOWED_ACE_TYPE = &amp;amp;h0
ACCESS_DENIED_ACE_TYPE  = &amp;amp;h1

FILE_ALL_ACCESS       = &amp;amp;h1f01ff
FILE_APPEND_DATA      = &amp;amp;h000004
FILE_DELETE           = &amp;amp;h010000
FILE_DELETE_CHILD     = &amp;amp;h000040
FILE_EXECUTE          = &amp;amp;h000020
FILE_READ_ATTRIBUTES  = &amp;amp;h000080
FILE_READ_CONTROL     = &amp;amp;h020000
FILE_READ_DATA        = &amp;amp;h000001
FILE_READ_EA          = &amp;amp;h000008
FILE_SYNCHRONIZE      = &amp;amp;h100000
FILE_WRITE_ATTRIBUTES = &amp;amp;h000100
FILE_WRITE_DAC        = &amp;amp;h040000
FILE_WRITE_DATA       = &amp;amp;h000002
FILE_WRITE_EA         = &amp;amp;h000010
FILE_WRITE_OWNER      = &amp;amp;h080000

Set objWMIService = GetObject("winmgmts:")
Set objFileSecuritySettings = _
objWMIService.Get("Win32_LogicalFileSecuritySetting='" &amp;amp; strFileName &amp;amp; "'")
intRetVal = objFileSecuritySettings.GetSecurityDescriptor(objSD)

intControlFlags = objSD.ControlFlags

If intControlFlags AND SE_DACL_PRESENT Then
   arrACEs = objSD.DACL
   For Each objACE in arrACEs
      WScript.Echo objACE.Trustee.Domain &amp;amp; "\" &amp;amp; objACE.Trustee.Name
      If objACE.AceType = ACCESS_ALLOWED_ACE_TYPE Then
         WScript.Echo vbTab &amp;amp; "Allowed:"
      ElseIf objACE.AceType = ACCESS_DENIED_ACE_TYPE Then
         WScript.Echo vbTab &amp;amp; "Denied:"
      End If
      If objACE.AccessMask AND FILE_ALL_ACCESS Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_ALL_ACCESS "
      End If
      If objACE.AccessMask AND FILE_APPEND_DATA Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_APPEND_DATA "
      End If
      If objACE.AccessMask AND FILE_DELETE Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_DELETE "
      End If
      If objACE.AccessMask AND FILE_DELETE_CHILD Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_DELETE_CHILD "
      End If
      If objACE.AccessMask AND FILE_EXECUTE Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_EXECUTE "
      End If
      If objACE.AccessMask AND FILE_READ_ATTRIBUTES Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_READ_ATTRIBUTES "
      End If
      If objACE.AccessMask AND FILE_READ_CONTROL Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_READ_CONTROL "
      End If
      If objACE.AccessMask AND FILE_READ_DATA Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_READ_DATA "
      End If
      If objACE.AccessMask AND FILE_READ_EA Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_READ_EA "
      End If
      If objACE.AccessMask AND FILE_SYNCHRONIZE Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_SYNCHRONIZE "
      End If
      If objACE.AccessMask AND FILE_WRITE_ATTRIBUTES Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_WRITE_ATTRIBUTES "
      End If
      If objACE.AccessMask AND FILE_WRITE_DAC Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_WRITE_DAC "
      End If
      If objACE.AccessMask AND FILE_WRITE_DATA Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_WRITE_DATA "
      End If
      If objACE.AccessMask AND FILE_WRITE_EA Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_WRITE_EA "
      End If
      If objACE.AccessMask AND FILE_WRITE_OWNER Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_WRITE_OWNER "
      End If
   Next
Else
   WScript.Echo "No DACL present in security descriptor"
End If
</vb><vb name="Read a Folder DACL" n="1385">' Read a Folder DACL



strFolderName = "C:\scripts\sec_center"
SE_DACL_PRESENT = &amp;amp;h4
ACCESS_ALLOWED_ACE_TYPE = &amp;amp;h0
ACCESS_DENIED_ACE_TYPE  = &amp;amp;h1

FILE_ALL_ACCESS         = &amp;amp;h1f01ff
FOLDER_ADD_SUBDIRECTORY = &amp;amp;h000004
FILE_DELETE             = &amp;amp;h010000
FILE_DELETE_CHILD       = &amp;amp;h000040
FOLDER_TRAVERSE         = &amp;amp;h000020
FILE_READ_ATTRIBUTES    = &amp;amp;h000080
FILE_READ_CONTROL       = &amp;amp;h020000
FOLDER_LIST_DIRECTORY   = &amp;amp;h000001
FILE_READ_EA            = &amp;amp;h000008
FILE_SYNCHRONIZE        = &amp;amp;h100000
FILE_WRITE_ATTRIBUTES   = &amp;amp;h000100
FILE_WRITE_DAC          = &amp;amp;h040000
FOLDER_ADD_FILE         = &amp;amp;h000002
FILE_WRITE_EA           = &amp;amp;h000010
FILE_WRITE_OWNER        = &amp;amp;h080000

Set objWMIService = GetObject("winmgmts:")
Set objFolderSecuritySettings = _
objWMIService.Get("Win32_LogicalFileSecuritySetting='" &amp;amp; strFolderName &amp;amp; "'")
intRetVal = objFolderSecuritySettings.GetSecurityDescriptor(objSD)

intControlFlags = objSD.ControlFlags

If intControlFlags AND SE_DACL_PRESENT Then
   arrACEs = objSD.DACL
   For Each objACE in arrACEs
      WScript.Echo objACE.Trustee.Domain &amp;amp; "\" &amp;amp; objACE.Trustee.Name
      If objACE.AceType = ACCESS_ALLOWED_ACE_TYPE Then
         WScript.Echo vbTab &amp;amp; "Allowed:"
      ElseIf objACE.AceType = ACCESS_DENIED_ACE_TYPE Then
         WScript.Echo vbTab &amp;amp; "Denied:"
      End If
      If objACE.AccessMask AND FILE_ALL_ACCESS Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_ALL_ACCESS "
      End If
      If objACE.AccessMask AND FOLDER_ADD_SUBDIRECTORY Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; " FOLDER_ADD_SUBDIRECTORY "
      End If
      If objACE.AccessMask AND FILE_DELETE Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_DELETE "
      End If
      If objACE.AccessMask AND FILE_DELETE_CHILD Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_DELETE_CHILD "
      End If
      If objACE.AccessMask AND FOLDER_TRAVERSE Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; " FOLDER_TRAVERSE "
      End If
      If objACE.AccessMask AND FILE_READ_ATTRIBUTES Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_READ_ATTRIBUTES "
      End If
      If objACE.AccessMask AND FILE_READ_CONTROL Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_READ_CONTROL "
      End If
      If objACE.AccessMask AND FOLDER_LIST_DIRECTORY Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; " FOLDER_LIST_DIRECTORY "
      End If
      If objACE.AccessMask AND FILE_READ_EA Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_READ_EA "
      End If
      If objACE.AccessMask AND FILE_SYNCHRONIZE Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_SYNCHRONIZE "
      End If
      If objACE.AccessMask AND FILE_WRITE_ATTRIBUTES Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_WRITE_ATTRIBUTES "
      End If
      If objACE.AccessMask AND FILE_WRITE_DAC Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_WRITE_DAC "
      End If
      If objACE.AccessMask AND FOLDER_ADD_FILE Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; " FOLDER_ADD_FILE "
      End If
      If objACE.AccessMask AND FILE_WRITE_EA Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_WRITE_EA "
      End If
      If objACE.AccessMask AND FILE_WRITE_OWNER Then
         WScript.Echo vbTab &amp;amp; vbTab &amp;amp; "FILE_WRITE_OWNER "
      End If
   Next
Else
   WScript.Echo "No DACL present in security descriptor"
End If
</vb></dd>
		<dd name="Resource Ownership" code="ownership" desc="Sample scripts for retrieving and managing ownership of resources."><vb name="Retrieve Owner of a File" n="1386">' Retrieve Owner of a File


strFileName = "C:\scripts\center\test.txt"
Set objWMIService = GetObject("winmgmts:")
Set objFileSecuritySettings = _
objWMIService.Get("Win32_LogicalFileSecuritySetting='" &amp;amp; strFileName &amp;amp; "'")
intRetVal = objFileSecuritySettings.GetSecurityDescriptor(objSD)

If intRetVal = 0 Then
   WScript.Echo "Owner: " &amp;amp; objSD.Owner.Domain &amp;amp; "\" &amp;amp; objSD.Owner.Name
Else
   WScript.Echo "Couldn't retrieve security descriptor."
End If
</vb><vb name="Retrieve Owner of a Folder" n="1387">' Retrieve Owner of a Folder


strFolderName = "C:\scripts\sec_center"
Set objWMIService = GetObject("winmgmts:")
Set objFolderSecuritySettings = _
objWMIService.Get("Win32_LogicalFileSecuritySetting='" &amp;amp; strFolderName &amp;amp; "'")
intRetVal = objFolderSecuritySettings.GetSecurityDescriptor(objSD)

If intRetVal = 0 Then
   WScript.Echo "Owner: " &amp;amp; objSD.Owner.Domain &amp;amp; "\" &amp;amp; objSD.Owner.Name
Else
   WScript.Echo "Couldn't retrieve security descriptor."
End If
</vb></dd>
		<dd name="Script Signing" code="signing" desc="Sample scripts demonstrating how to digitally sign scripts using Windows Script Host 5.6"><vb name="Sign a Script Programmatically" n="1388">' Sign a Script Programmatically


Set objSigner = WScript.CreateObject("Scripting.Signer")
objSigner.SignFile "C:\Scripts\CreateUsers.vbs", "IT Department"
</vb><vb name="Sign All the Scripts in a Folder" n="1389">' Sign All the Scripts in a Folder


Set objSigner = WScript.CreateObject("Scripting.Signer")
Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFolder = objFSO.GetFolder("c:\scripts")
Set colListOfFiles = objFolder.Files

For Each objFile in colListOfFiles
    objSigner.SignFile objFile.Path, "IT Department"
Next
</vb><vb name="Verify a Script Signature" n="1390">' Verify a Script Signature


blnShowGUI = False

Set objSigner = WScript.CreateObject("Scripting.Signer")
blnIsSigned = objSigner.VerifyFile("C:\Scripts\CreateUser.vbs", blnShowGUI)

If blnIsSigned Then
    WScript.Echo "Script has been signed."
Else
   WScript.Echo " Script has not been signed."
End If
</vb><vb name="Verify Signatures for All the Scripts in a Folder" n="1391">' Verify Signatures for All the Scripts in a Folder


blnShowGUI = False

set objSigner = WScript.CreateObject("Scripting.Signer")
Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFolder = objFSO.GetFolder("C:\Scripts\")
Set colListOfFiles = objFolder.Files

For Each objFile in colListOfFiles
    If Right(objFile.Name, 3) = "vbs" Then
        blnIsSigned = objSigner.VerifyFile(objFile.Path, blnShowGUI)
        If blnIsSigned then
            WScript.Echo objFile.Name &amp;amp; " has been signed."
        Else
            WScript.Echo objFile.Name &amp;amp; " has not been signed."
        End If
    End If
Next
</vb></dd>
	</dd>
	<dd name="Service Packs and Hot Fixes" code="srvpacks" desc="Sample scripts for retrieving information about service packs and hot fixes installed on a computer.">
		<vb name="List Installed Hot Fixes" n="1392">' List Installed Hot Fixes


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colQuickFixes = objWMIService.ExecQuery _
    ("Select * from Win32_QuickFixEngineering")

For Each objQuickFix in colQuickFixes
    Wscript.Echo "Computer: " &amp;amp; objQuickFix.CSName
    Wscript.Echo "Description: " &amp;amp; objQuickFix.Description
    Wscript.Echo "Hot Fix ID: " &amp;amp; objQuickFix.HotFixID
    Wscript.Echo "Installation Date: " &amp;amp; objQuickFix.InstallDate
    Wscript.Echo "Installed By: " &amp;amp; objQuickFix.InstalledBy
Next
</vb><vb name="List the Latest Installed Service Pack" n="1393">' List the Latest Installed Service Pack


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colOperatingSystems = objWMIService.ExecQuery _
    ("Select * from Win32_OperatingSystem")

For Each objOperatingSystem in colOperatingSystems
    Wscript.Echo objOperatingSystem.ServicePackMajorVersion  _
        &amp;amp; "." &amp;amp; objOperatingSystem.ServicePackMinorVersion
Next
</vb></dd>
	<dd name="Services for Unix" code="sfunix" desc="Sample scripts for managing Microsoft Services for Unix.">
		<dd name="Basic Information" code="admin" desc="Sample scripts for carrying out basic Services for Unix administration tasks."><vb name="List SFU Component Information" n="1394">' List SFU Component Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from SFU_Component")

For Each objItem in colItems
    Wscript.Echo "Component: " &amp;amp; objItem.Component
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Tab Number: " &amp;amp; objItem.TabNum
    Wscript.Echo
Next
</vb><vb name="List SFU Domain Information" n="1395">' List SFU Domain Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from SFU_Domain")

For Each objItem in colItems
    Wscript.Echo "DC: " &amp;amp; objItem.DC
    Wscript.Echo "Default: " &amp;amp; objItem.Default
    Wscript.Echo "Domain: " &amp;amp; objItem.Domain
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Maps: " &amp;amp; objItem.Maps
    Wscript.Echo
Next
</vb><vb name="List SFU Dummy Information" n="1396">' List SFU Dummy Information


On Error Resume Next

strComputer = "."

Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from SFU_Dummy")

For Each objItem in colItems
    Wscript.Echo "Dummy: " &amp;amp; objItem.Dummy
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo
Next
</vb><vb name="List SFU Global Settings" n="1397">' List SFU Global Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from GlobalSettings_Reg")

For Each objItem in colItems
    Wscript.Echo "Dummy: " &amp;amp; objItem.Dummy
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    For Each strServer in objItem.MappingServers      
        Wscript.Echo "Mapping Server: " &amp;amp; strServer
    Next
    Wscript.Echo
Next
</vb><vb name="List SFU Mapper Settings" n="1398">' List SFU Mapper Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Mapper_Settings")

For Each objItem in colItems
    Wscript.Echo "Additional Map Definitions: " &amp;amp; _
        objItem.AdditionalMapDefinitions
    Wscript.Echo "Advanced Group Maps: " &amp;amp; _
        objItem.AdvancedGroupMaps
    Wscript.Echo "Advanced User Maps: " &amp;amp; _
        objItem.AdvancedUserMaps
    Wscript.Echo "Anonymous GID: " &amp;amp; objItem.AnonymousGid
    Wscript.Echo "Anonymous UID: " &amp;amp; objItem.AnonymousUid
    Wscript.Echo "Anonymous Unix User: " &amp;amp; _
        objItem.AnonymousUnixUser
    Wscript.Echo "Authentication Type: " &amp;amp; objItem.AuthType
    Wscript.Echo "Backup File Name: " &amp;amp; objItem.BackupFileName
    Wscript.Echo "Default: " &amp;amp; objItem.Default
    Wscript.Echo "Group File Name: " &amp;amp; objItem.GroupFileName
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Logging Level: " &amp;amp; objItem.LoggingLevel
    Wscript.Echo "Map File Name: " &amp;amp; objItem.MapFileName
    Wscript.Echo "NIS Domain: " &amp;amp; objItem.NisDomain
    Wscript.Echo "NIS Server: " &amp;amp; objItem.NisServer
    Wscript.Echo "NT Domain: " &amp;amp; objItem.NTDomain
    Wscript.Echo "NT Domain2: " &amp;amp; objItem.NTDomain2
    Wscript.Echo "Password File Name: " &amp;amp; objItem._
        PasswdFileName
    Wscript.Echo "Refresh Interval: " &amp;amp; _
        objItem.RefreshInterval
    Wscript.Echo "Restore File Name: " &amp;amp; _
        objItem.RestoreFileName
    Wscript.Echo "Security: " &amp;amp; objItem.Security
    Wscript.Echo "Server Type: " &amp;amp; objItem.ServerType
    Wscript.Echo "Write Block: " &amp;amp; objItem.WriteBlock
    Wscript.Echo
Next
</vb><vb name="List SFU Mapping Server Settings" n="1399">' List SFU Mapping Server Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from MapServer_Reg")

For Each objItem in colItems
    Wscript.Echo "Default: " &amp;amp; objItem.Default
    Wscript.Echo "KeyName: " &amp;amp; objItem.KeyName
    Wscript.Echo "ReadConfig: " &amp;amp; objItem.ReadConfig
    Wscript.Echo
Next
</vb><vb name="List SFU Remote Settings" n="1400">' List SFU Remote Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from SFU_Remote")

For Each objItem in colItems
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Machine: " &amp;amp; objItem.Machine
    Wscript.Echo "Path: " &amp;amp; objItem.Path
    Wscript.Echo
Next
</vb><vb name="List SFU Version Information" n="1401">' List SFU Version Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from version_info")

For Each objItem in colItems
    Wscript.Echo "Current release: " &amp;amp; objItem.curRel
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "PUD: " &amp;amp; objItem.pid
    Wscript.Echo "Version: " &amp;amp; objItem.Version
    Wscript.Echo
Next
</vb><vb name="List the SFU Product Version" n="1402">' List the SFU Product Version


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery("Select * from ProductVer")

For Each objItem in colItems
    Wscript.Echo "KeyName: " &amp;amp; objItem.KeyName
    Wscript.Echo "Operating System Version: " &amp;amp; objItem.OsVersion
    Wscript.Echo "Software Type: " &amp;amp; objItem.SoftwareType
    Wscript.Echo
Next
</vb><vb name="List the SFU Windows Directory" n="1403">' List the SFU Windows Directory


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from SFU_Windir")

For Each objItem in colItems
    Wscript.Echo "Default: " &amp;amp; objItem.default
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Windows directory: " &amp;amp; objItem.windir
    Wscript.Echo
Next
</vb><vb name="Modify SFU Mapper Settings" n="1404">' Modify SFU Mapper Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Mapper_Settings Where KeyName = 'CurrentVersion'")

For Each objItem in colItems
    objItem.LoggingLevel = 1
    objItem.Put_
Next
</vb></dd>
		<dd name="NFS" code="nfs" desc="Sample scripts for managing NFS using Services for Unix."><vb name="List NFS Client Authentication Settings" n="1405">' List NFS Client Authentication Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSClient_Authenticate")

For Each objItem in colItems
    Wscript.Echo "Authentication Type: " &amp;amp; objItem.AuthType
    Wscript.Echo "Default: " &amp;amp; objItem.Default
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "NIS Domain: " &amp;amp; objItem.NISDomain
    Wscript.Echo "NIS Server: " &amp;amp; objItem.NISServer
    Wscript.Echo "NT Domain: " &amp;amp; objItem.NTDomain
    Wscript.Echo "PC NFSD Server: " &amp;amp; objItem.PCNFSDServer
    Wscript.Echo
Next
</vb><vb name="List NFS Client File Settings" n="1406">' List NFS Client File Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSClient_Files")

For Each objItem in colItems
    Wscript.Echo "Access: " &amp;amp; objItem.Access
    Wscript.Echo "Default: " &amp;amp; objItem.Default
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo
Next
</vb><vb name="List NFS Client Global Settings" n="1407">' List NFS Client Global Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSClient_Reg")

For Each objItem in colItems
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Read Configuration: " &amp;amp; objItem.ReadConfig
    Wscript.Echo
Next
</vb><vb name="List NFS Client Mapping Server Settings" n="1408">' List NFS Client Mapping Server Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSClient_MapSvr")

For Each objItem in colItems
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Map Server: " &amp;amp; objItem.MapSvr
    Wscript.Echo
Next
</vb><vb name="List NFS Client Performance Information" n="1409">' List NFS Client Performance Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSClient_Perf")

For Each objItem in colItems
    Wscript.Echo "AutoTuning: " &amp;amp; objItem.AutoTuning
    Wscript.Echo "Default: " &amp;amp; objItem.Default
    Wscript.Echo "Defaults: " &amp;amp; objItem.Defaults
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Mount Type: " &amp;amp; objItem.MountType
    Wscript.Echo "Prefer TCP: " &amp;amp; objItem.PreferTCP
    Wscript.Echo "Read Buffer: " &amp;amp; objItem.ReadBuffer
    Wscript.Echo "Retries: " &amp;amp; objItem.Retries
    Wscript.Echo "Timeout: " &amp;amp; objItem.Timeout
    Wscript.Echo "Write Buffer: " &amp;amp; objItem.WriteBuffer
    Wscript.Echo
Next
</vb><vb name="List NFS Client Prefer TCP Settings" n="1410">' List NFS Client Prefer TCP Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSClient_PreferTCP")

For Each objItem in colItems
    Wscript.Echo "Default: " &amp;amp; objItem.Default
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Prefer TCP: " &amp;amp; objItem.PreferTCP
    Wscript.Echo
Next
</vb><vb name="List NFS Client Security Settings" n="1411">' List NFS Client Security Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSClient_Security")

For Each objItem in colItems
    Wscript.Echo "Default: " &amp;amp; objItem.Default
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Security: " &amp;amp; objItem.Security
    Wscript.Echo
Next
</vb><vb name="List NFS Server Auditing Settings" n="1412">' List NFS Server Auditing Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSServer_Auditing")

For Each objItem in colItems
    Wscript.Echo "Audit: " &amp;amp; objItem.Audit
    Wscript.Echo "Audit Bits: " &amp;amp; objItem.AuditBits
    Wscript.Echo "Check Space: " &amp;amp; objItem.CheckSpace
    Wscript.Echo "Default: " &amp;amp; objItem.Default
    Wscript.Echo "File Maximum Size: " &amp;amp; objItem.FileMaxSize
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Log File: " &amp;amp; objItem.LogFile
    Wscript.Echo "Minimum Space: " &amp;amp; objItem.MinSpace
    Wscript.Echo
Next
</vb><vb name="List NFS Server Authentication Settings" n="1413">' List NFS Server Authentication Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSServer_Authenticate")

For Each objItem in colItems
    Wscript.Echo "Authentication Type: " &amp;amp; objItem.AuthType
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "NIS Domain: " &amp;amp; objItem.NISDomain
    Wscript.Echo "NIS Server: " &amp;amp; objItem.NISServer
    Wscript.Echo "NT Domain: " &amp;amp; objItem.NTDomain
    Wscript.Echo "PC NFSD Server: " &amp;amp; objItem.PCNFSDServer
    Wscript.Echo
Next
</vb><vb name="List NFS Server Character Translation Settings" n="1414">' List NFS Server Character Translation Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSServer_SvSet_CharTran")

For Each objItem in colItems
    Wscript.Echo "Character Translation: " &amp;amp; objItem.CharacterTranslation
    Wscript.Echo "Default: " &amp;amp; objItem.Default
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo
Next
</vb><vb name="List NFS Server File Settings" n="1415">' List NFS Server File Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSServer_Files")

For Each objItem in colItems
    Wscript.Echo "Case: " &amp;amp; objItem.Case
    Wscript.Echo "Default: " &amp;amp; objItem.Default
    Wscript.Echo "Grace Period: " &amp;amp; objItem.GracePeriod
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Timeout: " &amp;amp; objItem.Timeout
    Wscript.Echo
Next
</vb><vb name="List NFS Server Global Settings" n="1416">' List NFS Server Global Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSServer_Reg")

For Each objItem in colItems
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Read Configuration: " &amp;amp; objItem.ReadConfig
    Wscript.Echo
Next
</vb><vb name="List NFS Server Mapping Server Settings" n="1417">' List NFS Server Mapping Server Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSServer_MapSvr")

For Each objItem in colItems
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Map Server: " &amp;amp; objItem.MapSvr
    Wscript.Echo
Next
</vb><vb name="List NFS Server Security Settings" n="1418">' List NFS Server Security Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSServer_Security")

For Each objItem in colItems
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Security: " &amp;amp; objItem.Security
    Wscript.Echo
Next
</vb><vb name="List NFS Server Settings" n="1419">' List NFS Server Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSServer_SvSet")

For Each objItem in colItems
    Wscript.Echo "Case Sensitive: " &amp;amp; objItem.CaseSensitive
    Wscript.Echo "CDFS Case: " &amp;amp; objItem.CdfsCase
    Wscript.Echo "Default: " &amp;amp; objItem.Default
    Wscript.Echo "Directory Cache Pages: " &amp;amp; _
        objItem.DirectoryCachePages
    Wscript.Echo "Dot Files Hidden: " &amp;amp; objItem.DotFilesHidden
    Wscript.Echo "FAT Case: " &amp;amp; objItem.FatCase
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Logon TimeOut: " &amp;amp; objItem.LogonTimeOut
    Wscript.Echo "Maximum Handle Cache Size: " &amp;amp; _
        objItem.MaxHandleCacheSize
    Wscript.Echo "NTFS Case: " &amp;amp; objItem.NtfsCase
    Wscript.Echo "RdWr Handle LifeTime: " &amp;amp; _
        objItem.RdWrHandleLifeTime
    Wscript.Echo "Register TCP: " &amp;amp; objItem.RegisterTcp
    Wscript.Echo "Register Version 3: " &amp;amp; _
        objItem.RegisterVersion3
    Wscript.Echo
Next
</vb><vb name="List the NFS Server Version" n="1420">' List the NFS Server Version


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSServer_CurrentVersion")

For Each objItem in colItems
    Wscript.Echo "Default: " &amp;amp; objItem.Default
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Path Name: " &amp;amp; objItem.PathName
    Wscript.Echo
Next
</vb><vb name="Modify NFS Client Performance Settings" n="1421">' Modify NFS Client Performance Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSClient_Perf Where KeyName = 'Defaults'")

For Each objItem in colItems
    objItem.Retries = 2
    objItem.Put_
Next
</vb><vb name="Modify NFS Server Auditing Settings" n="1422">' Modify NFS Server Auditing Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSServer_Auditing Where KeyName = 'Parameters'")

For Each objItem in colItems
    objItem.Audit = 1
    objItem.Put_
Next
</vb><vb name="Modify NFS Server Settings" n="1423">' Modify NFS Server Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from NFSServer_SvSet Where KeyName = 'Parameters'")

For Each objItem in colItems
    objItem.CaseSensitive = 0
    objItem.Put_
Next
</vb></dd>
		<dd name="Telnet Server" code="telnet" desc="Sample scripts for managing the Telnet Server that ships with Services for Unix."><vb name="List Telnet Server Auditing Settings" n="1424">' List Telnet Server Auditing Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Telnet_Auditing")

For Each objItem in colItems
    Wscript.Echo "Default: " &amp;amp; objItem.Default
    Wscript.Echo "Event Logging Enabled: " &amp;amp; _
        objItem.EventLoggingEnabled
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Log Administrator Attempts: " &amp;amp; _
        objItem.LogAdminAttempts
    Wscript.Echo "Log Events: " &amp;amp; objItem.LogEvents
    Wscript.Echo "Log Failures: " &amp;amp; objItem.LogFailures
    Wscript.Echo "Log File: " &amp;amp; objItem.LogFile
    Wscript.Echo "Log File Size: " &amp;amp; objItem.LogFileSize
    Wscript.Echo "Log To File: " &amp;amp; objItem.LogToFile
    Wscript.Echo
Next
</vb><vb name="List Telnet Server Authentication Settings" n="1425">' List Telnet Server Authentication Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Telnet_Authenticate")

For Each objItem in colItems
    Wscript.Echo "Default: " &amp;amp; objItem.Default
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Mechanism: " &amp;amp; objItem.Mechanism
    Wscript.Echo
Next
</vb><vb name="List Telnet Server Information" n="1426">' List Telnet Server Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Tlnt_Reg")

For Each objItem in colItems
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Read Configuration: " &amp;amp; objItem.ReadConfig
    Wscript.Echo
Next
</vb><vb name="List Telnet Server License Information" n="1427">' List Telnet Server License Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from TelnetServer_Licences")

For Each objItem in colItems
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Licenses: " &amp;amp; objItem.Licences
    Wscript.Echo "Mode: " &amp;amp; objItem.Mode
    Wscript.Echo
Next
</vb><vb name="List Telnet Server Settings" n="1428">' List Telnet Server Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from TelnetServer_Settings")

For Each objItem in colItems
    Wscript.Echo "Alt Key Mapping: " &amp;amp; objItem.AltKeyMapping
    Wscript.Echo "Default: " &amp;amp; objItem.Default
    Wscript.Echo "Default Domain: " &amp;amp; objItem.DefaultDomain
    Wscript.Echo "Idle Session Timeout: " &amp;amp; _
        objItem.IdleSessionTimeout
    Wscript.Echo "Idle Session Timeout Backup: " &amp;amp; _
        objItem.IdleSessionTimeoutBkup
    Wscript.Echo "Key Name: " &amp;amp; objItem.KeyName
    Wscript.Echo "Kill All: " &amp;amp; objItem.KillAll
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaxConnections
    Wscript.Echo "Maximum Failed Logins: " &amp;amp; _
        objItem.MaxFailedLogins
    Wscript.Echo "Mode Operation: " &amp;amp; objItem.ModeOperation
    Wscript.Echo "Telnet Port: " &amp;amp; objItem.TelnetPort
    Wscript.Echo
Next
</vb><vb name="Modify Telnet Auditing Settings" n="1429">' Modify Telnet Auditing Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Telnet_Auditing Where KeyName = 'Defaults'")

For Each objItem in colItems
    objItem.LogEvents = 1
    objItem.Put_
Next
</vb><vb name="Modify Telnet Server Settings" n="1430">' Modify Telnet Server Settings


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\sfuadmin")

Set colItems = objWMIService.ExecQuery _\
    ("Select * from TelnetServer_Settings Where KeyName = 'Defaults'")

For Each objItem in colItems
    objItem.DefaultDomain = "fabrikam.com"
    objItem.Put_
Next
</vb></dd>
	</dd>
	<dd name="Shadow Copy" code="shadow" desc="Sample scripts for managing the Shadow Copy service on Windows Server 2003.">
		<vb name="Create a Shadow Copy" n="1431">' Create a Shadow Copy


Const VOLUME = "C:\"
Const CONTEXT = "ClientAccessible"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objShadowStorage = objWMIService.Get("Win32_ShadowCopy")
errResult = objShadowStorage.Create(VOLUME, CONTEXT, strShadowID)
</vb><vb name="Create a Shadow Copy Storage Area" n="1432">' Create a Shadow Copy Storage Area


Const VOLUME = "C:\"
Const DIFFERENTIAL_VOLUME = "E:\"
Const MAXIMUM_SPACE = 130023424
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objShadowStorage = objWMIService.Get("Win32_ShadowStorage")
errResult = objShadowStorage.Create(VOLUME, DIFFERENTIAL_VOLUME, MAXIMUM_SPACE)
</vb><vb name="Delete All Shadow Copies on a Computer" n="1433">' Delete All Shadow Copies on a Computer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
)
Set colItems = objWMIService.ExecQuery("Select * From Win32_ShadowCopy")

For Each objItem in colItems
    objItem.Delete_
Next
</vb><vb name="Delete All Shadow Copy Storage Areas" n="1434">' Delete All Shadow Copy Storage Areas


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * From Win32_ShadowStorage")

For Each objItem in colItems
    objItem.Delete_
Next
</vb><vb name="List All Shadow Copies on a Computer" n="1435">' List All Shadow Copies on a Computer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_ShadowCopy")

For Each objItem in colItems
    Wscript.Echo "ID: " &amp;amp; objItem.ID
    Wscript.Echo "Client accessible: " &amp;amp; objItem.ClientAccessible
    Wscript.Echo "Count: " &amp;amp; objItem.Count
    Wscript.Echo "Device object: " &amp;amp; objItem.DeviceObject
    Wscript.Echo "Differential: " &amp;amp; objItem.Differential
    Wscript.Echo "Exposed locally: " &amp;amp; objItem.ExposedLocally
    Wscript.Echo "Exposed name: " &amp;amp; objItem.ExposedName
    Wscript.Echo "Exposed remotely: " &amp;amp; objItem.ExposedRemotely
    Wscript.Echo "Hardware assisted: " &amp;amp; objItem.HardwareAssisted
    Wscript.Echo "Imported: " &amp;amp; objItem.Imported
    Wscript.Echo "No auto release: " &amp;amp; objItem.NoAutoRelease
    Wscript.Echo "Not surfaced: " &amp;amp; objItem.NotSurfaced
    Wscript.Echo "No writers: " &amp;amp; objItem.NoWriters
    Wscript.Echo "Originating machine: " &amp;amp; objItem.OriginatingMachine
    Wscript.Echo "Persistent: " &amp;amp; objItem.Persistent
    Wscript.Echo "Plex: " &amp;amp; objItem.Plex
    Wscript.Echo "Provider ID: " &amp;amp; objItem.ProviderID
    Wscript.Echo "Service machine: " &amp;amp; objItem.ServiceMachine
    Wscript.Echo "Set ID: " &amp;amp; objItem.SetID
    Wscript.Echo "State: " &amp;amp; objItem.State
    Wscript.Echo "Transportable: " &amp;amp; objItem.Transportable
    Wscript.Echo "Volume name: " &amp;amp; objItem.VolumeName
    Wscript.Echo
Next
</vb><vb name="List All Shadow Copy Providers" n="1436">' List All Shadow Copy Providers


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_ShadowProvider")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "CLSID: " &amp;amp; objItem.CLSID
    Wscript.Echo "ID: " &amp;amp; objItem.ID
    Wscript.Echo "Type: " &amp;amp; objItem.Type
    Wscript.Echo "Version: " &amp;amp; objItem.Version
    Wscript.Echo "Version ID: " &amp;amp; objItem.VersionID
    Wscript.Echo
Next
</vb><vb name="List All Shadow Copy Storage Areas on a Computer" n="1437">' List All Shadow Copy Storage Areas on a Computer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_ShadowStorage")

For Each objItem in colItems
    Wscript.Echo "Volume: " &amp;amp; objItem.Volume
    Wscript.Echo "Allocated space: " &amp;amp; objItem.AllocatedSpace
    Wscript.Echo "Differential volume: " &amp;amp; objItem.DiffVolume
    Wscript.Echo "Maximum space: " &amp;amp; objItem.MaxSpace
    Wscript.Echo "Used space: " &amp;amp; objItem.UsedSpace
    Wscript.Echo
Next
</vb><vb name="List Shadow Copy Settings" n="1438">' List Shadow Copy Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_ShadowContext")

For Each objItem in colItems
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Client accessible: " &amp;amp; objItem.ClientAccessible
    Wscript.Echo "Differential: " &amp;amp; objItem.Differential
    Wscript.Echo "Exposed locally: " &amp;amp; objItem.ExposedLocally
    Wscript.Echo "Exposed remotely: " &amp;amp; objItem.ExposedRemotely
    Wscript.Echo "Hardware assisted: " &amp;amp; objItem.HardwareAssisted
    Wscript.Echo "Imported: " &amp;amp; objItem.Imported
    Wscript.Echo "No auto release: " &amp;amp; objItem.NoAutoRelease
    Wscript.Echo "Not surfaced: " &amp;amp; objItem.NotSurfaced
    Wscript.Echo "No writers: " &amp;amp; objItem.NoWriters
    Wscript.Echo "Persistent: " &amp;amp; objItem.Persistent
    Wscript.Echo "Plex: " &amp;amp; objItem.Plex
    Wscript.Echo "Transportable: " &amp;amp; objItem.Transportable
    Wscript.Echo
Next
</vb><vb name="Modify a Shadow Copy Storage Area" n="1439">' Modify a Shadow Copy Storage Area


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_ShadowStorage")

For Each objItem in colItems
    objItem.MaxSpace = 500000000
    objItem.Put_
Next
</vb></dd>
	<dd name="SMS 2003" code="sms" desc="Sample scripts for managing Microsoft Systems Management Server (SMS) 2003.">
		<dd name="SMS 2003 Client" code="client" desc="Sample scripts for carrying out basic tasks on SMS 2003 clients."><vb name="Create a Discovery Data Record" n="1440">' Create a Discovery Data Record



Const ADDPPROP_NONE = &amp;amp;H0
Const ADDPROP_GUID = &amp;amp;H2
Const ADDPROP_KEY = &amp;amp;H8
Const ADDPROP_ARRAY = &amp;amp;H10

Dim DDR
Dim Computer
Dim SiteName
Dim FSO
Dim IPAddress(3), IPSubnet(3), MACAddress(3)

Computer="ComputerName"
SiteName="Acive Directory Site Name"

Set DDR=CreateObject("SMSResGen.SMSResGen.1")

DDR.DDRNew "System", "CustomAgent", "NES"

DDR.DDRAddString "Netbios Name", Computer, 64, ADDPROP_KEY
DDR.DDRAddString "AD Site Name", SiteName, 64, ADDPPROP_NONE

IPAddress(0)="123.234.12.23"
IPAddress(1)="123.234.12.32"
IPSubnet(0)="123.234.12.0"
IPSubnet(1)="123.234.12.0"
MACAddress(0)="00:02:A5:B1:11:68"
MACAddress(1)="00:02:A5:B1:11:69"

DDR.DDRAddStringArray "IP Addresses", Array(IPAddress(0),IPAddress(1)), 64, ADDPROP_ARRAY
DDR.DDRAddStringArray "MAC Addresses", Array(MACAddress(0),MACAddress(1)), 64, _
    ADDPROP_ARRAY OR ADDPROP_KEY
DDR.DDRAddStringArray "IP Subnets", Array(IPSubnet(0),IPSubnet(1)), 64, ADDPROP_ARRAY

DDR.DDRWrite "MyDDR.DDR"
DDR.DDRSendtoSMS

Set FSO=CreateObject("Scripting.FileSystemObject")
FSO.GetFile("MyDDR.DDR").Delete
</vb><vb name="List the Size of the Advanced Client Cache" n="1441">


On Error Resume Next

Set oUIResManager = CreateObject("UIResource.UIResourceMgr")
Set oCache=oUIResManager.GetCacheInfo()

If oCache Is Nothing Then
    Set oUIResManager=Nothing
    Wscript.Echo "Could not get cache info - quitting"
    Wscript.Quit
End If

Wscript.Echo "Total size:      " &amp;amp; FormatNumber(oCache.TotalSize,0) + "MB"
</vb><vb name="Run Available Scripts on SMS Clients" n="1442">' Run Available Scripts on SMS Clients



On Error Resume Next

Dim oUIResource 
Dim sProgramID
Dim sPackageID
Dim sPackageName 
Dim oArgs
Dim objSWbemlocator
Dim objSWbemServices
Dim szNameSpacePath
Dim oProgramObjectSet
Dim oProgramObject
Dim sProgramObjectPath


szNameSpacePath = "root/microsoft/sms/client/swdist"

sPackageName = "PackageName"
sPackageID = "99999999"
sProgramID = "ProgramID" 'use the program name


Set objSWbemlocator = CreateObject("WbemScripting.SWbemLocator.1")
Set objSWbemServices = objSWbemlocator.ConnectServer(".",szNameSpacePath)

If Err.Number &amp;lt;&amp;gt; 0 Then

    ' Trying to create UIResource - assuming Advanced Client

    Set oUIResource = CreateObject ("UIResource.UIResourceMgr")
    If oUIResource Is Nothing Then 
        Wscript.Quit(2)
    End If

    ' Run the program

    oUIResource.ExecuteProgram sProgramID, sPackageID, TRUE

    Wscript.Echo "Successfully executed program"
    Wscript.Quit (0)

End If

' Get the program index

Set oProgramObjectSet = _
    oServices.ExecQuery _
    ("Select * from CLI_AvailableProgram where ProgramName=""" + _
        sProgramID + """ and sPackageName=""" + sPackageName + """")

' Run Each program in the objectset ... you might get more programs 
'because key is package name and not package ID

For Each oProgramObject In oProgramObjectSet 
    sProgramObjectPath = oProgramObject.Path_.RelPath

    ' Actually calling the WbemMethod to run the program now

    oServices.ExecMethod sProgramObjectPath,"RunNow"
</vb><vb name="Start the SMS 2003 Hardware Inventory Cycle" n="1443">' Start the SMS 2003 Hardware Inventory Cycle



On Error Resume Next

sActionName="Hardware Inventory Collection Cycle"

' Create a CPAppletMgr instance

Dim oCPAppletMgr
Set oCPAppletMgr = CreateObject("CPApplet.CPAppletMgr")

 ' Get the available ClientActions

Dim oClientActions
Set oClientActions = oCPAppletMgr.GetClientActions()

 ' Loop through the available client actions

Dim oClientAction
For Each oClientAction In oClientActions

    ' Is this the action we want to start?

     If oClientAction.Name = sActionName Then

    ' Start the action

        oClientAction.PerformAction  
    End If
Next
</vb><vb name="Retrieve Updated User Policy" n="1444">' Retrieve Updated User Policy



On Error Resume Next

Dim objCPAppletMgr
Dim objClientActions
Dim objClientAction
Dim strActionName

strActionName="Request &amp;amp; Evaluate User Policy"

'Get the Control Panel applet manager object
set  objCPAppletMgr = CreateObject("CPApplet.CPAppletMgr")

'Get a collection of client actions

set objClientActions=objCPAppletMgr.GetClientActions

'Loop through the available client actions

For Each objClientAction In objClientActions
  If objClientAction.Name = strActionName Then
    objClientAction.PerformAction
     WScript.Echo "Action " + objClientAction.Name + " initiated"   
  End If
Next
</vb><vb name="Retrieve Updated Machine Policy" n="1445">' Retrieve Updated Machine Policy



On Error Resume Next

Dim objCPAppletMgr
Dim objClientActions
Dim objClientAction
Dim strActionName

strActionName="Request &amp;amp; Evaluate Machine Policy"

'Get the Control Panel applet manager object
set  objCPAppletMgr = CreateObject("CPApplet.CPAppletMgr")

'Get a collection of client actions

set objClientActions=objCPAppletMgr.GetClientActions

'Loop through the available client actions

For Each objClientAction In objClientActions
   
  If objClientAction.Name = strActionName Then
    objClientAction.PerformAction  
     WScript.Echo "Action " + objClientAction.Name + " initiated" 
  End If
Next
</vb></dd>
		<dd name="SMS 2003 Site Server" code="server" desc="Sample scripts for carrying out basic tasks on SMS 2003 site servers. "><vb name="Connect to an SMS Provider" n="1446">' Connect to an SMS Provider



Dim objSwbemLocator
Dim objSWbemServices
Dim ProviderLoc
Dim Location

set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")

set objSWbemServices= objSWbemLocator.ConnectServer _
    (".", "root\sms")

Set ProviderLoc = objSWbemServices.InstancesOf("SMS_ProviderLocation")

For Each Location In ProviderLoc
        If Location.ProviderForLocalSite = True Then
            Set objSWbemServices = objSWbemLocator.ConnectServer _
                 (Location.Machine, "root\sms\site_" + Location.SiteCode)
        End If
Next
</vb><vb name="Create an SMS Object" n="1447">' Create an SMS Object



Dim objSWbemServices
Dim objSWbemLocator
Dim ProviderLoc
Dim Location
Dim objPackage

'Connect to local SMS Provider
set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")
set objSWbemServices= objSWbemLocator.ConnectServer _
    (".", "root\sms")

Set ProviderLoc = objSWbemServices.InstancesOf("SMS_ProviderLocation")

For Each Location In ProviderLoc
     If Location.ProviderForLocalSite = True Then
        Set objSWbemServices = GetObject("winmgmts:{impersonationLevel=impersonate}!" &amp;amp; Location.NamespacePath)
        Exit For
   End If
Next

Set objPackage = objSWbemServices.Get("SMS_Package").SpawnInstance_()

objPackage.Name = "Test Package"
objPackage.Description = "Sample Package"
objPackage.PkgSourceFlag = 2
objPackage.PkgSourcePath = "C:\temp"

objPackage.Put_
</vb><vb name="Create an SMS Package and Program" n="1448">' Create an SMS Package and Program



On Error Resume Next

Dim objSWbemLocator
Dim objSWbemServices
Dim ProviderLoc
Dim Location

Dim PackageName
Dim ProgramName
Dim newPackage
Dim newProgram
Dim Package
Dim PackageID
Dim Path

PackageName="Package Name"
ProgramName="Program Name"

'connect to provider namespace for local computer
Set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")

Set objSWbemServices= objSWbemLocator.ConnectServer(".", "root\sms")

Set ProviderLoc = objSWbemServices.InstancesOf("SMS_ProviderLocation")

For Each Location In ProviderLoc
        If Location.ProviderForLocalSite = True Then
            Set objSWbemServices = objSWbemLocator.ConnectServer _
                 (Location.Machine, "root\sms\site_" + Location.SiteCode)
        End If
Next

'create package

Set newPackage = objSWbemServices.Get("SMS_Package").SpawnInstance_()
newPackage.Name = PackageName
newPackage.Description = "created by sample script"
newPackage.PkgSourceFlag = 2 
newPackage.PkgSourcePath = "C:\temp"
Path=newPackage.Put_
Wscript.Echo "Created packge " +PackageName

'and get the automatically assigned package ID

Set Package=objSWbemServices.Get(Path)
PackageID= Package.PackageID

Set newProgram = objSWbemServices.Get("SMS_Program").SpawnInstance_()
newProgram.ProgramName = ProgramName
newProgram.PackageID = PackageID
newProgram.Comment = "phone the helpdesk for support with this program"
newProgram.CommandLine = "Notepad.exe"
newProgram.Put_
Wscript.Echo "Created program " + ProgramName
</vb><vb name="Create an SMS Software Metering Rule" n="1449">' Create an SMS Software Metering Rule



On Error Resume Next

Dim objSWbemLocator
Dim objSWbemServices
Dim objNewSWbemObject
Dim objSWbemObject
Dim ProviderLoc
Dim Location
Dim strClass
Dim strSiteCode

'Creates a Software Metering Rule

strClass="SMS_MeteredProductRule"


set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")

set objSWbemServices= objSWbemLocator.ConnectServer _
    (".", "root\sms")

Set ProviderLoc = objSWbemServices.InstancesOf("SMS_ProviderLocation")

For Each Location In ProviderLoc
    If Location.ProviderForLocalSite = True Then
        Set objSWbemServices = objSWbemLocator.ConnectServer _
             (Location.Machine, "root\sms\site_" + Location.SiteCode)
             strSiteCode=Location.SiteCode
    End If
Next

Set objSWbemObject = objSWbemServices.Get(strClass)
Set objNewSWbemObject = objSWbemObject.SpawnInstance_()

objNewSWbemObject.Properties_.Item("ProductName")="Character Mapper"
objNewSWbemObject.Properties_.Item("FileName")="charmap.exe"
objNewSWbemObject.Properties_.Item("OriginalFileName")="charmap.exe"
objNewSWbemObject.Properties_.Item("FileVersion")="*"
objNewSWbemObject.Properties_.Item("LanguageID")="1033"
objNewSWbemObject.Properties_.Item("SiteCode")= strSiteCode
objNewSWbemObject.Properties_.Item("ApplyToChildSites")="true"

objNewSWbemObject.Put_
</vb><vb name="Delete an SMS Object" n="1450">' Delete an SMS Object



Dim objAdvertisement

Set objAdvertisement = GetObject _
    ("WinMgmts:root\SMS\site_999:SMS_Advertisement.AdvertisementID='99920002'")
objAdvertisement.Delete_
</vb><vb name="List Health Summary for Local SMS Sites" n="1451">' List Health Summary for Local SMS Sites



On Error Resume Next

Dim objSWbemServices
Dim ProviderLoc
Dim Location
Dim strSummarizerSiteStatus
Dim colSummarizerSiteStatus
Dim objSiteSummary

strSummarizerSiteStatus="SMS_SummarizerSiteStatus"


Set ProviderLoc = GetObject _
    ("winmgmts:{impersonationLevel=impersonate}!root/sms:SMS_ProviderLocation")

If Err.Number&amp;lt;&amp;gt;0 Then
    Wscript.Echo "Couldn't get SMS Provider"
    Wscript.Quit
End If

For Each Location In ProviderLoc.Instances_
    If Location.ProviderForLocalSite = True Then
        Set objSWbemServices = GetObject("winmgmts:" &amp;amp; Location.NamespacePath)
        Exit For
    End If
Next


'Get SMS_SummarizerSiteStatus 

Set colSummarizerSiteStatus=objSWbemServices.InstancesOf(strSummarizerSiteStatus)

If Err.Number&amp;lt;&amp;gt;0 Then
    Wscript.Echo "Couldn't get Site Summary"
    Wscript.Quit
End If

For Each objSiteSummary In colSUmmarizerSiteStatus
    wscript.echo "Site code:" + objSiteSummary.SiteCode
    If objSiteSummary.Status=0 Then
        Wscript.Echo "Site is healthy"
    End If
    If objSiteSummary.Status=1 Then
        Wscript.Echo "There are warnings for this site"
    End If
    If objSiteSummary.Status=2 Then
        Wscript.Echo "The site health is critical"
    End If
Next

</vb><vb name="Modify an SMS Object" n="1452">' Modify an SMS Object



Dim objAdvertisement

Set objAdvertisement = GetObject _
    ("WinMgmts:root\SMS\site_999:SMS_Advertisement.AdvertisementID='99920002'")

objAdvertisement.AssignedScheduleEnabled=True

objAdvertisement.Put_
</vb><vb name="View an SMS Collection" n="1453">' View an SMS Collection



On Error Resume Next

Dim objSWbemServices
Dim ProviderLoc
Dim Location
Dim colQueryCollectionResults
Dim ObjResult


Dim objQuery
Dim colQueryResults


Set ProviderLoc = GetObject _
    ("winmgmts:{impersonationLevel=impersonate}!root/sms:SMS_ProviderLocation")

If Err.Number&amp;lt;&amp;gt;0 Then
    Wscript.Echo "Couldn't get SMS Provider"
    Wscript.Quit
End If

For Each Location In ProviderLoc.Instances_
     If Location.ProviderForLocalSite = True Then
        Set objSWbemServices = GetObject("winmgmts:" &amp;amp; Location.NamespacePath)
        Exit For
   End If
Next


'Query Collection

Set colQueryCollectionResults=objSWbemServices.ExecQuery _
    ("SELECT * FROM SMS_FullCollectionMembership WHERE CollectionID='SMS00001'" )

If Err.Number&amp;lt;&amp;gt;0 Then
    Wscript.Echo "Couldn't get Collection"
    Wscript.Quit
End If



'run query

Wscript.Echo "Collections"
Wscript.Echo "----------------------------------"
 
For Each objResult In colQueryCollectionResults
    Wscript.Echo "     " + objResult.Name
Next
If colQueryCollectionResults.Count=0 Then
    Wscript.Echo "      no query results"
End If

</vb><vb name="Create a Console Folder" n="1454">' Create a Console Folder



Option Explicit

Dim objSWbemLocator
Dim objSWbemServices
Dim ProviderLoc
Dim Location
Dim objNewConsoleFolder

set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")
set objSWbemServices= objSWbemLocator.ConnectServer _
    ("COMPUTER NAME", "root\sms")
  
Set ProviderLoc = objSWbemServices.InstancesOf("SMS_ProviderLocation")

For Each Location In ProviderLoc
        If Location.ProviderForLocalSite = True Then
            Set objSWbemServices = objSWbemLocator.ConnectServer _
                 (Location.Machine, "root\sms\site_" + Location.SiteCode)
        End If
Next
 
Set objNewConsoleFolder = objSWbemServices.Get("SMS_ObjectContainerNode").SpawnInstance_()

  
objNewConsoleFolder.Name = "Hardware - Disk"
objNewConsoleFolder.ObjectType=8 ' Report Node.
objNewConsoleFolder.ParentContainerNodeID = 0 'Create in root node.

 
objNewConsoleFolder.Put_
</vb><vb name="Move SMS Reports to a Console Folder" n="1455">' Move SMS Reports to a Console Folder



Option Explicit

Dim objSWbemLocator
Dim objSWbemServices
Dim ProviderLoc
Dim Location
Dim objNewConsoleFolderItem
Dim FolderIdentifier
Dim objFolder
Dim ObjReport


FolderIdentifier=0

set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")
set objSWbemServices= objSWbemLocator.ConnectServer _
    ("COMPUTER NAME", "root\sms")
  
Set ProviderLoc = objSWbemServices.InstancesOf("SMS_ProviderLocation")

For Each Location In ProviderLoc
        If Location.ProviderForLocalSite = True Then
            Set objSWbemServices = objSWbemLocator.ConnectServer _
                 (Location.Machine, "root\sms\site_" + Location.SiteCode)
        End If
Next
 
For Each objFolder in objSWbemServices.InstancesOf("SMS_ObjectContainerNode")
    if objFolder.Name="Hardware - Disk" Then FolderIdentifier=objFolder.ContainerNodeID
Next

If FolderIdentifier=0 Then
    wscript.Echo "No Hardware - Disk folder found"
    wscript.quit 2
End If

For Each objReport in objSWbemServices.InstancesOf("SMS_Report")
    if objReport.Category="Hardware - Disk" Then 'Create the folder item.
        Set objNewConsoleFolderItem = objSWbemServices.Get _
            ("SMS_ObjectContainerItem").SpawnInstance_()
  
        objNewConsoleFolderItem.InstanceKey = ObjReport.SecurityKey
        objNewConsoleFolderItem.ObjectType=8 ' Package Node.
        objNewConsoleFolderItem.ContainerNodeID = FolderIdentifier 'Container
        objNewConsoleFolderItem.Put_
    End If
Next
</vb><vb name="Delete a Console Folder" n="1456">' Delete a Console Folder



Option Explicit

Dim objSWbemLocator
Dim objSWbemServices
Dim ProviderLoc
Dim Location
Dim objFolder


Set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")
Set objSWbemServices= objSWbemLocator.ConnectServer _
    ("COMPUTER NAME", "root\sms")
  
Set ProviderLoc = objSWbemServices.InstancesOf("SMS_ProviderLocation")

For Each Location In ProviderLoc
        If Location.ProviderForLocalSite = True Then
            Set objSWbemServices = objSWbemLocator.ConnectServer _
                 (Location.Machine, "root\sms\site_" + Location.SiteCode)
        End If
Next
 
For Each objFolder in objSWbemServices.InstancesOf("SMS_ObjectContainerNode")
    if objFolder.Name="Hardware - Disk" Then 
objFolder.Delete_ ' Deletes the folder - the folder items are moved back to the root node.
    End IF
Next
</vb><vb name="Update a Package" n="1457">' Update a Package



On Error Resume Next

Dim objSWbemLocator
Dim objSWbemServices
Dim ProviderLoc
Dim Location
Dim PackageID
Dim colPackages
Dim Package

'Enter the package ID of the package to be updated
PackageID = "PACKAGEID"

'To connect to the local SMS site's Provider by using SWbemLocator
Set objSWbemLocator = CreateObject("WbemScripting.SWbemLocator")

Set objSWbemServices= objSWbemLocator.ConnectServer(".", "root\sms")
Set ProviderLoc = objSWbemServices.InstancesOf("SMS_ProviderLocation")

For Each Location In ProviderLoc
  If Location.ProviderForLocalSite = True Then
    Set objSWbemServices = objSWbemLocator.ConnectServer _
      (Location.Machine, "root\sms\site_" + Location.SiteCode)
  End If
Next

'To find the package ID in the SMS_Packages class and use the RefreshPkgSource Method to initiate update.
Set colPackages = objSWbemServices.ExecQuery _
  ("Select * from SMS_Package where PackageID = '" &amp;amp; PackageID &amp;amp; "'") 

If colPackages.count &amp;lt;&amp;gt; 0 Then
  For Each Package In colPackages
    Package.RefreshPkgSource( )
    WScript.Echo "Package '" &amp;amp; PackageID &amp;amp; "' Updated!"
  Next
Else
   WScript.Echo "Package '" &amp;amp; PackageID &amp;amp; "' Not Found!"
End If
</vb><vb name="Retrieve User Instance Permissions" n="1458">' Retrieve User Instance Permissions



Const adVarChar = 200
Const MaxCharacters = 255

strUser="DOMAIN\USER"

On Error Resume next
Set DataList = CreateObject("ADOR.Recordset")
With DataList.Fields
    .Append "InstanceKey", adVarChar, MaxCharacters
    .Append "PermissionName", adVarChar, MaxCharacters
    .Append "ObjectKeyName", adVarChar, MaxCharacters 
End With
DataList.Open

Set ProviderLoc = GetObject("winmgmts:{impersonationLevel=impersonate}!root/sms:SMS_ProviderLocation")

If err.number&amp;lt;&amp;gt;0 Then
    wscript.echo "Couldn't Get SMS Provider"
    wscript.quit
End If

For Each Location In ProviderLoc.Instances_
    If Location.ProviderForLocalSite = True Then
        Set objSWbemServices = GetObject("winmgmts:" &amp;amp; Location.NamespacePath)
        Exit For
    End If
Next

Wscript.Echo "Instance permissions for " + UCase(strUser) 

Set colClassPermissionNames=objSwbemServices.InstancesOf("SMS_UserClassPermissionNames")
For Each objClassPermissionName In colClassPermissionNames
    If Ucase(objClassPermissionName.UserName)=Ucase(strUser) Then 
        strInstanceKey = "All Instances"
        AddNewData strInstanceKey, objClassPermissionName.ObjectKey, _
          objClassPermissionName.PermissionName
    End If
Next
    
Set colInstancePermissionNames=objSwbemServices.InstancesOf("SMS_UserInstancePermissionNames") 
For Each objInstancePermissionName In colInstancePermissionNames
    If Ucase(objInstancePermissionName.UserName)=Ucase(strUser) Then
        AddNewData objInstancePermissionName.InstanceKey, objInstancePermissionName.ObjectKey, _
          objInstancePermissionName.PermissionName
    End If
Next

DataList.Sort = "ObjectKeyName"

Do Until DataList.EOF
    wscript.echo Datalist.Fields.Item("ObjectKeyName") &amp;amp; " - " &amp;amp; DataList.Fields.Item("InstanceKey")_
        &amp;amp; " - " &amp;amp; DataList.Fields.Item("PermissionName")
    DataList.MoveNext
Loop

Function AddNewData (InstanceKey, ObjectKey, Permission)
    Datalist.AddNew
    Datalist("InstanceKey") = InstanceKey
    Datalist("PermissionName") = Permission
    Select Case ObjectKey
        Case 1 strObjectKeyName = "Collection"            
        Case 2 strObjectKeyName = "Package"
        Case 3 strObjectKeyName = "Advertisement"
        Case 4 strObjectKeyName = "Status Message"
        Case 6 strObjectKeyName = "Site" 'ObjectKey #5 is unused
        Case 7 strObjectKeyName = "Query"
        Case 8 strObjectKeyName = "Report"
        Case 9 strObjectKeyName = "Software Metering Rule"
        Case 10 strObjectKeyName = "Software Updates"
    End Select
    Datalist("ObjectKeyName") = strObjectKeyName
End Function

Wscript.Quit
</vb><vb name="Retrieve Object Instance Permissions" n="1459">' Retrieve Object Instance Permissions



Const adVarChar = 200
Const MaxCharacters = 255

strInstanceKey="SMS00001"
iObjectKey = 1 
'1-Collection,2-Package,3-Advertisement,4-StatusMessage,6-Site,7-Query,8-Report,9-SoftwareMeteringRule

On Error Resume Next
Set DataList = CreateObject("ADOR.Recordset")
With DataList.Fields
    .Append "UserName", adVarChar, MaxCharacters
    .Append "PermissionName", adVarChar, MaxCharacters
End With
DataList.Open
 
Set ProviderLoc = GetObject("winmgmts:{impersonationLevel=impersonate}!root/sms:SMS_ProviderLocation")
If err.number&amp;lt;&amp;gt;0 Then
    wscript.echo "Couldn't Get SMS Provider"
    wscript.quit
End If

For Each Location In ProviderLoc.Instances_
    If Location.ProviderForLocalSite = True Then
        Set objSWbemServices = GetObject("winmgmts:" &amp;amp; Location.NamespacePath)
        Exit For
    End If
Next

Select Case iObjectKey
   Case 1 strObjectKeyName = "Collection"            
   Case 2 strObjectKeyName = "Package"
   Case 3 strObjectKeyName = "Advertisement"
   Case 4 strObjectKeyName = "Status Message"
   Case 6 strObjectKeyName = "Site" 'ObjectKey #5 is unused
   Case 7 strObjectKeyName = "Query"
   Case 8 strObjectKeyName = "Report"
   Case 9 strObjectKeyName = "Software Metering Rule"
   Case 10 strObjectKeyName = "Software Updates"
End Select

Wscript.Echo "Permissions for " &amp;amp; strObjectKeyName &amp;amp; ": " + UCase(strInstanceKey) 

Set colInstancePermissionNames=objSwbemServices.InstancesOf("SMS_UserInstancePermissionNames") 
For Each objInstancePermissionName In colInstancePermissionNames
    If Ucase(objInstancePermissionName.InstanceKey)=Ucase(strInstanceKey) Then
        AddNewData objInstancePermissionName.UserName, objInstancePermissionName.PermissionName
    End If
Next

Set colClassPermissionNames=objSwbemServices.InstancesOf("SMS_UserClassPermissionNames")
For Each objClassPermissionName In colClassPermissionNames
    If Ucase(objClassPermissionName.ObjectKey)=Ucase(iObjectKey) Then 
        AddNewData objClassPermissionName.UserName, objClassPermissionName.PermissionName
    End If
Next

DataList.Sort = "PermissionName"
DataList.MoveFirst
Do Until DataList.EOF
    wscript.echo DataList.Fields.Item("PermissionName")&amp;amp; " - " &amp;amp; DataList.Fields.Item("UserName")
    DataList.MoveNext
Loop

Function AddNewData (UserName, Permission)
    Datalist.AddNew
    Datalist("UserName") = UserName
    Datalist("PermissionName") = Permission
End Function

Wscript.Quit
</vb></dd>
	</dd>
	<dd name="Software Update Services" code="sus" desc="Sample scripts for managing Windows Update on client computers.">
		<dd name="Client-Side Management" code="client" desc="Sample scripts for managing the client-side version of Windows Update that ships with Windows XP Service Pack 2."><vb name="Display the Settings Dialog Box" n="1460">' Display the Settings Dialog Box


Set objAutoUpdate = CreateObject("Microsoft.Update.AutoUpdate")
objAutoUpdate.ShowSettingsDialog
</vb><vb name="Display the Software Update Service Wizard" n="1461">' Display the Software Update Service Wizard


Set objCollection = CreateObject("Microsoft.Update.UpdateColl")

Set objSearcher = CreateObject("Microsoft.Update.Searcher")
Set objResults = objSearcher.Search _
    ("UpdateID='ac94db3b-e1a8-4e92-9fd0-e86f355e6a44'")
Set colUpdates = objResults.Updates

objCollection.Add(colUpdates.Item(0))
Set objInstaller = CreateObject("Microsoft.Update.Installer")
objInstaller.Updates = objCollection
Set objResults = objInstaller.RunWizard
</vb><vb name="Install an Update" n="1462">' Install an Update


Set objCollection = CreateObject("Microsoft.Update.UpdateColl")

Set objSearcher = CreateObject("Microsoft.Update.Searcher")
Set objResults = objSearcher.Search _
    ("UpdateID='ac94db3b-e1a8-4e92-9fd0-e86f355e6a44'")
Set colUpdates = objResults.Updates
objCollection.Add(colUpdates.Item(0))

Set objInstaller = CreateObject("Microsoft.Update.Installer")
objInstaller.Updates = objCollection
Set objInstallResults = objInstaller.Install
Wscript.Echo objInstallResults.Exception
Wscript.Echo objInstallResults.RebootRequired
Wscript.Echo objInstallResults.ResultCode
</vb><vb name="List Client-Side Settings" n="1463">' List Client-Side Settings


Set objAutoUpdate = CreateObject("Microsoft.Update.AutoUpdate")
Wscript.Echo "Service enabled: " &amp;amp; objAutoUpdate.ServiceEnabled

Set objSettings = objAutoUpdate.Settings

Wscript.Echo "Notification level: " &amp;amp; objSettings.NotificationLevel
Wscript.Echo "Read-only: " &amp;amp; objSettings.ReadOnly
Wscript.Echo "Required: " &amp;amp; objSettings.Required
Wscript.Echo "Scheduled Installation Day: " &amp;amp; _
    objSettings.ScheduledInstallationDay
Wscript.Echo "Scheduled Installation Time: " &amp;amp; _
    objSettings.ScheduledInstallationTime
</vb><vb name="List Proxy Properties" n="1464">' List Proxy Properties


Set objProxy = CreateObject("Microsoft.Update.WebProxy")

Wscript.Echo "Address: " &amp;amp; objProxy.Address
Wscript.Echo "Bypass proxy on local addresses: " &amp;amp; objProxy.BypassProxyOnLocal
Wscript.Echo "Read-only: " &amp;amp; objProxy.Readonly
Wscript.Echo "User name: " &amp;amp; objProxy.UserName
</vb><vb name="List Search Properties" n="1465">' List Search Properties


Set objSearcher = CreateObject("Microsoft.Update.Searcher")

Wscript.Echo "Can automatically upgrade service: " &amp;amp; _
    objSearcher.CanAutomaticallyUpgradeService
Wscript.Echo "Client application ID: " &amp;amp; objSearcher.ClientApplicationID
Wscript.Echo "Online: " &amp;amp; objSearcher.Online
Wscript.Echo "Server selection: " &amp;amp; objSearcher.ServerSelection
Wscript.Echo "Service ID: " &amp;amp; objSearcher.ServiceID
</vb><vb name="List Service Properties" n="1466">' List Service Properties


Set objServiceManager = CreateObject("Microsoft.Update.ServiceManager")
Set colServices = objServiceManager.Services

For i = 0 to colServices.Count - 1
    Wscript.Echo "Name: " &amp;amp; colServices.Item(i).Name
    Wscript.Echo "Is managed: " &amp;amp; colServices.Item(i).IsManaged
    Wscript.Echo "Is registered with Automatic Updates: " &amp;amp; _
        colServices.Item(i).IsRegisteredWithAU
    Wscript.Echo "Issue date: " &amp;amp; colServices.Item(i).IssueDate
    Wscript.Echo "Offers Windows updates: " &amp;amp; _
        colServices.Item(i).OffersWindowsUpdates
    Wscript.Echo  "Redirection URL: " &amp;amp;colServices.Item(i).RedirectURL
    Wscript.Echo "Service ID: " &amp;amp; colServices.Item(i).ServiceID
    Wscript.Echo "UI Plugin Class ID: " &amp;amp; colServices.Item(i).UIPluginClsid
Next
</vb><vb name="List System Information Properties" n="1467">' List System Information Properties


Set objSysInfo = CreateObject("Microsoft.Update.SystemInfo")

Wscript.Echo "OEM hardware support link: " &amp;amp; objSysInfo.OEMHardwareSupportLink
Wscript.Echo "Reboot required: " &amp;amp; objSysInfo.RebootRequired
</vb><vb name="List Update History" n="1468">' List Update History


Set objSession = CreateObject("Microsoft.Update.Session")
Set objSearcher = objSession.CreateUpdateSearcher
intHistoryCount = objSearcher.GetTotalHistoryCount

Set colHistory = objSearcher.QueryHistory(1, intHistoryCount)

For Each objEntry in colHistory
    Wscript.Echo "Operation: " &amp;amp; objEntry.Operation
    Wscript.Echo "Result code: " &amp;amp; objEntry.ResultCode
    Wscript.Echo "Exception: " &amp;amp; objEntry.Exception
    Wscript.Echo "Date: " &amp;amp; objEntry.Date
    Wscript.Echo "Title: " &amp;amp; objEntry.Title
    Wscript.Echo "Description: " &amp;amp; objEntry.Description
    Wscript.Echo "Unmapped exception: " &amp;amp; objEntry.UnmappedException
    Wscript.Echo "Client application ID: " &amp;amp; objEntry.ClientApplicationID
    Wscript.Echo "Server selection: " &amp;amp; objEntry.ServerSelection
    Wscript.Echo "Service ID: " &amp;amp; objEntry.ServiceID
    i = 1
    For Each strStep in objEntry.UninstallationSteps
        Wscript.Echo i &amp;amp; " -- " &amp;amp; strStep
        i = i + 1
    Next
    Wscript.Echo "Uninstallation notes: " &amp;amp; objEntry.UninstallationNotes
    Wscript.Echo "Support URL: " &amp;amp; objEntry.SupportURL
    Wscript.Echo
Next
</vb><vb name="Modify the Update Schedule" n="1469">' Modify the Update Schedule


Set objAutoUpdate = CreateObject("Microsoft.Update.AutoUpdate")
Set objSettings = objAutoUpdate.Settings

objSettings.ScheduledInstallationDay = 3
objSettings.ScheduledInstallationTime = 4

objSettings.Save
</vb><vb name="Search for Driver Updates" n="1470">' Search for Driver Updates


@Set objSearcher = CreateObject("Microsoft.Update.Searcher")
Set objResults = objSearcher.Search("Type='Driver'")
Set colUpdates = objResults.Updates

Wscript.Echo colUpdates.Count

For i = 0 to colUpdates.Count - 1
    Wscript.Echo "Title: " &amp;amp; colUpdates.Item(i).Title
    Wscript.Echo "Autoselect on Web sites: " &amp;amp; _
        colUpdates.Item(i).AutoSelectOnWebSites

    For Each strUpdate in colUpdates.Item(i).BundledUpdates
        Wscript.Echo "Bundled update: " &amp;amp; strUpdate
    Next

    Wscript.Echo "Can require source: " &amp;amp; colUpdates.Item(i).CanRequireSource
    Set objCategories = colUpdates.Item(i).Categories

    For z = 0 to objCategories.Count - 1
        Wscript.Echo "Category name: " &amp;amp; objCategories.Item(z).Name
        Wscript.Echo "Category ID: " &amp;amp; objCategories.Item(z).CategoryID
        For Each strChild in objCategories.Item(z).Children
            Wscript.Echo "Child category: " &amp;amp; strChild
        Next
        Wscript.Echo "Category description: " &amp;amp; _
            objCategories.Item(z).Description
        Wscript.Echo "Category order: " &amp;amp; objCategories.Item(z).Order
        Wscript.Echo "Category type: " &amp;amp; objCategories.Item(z).Type
    Next

    Wscript.Echo "Deadline: " &amp;amp; colUpdates.Item(i).Deadline
    Wscript.Echo "Delta compressed content available: " &amp;amp; _
        colUpdates.Item(i).DeltaCompressedContentAvailable
    Wscript.Echo "Delta compressed content preferred: " &amp;amp; _
        colUpdates.Item(i).DeltaCompressedContentPreferred
    Wscript.Echo "Description: " &amp;amp; colUpdates.Item(i).Description
    Wscript.Echo "EULA accepted: " &amp;amp; colUpdates.Item(i).EULAAccepted
    Wscript.Echo "EULA text: " &amp;amp; colUpdates.Item(i).EULAText
    Wscript.Echo "Handler ID: " &amp;amp; colUpdates.Item(i).HandlerID

    Set objIdentity = colUpdates.Item(i).Identity
    Wscript.Echo "Revision number: " &amp;amp; objIdentity.RevisionNumber
    Wscript.Echo "Update ID: " &amp;amp; objIdentity.UpdateID

    Set objInstallationBehavior = colUpdates.Item(i).InstallationBehavior
    Wscript.Echo "Can request user input: " &amp;amp; _
        objInstallationBehavior.CanRequestUserInput
    Wscript.Echo "Impact: " &amp;amp; objInstallationBehavior.Impact
    Wscript.Echo "Reboot behavior: " &amp;amp; objInstallationBehavior.RebootBehavior
    Wscript.Echo "Requires network connectivity: " &amp;amp; _
        objInstallationBehavior.RequiresNetworkConnectivity
    Wscript.Echo "Is beta: " &amp;amp; colUpdates.Item(i).IsBeta
    Wscript.Echo "Is hidden: " &amp;amp; colUpdates.Item(i).IsHidden
    Wscript.Echo "Is installed: " &amp;amp; colUpdates.Item(i).IsInstalled
    Wscript.Echo "Is mandatory: " &amp;amp; colUpdates.Item(i).IsMandatory
    Wscript.Echo "Is uninstallable: " &amp;amp; colUpdates.Item(i).IsUninstallable

    For Each strLanguage in colUpdates.Item(i).Languages
        Wscript.Echo "Supported language: " &amp;amp; strLanguage
    Next

    Wscript.Echo "Last deployment change time: " &amp;amp; _
        colUpdates.Item(i).LastDeploymentChangeTime
    Wscript.Echo "Maximum download size: " &amp;amp; colUpdates.Item(i).MaxDownloadSize
    Wscript.Echo "Minimum download size: " &amp;amp; colUpdates.Item(i).MinDownloadSize
    Wscript.Echo "Microsoft Security Response Center severity: " &amp;amp; _
        colUpdates.Item(i).MsrcSeverity
    Wscript.Echo "Recommended CPU speed: " &amp;amp; _
        colUpdates.Item(i).RecommendedCPUSpeed
    Wscript.Echo "Recommended hard disk space: " &amp;amp; _
        colUpdates.Item(i).RecommendedHardDiskSpace
    Wscript.Echo "Recommended memory: " &amp;amp; colUpdates.Item(i).RecommendedMemory
    Wscript.Echo "Release notes: " &amp;amp; colUpdates.Item(i).ReleaseNotes
    Wscript.Echo "Support URL: " &amp;amp; colUpdates.Item(i).SupportURL
    Wscript.Echo "Type: " &amp;amp; colUpdates.Item(i).Type
    Wscript.Echo "Uninstallation notes: " &amp;amp; _
        colUpdates.Item(i).UninstallationNotes

    x = 1
    For Each strStep in colUpdates.Item(i).UninstallationSteps
        Wscript.Echo x &amp;amp; " -- " &amp;amp; strStep
        x = x + 1
    Next

    For Each strArticle in colUpdates.Item(i).KBArticleIDs
        Wscript.Echo "KB article: " &amp;amp; strArticle
    Next

    Wscript.Echo "Deployment action: " &amp;amp; colUpdates.Item(i).DeploymentAction
    Wscript.Echo

Next
</vb><vb name="Search for Software Updates" n="1471">' Search for Software Updates


Set objSearcher = CreateObject("Microsoft.Update.Searcher")
Set objResults = objSearcher.Search("Type='Software'")
Set colUpdates = objResults.Updates

For i = 0 to colUpdates.Count - 1
    Wscript.Echo "Title: " &amp;amp; colUpdates.Item(i).Title
    Wscript.Echo "Autoselect on Web sites: " &amp;amp; _
        colUpdates.Item(i).AutoSelectOnWebSites

    For Each strUpdate in colUpdates.Item(i).BundledUpdates
        Wscript.Echo "Bundled update: " &amp;amp; strUpdate
    Next
    Wscript.Echo "Can require source: " &amp;amp; colUpdates.Item(i).CanRequireSource
    Set objCategories = colUpdates.Item(i).Categories

    For z = 0 to objCategories.Count - 1
        Wscript.Echo "Category name: " &amp;amp; objCategories.Item(z).Name
        Wscript.Echo "Category ID: " &amp;amp; objCategories.Item(z).CategoryID
        For Each strChild in objCategories.Item(z).Children
            Wscript.Echo "Child category: " &amp;amp; strChild
        Next
        Wscript.Echo "Category description: " &amp;amp; _
            objCategories.Item(z).Description
        Wscript.Echo "Category order: " &amp;amp; objCategories.Item(z).Order
        Wscript.Echo "Category type: " &amp;amp; objCategories.Item(z).Type
    Next

    Wscript.Echo "Deadline: " &amp;amp; colUpdates.Item(i).Deadline
    Wscript.Echo "Delta compressed content available: " &amp;amp; _
        colUpdates.Item(i).DeltaCompressedContentAvailable
    Wscript.Echo "Delta compressed content preferred: " &amp;amp; _
        colUpdates.Item(i).DeltaCompressedContentPreferred
    Wscript.Echo "Description: " &amp;amp; colUpdates.Item(i).Description
    Wscript.Echo "EULA accepted: " &amp;amp; colUpdates.Item(i).EULAAccepted
    Wscript.Echo "EULA text: " &amp;amp; colUpdates.Item(i).EULAText
    Wscript.Echo "Handler ID: " &amp;amp; colUpdates.Item(i).HandlerID

    Set objIdentity = colUpdates.Item(i).Identity
    Wscript.Echo "Revision number: " &amp;amp; objIdentity.RevisionNumber
    Wscript.Echo "Update ID: " &amp;amp; objIdentity.UpdateID

    Set objInstallationBehavior = colUpdates.Item(i).InstallationBehavior
    Wscript.Echo "Can request user input: " &amp;amp; _
        objInstallationBehavior.CanRequestUserInput
    Wscript.Echo "Impact: " &amp;amp; objInstallationBehavior.Impact
    Wscript.Echo "Reboot behavior: " &amp;amp; objInstallationBehavior.RebootBehavior
    Wscript.Echo "Requires network connectivity: " &amp;amp; _
        objInstallationBehavior.RequiresNetworkConnectivity
    Wscript.Echo "Is beta: " &amp;amp; colUpdates.Item(i).IsBeta
    Wscript.Echo "Is hidden: " &amp;amp; colUpdates.Item(i).IsHidden
    Wscript.Echo "Is installed: " &amp;amp; colUpdates.Item(i).IsInstalled
    Wscript.Echo "Is mandatory: " &amp;amp; colUpdates.Item(i).IsMandatory
    Wscript.Echo "Is uninstallable: " &amp;amp; colUpdates.Item(i).IsUninstallable

    For Each strLanguage in colUpdates.Item(i).Languages
        Wscript.Echo "Supported language: " &amp;amp; strLanguage
    Next

    Wscript.Echo "Last deployment change time: " &amp;amp; _
        colUpdates.Item(i).LastDeploymentChangeTime
    Wscript.Echo "Maximum download size: " &amp;amp; colUpdates.Item(i).MaxDownloadSize
    Wscript.Echo "Minimum download size: " &amp;amp; colUpdates.Item(i).MinDownloadSize
    Wscript.Echo "Microsoft Security Response Center severity: " &amp;amp; _
        colUpdates.Item(i).MsrcSeverity
    Wscript.Echo "Recommended CPU speed: " &amp;amp; _
        colUpdates.Item(i).RecommendedCPUSpeed
    Wscript.Echo "Recommended hard disk space: " &amp;amp; _
        colUpdates.Item(i).RecommendedHardDiskSpace
    Wscript.Echo "Recommended memory: " &amp;amp; colUpdates.Item(i).RecommendedMemory
    Wscript.Echo "Release notes: " &amp;amp; colUpdates.Item(i).ReleaseNotes
    Wscript.Echo "Support URL: " &amp;amp; colUpdates.Item(i).SupportURL
    Wscript.Echo "Type: " &amp;amp; colUpdates.Item(i).Type
    Wscript.Echo "Uninstallation notes: " &amp;amp; _
        colUpdates.Item(i).UninstallationNotes

    x = 1
    For Each strStep in colUpdates.Item(i).UninstallationSteps
        Wscript.Echo x &amp;amp; " -- " &amp;amp; strStep
        x = x + 1
    Next

    For Each strArticle in colUpdates.Item(i).KBArticleIDs
        Wscript.Echo "KB article: " &amp;amp; strArticle
    Next

    Wscript.Echo "Deployment action: " &amp;amp; colUpdates.Item(i).DeploymentAction
    Wscript.Echo
Next
</vb><vb name="Uninstall an Update" n="1472">' Uninstall an Update


Set objCollection = CreateObject("Microsoft.Update.UpdateColl")

Set objSearcher = CreateObject("Microsoft.Update.Searcher")
Set objResults = objSearcher.Search _
    ("UpdateID='ac94db3b-e1a8-4e92-9fd0-e86f355e6a44'")

Set colUpdates = objResults.Updates
Wscript.echo colUpdates.count

objCollection.Add(colUpdates.Item(0))
Wscript.echo objCollection.count

Set objInstaller = CreateObject("Microsoft.Update.Installer")
objInstaller.Updates = objCollection

Set objInstallResults = objInstaller.Uninstall
Wscript.Echo objInstallResults.Exception
Wscript.Echo objInstallResults.RebootRequired
Wscript.Echo objInstallResults.ResultCode
</vb></dd>
	</dd>
	<dd name="SQL Server" code="sql" desc="Sample scripts for managing Microsoft SQL Server and SQL Server databases.">
		<dd name="Managing Databases" code="dbmgmt" desc="Samples scripts that enable you to gather information about and manage SQL Server databases."><vb name="List All the Tables in a SQL Server Database" n="1473">' List All the Tables in a SQL Server Database

' SQL Server 2000 : Yes

strDBServerName = "."
strDBName = "Northwind"

Set objSQLServer = CreateObject("SQLDMO.SQLServer")
objSQLServer.LoginSecure = True
objSQLServer.Connect strDBServerName

Set objDB = objSQLServer.Databases(strDBName)
Set colTables = objDB.Tables
For Each objTable In colTables
   WScript.Echo "Table Name: "    &amp;amp; objTable.Name
Next
</vb><vb name="Displays the total size of a SQL Server database" n="1474">' Displays the total size of a SQL Server database

' SQL Server 2000 : Yes


strDBServerName = "."
strDBName = "ScriptingGuysTestDB"

Set objSQLServer = CreateObject("SQLDMO.SQLServer")
objSQLServer.LoginSecure = True
objSQLServer.Connect strDBServerName

Set objDB = objSQLServer.Databases(strDBName)
WScript.Echo "Total Size of Data File + Transaction Log of DB " &amp;amp; strDBName &amp;amp; ": " &amp;amp; objDB.Size &amp;amp; "(MB)"
</vb><vb name="Display the free space for a SQL Server database." n="1475">' Display the free space for a SQL Server database.

' SQL Server 2000 : Yes


strDBServerName = "."
strDBName = "ScriptingGuysTestDB"

Set objSQLServer = CreateObject("SQLDMO.SQLServer")
objSQLServer.LoginSecure = True
objSQLServer.Connect strDBServerName

Set objDB = objSQLServer.Databases(strDBName)
WScript.Echo "Space Left (Data File + Transaction Log) for DB " &amp;amp;_
 strDBName &amp;amp; ": " &amp;amp; objDB.SpaceAvailableInMB &amp;amp; "(MB)"
</vb><vb name="Sample script that displays all of the users in a given SQL Server DB." n="1476">' Sample script that displays all of the users in a given SQL Server DB.

' SQL Server 2000 : Yes


strDBServerName = "."
strDBName = "ScriptingGuysTestDB"

Set objSQLServer = CreateObject("SQLDMO.SQLServer")
objSQLServer.LoginSecure = True
objSQLServer.Connect strDBServerName

Set objDB = objSQLServer.Databases(strDBName)
Set colUsers = objDB.Users
For Each objUser In colUsers
   WScript.Echo "User: "    &amp;amp; objUser.Name
   WScript.Echo "Login: "   &amp;amp; objUser.Login
Next
</vb><vb name="Sample script that lists all the views in a given SQL Server DB." n="1477">' Sample script that lists all the views in a given SQL Server DB.

' SQL Server 2000 : Yes


strDBServerName = "."
strDBName = "Northwind"

Set objSQLServer = CreateObject("SQLDMO.SQLServer")
objSQLServer.LoginSecure = True
objSQLServer.Connect strDBServerName

Set colViews = objSQLServer.Databases(strDBName).Views
For Each objView In colViews
   WScript.Echo objView.Name
Next
</vb><vb name="Sample script that deletes a SQL Server database." n="1478">' Sample script that deletes a SQL Server database.

' SQL Server 2000 : Yes


strDBServerName = "."
strDBToDelete       = "ScriptingGuysTestDB"

Set objSQLServer = CreateObject("SQLDMO.SQLServer")
objSQLServer.LoginSecure = True
objSQLServer.Connect strDBServerName

objSQLServer.KillDatabase strDBToDelete
</vb><vb name="Sample script that lists the roles within a SQL Server database." n="1479">' Sample script that lists the roles within a SQL Server database.

' SQL Server 2000 : Yes


strDBServerName = "."
strDBName = "Northwind"

Set objSQLServer = CreateObject("SQLDMO.SQLServer")
objSQLServer.LoginSecure = True
objSQLServer.Connect strDBServerName

Set objDB = objSQLServer.Databases(strDBName)
Set colRoles = objDB.DatabaseRoles
For Each objRole In colRoles
   WScript.Echo "Role Name: "    &amp;amp; objRole.Name
Next
</vb><vb name="Sample script that lists the rules within a SQL Server database." n="1480">' Sample script that lists the rules within a SQL Server database.

' SQL Server 2000 : Yes


strDBServerName = "."
strDBName = "Northwind"

Set objSQLServer = CreateObject("SQLDMO.SQLServer")
objSQLServer.LoginSecure = True
objSQLServer.Connect strDBServerName

Set objDB = objSQLServer.Databases(strDBName)
Set colRules = objDB.Rules
For Each objRule In colRules
   WScript.Echo "Rule Name: "    &amp;amp; objRule.Name
Next
</vb><vb name="Create a SQL Server database." n="1481">' Create a SQL Server database.

' SQL Server 2000 : Yes


DB_SIZE_IN_MEGABYTES = 5
strDBServerName = "."

Set objSQLServer = CreateObject("SQLDMO.SQLServer")
objSQLServer.LoginSecure = True
objSQLServer.Connect strDBServerName

Set objDB = CreateObject("SQLDMO.Database")
Set objFG = CreateObject("SQLDMO.Filegroup")
Set objDBFile = CreateObject("SQLDMO.DBFile")
Set objLogFile = CreateObject("SQLDMO.LogFile")

objDB.Name = "ScriptingGuysTestDB"
objDBFile.Name = "ScriptingGuysTestDB_Data"
objDBFile.PhysicalName = "C:\Program Files\Microsoft SQL Server\MSSQL\data\ScriptingGuysTestDB_Data.MDF"
objDBFile.Size = DB_SIZE_IN_MEGABYTES

objDB.FileGroups("PRIMARY").DBFiles.Add(objDBFile)

objSQLServer.Databases.Add(objDB)
</vb><vb name="List the Stored Procedures in a SQL Server database." n="1482">' List the Stored Procedures in a SQL Server database.

' SQL Server 2000 : Yes


strDBServerName = "."
strDBName = "Northwind"

Set objSQLServer = CreateObject("SQLDMO.SQLServer")
objSQLServer.LoginSecure = True
objSQLServer.Connect strDBServerName

Set objDB = objSQLServer.Databases(strDBName)
Set colStoredProcedures = objDB.StoredProcedures
For Each objStoredProcedure In colStoredProcedures
   WScript.Echo "SP Name: "    &amp;amp; objStoredProcedure.Name
Next
</vb></dd>
		<dd name="Managing SQL Server" code="srvmgmt" desc="Sample scripts that enable you to gather information about and manage SQL Server."><vb name="Display SQL Server Login Mode" n="1483">' Display SQL Server Login Mode

' SQL Server 2000 : Yes


SQLDMOSecurity_Integrated  = 1 
SQLDMOSecurity_Mixed         = 2 
SQLDMOSecurity_Normal       = 0
SQLDMOSecurity_Unknown   = 9 

strDBServerName = "."

Set objSQLServer = CreateObject("SQLDMO.SQLServer")

Select Case objSQLServer.ServerLoginMode(strDBServerName)
   Case SQLDMOSecurity_Integrated
      WScript.Echo "Login Mode: Allow Windows Authentication only."
   Case SQLDMOSecurity_Mixed
      WScript.Echo "Login Mode: Allow Windows Authentication or SQL Server Authentication."
   Case SQLDMOSecurity_Normal
      WScript.Echo "Login Mode: Allow SQL Server Authentication only."
   Case SQLDMOSecurity_Unknown
      WScript.Echo "Login Mode: Security type unknown."
End Select
</vb><vb name="Display SQL Server Version Information" n="1484">' Display SQL Server Version Information

' SQL Server 2000 : Yes


strDBServerName = "."

Set objSQLServer = CreateObject("SQLDMO.SQLServer")
objSQLServer.LoginSecure = True
objSQLServer.Connect strDBServerName

WScript.Echo "SQL Major Version: " &amp;amp; objSQLServer.VersionMajor
WScript.Echo "SQL Minor Version: " &amp;amp; objSQLServer.VersionMinor
WScript.Echo "SQL Version String: " &amp;amp; objSQLServer.VersionString
</vb><vb name="Start SQL Server" n="1485">' Start SQL Server

' SQL Server 2000 : Yes


strDBServerName = "."

Set objSQLServer = CreateObject("SQLDMO.SQLServer")
objSQLServer.LoginSecure = True
objSQLServer.Name = strDBServerName

objSQLServer.Start False
</vb><vb name="Stop SQL Server" n="1486">' Stop SQL Server

' SQL Server 2000 : Yes

strDBServerName = "."

Set objSQLServer = CreateObject("SQLDMO.SQLServer")
objSQLServer.LoginSecure = True
objSQLServer.Connect strDBServerName

objSQLServer.Shutdown
</vb><vb name="List all the Databases on a SQL Server" n="1487">' List all the Databases on a SQL Server

' SQL Server 2000 : Yes


strDBServerName = "."

Set objSQLServer = CreateObject("SQLDMO.SQLServer")
objSQLServer.LoginSecure = True
objSQLServer.Connect strDBServerName

Set colDatabases = objSQLServer.Databases

For Each objDatabase In colDatabases
   WScript.Echo objDatabase.Name
Next
</vb></dd>
	</dd>
	<dd name="Storage" code="storage" desc="Sample scripts for managing files, folders, file systems, and storage devices.">
		<dd name="Dfs" code="dfs" desc="-"><vb name="Create a Dfs Node" n="1488">' Create a Dfs Node


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objDfsNode = objWMIService.Get("Win32_DfsNode")

errReturn = objDfsNode.Create _
    ("\\atl-dc-02\Scripts","\\atl-dc-02","Scripts", _
        "New Dfs node for shared scripts.")
</vb><vb name="List Dfs Nodes" n="1489">' List Dfs Nodes


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colDfsNodes = objWMIService.ExecQuery _
    ("Select * from Win32_DFSNode")

For each objDfsNode in colDfsNodes
    Wscript.Echo "Caption: " &amp;amp; objDfsNode.Caption     
    Wscript.Echo "Description: " &amp;amp; objDfsNode.Description    
    Wscript.Echo "Install Date: " &amp;amp; objDfsNode.InstallDate
    Wscript.Echo "Name: " &amp;amp; objDfsNode.Name   
    Wscript.Echo "Root: " &amp;amp; objDfsNode.Root   
    Wscript.Echo "State: " &amp;amp; objDfsNode.State 
    Wscript.Echo "Status: " &amp;amp; objDfsNode.Status       
    Wscript.Echo "Timeout: " &amp;amp; objDfsNode.Timeout     
Next
</vb><vb name="List Dfs Targets" n="1490">' List Dfs Targets


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colDfsTargets = objWMIService.ExecQuery _
    ("Select * from Win32_DFSTarget")

For each objDfsTarget in colDfsTargets
    Wscript.Echo "Caption: " &amp;amp; objDfsTarget.Caption   
    Wscript.Echo "Description: " &amp;amp; objDfsTarget.Description
    Wscript.Echo "Install Date: " &amp;amp; objDfsTarget.InstallDate
    Wscript.Echo "Link Name: " &amp;amp; objDfsTarget.LinkName       
    Wscript.Echo "Name: " &amp;amp; objDfsTarget.Name 
    Wscript.Echo "Server Name: " &amp;amp; objDfsTarget.ServerName
    Wscript.Echo "Share Name: " &amp;amp; objDfsTarget.ShareName     
    Wscript.Echo "State: " &amp;amp; objDfsTarget.State       
    Wscript.Echo "Status: " &amp;amp; objDfsTarget.Status     
Next
</vb></dd>
		<dd name="Disk Drives and Volumes" code="disks/drives" desc="-"><vb name="Add a Volume Mount Point" n="1491">' Add a Volume Mount Point


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From Win32_Volume Where Name = 'D:\\'")

For Each objItem in colItems
    objItem.AddMountPoint("W:\\Scripts\\")
Next
</vb><vb name="Analyze Volume Defragmentation" n="1492">' Analyze Volume Defragmentation


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colVolumes = objWMIService.ExecQuery("Select * from Win32_Volume")

For Each objVolume in colVolumes
    errResult = objVolume.DefragAnalysis(blnRecommended, objReport)
    If errResult = 0 then
        Wscript.Echo "Average file size: " &amp;amp; objReport.AverageFileSize
        Wscript.Echo "Average fragments per file: " &amp;amp; _
            objReport.AverageFragmentsPerFile
        Wscript.Echo "Cluster size: " &amp;amp; objReport.ClusterSize
        Wscript.Echo "Excess folder fragments: " &amp;amp; _
            objReport.ExcessFolderFragments
        Wscript.Echo "File percent fragmentation: " &amp;amp; _
            objReport.FilePercentFragmentation
        Wscript.Echo "Fragmented folders: " &amp;amp; objReport.FragmentedFolders
        Wscript.Echo "Free soace: " &amp;amp; objReport.FreeSpace
        Wscript.Echo "Free space percent: " &amp;amp; objReport.FreeSpacePercent
        Wscript.Echo "Free space percent fragmentation: " &amp;amp; _
            objReport.FreeSpacePercentFragmentation
        Wscript.Echo "MFT percent in use: " &amp;amp; objReport.MFTPercentInUse
        Wscript.Echo "MFT record count: " &amp;amp; objReport.MFTRecordCount
        Wscript.Echo "Page file size: " &amp;amp; objReport.PageFileSize
        Wscript.Echo "Total excess fragments: " &amp;amp; _
            objReport.TotalExcessFragments
        Wscript.Echo "Total files: " &amp;amp; objReport.TotalFiles
        Wscript.Echo "Total folders: " &amp;amp; objReport.TotalFolders
        Wscript.Echo "Total fragmented files: " &amp;amp; _
            objReport.TotalFragmentedFiles
        Wscript.Echo "Total MFT fragments: " &amp;amp; objReport.TotalMFTFragments
        Wscript.Echo "Total MFT size: " &amp;amp; objReport.TotalMFTSize
        Wscript.Echo "Total page file fragments: " &amp;amp; _
            objReport.TotalPageFileFragments
        Wscript.Echo "Total percent fragmentation: " &amp;amp; _
            objReport.TotalPercentFragmentation
        Wscript.Echo "Used space: " &amp;amp; objReport.UsedSpace
        Wscript.Echo "Volume name: " &amp;amp; objReport.VolumeName
        Wscript.Echo "Volume size: " &amp;amp; objReport.VolumeSize       
        If blnRecommended = True Then
           Wscript.Echo "This volume should be defragged."
        Else
           Wscript.Echo "This volume does not need to be defragged."
        End If
        Wscript.Echo
    End If
Next
</vb><vb name="Associate Disk Partitions with Physical Disk Drives" n="1493">' Associate Disk Partitions with Physical Disk Drives


strComputer = "."
Set wmiServices = GetObject _
    ("winmgmts:{impersonationLevel=Impersonate}!//" &amp;amp; strComputer)

Set wmiDiskDrives = wmiServices.ExecQuery _
    ("SELECT Caption, DeviceID FROM Win32_DiskDrive")
 
For Each wmiDiskDrive In wmiDiskDrives
    WScript.Echo wmiDiskDrive.Caption &amp;amp; " (" &amp;amp; wmiDiskDrive.DeviceID &amp;amp; ")"
    strEscapedDeviceID = Replace _
        (wmiDiskDrive.DeviceID, "\", "\\", 1, -1, vbTextCompare)
    Set wmiDiskPartitions = wmiServices.ExecQuery _
        ("ASSOCIATORS OF {Win32_DiskDrive.DeviceID=""" &amp;amp; _
    strEscapedDeviceID &amp;amp; """} WHERE AssocClass = " &amp;amp; _
        "Win32_DiskDriveToDiskPartition")
 
    For Each wmiDiskPartition In wmiDiskPartitions
        WScript.Echo vbTab &amp;amp; wmiDiskPartition.DeviceID
        Set wmiLogicalDisks = wmiServices.ExecQuery _
            ("ASSOCIATORS OF {Win32_DiskPartition.DeviceID=""" &amp;amp; _
                wmiDiskPartition.DeviceID &amp;amp; """} WHERE AssocClass = " &amp;amp; _
                    "Win32_LogicalDiskToPartition")
 
        For Each wmiLogicalDisk In wmiLogicalDisks
            WScript.Echo vbTab &amp;amp; vbTab &amp;amp; wmiLogicalDisk.DeviceID
        Next
    Next
Next
</vb><vb name="Bind to a Specific Disk Drive" n="1494">' Bind to a Specific Disk Drive


Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objDrive = objFSO.GetDrive("C:")
Wscript.Echo "Available space: " &amp;amp; objDrive.AvailableSpace
</vb><vb name="Change the Drive Letter of a Volume" n="1495">' Change the Drive Letter of a Volume


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colVolumes = objWMIService.ExecQuery _
    ("Select * from Win32_Volume Where Name = 'D:\\'")

For Each objVolume in colVolumes
    objVolume.DriveLetter = "Q:"
    objVolume.Put_
Next
</vb><vb name="Defragment a Volume" n="1496">' Defragment a Volume


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colVolumes = objWMIService.ExecQuery _
    ("Select * from Win32_Volume Where Name = 'D:\\'")

For Each objVolume in colVolumes
     errResult = objVolume.Defrag()
Next
</vb><vb name="Dismount a Volume" n="1497">' Dismount a Volume


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From Win32_Volume Where Name = 'E:\\'")

For Each objItem in colItems
    objItem.Dismount(True, True)
Next
</vb><vb name="Format a Volume" n="1498">' Format a Volume


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colVolumes = objWMIService.ExecQuery _
    ("Select * from Win32_Volume Where Name = 'D:\\'")

For Each objVolume in colVolumes
    errResult = objVolume.Format("NTFS")
Next
</vb><vb name="List All Disk Drives" n="1499">' List All Disk Drives


Set objFSO = CreateObject("Scripting.FileSystemObject")
Set colDrives = objFSO.Drives

For Each objDrive in colDrives
    Wscript.Echo "Drive letter: " &amp;amp; objDrive.DriveLetter
Next
</vb><vb name="List Available Disk Space" n="1500">' List Available Disk Space


Const HARD_DISK = 3

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colDisks = objWMIService.ExecQuery _
    ("Select * from Win32_LogicalDisk Where DriveType = " &amp;amp; HARD_DISK &amp;amp; "")

For Each objDisk in colDisks
    Wscript.Echo "DeviceID: "&amp;amp; vbTab &amp;amp;  objDisk.DeviceID       
    Wscript.Echo "Free Disk Space: "&amp;amp; vbTab &amp;amp; objDisk.FreeSpace
Next
</vb><vb name="List CD-ROM Properties" n="1501">' List CD-ROM Properties


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_CDROMDrive")

For Each objItem in colItems
    Wscript.Echo "Availability: " &amp;amp; objItem.Availability
    For Each strCapability in objItem.Capabilities
        Wscript.Echo "Capability: "&amp;amp; strCapability
    Next
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Drive: " &amp;amp; objItem.Drive
    Wscript.Echo "Manufacturer: " &amp;amp; objItem.Manufacturer
    Wscript.Echo "Media Loaded: " &amp;amp; objItem.MediaLoaded
    Wscript.Echo "Media Type: " &amp;amp; objItem.MediaType
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "PNP Device ID: " &amp;amp; objItem.PNPDeviceID
    Wscript.Echo "SCSI Bus: " &amp;amp; objItem.SCSIBus
    Wscript.Echo "SCSI Logical Unit: " &amp;amp; objItem.SCSILogicalUnit
    Wscript.Echo "SCSI Port: " &amp;amp; objItem.SCSIPort
    Wscript.Echo "SCSI Target ID: " &amp;amp; objItem.SCSITargetId
Next
</vb><vb name="List Disk Drive Properties Using FSO" n="1502">' List Disk Drive Properties Using FSO


Set objFSO = CreateObject("Scripting.FileSystemObject")
Set colDrives = objFSO.Drives

For Each objDrive in colDrives
    Wscript.Echo "Available space: " &amp;amp; objDrive.AvailableSpace
    Wscript.Echo "Drive letter: " &amp;amp; objDrive.DriveLetter
    Wscript.Echo "Drive type: " &amp;amp; objDrive.DriveType
    Wscript.Echo "File system: " &amp;amp; objDrive.FileSystem
    Wscript.Echo "Free space: " &amp;amp; objDrive.FreeSpace
    Wscript.Echo "Is ready: " &amp;amp; objDrive.IsReady
    Wscript.Echo "Path: " &amp;amp; objDrive.Path
    Wscript.Echo "Root folder: " &amp;amp; objDrive.RootFolder
    Wscript.Echo "Serial number: " &amp;amp; objDrive.SerialNumber
    Wscript.Echo "Share name: " &amp;amp; objDrive.ShareName
    Wscript.Echo "Total size: " &amp;amp; objDrive.TotalSize
    Wscript.Echo "Volume name: " &amp;amp; objDrive.VolumeName
Next
</vb><vb name="List Disk Partition Properties" n="1503">' List Disk Partition Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colDiskPartitions = objWMIService.ExecQuery _
    ("Select * from Win32_DiskPartition")

For each objPartition in colDiskPartitions
    Wscript.Echo "Block Size: " &amp;amp; objPartition.BlockSize     
    Wscript.Echo "Bootable: " &amp;amp; objPartition.Bootable 
    Wscript.Echo "Boot Partition: " &amp;amp; objPartition.BootPartition
    Wscript.Echo "Description: " &amp;amp; objPartition.Description
    Wscript.Echo "Device ID: " &amp;amp; objPartition.DeviceID       
    Wscript.Echo "Disk Index: " &amp;amp; objPartition.DiskIndex     
    Wscript.Echo "Index: " &amp;amp; objPartition.Index       
    Wscript.Echo "Name: " &amp;amp; objPartition.Name 
    Wscript.Echo "Number Of Blocks: " &amp;amp; _
        objPartition.NumberOfBlocks     
    Wscript.Echo "Primary Partition: " &amp;amp; _
        objPartition.PrimaryPartition   
    Wscript.Echo "Size: " &amp;amp; objPartition.Size 
    Wscript.Echo "Starting Offset: " &amp;amp; _
        objPartition.StartingOffset     
    Wscript.Echo "Type: " &amp;amp; objPartition.Type 
Next
</vb><vb name="List Disk Space by User on the Local Computer" n="1504">' List Disk Space by User on the Local Computer


Set colDiskQuotas = CreateObject("Microsoft.DiskQuota.1")
colDiskQuotas.Initialize "C:\", True
 
For Each objUser in colDiskQuotas
    Wscript.Echo "Logon name: " &amp;amp; objUser.LogonName
    Wscript.Echo "Quota used: " &amp;amp; objUser.QuotaUsed
Next
</vb><vb name="List Drive Types" n="1505">' List Drive Types


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colDisks = objWMIService.ExecQuery _
    ("Select * from Win32_LogicalDisk")

For Each objDisk in colDisks
    Wscript.Echo "DeviceID: "&amp;amp; objDisk.DeviceID       
    Select Case objDisk.DriveType
        Case 1
            Wscript.Echo "No root directory. Drive type could not be " _
                &amp;amp; "determined."
        Case 2
            Wscript.Echo "DriveType: "&amp;amp; "Removable drive."
        Case 3
            Wscript.Echo "DriveType: "&amp;amp; "Local hard disk."
        Case 4
            Wscript.Echo "DriveType: "&amp;amp; "Network disk."      
        Case 5
            Wscript.Echo "DriveType: "&amp;amp; "Compact disk."      
        Case 6
            Wscript.Echo "DriveType: "&amp;amp; "RAM disk."   
        Case Else
            Wscript.Echo "Drive type could not be determined."
    End Select
Next
</vb><vb name="List Floppy Drive Information" n="1506">' List Floppy Drive Information


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_FloppyDrive")

For Each objItem in colItems
    Wscript.Echo "Availability: " &amp;amp; objItem.Availability
    Wscript.Echo "Configuration Manager Error Code: " &amp;amp; _
        objItem.ConfigManagerErrorCode
    Wscript.Echo "Configuration Manager User Configuration: " &amp;amp; _
        objItem.ConfigManagerUserConfig
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "Manufacturer: " &amp;amp; objItem.Manufacturer
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "PNP Device ID: " &amp;amp; objItem.PNPDeviceID
    Wscript.Echo
Next
</vb><vb name="List Logical Disk Drive Properties" n="1507">' List Logical Disk Drive Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colDisks = objWMIService.ExecQuery _
    ("Select * from Win32_LogicalDisk")

For each objDisk in colDisks
    Wscript.Echo "Compressed: " &amp;amp; objDisk.Compressed  
    Wscript.Echo "Description: " &amp;amp; objDisk.Description       
    Wscript.Echo "DeviceID: " &amp;amp; objDisk.DeviceID      
    Wscript.Echo "DriveType: " &amp;amp; objDisk.DriveType    
    Wscript.Echo "FileSystem: " &amp;amp; objDisk.FileSystem  
    Wscript.Echo "FreeSpace: " &amp;amp; objDisk.FreeSpace    
    Wscript.Echo "MediaType: " &amp;amp; objDisk.MediaType    
    Wscript.Echo "Name: " &amp;amp; objDisk.Name      
    Wscript.Echo "QuotasDisabled: " &amp;amp; objDisk.QuotasDisabled
    Wscript.Echo "QuotasIncomplete: " &amp;amp; objDisk.QuotasIncomplete
    Wscript.Echo "QuotasRebuilding: " &amp;amp; objDisk.QuotasRebuilding
    Wscript.Echo "Size: " &amp;amp; objDisk.Size      
    Wscript.Echo "SupportsDiskQuotas: " &amp;amp; _
        objDisk.SupportsDiskQuotas      
    Wscript.Echo "SupportsFileBasedCompression: " &amp;amp; _
        objDisk.SupportsFileBasedCompression   
    Wscript.Echo "SystemName: " &amp;amp; objDisk.SystemName  
    Wscript.Echo "VolumeDirty: " &amp;amp; objDisk.VolumeDirty       
    Wscript.Echo "VolumeName: " &amp;amp; objDisk.VolumeName  
    Wscript.Echo "VolumeSerialNumber: " &amp;amp; _
        objDisk.VolumeSerialNumber      
Next
</vb><vb name="List Mapped Network Drives" n="1508">' List Mapped Network Drives


On Error Resume Next

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_MappedLogicalDisk")

For Each objItem in colItems
    Wscript.Echo "Compressed: " &amp;amp; objItem.Compressed
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    Wscript.Echo "File System: " &amp;amp; objItem.FileSystem
    Wscript.Echo "Free Space: " &amp;amp; objItem.FreeSpace
    Wscript.Echo "Maximum Component Length: " &amp;amp; objItem.MaximumComponentLength
    Wscript.Echo "Name: " &amp;amp; objItem.Name
    Wscript.Echo "Provider Name: " &amp;amp; objItem.ProviderName
    Wscript.Echo "Session ID: " &amp;amp; objItem.SessionID
    Wscript.Echo "Size: " &amp;amp; objItem.Size
    Wscript.Echo "Supports Disk Quotas: " &amp;amp; objItem.SupportsDiskQuotas
    Wscript.Echo "Supports File-Based Compression: " &amp;amp; _
        objItem.SupportsFileBasedCompression
    Wscript.Echo "Volume Name: " &amp;amp; objItem.VolumeName
    Wscript.Echo "Volume Serial Number: " &amp;amp; objItem.VolumeSerialNumber
    Wscript.Echo
Next
</vb><vb name="List Physical Disk Properties" n="1509">' List Physical Disk Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colDiskDrives = objWMIService.ExecQuery _    
    ("Select * from Win32_DiskDrive")

For each objDiskDrive in colDiskDrives
    Wscript.Echo "Bytes Per Sector: " &amp;amp; vbTab &amp;amp;  _
        objDiskDrive.BytesPerSector        
    For i = Lbound(objDiskDrive.Capabilities) to _
        Ubound(objDiskDrive.Capabilities)
        Wscript.Echo "Capabilities: " &amp;amp; vbTab &amp;amp;  _
            objDiskDrive.Capabilities(i)
    Next    
    Wscript.Echo "Caption: " &amp;amp; vbTab &amp;amp;  objDiskDrive.Caption
    Wscript.Echo "Device ID: " &amp;amp; vbTab &amp;amp;  objDiskDrive.DeviceID
    Wscript.Echo "Index: " &amp;amp; vbTab &amp;amp;  objDiskDrive.Index
    Wscript.Echo "Interface Type: " &amp;amp; vbTab &amp;amp; objDiskDrive.InterfaceType
    Wscript.Echo "Manufacturer: " &amp;amp; vbTab &amp;amp; objDiskDrive.Manufacturer
    Wscript.Echo "Media Loaded: " &amp;amp; vbTab  &amp;amp; objDiskDrive.MediaLoaded
    Wscript.Echo "Media Type: " &amp;amp; vbTab &amp;amp;  objDiskDrive.MediaType
    Wscript.Echo "Model: " &amp;amp; vbTab &amp;amp;  objDiskDrive.Model
    Wscript.Echo "Name: " &amp;amp; vbTab &amp;amp;  objDiskDrive.Name
    Wscript.Echo "Partitions: " &amp;amp; vbTab &amp;amp; objDiskDrive.Partitions
    Wscript.Echo "PNP DeviceID: " &amp;amp; vbTab &amp;amp;  objDiskDrive.PNPDeviceID
    Wscript.Echo "SCSI Bus: " &amp;amp; vbTab &amp;amp;  objDiskDrive.SCSIBus
    Wscript.Echo "SCSI Logical Unit: " &amp;amp; vbTab &amp;amp;  _
        objDiskDrive.SCSILogicalUnit
    Wscript.Echo "SCSI Port: " &amp;amp; vbTab &amp;amp;  objDiskDrive.SCSIPort
    Wscript.Echo "SCSI TargetId: " &amp;amp; vbTab &amp;amp;  objDiskDrive.SCSITargetId    
    Wscript.Echo "Sectors Per Track: " &amp;amp; vbTab &amp;amp;  _
        objDiskDrive.SectorsPerTrack        
    Wscript.Echo "Signature: " &amp;amp; vbTab &amp;amp;  objDiskDrive.Signature          
    Wscript.Echo "Size: " &amp;amp; vbTab &amp;amp;  objDiskDrive.Size     
    Wscript.Echo "Status: " &amp;amp; vbTab &amp;amp;  objDiskDrive.Status         
    Wscript.Echo "Total Cylinders: " &amp;amp; vbTab &amp;amp;  _
        objDiskDrive.TotalCylinders         
    Wscript.Echo "Total Heads: " &amp;amp; vbTab &amp;amp;  objDiskDrive.TotalHeads    
    Wscript.Echo "Total Sectors: " &amp;amp; vbTab &amp;amp;  objDiskDrive.TotalSectors
    Wscript.Echo "Total Tracks: " &amp;amp; vbTab &amp;amp;  objDiskDrive.TotalTracks
    Wscript.Echo "Tracks Per Cylinder: " &amp;amp; vbTab &amp;amp;  _
        objDiskDrive.TracksPerCylinder  
Next
</vb><vb name="List Volume Mount Points" n="1510">' List Volume Mount Points


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colItems = objWMIService.ExecQuery _
    ("SELECT * FROM Win32_MountPoint")

For Each objItem In colItems
  WScript.Echo "Directory: " &amp;amp; objItem.Directory
  WScript.Echo "Volume: " &amp;amp; objItem.Volume
  WScript.Echo
Next
</vb><vb name="List Volume Properties" n="1511">' List Volume Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_Volume")

For Each objItem In colItems
    WScript.Echo "Automount: " &amp;amp; objItem.Automount
    WScript.Echo "Block Size: " &amp;amp; objItem.BlockSize
    WScript.Echo "Capacity: " &amp;amp; objItem.Capacity
    WScript.Echo "Caption: " &amp;amp; objItem.Caption
    WScript.Echo "Compressed: " &amp;amp; objItem.Compressed
    WScript.Echo "Device ID: " &amp;amp; objItem.DeviceID
    WScript.Echo "Dirty Bit Set: " &amp;amp; objItem.DirtyBitSet
    WScript.Echo "Drive Letter: " &amp;amp; objItem.DriveLetter
    WScript.Echo "Drive Type: " &amp;amp; objItem.DriveType
    WScript.Echo "File System: " &amp;amp; objItem.FileSystem
    WScript.Echo "Free Space: " &amp;amp; objItem.FreeSpace
    WScript.Echo "Indexing Enabled: " &amp;amp; objItem.IndexingEnabled
    WScript.Echo "Label: " &amp;amp; objItem.Label
    WScript.Echo "Maximum File Name Length: " &amp;amp; objItem.MaximumFileNameLength
    WScript.Echo "Name: " &amp;amp; objItem.Name
    WScript.Echo "Quotas Enabled: " &amp;amp; objItem.QuotasEnabled
    WScript.Echo "Quotas Incomplete: " &amp;amp; objItem.QuotasIncomplete
    WScript.Echo "Quotas Rebuilding: " &amp;amp; objItem.QuotasRebuilding
    WScript.Echo "Serial Number: " &amp;amp; objItem.SerialNumber
    WScript.Echo "Supports Disk Quotas: " &amp;amp; objItem.SupportsDiskQuotas
    WScript.Echo "Supports File-Based Compression: " &amp;amp; _
        objItem.SupportsFileBasedCompression
    WScript.Echo
Next
</vb><vb name="Modify the AutoChk Timeout Value" n="1512">' Modify the AutoChk Timeout Value


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colAutoChkSettings = objWMIService.ExecQuery _
    ("Select * from Win32_AutochkSetting")

For Each objAutoChkSetting in colAutoChkSettings
    objAutoChkSetting.UserInputDelay = 30
    objAutoChkSetting.Put_
Next
</vb><vb name="Mount a Volume" n="1513">' Mount a Volume


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * From Win32_Volume Where Name = 'Z:\\'")

For Each objItem in colItems
     objItem.Mount()
Next
</vb><vb name="Prevent AutoChk From Running" n="1514">' Prevent AutoChk From Running


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objDisk = objWMIService.Get("Win32_LogicalDisk")

errReturn = objDisk.ExcludeFromAutoChk(Array("C:"))
</vb><vb name="Rename a Volume" n="1515">' Rename a Volume


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colDrives = objWMIService.ExecQuery _
    ("Select * from Win32_LogicalDisk where DeviceID = 'C:'")

For Each objDrive in colDrives
    objDrive.VolumeName = "Finance Volume"
    objDrive.Put_
Next
</vb><vb name="Run ChkDsk" n="1516">' Run ChkDsk


Const FIX_ERRORS = True

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objDisk = objWMIService.Get("Win32_LogicalDisk.DeviceID='D:'")

errReturn = objDisk.ChkDsk(FIX_ERRORS)
</vb><vb name="Schedule AutoChk" n="1517">' Schedule AutoChk


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objDisk = objWMIService.Get("Win32_LogicalDisk")

errReturn = objDisk.ScheduleAutoChk(Array("C:"))
</vb><vb name="Verify ChkDsk Volume Status" n="1518">' Verify ChkDsk Volume Status


Const LOCAL_HARD_DISK = 3

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colDisks = objWMIService.ExecQuery _
    ("Select * from Win32_LogicalDisk Where DriveType = LOCAL_HARD_DISK ")

For Each objDisk in colDisks
    Wscript.Echo "Device ID: "&amp;amp; vbTab &amp;amp;  objDisk.DeviceID       
    Wscript.Echo "Drive Type: "&amp;amp; vbTab &amp;amp; objDisk.VolumeDirty
Next
</vb><vb name="Verify that All Drives are Ready" n="1519">' Verify that All Drives are Ready


Set objFSO = CreateObject("Scripting.FileSystemObject")
Set colDrives = objFSO.Drives

For Each objDrive in colDrives
    If objDrive.IsReady = True Then
        Wscript.Echo "Drive letter: " &amp;amp; objDrive.DriveLetter
        Wscript.Echo "Free space: " &amp;amp; objDrive.FreeSpace
    Else
        Wscript.Echo "Drive letter: " &amp;amp; objDrive.DriveLetter
    End If
Next
</vb></dd>
		<dd name="Disk Quotas" code="quotas" desc="-"><vb name="Add a Disk Quota Entry on the Local Computer" n="1520">' Add a Disk Quota Entry on the Local Computer


Set colDiskQuotas = CreateObject("Microsoft.DiskQuota.1")

colDiskQuotas.Initialize "C:\", True
Set objUser = colDiskQuotas.AddUser("kenmyer")
Set objUser = colDiskQuotas.FindUser("kenmyer")
objUser.QuotaLimit = 50000000
</vb><vb name="Create a New Quota Entry" n="1521">' Create a New Quota Entry


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2"

Set objAccount = objWMIService.Get _
    ("Win32_Account.Domain='fabrikam',Name='bob'")
Set objDisk = objWMIService.Get _
    ("Win32_LogicalDisk.DeviceID='C:'")
Set objQuota = objWMIService.Get _
    ("Win32_DiskQuota").SpawnInstance_

objQuota.QuotaVolume = objDisk.Path_.RelPath
objQuota.User = objAccount.Path_.RelPath
objQuota.Limit = 10485760
objQuota.WarningLimit = 8388608
objQuota.Put_
</vb><vb name="Delete a Disk Quota Entry on the Local Computer" n="1522">' Delete a Disk Quota Entry on the Local Computer


Set colDiskQuotas = CreateObject("Microsoft.DiskQuota.1")

colDiskQuotas.Initialize "C:\", True
set objUser = colDiskQuotas.FindUser("kenmyer")
colDiskQuotas.DeleteUser(objUser)
</vb><vb name="Delete an Existing Quota Entry" n="1523">' Delete an Existing Quota Entry


strDrive = "C:"
strDomain = "fabrikam"
strUser = "bob"

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objQuota = objWMIService.Get _
    ("Win32_DiskQuota.QuotaVolume='Win32_LogicalDisk.DeviceID=""" " &amp;amp; _
        " &amp;amp; strDrive &amp;amp; """',User='Win32_Account.Domain=""" " &amp;amp; _
            " &amp;amp; strDomain &amp;amp; """,Name=""" &amp;amp; strUser &amp;amp; """'")

objQuota.Delete_
</vb><vb name="Enable Disk Quotas" n="1524">' Enable Disk Quotas


Const ENFORCE_QUOTAS = 1

StrComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set colDisks = objWMIService.ExecQuery _
    ("Select * from Win32_QuotaSetting Where VolumePath = 'C:\\'")

For Each objDisk in colDisks
    objDisk.State = ENFORCE_QUOTAS
    objDisk.Put_
Next
</vb><vb name="Enable Disk Quotas on the Local Computer" n="1525">' Enable Disk Quotas on the Local Computer


Const ENABLE_QUOTAS = 2

Set colDiskQuotas = CreateObject("Microsoft.DiskQuota.1")
colDiskQuotas.Initialize "C:\", True
colDiskQuotas.QuotaState = ENABLE_QUOTAS
</vb><vb name="List a Quota Entry" n="1526">' List a Quota Entry


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objQuota = objWMIService.Get _
    ("Win32_DiskQuota.QuotaVolume='Win32_LogicalDisk.DeviceID=""C:""'," &amp;amp; _
        "User='Win32_Account.Domain=""fabrikam"",Name=""bob""'")

Wscript.Echo objQuota.Limit
</vb><vb name="List Disk Quota Entries" n="1527">' List Disk Quota Entries


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colDiskQuotas = objWMIService.ExecQuery("Select * from Win32_DiskQuota")

For each objQuota in colDiskQuotas
    Wscript.Echo "Disk Space Used: " &amp;amp; vbTab &amp;amp;  objQuota.DiskSpaceUsed
    Wscript.Echo "Limit: " &amp;amp; vbTab &amp;amp;  objQuota.Limit   
    Wscript.Echo "Quota Volume: " &amp;amp; vbTab &amp;amp;  objQuota.QuotaVolume     
    Wscript.Echo "Status: " &amp;amp; vbTab &amp;amp;  objQuota.Status 
    Wscript.Echo "User: " &amp;amp; vbTab &amp;amp;  objQuota.User     
    Wscript.Echo "Warning Limit: " &amp;amp; vbTab &amp;amp;  objQuota.WarningLimit
Next
</vb><vb name="List Disk Quota Entries on the Local Computer" n="1528">' List Disk Quota Entries on the Local Computer


Set colDiskQuotas = CreateObject("Microsoft.DiskQuota.1")
colDiskQuotas.Initialize "C:\", True
 
For Each objUser in colDiskQuotas
    Wscript.Echo "Logon name: " &amp;amp; objUser.LogonName
    Wscript.Echo "Quota limit: " &amp;amp; objUser.QuotaLimit
    Wscript.Echo "Quota threshold: " &amp;amp; objUser.QuotaThreshold
    Wscript.Echo "Quota used: " &amp;amp; objUser.QuotaUsed
Next
</vb><vb name="List Disk Quota Settings" n="1529">' List Disk Quota Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colQuotaSettings = objWMIService.ExecQuery _
    ("Select * from Win32_QuotaSetting")

For Each objQuotaSetting in colQuotaSettings
    Wscript.Echo "Default Limit: " &amp;amp; objQuotaSetting.DefaultLimit
    Wscript.Echo "Default Warning Limit: " &amp;amp;  _
        objQuotaSetting.DefaultWarningLimit    
    Wscript.Echo "Exceeded Notification: " &amp;amp;  _
        objQuotaSetting.ExceededNotification   
    Wscript.Echo "State: " &amp;amp; objQuotaSetting.State    
    Wscript.Echo "Volume Path: " &amp;amp; objQuotaSetting.VolumePath
    Wscript.Echo "Warning Exceeded Notification: " &amp;amp; _
        objQuotaSetting.WarningExceededNotification    
Next
</vb><vb name="List Disk Quota Settings on the Local Computer" n="1530">' List Disk Quota Settings on the Local Computer


Set colDiskQuotas = CreateObject("Microsoft.DiskQuota.1")
colDiskQuotas.Initialize "C:\", True
 
If colDiskQuotas.QuotaState = 2 Then
    Wscript.Echo "Quota state: Enabled and enforced"
ElseIf colDiskQuotas.QuotaState = 1 Then
    Wscript.Echo "Quota state: Enabled but not enforced"
Else
    Wscript.Echo "Quota state: Disabled"
End If

Wscript.Echo "Default quota limit: " &amp;amp; colDiskQuotas.DefaultQuotaLimit
Wscript.Echo "Default warning limit: " &amp;amp; _
    colDiskQuotas.DefaultQuotaThreshold
Wscript.Echo "Record quota violations in event log: " &amp;amp; _
    colDiskQuotas.LogQuotaLimit
Wscript.Echo "Record warnings in event log: " &amp;amp; _
    colDiskQuotas.LogQuotaThreshold
</vb><vb name="List Disk Space by User Using Disk Quotas" n="1531">' List Disk Space by User Using Disk Quotas


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colQuotas = objWMIService.ExecQuery("Select * from Win32_DiskQuota")

For Each objQuota in colQuotas
    Wscript.Echo "Volume: "&amp;amp; objQuota.QuotaVolume
    Wscript.Echo "User: "&amp;amp; objQuota.User      
    Wscript.Echo "Disk Space Used: "&amp;amp; objQuota.DiskSpaceUsed
Next
</vb><vb name="Locate A Quota Entry" n="1532">' Locate A Quota Entry


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objQuota = objWMIService.Get _
    ("Win32_DiskQuota.QuotaVolume='Win32_LogicalDisk.DeviceID=""C:""'," &amp;amp; _
        "User='Win32_Account.Domain=""fabrikam"",Name=""bob""'")

Wscript.Echo objQuota.Limit
</vb><vb name="Modify a Disk Quota Entry on the Local Computer" n="1533">' Modify a Disk Quota Entry on the Local Computer


Set colDiskQuotas = CreateObject("Microsoft.DiskQuota.1")
colDiskQuotas.Initialize "C:\", True
set objUser = colDiskQuotas.FindUser("kenmyer")

objUser.QuotaThreshold = 90000000
objUser.QuotaLimit = 100000000
</vb><vb name="Modify an Existing Quota Entry" n="1534">' Modify an Existing Quota Entry


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objAccount = objWMIService.Get _
    ("Win32_Account.Domain='fabrikam',Name='bob'")
Set objDisk = objWMIService.Get("Win32_LogicalDisk.DeviceID='C:'")
Set objQuota = objWMIService.Get _
    ("Win32_DiskQuota.QuotaVolume= " &amp;amp; _
      "'Win32_LogicalDisk.DeviceID=""C:""'," &amp;amp; _ 
         "User='Win32_Account.Domain=""fabrikam"",Name=""bob""'")

objQuota.Limit = 11111111
objQuota.Put_
</vb><vb name="Modify Disk Quota Settings" n="1535">' Modify Disk Quota Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colQuotaSettings = objWMIService.ExecQuery _
    ("Select * from Win32_QuotaSetting")

For Each objQuotaSetting in colQuotaSettings
    objQuotaSetting.DefaultLimit = 10000000
    objQuotaSetting.DefaultWarningLimit = 9000000
    objQuotaSetting.Put_
Next
</vb></dd>
		<dd name="File Systems" code="fs" desc="-"><vb name="List NTFS Properties" n="1536">' List NTFS Properties


On Error Resume Next

Set objShell = WScript.CreateObject("WScript.Shell")

strRegKey =  objShell.RegRead _
    ("HKLM\System\CurrentControlSet\Control\FileSystem\" _
        &amp;amp; "NtfsDisable8dot3NameCreation")
If IsNull(strRegKey) Then
    Wscript.Echo "No value set for disabling 8.3 file name creation."
ElseIf strRegKey = 1 Then
    WScript.Echo "No 8.3 file names will be created for new files."
ElseIf strRegKey = 0 Then
    Wscript.Echo "8.3 file names will be created for new files."
End If

strRegKey = Null
strRegKey =  objShell.RegRead _
    ("HKLM\System\CurrentControlSet\Control\FileSystem\" _
        &amp;amp; "NtfsAllowExtendedCharacterIn8Dot3Name")
If IsNull(strRegKey) Then
    Wscript.Echo "No value set for allowing extended characters in " _
       &amp;amp; " 8.3 file names."
ElseIf strRegKey = 1 Then
    WScript.Echo "Extended characters are permitted in 8.3 file names."
ElseIf strRegKey = 0 Then
    Wscript.Echo "Extended characters not permitted in 8.3 file names."
End If

strRegKey = Null
strRegKey =  objShell.RegRead _
    ("HKLM\System\CurrentControlSet\Control\FileSystem\" _
        &amp;amp; "NtfsMftZoneReservation")
If IsNull(strRegKey) Then
    Wscript.Echo "No value set for reserving the MFT zone."
ElseIf strRegKey = 1 Then
    WScript.Echo _
        "One-eighth of the disk has been reserved for the MFT zone."
ElseIf strRegKey = 2 Then
    Wscript.Echo "One-fourth of the disk reserved for the MFT zone."
ElseIf strRegKey = 3 Then
    Wscript.Echo "Three-eighths of the disk reserved for the MFT zone."
ElseIf strRegKey = 4 Then
    Wscript.Echo "One half of the disk reserved for the MFT zone."
End If

strRegKey = Null
strRegKey =  objShell.RegRead _
    ("HKLM\System\CurrentControlSet\Control\FileSystem\" _
        &amp;amp; "NtfsDisableLastAccessUpdate")
If IsNull(strRegKey) Then
    Wscript.Echo "No value set for disabling the last access update " _
        &amp;amp; "for files and folder."
ElseIf strRegKey = 1 Then
    WScript.Echo "The last access timestamp will not be updated on files " _
        &amp;amp; "and folders."
ElseIf strRegKey = 0 Then
    Wscript.Echo "The last access timestamp updated on files and " _
         &amp;amp; "folders."
End If

strRegKey = Null
strRegKey =  objShell.RegRead _
    ("HKLM\System\CurrentControlSet\Control\FileSystem\Win31FileSystem")
If IsNull(strRegKey) Then
    Wscript.Echo "No value set for using long file names and " _
        &amp;amp; "timestamps."
ElseIf strRegKey = 1 Then
    WScript.Echo "Long file names and extended timestamps are used."
ElseIf strRegKey = 0 Then
    Wscript.Echo "Long file names and extended timestamps are not used."
End If
</vb><vb name="List the File System Type" n="1537">' List the File System Type


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colDisks = objWMIService.ExecQuery("Select * from Win32_LogicalDisk")

For Each objDisk in colDisks
    Wscript.Echo "Device ID: "&amp;amp; vbTab &amp;amp;  objDisk.DeviceID       
    Wscript.Echo "File System: "&amp;amp; vbTab &amp;amp; objDisk.FileSystem
Next
</vb><vb name="Modify File System Properties" n="1538">' Modify File System Properties


Set objShell = WScript.CreateObject("WScript.Shell")
strRegKey =  objShell.RegWrite _
    ("HKLM\System\CurrentControlSet\Control\FileSystem\" _
        &amp;amp; "NtfsDisableLastAccessUpdate" , 1, "REG_DWORD")
</vb><vb name="Monitor NTFS File Cache Performance" n="1539">' Monitor NTFS File Cache Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colCache = objRefresher.AddEnum _
    (objWMIService, "win32_PerfFormattedData_PerfOS_Cache").ObjectSet
objRefresher.Refresh

For i = 1 to 100
    For Each objCache in colCache
        Wscript.Echo "Async Copy Reads Per Second" &amp;amp; _
            objCache.AsyncCopyReadsPerSec
        Wscript.Echo "Async Data Maps Per Second" &amp;amp; _
            objCache.AsyncDataMapsPerSec
        Wscript.Echo "AsyncFastReadsPerSecond" &amp;amp; _
            objCache.AsyncFastReadsPerSec
        Wscript.Echo "Async MDL Reads Per Second" &amp;amp; _
            objCache.AsyncMDLReadsPerSec
        Wscript.Echo "Async Pin Reads Per Second" &amp;amp; _
            objCache.AsyncPinReadsPerSec
        Wscript.Echo "Caption" &amp;amp; vbTab &amp;amp; objCache.Caption
        Wscript.Echo "Copy Read Hits Percent " &amp;amp; _
            objCache.CopyReadHitsPercent
        Wscript.Echo "Copy Reads Per Second" &amp;amp; _
            objCache.CopyReadsPerSec
        Wscript.Echo "Data Flushes Per Second" &amp;amp; _
            objCache.DataFlushesPerSec
        Wscript.Echo "Data Flush Pages Per Second" &amp;amp; _
            objCache.DataFlushPagesPerSec
        Wscript.Echo "Data Map Hits Percent " &amp;amp; _
            objCache.DataMapHitsPercent
        Wscript.Echo "Data Map Pins Per Second" &amp;amp; _
            objCache.DataMapPinsPerSec
        Wscript.Echo "Data Maps Per Second" &amp;amp; _
            objCache.DataMapsPerSec
        Wscript.Echo "Description" &amp;amp; objCache.Description
        Wscript.Echo "Fast Read Not Possibles Per Second" &amp;amp; _
            objCache.FastReadNotPossiblesPerSec
        Wscript.Echo "Fast Read Resource Misses Per Second" &amp;amp; _
            objCache.FastReadResourceMissesPerSec
        Wscript.Echo "Fast Reads Per Second" &amp;amp; _
            objCache.FastReadsPerSec
        Wscript.Echo "Lazy Write Flushes Per Second" &amp;amp; _
            objCache.LazyWriteFlushesPerSec
        Wscript.Echo "Lazy Write Pages Per Second" &amp;amp; _
            objCache.LazyWritePagesPerSec
        Wscript.Echo "MDL Read Hits Percent " &amp;amp; _
            objCache.MDLReadHitsPercent
        Wscript.Echo "MDL Reads Per Second" &amp;amp; _
            objCache.MDLReadsPerSec
        Wscript.Echo "Name" &amp;amp; vbTab &amp;amp; objCache.Name
        Wscript.Echo "Pin Read Hits Percent" &amp;amp; _
            objCache.PinReadHitsPercent
        Wscript.Echo "Pin Reads Per Second" &amp;amp; _
            objCache.PinReadsPerSec
        Wscript.Echo "Read Aheads Per Second" &amp;amp; _
            objCache.ReadAheadsPerSec
        Wscript.Echo "Sync Copy Reads Per Second" &amp;amp; _
            objCache.SyncCopyReadsPerSec
        Wscript.Echo "Sync Data Maps Per Second" &amp;amp; _
            objCache.SyncDataMapsPerSec
        Wscript.Echo "Sync Fast Reads Per Second" &amp;amp; _
            objCache.SyncFastReadsPerSec
        Wscript.Echo "Sync MDL Reads Per Second" &amp;amp; _
            objCache.SyncMDLReadsPerSec
        Wscript.Echo "Sync Pin Reads Per Second" &amp;amp; _
            objCache.SyncPinReadsPerSec
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb></dd>
		<dd name="Files" code="files" desc="-"><vb name="Copy a File" n="1540">' Copy a File


Const OverwriteExisting = TRUE

Set objFSO = CreateObject("Scripting.FileSystemObject")
objFSO.CopyFile "C:\FSO\ScriptLog.txt" , "D:\Archive\", OverwriteExisting
</vb><vb name="Copy a Set of Files" n="1541">' Copy a Set of Files


Const OverwriteExisting = TRUE

Set objFSO = CreateObject("Scripting.FileSystemObject")
objFSO.CopyFile "C:\FSO\*.txt" , "D:\Archive\" , OverwriteExisting
</vb><vb name="Create a Custom Document Property" n="1542">' Create a Custom Document Property


Set objPropertyReader = CreateObject("DSOleFile.PropertyReader")
Set objDocument = objPropertyReader.GetDocumentProperties _
    ("C:\Scripts\Test.doc")

Set colCustomProperties = objDocument.CustomProperties
errReturn = ColCustomProperties.Add("TestProperty", "Test")
</vb><vb name="Delete a Custom Document Property" n="1543">' Delete a Custom Document Property


Set objPropertyReader = CreateObject("DSOleFile.PropertyReader")
Set objDocument = objPropertyReader.GetDocumentProperties_
    ("C:\Scripts\Test.doc")
Set colCustomProperties = objDocument.CustomProperties

For Each strProperty in colCustomProperties
    If strProperty.Name = "TestProperty" Then
        strProperty.Remove()
    End If
Next
</vb><vb name="Delete a File" n="1544">' Delete a File


Set objFSO = CreateObject("Scripting.FileSystemObject")
objFSO.DeleteFile("C:\FSO\ScriptLog.txt")
</vb><vb name="Delete All Files in a Folder" n="1545">' Delete All Files in a Folder


Const DeleteReadOnly = TRUE

Set objFSO = CreateObject("Scripting.FileSystemObject")
objFSO.DeleteFile("C:\FSO\*.txt"), DeleteReadOnly
</vb><vb name="List a Specific Set of Files" n="1546">' List a Specific Set of Files


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFiles = objWMIService. _
    ExecQuery("Select * from CIM_DataFile where FileSize &amp;gt; 1000000")

For Each objFile in colFiles
    Wscript.Echo objFile.Name &amp;amp; " -- " &amp;amp; objFile.FileSize
Next
</vb><vb name="List All the Files in a Folder" n="1547">' List All the Files in a Folder


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFiles = objWMIService. _
    ExecQuery("Select * from CIM_DataFile where Path = '\\Scripts\\'")

For Each objFile in colFiles
    Wscript.Echo objFile.Name 
Next
</vb><vb name="List All the Files on a Computer" n="1548">' List All the Files on a Computer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFiles = objWMIService.ExecQuery("Select * from CIM_Datafile")

For Each objFile in colFiles
    Wscript.Echo objFile.Name
Next
</vb><vb name="List Detailed Summary Information for a File" n="1549">' List Detailed Summary Information for a File


Set objShell = CreateObject ("Shell.Application")
Set objFolder = objShell.Namespace ("C:\Scripts")
Set objFSO = CreateObject("Scripting.FileSystemObject")
Dim arrHeaders(13)

For i = 0 to 13
    arrHeaders(i) = objFolder.GetDetailsOf (objFolder.Items, i)
Next

For Each strFileName in objFolder.Items
    For i = 0 to 13
        If i &amp;lt;&amp;gt; 9 then
            Wscript.echo arrHeaders(i) _
                &amp;amp; ": " &amp;amp; objFolder.GetDetailsOf (strFileName, i) 
        End If
    Next
    Wscript.Echo
Next
</vb><vb name="List File Attributes" n="1550">' List File Attributes


Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFile = objFSO.GetFile("C:\FSO\ScriptLog.txt")

If objFile.Attributes AND 0 Then
    Wscript.Echo "No attributes set."
End If    
If objFile.Attributes AND 1 Then
    Wscript.Echo "Read-only."
End If    
If objFile.Attributes AND 2 Then
    Wscript.Echo "Hidden file."
End If    
If objFile.Attributes AND 4 Then
    Wscript.Echo "System file."
End If    
If objFile.Attributes AND 32 Then
    Wscript.Echo "Archive bit set."
End If    
If objFile.Attributes AND 64 Then
    Wscript.Echo "Link or shortcut."
End If    
If objFile.Attributes AND 2048 Then
    Wscript.Echo "Compressed file."
End If
</vb><vb name="List File Properties" n="1551">' List File Properties


Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFile = objFSO.GetFile("c:\windows\system32\scrrun.dll")

Wscript.Echo "Date created: " &amp;amp; objFile.DateCreated
Wscript.Echo "Date last accessed: " &amp;amp; objFile.DateLastAccessed
Wscript.Echo "Date last modified: " &amp;amp; objFile.DateLastModified
Wscript.Echo "Drive: " &amp;amp; objFile.Drive
Wscript.Echo "Name: " &amp;amp; objFile.Name
Wscript.Echo "Parent folder: " &amp;amp; objFile.ParentFolder
Wscript.Echo "Path: " &amp;amp; objFile.Path
Wscript.Echo "Short name: " &amp;amp; objFile.ShortName
Wscript.Echo "Short path: " &amp;amp; objFile.ShortPath
Wscript.Echo "Size: " &amp;amp; objFile.Size
Wscript.Echo "Type: " &amp;amp; objFile.Type
</vb><vb name="List File Properties" n="1552">' List File Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFiles = objWMIService.ExecQuery _
    ("Select * from CIM_Datafile Where name = 'c:\\Scripts\\Adsi.vbs'")

For Each objFile in colFiles
    Wscript.Echo "Access mask: " &amp;amp; objFile.AccessMask
    Wscript.Echo "Archive: " &amp;amp; objFile.Archive
    Wscript.Echo "Compressed: " &amp;amp; objFile.Compressed
    Wscript.Echo "Compression method: " &amp;amp; objFile.CompressionMethod
    Wscript.Echo "Creation date: " &amp;amp; objFile.CreationDate
    Wscript.Echo "Computer system name: " &amp;amp; objFile.CSName
    Wscript.Echo "Drive: " &amp;amp; objFile.Drive
    Wscript.Echo "8.3 file name: " &amp;amp; objFile.EightDotThreeFileName
    Wscript.Echo "Encrypted: " &amp;amp; objFile.Encrypted
    Wscript.Echo "Encryption method: " &amp;amp; objFile.EncryptionMethod
    Wscript.Echo "Extension: " &amp;amp; objFile.Extension
    Wscript.Echo "File name: " &amp;amp; objFile.FileName
    Wscript.Echo "File size: " &amp;amp; objFile.FileSize
    Wscript.Echo "File type: " &amp;amp; objFile.FileType
    Wscript.Echo "File system name: " &amp;amp; objFile.FSName
    Wscript.Echo "Hidden: " &amp;amp; objFile.Hidden
    Wscript.Echo "Last accessed: " &amp;amp; objFile.LastAccessed
    Wscript.Echo "Last modified: " &amp;amp; objFile.LastModified
    Wscript.Echo "Manufacturer: " &amp;amp; objFile.Manufacturer
    Wscript.Echo "Name: " &amp;amp; objFile.Name
    Wscript.Echo "Path: " &amp;amp; objFile.Path
    Wscript.Echo "Readable: " &amp;amp; objFile.Readable
    Wscript.Echo "System: " &amp;amp; objFile.System
    Wscript.Echo "Version: " &amp;amp; objFile.Version
    Wscript.Echo "Writeable: " &amp;amp; objFile.Writeable
Next
</vb><vb name="List File Version Information" n="1553">' List File Version Information


Set objFSO = CreateObject("Scripting.FileSystemObject")
Wscript.Echo objFSO.GetFileVersion("c:\windows\system32\scrrun.dll")
</vb><vb name="List Files Using an Asynchronous Query" n="1554">' List Files Using an Asynchronous Query


Const POPUP_DURATION = 120
Const OK_BUTTON = 0

Set objWSHShell = Wscript.CreateObject("Wscript.Shell")

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")
Set objSink = WScript.CreateObject("WbemScripting.SWbemSink","SINK_")
objWMIService.ExecQueryAsync objSink, "Select * from CIM_DataFile"
objPopup = objWshShell.Popup("Starting file retrieval", _
    POPUP_DURATION, "File Retrieval", OK_BUTTON)

Sub SINK_OnObjectReady(objEvent, objAsyncContext)
    Wscript.Echo objEvent.Name
End Sub
</vb><vb name="List Summary Information for a Set of Files" n="1555">' List Summary Information for a Set of Files


Const FILE_NAME = 0

Set objShell = CreateObject ("Shell.Application")
Set objFolder = objShell.Namespace ("C:\Scripts")

For Each strFileName in objFolder.Items
    Wscript.Echo "File name: " &amp;amp; objFolder.GetDetailsOf _
        (strFileName, FILE_NAME) 
Next
</vb><vb name="Modify a Custom Document Property" n="1556">' Modify a Custom Document Property


Set objPropertyReader = CreateObject("DSOleFile.PropertyReader")
Set objDocument = objPropertyReader.GetDocumentProperties _
    ("C:\Scripts\Test.doc")

Set colCustomProperties = objDocument.CustomProperties
For Each strProperty in colCustomProperties
    If strProperty.Name = "TestProperty" Then
        strProperty.Value = "New value"
    End If
Next
</vb><vb name="Modify Document Property Information" n="1557">' Modify Document Property Information


Set objPropertyReader = CreateObject("DSOleFile.PropertyReader")
Set objDocument = objPropertyReader.GetDocumentProperties _
    ("C:\Scripts\Test.doc")

objDocument.Category = "Scripting Documents"
</vb><vb name="Modify File Attributes" n="1558">' Modify File Attributes


Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFile = objFSO.GetFile("C:\FSO\TestScript.vbs")

If objFile.Attributes = objFile.Attributes AND 1 Then
    objFile.Attributes = objFile.Attributes XOR 1 
End If
</vb><vb name="Modify File Extensions" n="1559">' Modify File Extensions


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set FileList = objWMIService.ExecQuery _
    ("ASSOCIATORS OF {Win32_Directory.Name='c:\Scripts'} Where " _
        &amp;amp; "ResultClass = CIM_DataFile")

For Each objFile In FileList
    If objFile.Extension = "log" Then
        strNewName = objFile.Drive &amp;amp; objFile.Path &amp;amp; _
            objFile.FileName &amp;amp; "." &amp;amp; "txt"
        errResult = objFile.Rename(strNewName)
    End If
Next
</vb><vb name="Monitor File Creation" n="1560">' Monitor File Creation


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; _
        strComputer &amp;amp; "\root\cimv2")

Set colMonitoredEvents = objWMIService.ExecNotificationQuery _
    ("SELECT * FROM __InstanceCreationEvent WITHIN 10 WHERE " _
        &amp;amp; "Targetinstance ISA 'CIM_DirectoryContainsFile' and " _
            &amp;amp; "TargetInstance.GroupComponent= " _
                &amp;amp; "'Win32_Directory.Name=""c:\\\\scripts""'")

Do
    Set objLatestEvent = colMonitoredEvents.NextEvent
    Wscript.Echo objLatestEvent.TargetInstance.PartComponent
Loop
</vb><vb name="Monitor File Deletion" n="1561">' Monitor File Deletion


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; _
        strComputer &amp;amp; "\root\cimv2")

Set colMonitoredEvents = objWMIService.ExecNotificationQuery _
    ("SELECT * FROM __InstanceDeletionEvent WITHIN 10 WHERE " _
        &amp;amp; "Targetinstance ISA 'CIM_DirectoryContainsFile' and " _
            &amp;amp; "TargetInstance.GroupComponent= " _
                &amp;amp; "'Win32_Directory.Name=""c:\\\\scripts""'")

Do
    Set objLatestEvent = colMonitoredEvents.NextEvent
    Wscript.Echo objLatestEvent.TargetInstance.PartComponent
Loop
</vb><vb name="Monitor File Modification" n="1562">' Monitor File Modification


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; _
        strComputer &amp;amp; "\root\cimv2")

Set colMonitoredEvents = objWMIService.ExecNotificationQuery _
    ("SELECT * FROM __InstanceModificationEvent WITHIN 10 WHERE " _
        &amp;amp; "TargetInstance ISA 'CIM_DataFile' and " _
            &amp;amp; "TargetInstance.Name='c:\\scripts\\index.vbs'")

Do
    Set objLatestEvent = colMonitoredEvents.NextEvent
    Wscript.Echo "File: " &amp;amp; objLatestEvent.TargetInstance.Name
    Wscript.Echo "New size: " &amp;amp; objLatestEvent.TargetInstance.FileSize
    Wscript.Echo "Old size: " &amp;amp; objLatestEvent.PreviousInstance.FileSize
Loop
</vb><vb name="Move a File" n="1563">' Move a File


Set objFSO = CreateObject("Scripting.FileSystemObject")
objFSO.MoveFile "C:\FSO\ScriptLog.log" , "D:\Archive"
</vb><vb name="Move a Set of Files" n="1564">' Move a Set of Files


Set objFSO = CreateObject("Scripting.FileSystemObject")
objFSO.MoveFile "C:\FSO\*.txt" , "D:\Archive\"
</vb><vb name="Move Files" n="1565">' Move Files


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFiles = objWMIService. _
    ExecQuery("Select * from CIM_DataFile where Extension = 'wma'")

For Each objFile in colFiles
    strCopy = "C:\Media Archive\" &amp;amp; objFile.FileName _
        &amp;amp; "." &amp;amp; objFile.Extension
    objFile.Copy(strCopy)
    objFile.Delete
Next
</vb><vb name="Parse a Path Name" n="1566">' Parse a Path Name


Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFile = objFSO.GetFile("ScriptLog.txt")

Wscript.Echo "Absolute path: " &amp;amp; objFSO.GetAbsolutePathName(objFile)
Wscript.Echo "Parent folder: " &amp;amp; objFSO.GetParentFolderName(objFile) 
Wscript.Echo "File name: " &amp;amp; objFSO.GetFileName(objFile)
Wscript.Echo "Base name: " &amp;amp; objFSO.GetBaseName(objFile)
Wscript.Echo "Extension name: " &amp;amp; objFSO.GetExtensionName(objFile)
</vb><vb name="Perform Actions on Files" n="1567">' Perform Actions on Files


TargetFolder = "C:\Logs" 
Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace(TargetFolder) 
Set colItems = objFolder.Items

For i = 0 to colItems.Count - 1
    colItems.Item(i).InvokeVerbEx("Print")
Next
</vb><vb name="Rename a File" n="1568">' Rename a File


Set objFSO = CreateObject("Scripting.FileSystemObject")
objFSO.MoveFile "C:\FSO\ScriptLog.txt" , "C:\FSO\BackupLog.txt"
</vb><vb name="Rename Files" n="1569">' Rename Files


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFiles = objWMIService.ExecQuery _
    ("Select * from Cim_Datafile where Name = " _
        &amp;amp; "'c:\\scripts\\toggle_service.vbs'")

For Each objFile in colFiles
    errResult = objFile.Rename("c:\scripts\toggle_service.old")
    Wscript.Echo errResult
Next
</vb><vb name="Retrieving Document Property Information" n="1570">' Retrieving Document Property Information


Set objPropertyReader = CreateObject("DSOleFile.PropertyReader")
Set objDocument = objPropertyReader.GetDocumentProperties _
    ("C:\Scripts\Test.doc")

Wscript.Echo "Application name: " &amp;amp; objDocument.AppName
Wscript.Echo "Author: " &amp;amp; objDocument.Author
Wscript.Echo "Byte count: " &amp;amp; objDocument.ByteCount
Wscript.Echo "Category: " &amp;amp; objDocument.Category
Wscript.Echo "Character count: " &amp;amp; objDocument.CharacterCount
Wscript.Echo "Character count with spaces: " &amp;amp; _
    objDocument.CharacterCountWithSpaces
Wscript.Echo "CLSID: " &amp;amp; objDocument.CLSID
Wscript.Echo "Comments: " &amp;amp; objDocument.Comments
Wscript.Echo "Company: " &amp;amp; objDocument.Company
Set colCustomProperties = objDocument.CustomProperties
For Each strProperty in colCustomProperties
    Wscript.Echo vbTab &amp;amp; strProperty.Name &amp;amp; ": " &amp;amp; strProperty.Value
Next
Wscript.Echo "Date created: " &amp;amp; objDocument.DateCreated
Wscript.Echo "Date last printed: " &amp;amp; objDocument.DateLastPrinted
Wscript.Echo "Date last saved: " &amp;amp; objDocument.DateLastSaved
Wscript.Echo "Has macros: " &amp;amp; objDocument.HasMacros
Wscript.Echo "Hidden slides: " &amp;amp; objDocument.HiddenSlides
Wscript.Echo "Icon: " &amp;amp; objDocument.Icon
Wscript.Echo "Is read only: " &amp;amp; objDocument.IsReadOnly
Wscript.Echo "Keywords" &amp;amp; objDocument.Keywords
Wscript.Echo "Last edited by: " &amp;amp; objDocument.LastEditedBy
Wscript.Echo "Line count: " &amp;amp; objDocument.LineCount
Wscript.Echo "Location: " &amp;amp; objDocument.Location
Wscript.Echo "Manager: " &amp;amp; objDocument.Manager
Wscript.Echo "Multimedia clips: " &amp;amp; objDocument.MultimediaClips
Wscript.Echo "Name: " &amp;amp; objDocument.Name
Wscript.Echo "Page count: " &amp;amp; objDocument.PageCount
Wscript.Echo "Paragraph count: " &amp;amp; objDocument.ParagraphCount
Wscript.Echo "Presentation format: " &amp;amp; objDocument.PresentationFormat
Wscript.Echo "Presentation notes: " &amp;amp; objDocument.PresentationNotes
Wscript.Echo "ProgID: " &amp;amp; objDocument.ProgID
Wscript.Echo "Revision number: " &amp;amp; objDocument.RevisionNumber
Wscript.Echo "Slide count: " &amp;amp; objDocument.SlideCount
Wscript.Echo "Subject: " &amp;amp; objDocument.Subject
Wscript.Echo "Template: " &amp;amp; objDocument.Template
Wscript.Echo "Thumbnail: " &amp;amp; objDocument.Thumbnail
Wscript.Echo "Title: " &amp;amp; objDocument.Title
Wscript.Echo "Version: " &amp;amp; objDocument.Version
Wscript.Echo "Word count: " &amp;amp; objDocument.WordCount
</vb><vb name="Retrieving Extended File Properties" n="1571">' Retrieving Extended File Properties


Dim arrHeaders(34)

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.Namespace("C:\Scripts")

For i = 0 to 33
    arrHeaders(i) = objFolder.GetDetailsOf(objFolder.Items, i)
Next

For Each strFileName in objFolder.Items
    For i = 0 to 33
        Wscript.Echo i &amp;amp; vbtab &amp;amp; arrHeaders(i) _
            &amp;amp; ": " &amp;amp; objFolder.GetDetailsOf(strFileName, i) 
    Next
Next
</vb><vb name="Search for Files Using a Wildcard Query" n="1572">' Search for Files Using a Wildcard Query



strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFiles = objWMIService.ExecQuery _
    ("Select * from CIM_DataFile where FileName Like '%~%'")

For Each objFile in colFiles
    Wscript.Echo objFile.Name
Next
</vb><vb name="Verify that a File Exists" n="1573">' Verify that a File Exists


Set objFSO = CreateObject("Scripting.FileSystemObject")

If objFSO.FileExists("C:\FSO\ScriptLog.txt") Then
    Set objFolder = objFSO.GetFile("C:\FSO\ScriptLog.txt")
Else
    Wscript.Echo "File does not exist."
End If
</vb></dd>
		<dd name="Folders" code="folders" desc=" -"><vb name="Bind to a Folder Using the Browse for Folder Dialog Box" n="1574">' Bind to a Folder Using the Browse for Folder Dialog Box


Const WINDOW_HANDLE = 0
Const NO_OPTIONS = 0

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.BrowseForFolder _
    (WINDOW_HANDLE, "Select a folder:", NO_OPTIONS, "C:\Scripts")       
Set objFolderItem = objFolder.Self

objPath = objFolderItem.Path
objPath = Replace(objPath, "\", "\\")

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFiles = objWMIService.ExecQuery _
    ("Select * from Win32_Directory where name = '" &amp;amp; objPath &amp;amp; "'")

For Each objFile in colFiles
    Wscript.Echo "Readable: " &amp;amp; objFile.Readable
Next
</vb><vb name="Compress a Folder" n="1575">' Compress a Folder


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFolders = objWMIService.ExecQuery _
    ("Select * from Win32_Directory where name = 'c:\\Scripts'")

For Each objFolder in colFolders
    errResults = objFolder.Compress
Next
</vb><vb name="Copy a Folder" n="1576">' Copy a Folder


Const OverWriteFiles = TRUE

Set objFSO = CreateObject("Scripting.FileSystemObject")
objFSO.CopyFolder "C:\Scripts" , "C:\FSO" , OverWriteFiles
</vb><vb name="Copy a Folder Using the Shell Object" n="1577">' Copy a Folder Using the Shell Object


Const FOF_CREATEPROGRESSDLG = &amp;amp;H0&amp;amp;

ParentFolder = "D:\Archive" 
Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.NameSpace(ParentFolder) 
objFolder.CopyHere "C:\Scripts", FOF_CREATEPROGRESSDLG
</vb><vb name="Copy a Folder Using WMI" n="1578">' Copy a Folder Using WMI


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFolders = objWMIService.ExecQuery( _
    "Select * from Win32_Directory where Name = 'c:\\Scripts'")

For Each objFolder in colFolders
    errResults  = objFolder.Copy("D:\Archive")
Next
</vb><vb name="Create a  Folder Using the Shell Object" n="1579">' Create a  Folder Using the Shell Object


ParentFolder = "C:\" 

set objShell = CreateObject("Shell.Application")
set objFolder = objShell.NameSpace(ParentFolder) 
objFolder.NewFolder "Archive"
</vb><vb name="Create a Folder" n="1580">' Create a Folder


Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFolder = objFSO.CreateFolder("C:\FSO")
</vb><vb name="Delete a Folder" n="1581">' Delete a Folder


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFolders = objWMIService.ExecQuery _
    ("Select * from Win32_Directory where Name = 'c:\\Scripts'")

For Each objFolder in colFolders
    errResults = objFolder.Delete
Next
</vb><vb name="Delete a Folder on the Local Computer" n="1582">' Delete a Folder on the Local Computer


Set objFSO = CreateObject("Scripting.FileSystemObject")
objFSO.DeleteFolder("C:\FSO")
</vb><vb name="Enumerate Subfolders Using Recursion" n="1583">' Enumerate Subfolders Using Recursion


Set FSO = CreateObject("Scripting.FileSystemObject")
ShowSubfolders FSO.GetFolder("C:\Scripts")

Sub ShowSubFolders(Folder)
    For Each Subfolder in Folder.SubFolders
        Wscript.Echo Subfolder.Path
        ShowSubFolders Subfolder
    Next
End Sub
</vb><vb name="List a Specific Set of Folders" n="1584">' List a Specific Set of Folders


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFiles = objWMIService.ExecQuery _
    ("Select * from Win32_Directory Where Hidden = True")

For Each objFile in colFiles
    Wscript.Echo objFile.Name
Next
</vb><vb name="List All the Folders on a Computer" n="1585">' List All the Folders on a Computer


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFolders = objWMIService.ExecQuery("Select * from Win32_Directory")

For Each objFolder in colFolders
    Wscript.Echo objFolder.Name
Next
</vb><vb name="List Folder Attributes" n="1586">' List Folder Attributes


Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFolder = objFSO.GetFolder("C:\FSO")

If objFolder.Attributes AND 2 Then
    Wscript.Echo "Hidden folder."
End If    
If objFolder.Attributes AND 4 Then
    Wscript.Echo "System folder."
End If    
If objFolder.Attributes AND 16 Then
    Wscript.Echo "Folder."
End If  
If objFolder.Attributes AND 32 Then
    Wscript.Echo "Archive bit set."
End If
If objFolder.Attributes AND 2048 Then
    Wscript.Echo "Compressed folder."
End If
</vb><vb name="List Folder Properties" n="1587">' List Folder Properties


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFolders = objWMIService. _
    ExecQuery("Select * from Win32_Directory where name = 'c:\\Scripts'")

For Each objFolder in colFolders
    Wscript.Echo "Archive: " &amp;amp; objFolder.Archive
    Wscript.Echo "Caption: " &amp;amp; objFolder.Caption
    Wscript.Echo "Compressed: " &amp;amp; objFolder.Compressed
    Wscript.Echo "Compression method: " &amp;amp; objFolder.CompressionMethod
    Wscript.Echo "Creation date: " &amp;amp; objFolder.CreationDate
    Wscript.Echo "Encrypted: " &amp;amp; objFolder.Encrypted
    Wscript.Echo "Encryption method: " &amp;amp; objFolder.EncryptionMethod
    Wscript.Echo "Hidden: " &amp;amp; objFolder.Hidden
    Wscript.Echo "In use count: " &amp;amp; objFolder.InUseCount
    Wscript.Echo "Last accessed: " &amp;amp; objFolder.LastAccessed
    Wscript.Echo "Last modified: " &amp;amp; objFolder.LastModified
    Wscript.Echo "Name: " &amp;amp; objFolder.Name
    Wscript.Echo "Path: " &amp;amp; objFolder.Path
    Wscript.Echo "Readable: " &amp;amp; objFolder.Readable
    Wscript.Echo "System: " &amp;amp; objFolder.System
    Wscript.Echo "Writeable: " &amp;amp; objFolder.Writeable
Next
</vb><vb name="List Folder Properties" n="1588">' List Folder Properties


Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFolder = objFSO.GetFolder("C:\Scripts")

Wscript.Echo "Date created: " &amp;amp; objFolder.DateCreated
Wscript.Echo "Date last accessed: " &amp;amp; objFolder.DateLastAccessed
Wscript.Echo "Date last modified: " &amp;amp; objFolder.DateLastModified
Wscript.Echo "Drive: " &amp;amp; objFolder.Drive
Wscript.Echo "Is root folder: " &amp;amp; objFolder.IsRootFolder
Wscript.Echo "Name: " &amp;amp; objFolder.Name
Wscript.Echo "Parent folder: " &amp;amp; objFolder.ParentFolder
Wscript.Echo "Path: " &amp;amp; objFolder.Path
Wscript.Echo "Short name: " &amp;amp; objFolder.ShortName
Wscript.Echo "Short path: " &amp;amp; objFolder.ShortPath
Wscript.Echo "Size: " &amp;amp; objFolder.Size
Wscript.Echo "Type: " &amp;amp; objFolder.Type
</vb><vb name="List Folders Based on Creation Date" n="1589">' List Folders Based on Creation Date


Const LOCAL_TIME = TRUE

Set dtmTargetDate = CreateObject("WbemScripting.SWbemDateTime")
Set dtmConvertedDate = CreateObject("WbemScripting.SWbemDateTime")
dtmTargetDate.SetVarDate "3/1/2004", LOCAL_TIME

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFolders = objWMIService.ExecQuery _
    ("Select * from Win32_Directory Where " _
        &amp;amp; "CreationDate &amp;gt; '" &amp;amp; dtmTargetDate &amp;amp; "'")

For each objFolder in colFolders
    dtmConvertedDate.Value = objFolder.CreationDate 
    Wscript.Echo objFolder.Name &amp;amp; VbTab &amp;amp; _
        dtmConvertedDate.GetVarDate(LOCAL_TIME)
Next
</vb><vb name="List Shell Object Verbs" n="1590">' List Shell Object Verbs


Const RECYCLE_BIN = &amp;amp;Ha&amp;amp;

Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.NameSpace(RECYCLE_BIN) 
Set objFolderItem = objFolder.Self      
Set colVerbs = objFolderItem.Verbs

For i = 0 to colVerbs.Count - 1
    Wscript.Echo colVerbs.Item(i)
Next
</vb><vb name="List the Subfolders of a Folder" n="1591">' List the Subfolders of a Folder


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colSubfolders = objWMIService.ExecQuery _
    ("Associators of {Win32_Directory.Name='c:\scripts'} " _
        &amp;amp; "Where AssocClass = Win32_Subdirectory " _
            &amp;amp; "ResultRole = PartComponent")

For Each objFolder in colSubfolders
    Wscript.Echo objFolder.Name
Next
</vb><vb name="List the Subfolders of a Folder on the Local Computer" n="1592">' List the Subfolders of a Folder on the Local Computer


Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFolder = objFSO.GetFolder("C:\FSO")
Set colSubfolders = objFolder.Subfolders

For Each objSubfolder in colSubfolders
    Wscript.Echo objSubfolder.Name, objSubfolder.Size
Next
</vb><vb name="Modify Folder Attributes" n="1593">' Modify Folder Attributes


Set objFSO = CreateObject("Scripting.FileSystemObject")
Set objFolder = objFSO.GetFolder("C:\FSO")

If objFolder.Attributes = objFolder.Attributes AND 2 Then
    objFolder.Attributes = objFolder.Attributes XOR 2 
End If
</vb><vb name="Move a Folder" n="1594">' Move a Folder


Set objFSO = CreateObject("Scripting.FileSystemObject")
objFSO.MoveFolder "C:\Scripts" , "M:\helpdesk\management"
</vb><vb name="Move a Folder Using the Shell Object" n="1595">' Move a Folder Using the Shell Object


Const FOF_CREATEPROGRESSDLG = &amp;amp;H0&amp;amp;

TargetFolder = "D:\Archive" 
Set objShell = CreateObject("Shell.Application")
Set objFolder = objShell.NameSpace(TargetFolder) 
objFolder.MoveHere "C:\Scripts", FOF_CREATEPROGRESSDLG
</vb><vb name="Move a Folder Using WMI" n="1596">' Move a Folder Using WMI


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFolders = objWMIService.ExecQuery _
    ("Select * from Win32_Directory where name = 'c:\\Scripts'")

For Each objFolder in colFolders
    errResults = objFolder.Rename("C:\Admins\Documents\Archive\VBScript")
Next
</vb><vb name="Rename a Folder" n="1597">' Rename a Folder


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFolders = objWMIService.ExecQuery _
    ("Select * from Win32_Directory where name = 'c:\\Scripts'")

For Each objFolder in colFolders
    errResults = objFolder.Rename("C:\Script Repository")
Next
</vb><vb name="Rename a Folder on the Local Computer" n="1598">' Rename a Folder on the Local Computer


Set objFSO = CreateObject("Scripting.FileSystemObject")
objFSO.MoveFolder "C:\FSO\Samples" , "C:\FSO\Scripts"
</vb><vb name="Search for Folders by Date" n="1599">' Search for Folders by Date


On Error Resume Next

dtmTargetDate = "20020301000000.000000-420"

strComputer = "." 
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFolders = objWMIService.ExecQuery _
    ("Select * from Win32_Directory Where CreationDate &amp;gt; '" &amp;amp; _
        dtmtargetDate &amp;amp; "'")
 
For Each objFolder in colFolders
    Wscript.Echo objFolder.Name 
Next
</vb><vb name="Search for Folders Using Wildcards" n="1600">' Search for Folders Using Wildcards


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFolders = objWMIService.ExecQuery _
    ("Select * from Win32_Directory where Name Like '%c:\\S%'")

For Each objFolder in colFolders
    Wscript.Echo "Name: " &amp;amp; objFolder.Name
Next
</vb><vb name="Uncompress a Folder" n="1601">' Uncompress a Folder


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colFolders = objWMIService.ExecQuery _
    ("Select * from Win32_Directory where name = 'c:\\Scripts'")

For Each objFolder in colFolders
    errResults = objFolder.Uncompress
Next
</vb><vb name="Verify that a Folder Exists" n="1602">' Verify that a Folder Exists


Set objFSO = CreateObject("Scripting.FileSystemObject")

If objFSO.FolderExists("C:\FSO") Then
    Set objFolder = objFSO.GetFolder("C:\FSO")
Else
    Wscript.Echo "Folder does not exist."
End If
</vb></dd>
		<dd name="Shared Folders" code="shares" desc="-"><vb name="Create a Network Share" n="1603">' Create a Network Share


Const FILE_SHARE = 0
Const MAXIMUM_CONNECTIONS = 25

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set objNewShare = objWMIService.Get("Win32_Share")

errReturn = objNewShare.Create _
    ("C:\Finance", "FinanceShare", FILE_SHARE, _
        MAXIMUM_CONNECTIONS, "Public share for the Finance group.")
</vb><vb name="Delete a Network Share" n="1604">' Delete a Network Share


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colShares = objWMIService.ExecQuery _
    ("Select * from Win32_Share Where Name = 'FinanceShare'")

For Each objShare in colShares
    objShare.Delete
Next
</vb><vb name="Delete a Published Folder" n="1605">' Delete a Published Folder


Set objContainer = GetObject("LDAP://CN=FinanceShare, " _
    &amp;amp; "OU=Finance, DC=fabrikam, DC=com")

objContainer.DeleteObject (0)
</vb><vb name="List Network Shares" n="1606">' List Network Shares


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colShares = objWMIService.ExecQuery("Select * from Win32_Share")

For each objShare in colShares
    Wscript.Echo "Allow Maximum: " &amp;amp; objShare.AllowMaximum   
    Wscript.Echo "Caption: " &amp;amp; objShare.Caption   
    Wscript.Echo "Maximum Allowed: " &amp;amp; objShare.MaximumAllowed
    Wscript.Echo "Name: " &amp;amp; objShare.Name   
    Wscript.Echo "Path: " &amp;amp; objShare.Path   
    Wscript.Echo "Type: " &amp;amp; objShare.Type   
Next
</vb><vb name="List Shared Folders Published in Active Directory" n="1607">' List Shared Folders Published in Active Directory


Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"

Set objCommand.ActiveConnection = objConnection
objCommand.CommandText = "Select Name, unCName, ManagedBy from " _
    &amp;amp; "'LDAP://DC=Fabrikam,DC=com' where objectClass='volume'"
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo "Share Name: " &amp;amp; objRecordSet.Fields("Name").Value
    Wscript.Echo "UNC Name: " &amp;amp; objRecordSet.Fields("uNCName").Value
    Wscript.Echo "Managed By: " &amp;amp; objRecordSet.Fields("ManagedBy").Value
    objRecordSet.MoveNext
Loop
</vb><vb name="Map a Network Share to a Local Folder" n="1608">' Map a Network Share to a Local Folder


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colShares = objWMIService.ExecQuery _
    ("Associators of {Win32_Share.Name='Scripts'} Where " _
        &amp;amp; "AssocClass=Win32_ShareToDirectory")

For Each objFolder in colShares
    Wscript.Echo objFolder.Name
Next
</vb><vb name="Map All Network Shares to Local Folders" n="1609">' Map All Network Shares to Local Folders


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colShares = objWMIService.ExecQuery("Select * From Win32_Share")

For Each objShare in colShares
    Set colAssociations = objWMIService.ExecQuery _
        ("Associators of {Win32_Share.Name='" &amp;amp; objShare.Name &amp;amp; "'} " _
            &amp;amp; " Where AssocClass=Win32_ShareToDirectory")
    For Each objFolder in colAssociations
        Wscript.Echo objShare.Name &amp;amp; vbTab &amp;amp; objFolder.Name
    Next
Next
</vb><vb name="Modify a Network Share" n="1610">' Modify a Network Share


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colShares = objWMIService.ExecQuery _
    ("Select * from Win32_Share Where Name = 'FinanceShare'")

For Each objShare in colShares
    errReturn = objShare.SetShareInfo(50, _
        "Public share for HR administrators and the Finance Group.")
Next
</vb><vb name="Publish a Shared Folder in Active Directory" n="1611">' Publish a Shared Folder in Active Directory


Set objComputer = GetObject _
    ("LDAP://OU=Finance, DC=fabrikam, DC=com")

Set objShare = objComputer.Create("volume", "CN=FinanceShare")

objShare.Put "uNCName", "\\atl-dc-02\FinanceShare"
objShare.Put "Description", "Public share for users in the Finance group."
objShare.Put "Keywords", Array("finance", "fiscal", "monetary") 
objShare.SetInfo
</vb><vb name="Search for Specific Published Folders in Active Directory" n="1612">' Search for Specific Published Folders in Active Directory



On Error Resume Next

Const ADS_SCOPE_SUBTREE = 2

Set objConnection = CreateObject("ADODB.Connection")
Set objCommand =   CreateObject("ADODB.Command")
objConnection.Provider = "ADsDSOObject"
objConnection.Open "Active Directory Provider"

Set objCOmmand.ActiveConnection = objConnection
objCommand.CommandText = "Select Name, unCName, ManagedBy from "
    &amp;amp; "'LDAP://DC=Reskit,DC=com'" _
        &amp;amp; " where objectClass='volume' and Keywords = 'finance*'"
objCommand.Properties("Searchscope") = ADS_SCOPE_SUBTREE 
Set objRecordSet = objCommand.Execute
objRecordSet.MoveFirst

Do Until objRecordSet.EOF
    Wscript.Echo "Share Name: " &amp;amp; objRecordSet.Fields("Name").Value
    Wscript.Echo "UNC Name: " &amp;amp; objRecordSet.Fields("uNCName").Value
    Wscript.Echo "Managed By: " &amp;amp; objRecordSet.Fields("ManagedBy").Value
    objRecordSet.MoveNext
Loop
</vb></dd>
	</dd>
	<dd name="Terminal Server" code="ts" desc="Sample scripts for managing Windows Terminal Server.">
		<dd name="Configuring Terminal Server Properties" code="modify" desc="Sample scripts for configuring Terminal Server settings."><vb name="Add a Terminal Services Direct Connect License Server" n="1613">' Add a Terminal Services Direct Connect License Server


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TerminalServiceSetting")

For Each objItem in colItems
    errResult = objItem.AddDirectConnectLicenseServer("atl-ts-01")
Next
</vb><vb name="Assign a Terminal Services Initial Program" n="1614">' Assign a Terminal Services Initial Program


Const STARTUP_PROGRAM = "c:\accounting\invoice.exe"
Const STARTUP_FOLDER = "c:\accounting\fy_2003"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSEnvironmentSetting")

For Each objItem in colItems
    errResult = objItem.InitialProgram(STARTUP_PROGRAM, STARTUP_FOLDER)
Next
</vb><vb name="Delete a Terminal Service Direct Connect License Server" n="1615">' Delete a Terminal Service Direct Connect License Server


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TerminalServiceSetting")

For Each objItem in colItems
    errResult = objItem.DeleteDirectConnectLicenseServer("atl-ts-01")
Next
</vb><vb name="Enable Forcible Terminal Services Logoff" n="1616">' Enable Forcible Terminal Services Logoff


Const ENABLE_LOGOFF = 0
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TerminalServiceSetting")

For Each objItem in colItems
    errResult = objItem.SetDisableForcibleLogoff(ENABLE_LOGOFF)
Next
</vb><vb name="Enable Single Session Terminal Service Sessions" n="1617">' Enable Single Session Terminal Service Sessions


Const ENABLE = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TerminalServiceSetting")

For Each objItem in colItems
    errResult = objItem.SetSingleSession(ENABLE)
Next
</vb><vb name="Enable Terminal Service Connections" n="1618">' Enable Terminal Service Connections


Const ENABLE_CONNECTIONS = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TerminalServiceSetting")

For Each objItem in colItems
    errResult = objItem.SetAllowTSConnections(ENABLE_CONNECTIONS)
Next
</vb><vb name="Enable Terminal Services" n="1619">' Enable Terminal Services


Const ENABLE = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_Terminal Where TerminalName = 'Accounting'")

For Each objItem in colItems
    errResult = objItem.Enable(ENABLE)
Next
</vb><vb name="Enable Terminal Services Active Desktop" n="1620">' Enable Terminal Services Active Desktop


Const ENABLED = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TerminalServiceSetting")

For Each objItem in colItems
    objItem.ActiveDesktop = ENABLED
    objItem.Put_
Next
</vb><vb name="Enable Terminal Services Password Prompt" n="1621">' Enable Terminal Services Password Prompt


Const ENABLE = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSLogonSetting")

For Each objItem in colItems
    errResult = objItem.SetPromptForPassword(ENABLE)
Next
</vb><vb name="Enable Terminal Services Session Directory" n="1622">' Enable Terminal Services Session Directory


Const ENABLE_SESSION_DIRECTORY = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSSessionDirectory")

For Each objItem in colItems
    errResult = objItem.SetSessionDirectoryActive(ENABLE_SESSION_DIRECTORY)
Next
</vb><vb name="Expose the Terminal Services Session Directory Server IP Address" n="1623">' Expose the Terminal Services Session Directory Server IP Address


Const ENABLE = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSSessionDirectory")

For Each objItem in colItems
    errResult = objItem.SetSessionDirectoryExposeServerIP(ENABLE)
Next
</vb><vb name="Modify Terminal Service Audit Permissions" n="1624">' Modify Terminal Service Audit Permissions


Const WINSTATION_QUERY = 0
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSAccount Where AccountName = 'fabrikam\\bob' AND " _
        &amp;amp; "TerminalName = 'Accounting'")

For Each objItem in colItems
    errResult = objItem.ModifyAuditPermissions(WINSTATION_QUERY, False)
 ext
</vb><vb name="Modify Terminal Service Permissions" n="1625">' Modify Terminal Service Permissions


CONST WINSTATION_CONNECT = 8 
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSAccount Where AccountName = 'fabrikam\\bob' " &amp;amp; _
        "AND TerminalName = 'Accounting'")

For Each objItem in colItems
    errResult = objItem.ModifyPermissions(WINSTATION_CONNECT,True)
Next
</vb><vb name="Modify Terminal Service Remote Control Settings" n="1626">' Modify Terminal Service Remote Control Settings


Const ENABLE_NO_INPUT_NO_NOTIFY = 4
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
  ("Select * from Win32_TSRemoteControlSetting Where " &amp;amp; _
        "TerminalName = 'Accounting'")

For Each objItem in colItems
  errResult = objItem.RemoteControl(ENABLE_NO_INPUT_NO_NOTIFY)
Next
</vb><vb name="Modify Terminal Services Broken Connection Policy" n="1627">' Modify Terminal Services Broken Connection Policy


Const PER_USER = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSSessionSetting")

For Each objItem in colItems
    objItem.BrokenConnectionPolicy = PER_USER
    objItem.Put_
Next
</vb><vb name="Modify Terminal Services Broken Connection Settings" n="1628">' Modify Terminal Services Broken Connection Settings


Const DISCONNECT_USER = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSSessionSetting")

For Each objItem in colItems
    errResult = objItem.BrokenConnection(DISCONNECT_USER)
Next
</vb><vb name="Modify Terminal Services Client Connection Settings" n="1629">' Modify Terminal Services Client Connection Settings


Const CONNECT_CLIENT_DRIVES = 1
Const CONNECT_PRINTER = 1
Const USE_CLIENT_PRINTER = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSClientSetting")

For Each objItem in colItems
    errResult = objItem.ConnectionSettings _
        (CONNECT_CLIENT_DRIVES, CONNECT_PRINTER, USE_CLIENT_PRINTER)
Next
</vb><vb name="Modify Terminal Services Client Logon Settings" n="1630">' Modify Terminal Services Client Logon Settings


Const PER_USER = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSLogonSetting")

For Each objItem in colItems
    objItem.ClientLogonInfoPolicy = PER_USER
    objItem.Put_
Next
</vb><vb name="Modify Terminal Services Client Settings" n="1631">' Modify Terminal Services Client Settings


Const DISABLE = 0
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSClientSetting")

For Each objItem in colItems
    errResult = objItem.SetClientProperty("AudioMapping", DISABLE)
Next
</vb><vb name="Modify Terminal Services Client Wallpaper Settings" n="1632">' Modify Terminal Services Client Wallpaper Settings


Const NO_WALLPAPER = 0
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSEnvironmentSetting")

For Each objItem in colItems
    errResult = objItem.SetClientWallpaper(NO_WALLPAPER)
Next
</vb><vb name="Modify Terminal Services Color Depth" n="1633">' Modify Terminal Services Color Depth


Const SIXTEEN_BIT_COLOR = 3
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSClientSetting")

For Each objItem in colItems
    errResult = objItem.SetColorDepth(SIXTEEN_BIT_COLOR)
Next
</vb><vb name="Modify Terminal Services Color Depth Policy" n="1634">' Modify Terminal Services Color Depth Policy


Const ENABLE = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSClientSetting")

For Each objItem in colItems
    errResult = objItem.SetColorDepthPolicy(ENABLE)
Next
</vb><vb name="Modify Terminal Services Connection Policy" n="1635">' Modify Terminal Services Connection Policy


Const PER_USER = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSClientSetting")

For Each objItem in colItems
    objItem.ConnectionPolicy = PER_USER
    objItem.Put_
Next
</vb><vb name="Modify Terminal Services Encryption Level" n="1636">' Modify Terminal Services Encryption Level


Const HIGH_ENCRYPTION = 3
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSGeneralSetting")

For Each objItem in colItems
    errResult = objItem.SetEncryptionLevel(HIGH_ENCRYPTION)
Next
</vb><vb name="Modify Terminal Services Home Directory" n="1637">' Modify Terminal Services Home Directory


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TerminalServiceSetting")

For Each objItem in colItems
    errResult = objItem.SetHomeDirectory("c:\tsusers")
Next
</vb><vb name="Modify Terminal Services Initial Program Policy" n="1638">' Modify Terminal Services Initial Program Policy


CONST PER_USER = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSEnvironmentSetting")

For Each objItem in colItems
    objItem.InitialProgramPolicy = PER_USER
    objItem.Put_
Next
</vb><vb name="Modify Terminal Services Logon Policy" n="1639">' Modify Terminal Services Logon Policy


Const NEW_SESSIONS_ALLOWED = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TerminalServiceSetting")

For Each objItem in colItems
    objItem.Logons = NEW_SESSIONS_ALLOWED
    objItem.Put_
Next
</vb><vb name="Modify Terminal Services Maximum Connections" n="1640">' Modify Terminal Services Maximum Connections


Const MAXIMUM_CONNECTIONS = 100
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSNetworkAdapterSetting")

For Each objItem in colItems
    objItem.MaximumConnections = MAXIMUM_CONNECTIONS
    objItem.Put_
Next
</vb><vb name="Modify Terminal Services Mode" n="1641">' Modify Terminal Services Mode


Const PER_SESSION = 4

strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TerminalServiceSetting")

For Each objItem in colItems
    errResult = objItem.ChangeMode(PER_SESSION)
Next
</vb><vb name="Modify Terminal Services Policy Property" n="1642">' Modify Terminal Services Policy Property


Const DISABLE_POLICY = 0
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TerminalServiceSetting")

For Each objItem in colItems
    errResult = objItem.SetPolicyPropertyName("UseTempFolders", DISABLE_POLICY)
Next
</vb><vb name="Modify Terminal Services Profile Path" n="1643">' Modify Terminal Services Profile Path


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TerminalServiceSetting")

For Each objItem in colItems
    errResult = objItem.SetProfilePath("c:\tsprofiles")
Next
</vb><vb name="Modify Terminal Services Reconnection Policy" n="1644">' Modify Terminal Services Reconnection Policy


Const PREVIOUS_CLIENT = 0
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSSessionSetting")

For Each objItem in colItems
    objItem.ReconnectionPolicy = PREVIOUS_CLIENT
    objItem.Put_
Next
</vb><vb name="Modify Terminal Services Remote Control Policy" n="1645">' Modify Terminal Services Remote Control Policy


Const PER_USER = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSRemoteControlSetting")

For Each objItem in colItems
    objItem.RemoteControlPolicy = PER_USER
    objItem.Put_
Next
</vb><vb name="Modify Terminal Services Session Directory IP Address" n="1646">' Modify Terminal Services Session Directory IP Address


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSSessionDirectory")

For Each objItem in colItems
    objItem.SessionDirectoryIPAddress = "192.168.1.3"
    objItem.Put_
Next
</vb><vb name="Modify Terminal Services Session Directory Location" n="1647">' Modify Terminal Services Session Directory Location


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSSessionDirectory")

For Each objItem in colItems
    errResult = objItem.SetSessionDirectoryProperty _
        ("SessionDirectoryLocation", "192.168.1.3")
Next
</vb><vb name="Modify Terminal Services Session Time Limit" n="1648">' Modify Terminal Services Session Time Limit


Const NO_SESSION_LIMIT = 0
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSSessionSetting")

For Each objItem in colItems
    errResult = objItem.TimeLimit("ActiveSessionLimit", NO_SESSION_LIMIT)
Next
</vb><vb name="Modify Terminal Services Time Limit Policy" n="1649">' Modify Terminal Services Time Limit Policy


Const PER_USER = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSSessionSetting")

For Each objItem in colItems
    objItem.TimeLimitPolicy = PER_USER
    objItem.Put_
Next
</vb><vb name="Modify Terminal Services Time Zone Redirection" n="1650">' Modify Terminal Services Time Zone Redirection


Const DISABLE = 0
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TerminalServiceSetting")

For Each objItem in colItems
    errResult = objItem.SetTimeZoneRedirection(DISABLE)
Next
</vb><vb name="Modify Terminal Services User Permissions" n="1651">' Modify Terminal Services User Permissions


Const ENABLED = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TerminalServiceSetting")

For Each objItem in colItems
    objItem.UserPermission = ENABLED
    objItem.Put_
Next
</vb><vb name="Modify Terminal Services Windows Authentication Setting" n="1652">' Modify Terminal Services Windows Authentication Setting


Const STANDARD_AUTHENTICATION = 1
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSGeneralSetting")

For Each objItem in colItems
    objItem.WindowsAuthentication = STANDARD_AUTHENTICATION
    objItem.Put_
Next
</vb><vb name="Modify the Terminal Services Comment" n="1653">' Modify the Terminal Services Comment


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSGeneralSetting")

For Each objItem in colItems
    objItem.Comment = "Accounting session."
    objItem.Put_
Next
</vb><vb name="Modify the Terminal Services Logon" n="1654">' Modify the Terminal Services Logon


Const TS_USER = "tsuser"
CONST TS_DOMAIN = "fabrikam"
CONST TS_PASSWORD = "password"
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSLogonSetting")

For Each objItem in colItems
    errResult = objItem.ExplicitLogon(TS_USER, TS_DOMAIN, TS_PASSWORD)
Next
</vb><vb name="Rename a Terminal Service Terminal" n="1655">' Rename a Terminal Service Terminal


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_Terminal Where TerminalName = 'RDP-tcp'")

For Each objItem in colItems
    errResult = objItem.Rename("Accounting")
Next
</vb><vb name="Restore the Default Terminal Service Permissions" n="1656">' Restore the Default Terminal Service Permissions


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSPermissionsSetting")

For Each objItem in colItems
    errResult = objItem.RestoreDefaults()
Next
</vb><vb name="Publish License Server Across Trusted AD Sites" n="1657">' Publish License Server Across Trusted AD Sites



Const ADS_PROPERTY_APPEND = 3 
 
Set objRootDSE = GetObject("LDAP://RootDSE")
strConfigContainer = objRootDSE.Get("configurationNamingContext")

Set objSysInfo = CreateObject("ADSystemInfo")
strSite = objSysInfo.SiteName 
strComputerName = objSysInfo.ComputerName
   
Set adsLS = GetObject("LDAP://CN=TS-Enterprise-License-Server,CN=" &amp;amp; strSite &amp;amp;_ 
",CN=sites," &amp;amp; strConfigContainer)
Set adsContainer = GetObject("LDAP://CN=" &amp;amp; strSite &amp;amp; ",CN=sites," &amp;amp; strConfigContainer)
Set adsLS = adsContainer.Create("LicensingSiteSettings" , "CN=TS-Enterprise-License-Server")

adsLS.PutEx ADS_PROPERTY_APPEND, "siteServer", Array(strComputerName)
adsLS.SetInfo
</vb></dd>
		<dd name="Monitoring" code="monitor" desc="Sample scripts for monitoring Terminal Service performance."><vb name="Monitor Terminal Service Session Performance" n="1658">' Monitor Terminal Service Session Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum _
    (objWMIService, "Win32_PerfFormattedData_Perf_TermService_TerminalServiceSession").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Handle Count: " &amp;amp; objItem.HandleCount
        Wscript.Echo "Input Asynchronous Frame Error: " &amp;amp; _
            objItem.InputAsyncFrameError
        Wscript.Echo "Input Asynchronous Overflow: " &amp;amp; _
            objItem.InputAsyncOverflow
        Wscript.Echo "Input Asynchronous Overrun: " &amp;amp; objItem.InputAsyncOverrun
        Wscript.Echo "Input Asynchronous Parity Error: " &amp;amp; _
            objItem.InputAsyncParityError
        Wscript.Echo "Input Bytes: " &amp;amp; objItem.InputBytes
        Wscript.Echo "Input Compressed Bytes: " &amp;amp; objItem.InputCompressedBytes
        Wscript.Echo "Input Compress Flushes: " &amp;amp; objItem.InputCompressFlushes
        Wscript.Echo "Input Compression Ratio: " &amp;amp; _
            objItem.InputCompressionRatio
        Wscript.Echo "Input Errors: " &amp;amp; objItem.InputErrors
        Wscript.Echo "Input Frames: " &amp;amp; objItem.InputFrames
        Wscript.Echo "Input Timeouts: " &amp;amp; objItem.InputTimeouts
        Wscript.Echo "Input Transport Errors: " &amp;amp; objItem.InputTransportErrors
        Wscript.Echo "Input Wait For OutputBuffer: " &amp;amp; _
            objItem.InputWaitForOutBuf
        Wscript.Echo "Input Wd Bytes: " &amp;amp; objItem.InputWdBytes
        Wscript.Echo "Input Wd Frames: " &amp;amp; objItem.InputWdFrames
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Output Asynchronous Frame Error: " &amp;amp; _
            objItem.OutputAsyncFrameError
        Wscript.Echo "Output Asynchronous Overflow: " &amp;amp; _
            objItem.OutputAsyncOverflow
        Wscript.Echo "Output Asynchronous Overrun: " &amp;amp; _
            objItem.OutputAsyncOverrun
        Wscript.Echo "OutputAsynchronous Parity Error: " &amp;amp; _
            objItem.OutputAsyncParityError
        Wscript.Echo "Output Bytes: " &amp;amp; objItem.OutputBytes
        Wscript.Echo "Output Compressed Bytes: " &amp;amp; _
            objItem.OutputCompressedBytes
        Wscript.Echo "Output Compress Flushes: " &amp;amp; _
            objItem.OutputCompressFlushes
        Wscript.Echo "Output Compression Ratio: " &amp;amp; _
            objItem.OutputCompressionRatio
        Wscript.Echo "Output Errors: " &amp;amp; objItem.OutputErrors
        Wscript.Echo "Output Frames: " &amp;amp; objItem.OutputFrames
        Wscript.Echo "Output Timeouts: " &amp;amp; objItem.OutputTimeouts
        Wscript.Echo "Output Transport Errors: " &amp;amp; _
            objItem.OutputTransportErrors
        Wscript.Echo "Output Wait For Outout Buffer: " &amp;amp; _
            objItem.OutputWaitForOutBuf
        Wscript.Echo "Output Wd Bytes: " &amp;amp; objItem.OutputWdBytes
        Wscript.Echo "Output Wd Frames: " &amp;amp; objItem.OutputWdFrames
        Wscript.Echo "Page Faults Per Second: " &amp;amp; objItem.PageFaultsPersec
        Wscript.Echo "Page File Bytes: " &amp;amp; objItem.PageFileBytes
        Wscript.Echo "Page File Bytes Peak: " &amp;amp; objItem.PageFileBytesPeak
        Wscript.Echo "Percent Privileged Time: " &amp;amp; _
            objItem.PercentPrivilegedTime
        Wscript.Echo "Percent Processor Time: " &amp;amp; objItem.PercentProcessorTime
        Wscript.Echo "Percent User Time: " &amp;amp; objItem.PercentUserTime
        Wscript.Echo "Pool Nonpaged Bytes: " &amp;amp; objItem.PoolNonpagedBytes
        Wscript.Echo "Pool Paged Bytes: " &amp;amp; objItem.PoolPagedBytes
        Wscript.Echo "Private Bytes: " &amp;amp; objItem.PrivateBytes
        Wscript.Echo "Protocol Bitmap Cache Hit Ratio: " &amp;amp; _
            objItem.ProtocolBitmapCacheHitRatio
        Wscript.Echo "Protocol Bitmap Cache Hits: " &amp;amp; _
            objItem.ProtocolBitmapCacheHits
        Wscript.Echo "Protocol Bitmap Cache Reads: " &amp;amp; _
            objItem.ProtocolBitmapCacheReads
        Wscript.Echo "Protocol Brush Cache Hit Ratio: " &amp;amp; _
            objItem.ProtocolBrushCacheHitRatio
        Wscript.Echo "Protocol Brush Cache Hits: " &amp;amp; _
            objItem.ProtocolBrushCacheHits
        Wscript.Echo "Protocol Brush Cache Reads: " &amp;amp; _
            objItem.ProtocolBrushCacheReads
        Wscript.Echo "Protocol Glyph Cache Hit Ratio: " &amp;amp; _
            objItem.ProtocolGlyphCacheHitRatio
        Wscript.Echo "Protocol Glyph Cache Hits: " &amp;amp; _
            objItem.ProtocolGlyphCacheHits
        Wscript.Echo "Protocol Glyph Cache Reads: " &amp;amp; _)
            objItem.ProtocolGlyphCacheReads
        Wscript.Echo "Protocol Save Screen Bitmap Cache Hit Ratio: " &amp;amp; _
            objItem.ProtocolSaveScreenBitmapCacheHitRatio
        Wscript.Echo "Protocol Save Screen Bitmap Cache Hits: " &amp;amp; _
            objItem.ProtocolSaveScreenBitmapCacheHits
        Wscript.Echo "Protocol Save Screen Bitmap Cache Reads: " &amp;amp; _
            objItem.ProtocolSaveScreenBitmapCacheReads
        Wscript.Echo "Thread Count: " &amp;amp; objItem.ThreadCount
        Wscript.Echo "Total Asynchronous Frame Error: " &amp;amp; _
            objItem.TotalAsyncFrameError
        Wscript.Echo "Total Asynchronous Overflow: " &amp;amp; _
            objItem.TotalAsyncOverflow
        Wscript.Echo "Total Asynchronous Overrun: " &amp;amp; objItem.TotalAsyncOverrun
        Wscript.Echo "Total Asynchronous Parity Error: " &amp;amp; _
            objItem.TotalAsyncParityError
        Wscript.Echo "Total Bytes: " &amp;amp; objItem.TotalBytes
        Wscript.Echo "Total Compressed Bytes: " &amp;amp; objItem.TotalCompressedBytes
        Wscript.Echo "Total Compress Flushes: " &amp;amp; objItem.TotalCompressFlushes
        Wscript.Echo "Total Compression Ratio: " &amp;amp; _
            objItem.TotalCompressionRatio
        Wscript.Echo "Total Errors: " &amp;amp; objItem.TotalErrors
        Wscript.Echo "Total Frames: " &amp;amp; objItem.TotalFrames
        Wscript.Echo "Total Protocol Cache Hit Ratio: " &amp;amp; _
            objItem.TotalProtocolCacheHitRatio
        Wscript.Echo "Total Protocol Cache Hits: " &amp;amp; _
            objItem.TotalProtocolCacheHits
        Wscript.Echo "Total Protocol Cache Reads: " &amp;amp; _
            objItem.TotalProtocolCacheReads
        Wscript.Echo "Total Timeouts: " &amp;amp; objItem.TotalTimeouts
        Wscript.Echo "Total Transport Errors: " &amp;amp; objItem.TotalTransportErrors
        Wscript.Echo "Total Wait For Output Buffer: " &amp;amp; _
            objItem.TotalWaitForOutBuf
        Wscript.Echo "Total Wd Bytes: " &amp;amp; objItem.TotalWdBytes
        Wscript.Echo "Total Wd Frames: " &amp;amp; objItem.TotalWdFrames
        Wscript.Echo "Virtual Bytes: " &amp;amp; objItem.VirtualBytes
        Wscript.Echo "Virtual Bytes Peak: " &amp;amp; objItem.VirtualBytesPeak
        Wscript.Echo "Working Set: " &amp;amp; objItem.WorkingSet
        Wscript.Echo "Working Set Peak: " &amp;amp; objItem.WorkingSetPeak
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb><vb name="Monitor Terminal Services Performance" n="1659">' Monitor Terminal Services Performance


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

set objRefresher = CreateObject("WbemScripting.SWbemRefresher")
Set colItems = objRefresher.AddEnum(objWMIService, _
    "Win32_PerfFormattedData_TermService_TerminalServices").objectSet
objRefresher.Refresh

For i = 1 to 5
    For Each objItem in colItems
        Wscript.Echo "Active Sessions: " &amp;amp; objItem.ActiveSessions
        Wscript.Echo "Caption: " &amp;amp; objItem.Caption
        Wscript.Echo "Description: " &amp;amp; objItem.Description
        Wscript.Echo "Inactive Sessions: " &amp;amp; objItem.InactiveSessions
        Wscript.Echo "Name: " &amp;amp; objItem.Name
        Wscript.Echo "Total Sessions: " &amp;amp; objItem.TotalSessions
        Wscript.Sleep 2000
        objRefresher.Refresh
    Next
Next
</vb></dd>
		<dd name="Retrieving Terminal Server Properties" code="list" desc="Sample scripts for retrieving information about Terminal Server configuration settings."><vb name="List Terminal Services Accounts" n="1660">' List Terminal Services Accounts


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSAccount")

For Each objItem in colItems
    Wscript.Echo "Account name: " &amp;amp; objItem.AccountName
    Wscript.Echo "Audit failure: " &amp;amp; objItem.AuditFail
    Wscript.Echo "Audit success: " &amp;amp; objItem.AuditSuccess
    Wscript.Echo "Permissions allowed: " &amp;amp; objItem.PermissionsAllowed
    Wscript.Echo "Permissions denied: " &amp;amp; objItem.PermissionsDenied
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "SID: " &amp;amp; objItem.SID
    Wscript.Echo "Terminal name: " &amp;amp; objItem.TerminalName
    Wscript.Echo
Next
</vb><vb name="List Terminal Services Client Settings" n="1661">' List Terminal Services Client Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSClientSetting")

For Each objItem in colItems
    Wscript.Echo "Audio mapping: " &amp;amp; objItem.AudioMapping
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Clipboard mapping: " &amp;amp; objItem.ClipboardMapping
    Wscript.Echo "Color depth: " &amp;amp; objItem.ColorDepth
    Wscript.Echo "Color depth policy: " &amp;amp; objItem.ColorDepthPolicy
    Wscript.Echo "COM port mapping: " &amp;amp; objItem.COMPortMapping
    Wscript.Echo "Connect client drives at logon: " &amp;amp; _
        objItem.ConnectClientDrivesAtLogon
    Wscript.Echo "Connection policy: " &amp;amp; objItem.ConnectionPolicy
    Wscript.Echo "Connect printer at logon: " &amp;amp; objItem.ConnectPrinterAtLogon
    Wscript.Echo "Default to client printer: " &amp;amp; objItem.DefaultToClientPrinter
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Drive mapping: " &amp;amp; objItem.DriveMapping
    Wscript.Echo "LPT port mapping: " &amp;amp; objItem.LPTPortMapping
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Terminal name: " &amp;amp; objItem.TerminalName
    Wscript.Echo "Windows printer mapping: " &amp;amp; objItem.WindowsPrinterMapping
    Wscript.Echo
Next
</vb><vb name="List Terminal Services Environment Properties for a User Account" n="1662">' List Terminal Services Environment Properties for a User Account


Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
Wscript.Echo "Connect Client Drives At Logon: " &amp;amp; _
    objUser.ConnectClientDrivesAtLogon
Wscript.Echo "Connect Client Printers At Logon: " &amp;amp; _
    objUser.ConnectClientPrintersAtLogon
Wscript.Echo "Default To Main Printer: " &amp;amp; objUser.DefaultToMainPrinter
Wscript.Echo "Terminal Services Initial Program: " &amp;amp; _
    objUser.TerminalServicesInitialProgram 
Wscript.Echo "Terminal Services Work Directory: " &amp;amp; _
    objUser.TerminalServicesWorkDirectory
</vb><vb name="List Terminal Services Environment Settings" n="1663">' List Terminal Services Environment Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
("Select * from Win32_TSEnvironmentSetting")

For Each objItem in colItems
    Wscript.Echo "Client wallpaper: " &amp;amp; objItem.ClientWallpaper
    Wscript.Echo "Initial program path: " &amp;amp; objItem.InitialProgramPath
    Wscript.Echo "Initial program policy: " &amp;amp; objItem.InitialProgramPolicy
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Start in: " &amp;amp; objItem.Startin
    Wscript.Echo "Terminal name: " &amp;amp; objItem.TerminalName
    Wscript.Echo
Next
</vb><vb name="List Terminal Services General Settings" n="1664">' List Terminal Services General Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSGeneralSetting")

For Each objItem in colItems
    Wscript.Echo "Comment: " &amp;amp; objItem.Comment
    Wscript.Echo "Minimum encryption level: " &amp;amp; objItem.MinEncryptionLevel
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Terminal name: " &amp;amp; objItem.TerminalName
    Wscript.Echo "Terminal protocol: " &amp;amp; objItem.TerminalProtocol
    Wscript.Echo "Transport: " &amp;amp; objItem.Transport
    Wscript.Echo "Windows authentication: " &amp;amp; objItem.WindowsAuthentication
    Wscript.Echo
Next
</vb><vb name="List Terminal Services Logon Settings" n="1665">' List Terminal Services Logon Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSLogonSetting")

For Each objItem in colItems
    Wscript.Echo "Client logon information policy: " &amp;amp; _
        objItem.ClientLogonInfoPolicy
    Wscript.Echo "Domain: " &amp;amp; objItem.Domain
    Wscript.Echo "Prompt for password: " &amp;amp; objItem.PromptForPassword
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Terminal name: " &amp;amp; objItem.TerminalName
    Wscript.Echo "User name: " &amp;amp; objItem.UserName
    Wscript.Echo
Next
</vb><vb name="List Terminal Services Network Adapter List Settings" n="1666">' List Terminal Services Network Adapter List Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSNetworkAdapterListSetting")

For Each objItem in colItems
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Network Adapter ID: " &amp;amp; objItem.NetworkAdapterID
    Wscript.Echo "Network Adapter IP Address: " &amp;amp; objItem.NetworkAdapterIP
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Terminal name: " &amp;amp; objItem.TerminalName
    Wscript.Echo
Next
</vb><vb name="List Terminal Services Network Adapter Settings" n="1667">' List Terminal Services Network Adapter Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSNetworkAdapterSetting")

For Each objItem in colItems
    Wscript.Echo "Maximum Connections: " &amp;amp; objItem.MaximumConnections
    Wscript.Echo "Network Adapter ID: " &amp;amp; objItem.NetworkAdapterID
    Wscript.Echo "Network Adapter Name: " &amp;amp; objItem.NetworkAdapterName
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Terminal Name: " &amp;amp; objItem.TerminalName
    Wscript.Echo
Next
</vb><vb name="List Terminal Services Permission Settings" n="1668">' List Terminal Services Permission Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSPermissionsSetting")

For Each objItem in colItems
  Wscript.Echo "Caption: " &amp;amp; objItem.Caption
  Wscript.Echo "Description: " &amp;amp; objItem.Description
  Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
  Wscript.Echo "Terminal name: " &amp;amp; objItem.TerminalName
Next
</vb><vb name="List Terminal Services Profile Properties" n="1669">' List Terminal Services Profile Properties


Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
WScript.Echo "Terminal Services Profile Path : " &amp;amp; _
    objUser.TerminalServicesProfilePath 
WScript.Echo "Terminal Services Home Directory: " &amp;amp; _
    objUser.TerminalServicesHomeDirectory
WScript.Echo "Terminal Services Home Drive: " &amp;amp; _ 
    objUser.TerminalServicesHomeDrive
WScript.Echo "Allow Logon: " &amp;amp; objUser.AllowLogon
</vb><vb name="List Terminal Services Remote Control Settings" n="1670">' List Terminal Services Remote Control Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSRemoteControlSetting")

For Each objItem in colItems
    Wscript.Echo "Level of control: " &amp;amp; objItem.LevelofControl
    Wscript.Echo "Remote control policy: " &amp;amp; objItem.RemoteControlPolicy
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Terminal name: " &amp;amp; objItem.TerminalName
    Wscript.Echo
Next
</vb><vb name="List Terminal Services Session Directory Settings" n="1671">' List Terminal Services Session Directory Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSSessionDirectory")

For Each objItem in colItems
    Wscript.Echo "Session Directory active: " &amp;amp; objItem.SessionDirectoryActive
    Wscript.Echo "Session Directory cluster name: " &amp;amp; _
        objItem.SessionDirectoryClusterName
    Wscript.Echo "Session Directory expose server IP address: " &amp;amp; _
        objItem.SessionDirectoryExposeServerIP
    Wscript.Echo "Session Directory IP address: " &amp;amp; _
        objItem.SessionDirectoryIPAddress
    Wscript.Echo "Session Directory location: " &amp;amp; _
        objItem.SessionDirectoryLocation
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo
Next
</vb><vb name="List Terminal Services Session Settings" n="1672">' List Terminal Services Session Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TSSessionSetting")

For Each objItem in colItems
    Wscript.Echo "Active session limit: " &amp;amp; objItem.ActiveSessionLimit
    Wscript.Echo "Broken connection action: " &amp;amp; objItem.BrokenConnectionAction
    Wscript.Echo "Broken connection policy: " &amp;amp; objItem.BrokenConnectionPolicy
    Wscript.Echo "Disconnected session limit: " &amp;amp; _
        objItem.DisconnectedSessionLimit
    Wscript.Echo "Idle session limit: " &amp;amp; objItem.IdleSessionLimit
    Wscript.Echo "Reconnection policy: " &amp;amp; objItem.ReconnectionPolicy
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Terminal name: " &amp;amp; objItem.TerminalName
    Wscript.Echo "Time limit policy: " &amp;amp; objItem.TimeLimitPolicy
    Wscript.Echo
Next
</vb><vb name="List Terminal Services Terminal Settings" n="1673">' List Terminal Services Terminal Settings


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TerminalServiceSetting")

For Each objItem in colItems
    Wscript.Echo "Active Desktop: " &amp;amp; objItem.ActiveDesktop
    Wscript.Echo "Allow TS connections: " &amp;amp; objItem.AllowTSConnections
    Wscript.Echo "Caption: " &amp;amp; objItem.Caption
    Wscript.Echo "Delete temporary folders: " &amp;amp; objItem.DeleteTempFolders
    Wscript.Echo "Description: " &amp;amp; objItem.Description
    Wscript.Echo "Direct connect license servers: " &amp;amp; _
        objItem.DirectConnectLicenseServers
    Wscript.Echo "Disable forcible logoff: " &amp;amp; objItem.DisableForcibleLogoff
    Wscript.Echo "Help: " &amp;amp; objItem.Help
    Wscript.Echo "Home directory: " &amp;amp; objItem.HomeDirectory
    Wscript.Echo "Licensing description: " &amp;amp; objItem.LicensingDescription
    Wscript.Echo "Licensing name: " &amp;amp; objItem.LicensingName
    Wscript.Echo "Licensing type: " &amp;amp; objItem.LicensingType
    Wscript.Echo "Logons: " &amp;amp; objItem.Logons
    Wscript.Echo "Profile path: " &amp;amp; objItem.ProfilePath
    Wscript.Echo "Server name: " &amp;amp; objItem.ServerName
    Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
    Wscript.Echo "Single session: " &amp;amp; objItem.SingleSession
    Wscript.Echo "Terminal Server mode: " &amp;amp; objItem.TerminalServerMode
    Wscript.Echo "Time zone redirection: " &amp;amp; objItem.TimeZoneRedirection
    Wscript.Echo "User permission: " &amp;amp; objItem.UserPermission
    Wscript.Echo "Use temporary folders: " &amp;amp; objItem.UseTempFolders
    Wscript.Echo
Next
</vb><vb name="List Terminal Services Terminals" n="1674">' List Terminal Services Terminals


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_Terminal")

For Each objItem in colItems
    Wscript.Echo "Terminal name: " &amp;amp; objItem.TerminalName
    Wscript.Echo "Terminal enabled: " &amp;amp; objItem.fEnableTerminal
    Wscript.Echo
Next
</vb><vb name="List Terminal Services Terminals" n="1675">' List Terminal Services Terminals


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery("Select * from Win32_TerminalSetting")

For Each objItem in colItems
  Wscript.Echo "Caption: " &amp;amp; objItem.Caption
  Wscript.Echo "Description: " &amp;amp; objItem.Description
  Wscript.Echo "Setting ID: " &amp;amp; objItem.SettingID
  Wscript.Echo "Terminal name: " &amp;amp; objItem.TerminalName
Next
</vb></dd>
		<dd name="Terminal Server User Accounts" code="users" desc="Sample scripts for creating, modifying, and deleting Terminal Server user accounts."><vb name="Add a Terminal Services Account" n="1676">' Add a Terminal Services Account


Const GUEST_ACCESS = 0
 
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSPermissionsSetting")

For Each objItem in colItems
    errResult = objItem.AddAccount("fabrikam\bob", GUEST_ACCESS)
Next
</vb><vb name="Clear Terminal Services Properties for a User Account" n="1677">' Clear Terminal Services Properties for a User Account


Const ADS_PROPERTY_CLEAR = 1 
 
Set objUser = GetObject _
   ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com") 

objUser.PutEx ADS_PROPERTY_CLEAR, "userParameters", 0
objUser.SetInfo
</vb><vb name="Delete a Terminal Services Account" n="1678">' Delete a Terminal Services Account


strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
    &amp;amp; "{impersonationLevel=impersonate}!\\" &amp;amp; strComputer &amp;amp; "\root\cimv2")

Set colItems = objWMIService.ExecQuery _
    ("Select * from Win32_TSAccount Where AccountName = 'FABRIKAM\\bob'")

For Each objItem in colItems
    errResult = objItem.Delete()
Next
</vb><vb name="Enable Remote Control Settings for a User Account" n="1679">' Enable Remote Control Settings for a User Account


Const Disable = 0
Const EnableInputNotify = 1
Const EnableInputNoNotify = 2 
Const EnableNoInputNotify = 3
Const EnableNoInputNoNotify = 4
 
Set objUser = GetObject _
  ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
objUser.EnableRemoteControl = EnableNoInputNoNotify
 
objUser.SetInfo
</vb><vb name="List Terminal Services Environment Properties for a User Account" n="1680">' List Terminal Services Environment Properties for a User Account


Set objUser = GetObject _
  ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
Wscript.Echo "Connect Client Drives At Logon: " &amp;amp; _
    objUser.ConnectClientDrivesAtLogon
Wscript.Echo "Connect Client Printers At Logon: " &amp;amp; _
    objUser.ConnectClientPrintersAtLogon
Wscript.Echo "Default To Main Printer: " &amp;amp; objUser.DefaultToMainPrinter
Wscript.Echo "Terminal Services Initial Program: " &amp;amp; _
    objUser.TerminalServicesInitialProgram 
Wscript.Echo "Terminal Services Work Directory: " &amp;amp; _
    objUser.TerminalServicesWorkDirectory
</vb><vb name="List Terminal Services Profile Properties" n="1681">' List Terminal Services Profile Properties


Set objUser = GetObject _
  ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
WScript.echo "Terminal Services Profile Path : " &amp;amp; _
    objUser.TerminalServicesProfilePath 
WScript.echo "Terminal Services Home Directory: " &amp;amp; _
    objUser.TerminalServicesHomeDirectory
WScript.echo "Terminal Services Home Drive: " &amp;amp; _
    objUser.TerminalServicesHomeDrive
WScript.echo "Allow Logon: " &amp;amp; objUser.AllowLogon
</vb><vb name="List Terminal Services Properties for a User" n="1682">' List Terminal Services Properties for a User


Set objUser = GetObject("LDAP://cn=youngrob,ou=r&amp;amp;d,dc=fabrikam,dc=com") 
 
WScript.Echo objUser.Name &amp;amp; " Terminal Services Profile Settings"
WScript.Echo "--------------------------------------------------"
 
WScript.Echo "Allow Logon: " &amp;amp; objUser.AllowLogon
WScript.Echo "Terminal Services Home Directory: " &amp;amp; _
    objUser.TerminalServicesHomeDirectory
WScript.Echo "Terminal Services Home Drive: " &amp;amp; _
    objUser.TerminalServicesHomeDrive
WScript.Echo "Terminal Services Profile Path: " &amp;amp; _
    objUser.TerminalServicesProfilePath
 
WScript.Echo "Enable Remote Control: " &amp;amp; objUser.EnableRemoteControl
 
WScript.Echo "Broken Connection Action: " &amp;amp; objUser.BrokenConnectionAction
WScript.Echo "Max Connection Time: " &amp;amp; objUser.MaxConnectionTime
WScript.Echo "Max Disconnection Time: " &amp;amp; objUser.MaxDisconnectionTime
WScript.Echo "Max Idle Time: " &amp;amp; objUser.MaxIdleTime
WScript.Echo "Reconnection Action: " &amp;amp; objUser.ReconnectionAction
 
WScript.Echo "Connect Client Drives At Logon: " &amp;amp; _
    objUser.ConnectClientDrivesAtLogon
WScript.Echo "Connect Client Printers At Logon: " &amp;amp; _
    objUser.ConnectClientPrintersAtLogon
WScript.Echo "Default To Main Printer: " &amp;amp; _
    objUser.DefaultToMainPrinter
WScript.Echo "Terminal Services Initial Program: " &amp;amp; _
    objUser.TerminalServicesInitialProgram
WScript.Echo "Terminal Services Work Directory: " &amp;amp; _
    objUser.TerminalServicesWorkDirectory
</vb><vb name="List Terminal Services Remote Control Properties for a User Account" n="1683">' List Terminal Services Remote Control Properties for a User Account


Const Disable = 0
Const EnableInputNotify = 1
Const EnableInputNoNotify = 2 
Const EnableNoInputNotify = 3
Const EnableNoInputNoNotify = 4
 
Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
intEnableRemoteControl  = objUser.EnableRemoteControl  
 
Select Case intEnableRemoteControl
    Case Disable  WScript.Echo "Remote control disabled"
    Case EnableInputNotify 
        WScript.Echo "Remote control enabled"
        WScript.Echo "User permission required"
        WScript.Echo "Interact with the session"
    Case EnableInputNoNotify
        WScript.Echo "Remote control enabled"
        WScript.Echo "User permission not required"
        WScript.Echo "Interact with the session"
    Case EnableNoInputNotify
        WScript.Echo "Remote control enabled"
        WScript.Echo "User permission required"
        WScript.Echo "View the session"
    Case EnableNoInputNoNotify
        WScript.Echo "Remote control enabled"
        WScript.Echo "User permission not required"
        WScript.Echo "View the session"
End Select
</vb><vb name="List Terminal Services Session Properties" n="1684">' List Terminal Services Session Properties


Set objUser = GetObject _
  ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
WScript.echo "Maximum Disconnection Time : " &amp;amp; objUser.MaxDisconnectionTime 
WScript.echo "Maximum Connection Time: " &amp;amp; objUser.MaxConnectionTime
WScript.echo "Maximum Idle Time: " &amp;amp; objUser.MaxIdleTime
WScript.echo "Broken Connection Action: " &amp;amp; objUser.BrokenConnectionAction 
WScript.echo "Reconnection Action : " &amp;amp; objUser.ReconnectionAction
</vb><vb name="Modify Terminal Services Environment Properties for a User Account" n="1685">' Modify Terminal Services Environment Properties for a User Account


Const Enabled = 1
Const Disabled = 0

Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
objUser.ConnectClientDrivesAtLogon = Enabled
objUser.ConnectClientPrintersAtLogon = Enabled
objUser.DefaultToMainPrinter = Enabled
objUser.TerminalServicesInitialProgram = "cmd"
objUser.TerminalServicesWorkDirectory = "c:\temp"
objUser.SetInfo
</vb><vb name="Modify Terminal Services Profile Properties for a User Account" n="1686">' Modify Terminal Services Profile Properties for a User Account


Const Enabled = 1
Const Disabled = 0

Set objUser = GetObject _
    ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
objUser.TerminalServicesProfilePath = ""
objUser.TerminalServicesHomeDirectory = ""
objUser.TerminalServicesHomeDrive = ""
objUser.AllowLogon = Enabled
objUser.SetInfo
</vb><vb name="Modify Terminal Services Session Properties for a User Account" n="1687">' Modify Terminal Services Session Properties for a User Account


Const Enabled = 1
Const Disabled = 0

Set objUser = GetObject _
  ("LDAP://cn=MyerKen,ou=Management,dc=NA,dc=fabrikam,dc=com")
 
objUser.MaxDisconnectionTime = 2880
objUser.MaxConnectionTime = 1440
objUser.MaxIdleTime = 180
objUser.BrokenConnectionAction = Enabled
objUser.ReconnectionAction = Enabled
objUser.SetInfo
</vb></dd>
	</dd>
	<dd name="Virtual Server" code="vs" desc="Sample scripts for managing Microsoft Virtual Server.">
		<dd name="Virtual Disk Drives" code="disks" desc="Sample scripts for managing Virtual Server virtual disk drives."><vb name="Add a Hard Disk Connection to a Virtual Machine" n="1688">' Add a Hard Disk Connection to a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")
Set objDrive = objVM.AddHardDiskConnection _
    ("c:\Virtual Machines\Windows 2000 Server Hard Disk.vhd",0,0,0)
</vb><vb name="Add a SCSI Controller to a Virtual Machine" n="1689">' Add a SCSI Controller to a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")
objVM.AddSCSIController()
</vb><vb name="Attach a DVD Host Drive to all Virtual Machines" n="1690">' Attach a DVD Host Drive to all Virtual Machines


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set colDVDDrives = objVM.DVDROMDrives
    For Each objDrive in colDVDDrives
        errReturn = objDrive.AttachHostDrive("D")
    Next
Next
</vb><vb name="Attach a DVD Image to all Virtual Machines" n="1691">' Attach a DVD Image to all Virtual Machines


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set colDVDDrives = objVM.DVDROMDrives
    For Each objDrive in colDVDDrives
        errReturn = objDrive.AttachImage _
            ("C:\Virtual Machines\Images\VMAdditions013107.iso")
    Next
Next
</vb><vb name="Attach a Floppy Drive to All Virtual Machines" n="1692">' Attach a Floppy Drive to All Virtual Machines


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set colFloppyDrives = objVM.FloppyDrives
    For Each objDrive in colFloppyDrives
        errReturn = objDrive.AttachHostDrive("A")
    Next
Next
</vb><vb name="Attach a Floppy Image to All Virtual Machines" n="1693">' Attach a Floppy Image to All Virtual Machines


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set colFloppyDrives = objVM.FloppyDrives
    For Each objDrive in colFloppyDrives
        errReturn = objDrive.AttachImage _
            ("C:\Virtual Machines\Additions\Dos Virtual Machine Additions.vfd")
    Next
Next
</vb><vb name="Compact a Virtual Hard Disk" n="1694">' Compact a Virtual Hard Disk


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set colHardDiskConnections = objVM.HardDiskConnections
    For Each objDrive in colHardDiskConnections
        Set objHardDisk = objDrive.HardDisk
        objHardDisk.Compact()
    Next  
Next
</vb><vb name="Create a Floppy Image" n="1695">' Create a Floppy Image


On Error Resume Next

Const vmFloppyDiskImage_HighDensity = 2

Set objVS = CreateObject("VirtualServer.Application")
errReturn = objVS.CreateFloppyDiskImage _
    ("C:\Virtual Machines\Images\\Test.vfd", vmFloppyDiskImage_HighDensity)
</vb><vb name="Create a Virtual Server Dynamic Hard Disk" n="1696">' Create a Virtual Server Dynamic Hard Disk


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
errReturn = objVS.CreateDynamicVirtualHardDisk _
    ("C:\Virtual Machines\Disks\Scripted_HardDisk.vhd", 20)
</vb><vb name="Create a Virtual Server Fixed Hard Disk" n="1697">' Create a Virtual Server Fixed Hard Disk


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
errReturn = objVS.CreateFixedVirtualHardDisk _
    ("C:\Virtual Machines\Disks\Fixed_HardDisk.vhd", 20)
</vb><vb name="Discard Virtual Server Undo Disks" n="1698">' Discard Virtual Server Undo Disks


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")
objVM.DiscardUndoDisks()
</vb><vb name="List Virtual Machine DVD Information" n="1699">' List Virtual Machine DVD Information


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set colDVDDrives = objVM.DVDROMDrives
    For Each objDrive in colDVDDrives
        Wscript.Echo "Virtual machine: " &amp;amp; objVM.Name
        Wscript.Echo "Attachment: " &amp;amp; objDrive.Attachment
        Wscript.Echo "Bus number: " &amp;amp; objDrive.BusNumber
        Wscript.Echo "Bus type: " &amp;amp; objDrive.BusType
        Wscript.Echo "Device number: " &amp;amp; objDrive.DeviceNumber
        Wscript.Echo "Host drive letter: " &amp;amp; objDrive.HostDriveLetter
        Wscript.Echo "Image file: " &amp;amp; objDrive.ImageFile
        Wscript.Echo
    Next
Next
</vb><vb name="List Virtual Machine Floppy Drive Information" n="1700">' List Virtual Machine Floppy Drive Information


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set colFloppyDrives = objVM.FloppyDrives
    For Each objDrive in colFloppyDrives
        Wscript.Echo "Virtual machine: " &amp;amp; objVM.Name
        Wscript.Echo "Attachment: " &amp;amp; objDrive.Attachment
        Wscript.Echo "Drive number: " &amp;amp; objDrive.DriveNumber
        Wscript.Echo "Host drive letter: " &amp;amp; objDrive.HostDriveLetter
        Wscript.Echo "Image file: " &amp;amp; objDrive.ImageFile
        Wscript.Echo
    Next
Next
</vb><vb name="List Virtual Machine SCSI Controller Information" n="1701">' List Virtual Machine SCSI Controller Information


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set colSCSIControllers = objVM.SCSIControllers
    For Each objController in colSCSIControllers
        Wscript.Echo "Virtual machine: " &amp;amp; objVM.Name
        Wscript.Echo "ID: " &amp;amp; objController.ID
        Wscript.Echo "Is bus shared: " &amp;amp; objController.IsBusShared
        Wscript.Echo "SCSI ID: " &amp;amp; objController.SCSIID
        Wscript.Echo
    Next
Next
</vb><vb name="List Virtual Server Floppy Image Type" n="1702">' List Virtual Server Floppy Image Type


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
strImageType = objVS.GetFloppyDiskImageType _
    ("C:\Virtual Machines\Images\Dos Virtual Machine Additions.vfd")
Wscript.Echo "Image type: " &amp;amp; strImageType
</vb><vb name="List Virtual Server Hard Disk Connection Information" n="1703">' List Virtual Server Hard Disk Connection Information


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set colHardDiskConnections = objVM.HardDiskConnections
    For Each objDrive in colHardDiskConnections
        Wscript.Echo "Virtual machine: " &amp;amp; objVM.Name
        Wscript.Echo "Bus number: " &amp;amp; objDrive.BusNumber
        Wscript.Echo "Bus type: " &amp;amp; objDrive.BusType
        Wscript.Echo "Device number: " &amp;amp; objDrive.DeviceNumber
        Set objHardDisk = objDrive.HardDisk
        Wscript.Echo "Hard disk file: " &amp;amp; objHardDisk.File
        Wscript.Echo "Host drive identifier: " &amp;amp; _
            objHardDisk.HostDriveIdentifier
        Wscript.Echo "Host free disk space: " &amp;amp; objHardDisk.HostFreeDiskSpace
        Wscript.Echo "Host volume identifier: " &amp;amp; _
            objHardDisk.HostVolumeIdentifier
        Wscript.Echo "Size in guest: " &amp;amp; objHardDisk.SizeInGuest
        Wscript.Echo "Size on host: " &amp;amp; objHardDisk.SizeOnHost
        Wscript.Echo "Type: " &amp;amp; objHardDisk.Type
        Set objUndoDrive = objDrive.UndoHardDisk
        Wscript.Echo "Hard disk file: " &amp;amp; objUndoDrive.File
    Next  
Next
</vb><vb name="List Virtual Server Hard Disk Information" n="1704">' List Virtual Server Hard Disk Information


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objHardDisk = objVS.GetHardDisk _
    ("C:\Virtual Machines\Disks\Windows 2000 Server Hard Disk.vhd")
Wscript.Echo "Hard disk type: " &amp;amp; objHardDisk.Type
</vb><vb name="Merge Virtual Machine Undo Disks" n="1705">' Merge Virtual Machine Undo Disks


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")
objVM.MergeUndoDisks()
</vb><vb name="Release a Virtual Machine DVD Image" n="1706">' Release a Virtual Machine DVD Image


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Set colDVDDrives = objVM.DVDROMDrives
For Each objDrive in colDVDDrives
    errReturn = objDrive.ReleaseImage()
Next
</vb><vb name="Release a Virtual Machine Floppy Drive" n="1707">' Release a Virtual Machine Floppy Drive


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set colFloppyDrives = objVM.FloppyDrives
    For Each objDrive in colFloppyDrives
        errReturn = objDrive.ReleaseHostDrive()
    Next
Next
</vb><vb name="Release a Virtual Machine Floppy Image" n="1708">' Release a Virtual Machine Floppy Image


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set colFloppyDrives = objVM.FloppyDrives
    For Each objDrive in colFloppyDrives
        errReturn = objDrive.ReleaseImage()
    Next
Next
</vb><vb name="Release a Virtual Machine Host Drive" n="1709">' Release a Virtual Machine Host Drive


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set colDVDDrives = objVM.DVDROMDrives
    For Each objDrive in colDVDDrives
        errReturn = objDrive.ReleaseHostDrive
    Next
Next
</vb><vb name="Remove a Virtual Machine DVD Drive" n="1710">' Remove a Virtual Machine DVD Drive


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Set colDVDDrives = objVM.DVDROMDrives
For Each objDrive in colDVDDrives
    errReturn = objVM.RemoveDVDROMDrive(objDrive)
Next
</vb><vb name="Remove a Virtual Machine SCSI Controller" n="1711">' Remove a Virtual Machine SCSI Controller


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")
Set colControllers = objVM.SCSIControllers

For Each objController in colControllers
    objVM.RemoveSCSIController(objController)
Next
</vb><vb name="Remove a Virual Server Hard Disk Connection" n="1712">' Remove a Virual Server Hard Disk Connection


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Set colConnections = objVM.HardDiskConnections
For Each objConnection in colConnections
    objVM.RemoveHardDiskConnection(objConnection)
Next
</vb></dd>
		<dd name="Virtual Machine and Virtual Server Properties" code="admin" desc="Sample scripts for managing Virtual Server, virtual tasks, and individual virtual machines."><vb name="List  Guest Operating System Information for a Virtual Machine" n="1713">' List  Guest Operating System Information for a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Set objGuestOS = objVM.GuestOS
Wscript.Echo "Additions version: " &amp;amp;  objGuestOS.AdditionsVersion
Wscript.Echo "Can shut down: " &amp;amp;  objGuestOS.CanShutdown
Wscript.Echo "Heartbeat percentage: " &amp;amp;  objGuestOS.HeartbeatPercentage
Wscript.Echo "Is heart beating: " &amp;amp;  objGuestOS.IsHeartbeating
Wscript.Echo "Is host time synchronization enabled: " &amp;amp; _
    objGuestOS.IsHostTimeSyncEnabled
Wscript.Echo "OS name: " &amp;amp;  objGuestOS.OSName
</vb><vb name="List Basic Virtual Machine Information" n="1714">' List Basic Virtual Machine Information


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Wscript.Echo "Account name: " &amp;amp; objVM.accountname
    Wscript.Echo "Account name and password: " &amp;amp; objVM.Accountnameandpassword
    Wscript.Echo "Autostart at launch: " &amp;amp; objVM.Autostartatlaunch
    Wscript.Echo "Autostart at launch delay: " &amp;amp; objVM.Autostartatlaunchdelay
    Wscript.Echo "Baseboard serial number: " &amp;amp; objVM.Baseboardserialnumber
    Wscript.Echo "BIOS GUID: " &amp;amp; objVM.BIOSGUID
    Wscript.Echo "BIOS serial number: " &amp;amp; objVM.BIOSerialNumber
    Wscript.Echo "Chassis asset tag: " &amp;amp; objVM.ChassisAssetTag
    Wscript.Echo "Chassis serial number: " &amp;amp; objVM.ChassisSerialNumber
    Wscript.Echo "Config ID: " &amp;amp; objVM.ConfigID
    Wscript.Echo "Display: " &amp;amp; objVM.Display
    Wscript.Echo "File: " &amp;amp; objVM.File
    Wscript.Echo "Floppy autodetect enabled: " &amp;amp; objVM.FloppyAutoDetectEnabled
    Wscript.Echo "Gues OS: " &amp;amp; objVM.GuestOS
    Wscript.Echo "Has MMX: " &amp;amp; objVM.HasMMX
    Wscript.Echo "Has SSE: " &amp;amp; objVM.HasSSE
    Wscript.Echo "Has SSE2: " &amp;amp; objVM.HasSSE2
    Wscript.Echo "Keyboard: " &amp;amp; objVM.Keyboard
    Wscript.Echo "Memory: " &amp;amp; objVM.Memory
    Wscript.Echo "Mouse: " &amp;amp; objVM.Mouse
    Wscript.Echo "Name: " &amp;amp; objVM.Name
    Wscript.Echo "Notes: " &amp;amp; objVM.Notes
    Wscript.Echo "Processor speed: " &amp;amp; objVM.ProcessorSpeed
    Wscript.Echo "Run as defined account: " &amp;amp; objVM.RunAsDefinedAccount
    Wscript.Echo "Saved state file path: " &amp;amp; objVM.SavedStateFilePath
    Wscript.Echo "Shutdown action on quit: " &amp;amp; objVM.ShutdownActionOnQuit
    Wscript.Echo "State: " &amp;amp; objVM.State
    Wscript.Echo "Undoable: " &amp;amp; objVM.Undoable
    Wscript.Echo "Undo action: " &amp;amp; objVM.UndoAction
    Wscript.Echo
Next
</vb><vb name="List Virtual Machine Keyboard Information" n="1715">' List Virtual Machine Keyboard Information


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set objKeyboard = objVM.Keyboard
    Wscript.Echo objVM.Name
    Wscript.Echo "Has exclusive access: " &amp;amp; objKeyboard.HasExclusiveAccess
    Wscript.Echo
Next
</vb><vb name="List Virtual Machine Mouse Information" n="1716">' List Virtual Machine Mouse Information


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set objMouse = objVM.Mouse
    Wscript.Echo objVM.Name
    Wscript.Echo "Horizontal position: " &amp;amp; objMouse.HorizontalPosition
    Wscript.Echo "Scroll wheel position: " &amp;amp; objMouse.ScrollWheelPosition
    Wscript.Echo "Using absolute coordinates position: " &amp;amp; _
        objMouse.UsingAbsoluteCoordinatesPosition
    Wscript.Echo "Vertical position: " &amp;amp; objMouse.VerticalPosition
    Wscript.Echo
Next
</vb><vb name="List Virtual Machine Parallel Port Information" n="1717">' List Virtual Machine Parallel Port Information


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set colPorts = objVM.ParallelPorts
    For Each objPort in colPorts
        Wscript.Echo "Virtual machine: " &amp;amp; objVM.Name
        Wscript.Echo "Name: " &amp;amp; objPort.Name
        Wscript.Echo
    Next
Next
</vb><vb name="List Virtual Machine Serial Port Information" n="1718">' List Virtual Machine Serial Port Information


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set colPorts = objVM.SerialPorts
    For Each objPort in colPorts
        Wscript.Echo "Virtual machine: " &amp;amp; objVM.Name
        Wscript.Echo "Connect immediately: " &amp;amp; objPort.ConnectImmediately
        Wscript.Echo "Name: " &amp;amp; objPort.Name
        Wscript.Echo "Type: " &amp;amp; objPort.Type
        Wscript.Echo
    Next
Next
</vb><vb name="List Virtual Server Accountant Information" n="1719">' List Virtual Server Accountant Information


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set colAccountants = objVM.Accountant
        Wscript.Echo "Virtual machine: " &amp;amp; objVM.Name
        Wscript.Echo "Allowable maximum system capacity: " &amp;amp; _
            colAccountants.AllowableMaximumSystemCapacity
        Wscript.Echo "Allowable reserved system capacity: " &amp;amp; _
            colAccountants.AllowableReservedSystemCapacity
        Wscript.Echo "CPU utilization: " &amp;amp; colAccountants.CPUUtilization

        i = 1
        Wscript.Echo "CPU utilization history:"
        For Each intCPUUtilization in colAccountants.CPUUtilizationHistory
            Wscript.Echo vbTab &amp;amp; i &amp;amp; " -- " &amp;amp; intCPUUtilization
            i = i + 1
        Next

        Wscript.Echo "Disk bytes read: " &amp;amp; colAccountants.DiskBytesRead
        Wscript.Echo "Disk bytes written: " &amp;amp; colAccountants.DiskBytesWritten
        Wscript.Echo "Host disk utilization: " &amp;amp; _
            colAccountants.HostDiskUtilization
        Wscript.Echo "Host memory utilization: " &amp;amp; _
            colAccountants.HostMemoryUtilization
        Wscript.Echo "Maximum system capacity: " &amp;amp; _
            colAccountants.MaximumSystemCapacity
        Wscript.Echo "Network bytes received: " &amp;amp; _
            colAccountants.NetworkBytesReceived
        Wscript.Echo "Network bytes sent: " &amp;amp; colAccountants.NetworkBytesSent
        Wscript.Echo "Relative weight: " &amp;amp; colAccountants.RelativeWeight
        Wscript.Echo "Reserved system capacity: " &amp;amp; _
            colAccountants.ReservedSystemCapacity
        Wscript.Echo "Uptime: " &amp;amp; colAccountants.Uptime
        Wscript.Echo
Next
</vb><vb name="List Virtual Server Display Information" n="1720">' List Virtual Server Display Information


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set objDisplay = objVM.Display
    Wscript.Echo objVM.Name
    Wscript.Echo "Height: " &amp;amp; objDisplay.Height
    Wscript.Echo "Video mode: " &amp;amp; objDisplay.VideoMode
    Wscript.Echo "Width: " &amp;amp; objDisplay.Width
    Wscript.Echo
Next
</vb><vb name="List Virtual Server Host Information" n="1721">' List Virtual Server Host Information


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objHost = objVS.HostInfo

Wscript.Echo "Logical processor count: " &amp;amp; objHost.LogicalProcessorCount
Wscript.Echo "Memory: " &amp;amp; objHost.Memory
Wscript.Echo "Memory available: " &amp;amp; objHost.MemoryAvail
Wscript.Echo "Memory available string: " &amp;amp; objHost.MemoryAvailString
Wscript.Echo "Memory total string: " &amp;amp; objHost.MemoryTotalString
Wscript.Echo "MMX: " &amp;amp; objHost.MMX
Wscript.Echo "Operating system: " &amp;amp; objHost.OperatingSystem
Wscript.Echo "OS major version: " &amp;amp; objHost.OSMajorVersion
Wscript.Echo "OS minor version: " &amp;amp; objHost.OSMinorVersion
Wscript.Echo "OS service pack string: " &amp;amp; objHost.OSServicePackString
Wscript.Echo "OS version string: " &amp;amp; objHost.OSVersionString
Wscript.Echo "Parallel port: " &amp;amp; objHost.ParallelPort
Wscript.Echo "Physical processor count: " &amp;amp; objHost.PhysicalProcessorCount
Wscript.Echo "Processor features string: " &amp;amp; objHost.ProcessorFeaturesString
Wscript.Echo "Processor manufacturer string: " &amp;amp; _
    objHost.ProcessorManufacturerString
Wscript.Echo "Processor speed: " &amp;amp; objHost.ProcessorSpeed
Wscript.Echo "Processor speed string: " &amp;amp; objHost.ProcessorSpeedString
Wscript.Echo "Processor version string: " &amp;amp; objHost.ProcessorVersionString
Wscript.Echo "SSE: " &amp;amp; objHost.SSE
Wscript.Echo "SSE2: " &amp;amp; objHost.SSE2
Wscript.Echo "3DNow!: " &amp;amp; objHost.ThreeDNow
Wscript.Echo "UTC time: " &amp;amp; objHost.UTCTime
</vb><vb name="List Virtual Server Properties" n="1722">' List Virtual Server Properties


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")

Wscript.Echo "Available system capacity: " &amp;amp; objVS.AvailableSystemCapacity
Wscript.Echo "Default additions path: " &amp;amp; objVS.DefaultAdditionsPath
Wscript.Echo "Default VM configuration path: " &amp;amp; _
    objVS.DefaultVMConfigurationPath
Wscript.Echo "Default VN configuration path: " &amp;amp; _
    objVS.DefaultVNConfigurationPath
Wscript.Echo "Disk image search paths: " &amp;amp; objVS.DiskImageSearchPaths
Wscript.Echo "Existing configuration paths: " &amp;amp; _
    objVS.ExistingConfigurationPaths
Wscript.Echo "Maximum floppy drives per VM: " &amp;amp; objVS.MaximumFloppyDrivesPerVM
Wscript.Echo "Maximum memory per VM: " &amp;amp; objVS.MaximumMemoryPerVM
Wscript.Echo "Maximum network adapters per VM: " &amp;amp; _
    objVS.MaximumNetworkAdaptersPerVM
Wscript.Echo "Maximum number of IDE buses: " &amp;amp; objVS.MaximumNumberOfIDEBuses
Wscript.Echo "Maximum nmber of SCSI controllers: " &amp;amp; _
    objVS.MaximumNumberOfSCSIControllers
Wscript.Echo "Maximum parallel ports per VM: " &amp;amp; _
    objVS.MaximumParallelPortsPerVM
Wscript.Echo "Maximum serial ports per VM: " &amp;amp; objVS.MaximumSerialPortsPerVM
Wscript.Echo "Minimum memory per VM: " &amp;amp; objVS.MinimumMemoryPerVM
Wscript.Echo "Name: " &amp;amp; objVS.Name
Wscript.Echo "Product ID: " &amp;amp; objVS.ProductID
Wscript.Echo "Script search paths: " &amp;amp; objVS.ScriptSearchPaths
Wscript.Echo "Suggested maximum memory per VM: " &amp;amp; _
    objVS.SuggestedMaximumMemoryPerVM
Wscript.Echo "Uptime: " &amp;amp; objVS.Uptime
Wscript.Echo "Version: " &amp;amp; objVS.Version
Wscript.Echo "VMRC admin address: " &amp;amp; objVS.VMRCAdminAddress
Wscript.Echo "VMRC admin port number: " &amp;amp; objVS.VMRCAdminPortNumber
Wscript.Echo "VMRC authenticator: " &amp;amp; objVS.VMRCAuthenticator
Wscript.Echo "VMRC enabled: " &amp;amp; objVS.VMRCEnabled
Wscript.Echo "VMRC encryption certificate: " &amp;amp; objVS.VMRCEncryptionCertificate
Wscript.Echo "VMRC encryption certificate request: " &amp;amp; _
    objVS.VMRCEncryptionCertificateRequest
Wscript.Echo "VMRC encryption enabled: " &amp;amp; objVS.VMRCEncryptionEnabled
Wscript.Echo "VMRC idle connection timeout: " &amp;amp; objVS.VMRCIdleConnectionTimeout
Wscript.Echo "VMRC idle connection timeout enabled: " &amp;amp; _
    objVS.VMRCIdleConnectionTimeoutEnabled
Wscript.Echo "VMRC X-Resolution: " &amp;amp; objVS.VMRCXResolution
Wscript.Echo "VMRC Y-Resolution: " &amp;amp; objVS.VMRCYResolution
</vb><vb name="List Virtual Server Security Information" n="1723">' List Virtual Server Security Information


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objSecurity = objVS.Security

Wscript.Echo "Group name: " &amp;amp; objSecurity.GroupName
Wscript.Echo "Group SID: " &amp;amp; objSecurity.GroupSID
Wscript.Echo "Owner name: " &amp;amp; objSecurity.OwnerName
Wscript.Echo "Owner name: " &amp;amp; objSecurity.OwnerSID
</vb><vb name="List Virtual Server Support Driver Information" n="1724">' List Virtual Server Support Driver Information


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colDrivers = objVS.SupportDrivers

For Each objDriver in colDrivers
    Wscript.Echo "Date: " &amp;amp; objDriver.Date
    Wscript.Echo "Description: " &amp;amp; objDriver.Description
    Wscript.Echo "Manufacturer: " &amp;amp; objDriver.Manufacturer
    Wscript.Echo "Provider: " &amp;amp; objDriver.Provider
    Wscript.Echo "Type: " &amp;amp; objDriver.Type
    Wscript.Echo "Version: " &amp;amp; objDriver.Version
    Wscript.Echo
Next
</vb><vb name="Modify a Virtual Machine Property" n="1725">' Modify a Virtual Machine Property


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

objVM.Notes = "This is a Windows 2000 virtual machine."
</vb><vb name="Modify Virtual Server Display Dimensions" n="1726">' Modify Virtual Server Display Dimensions


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Set objDisplay = objVM.Display
errReturn = objDisplay.SetDimensions(800,600)
</vb><vb name="Create a Virtual Machine" n="1727">' Create a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
errReturn = objVS.CreateVirtualMachine("Scripted Machine", _
    "C:\Scripts\Shared Virtual Machines\Scripted")
</vb><vb name="Delete a Virtual Machine" n="1728">' Delete a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Scripted Machine")

errReturn = objVS.DeleteVirtualMachine(objVM)
</vb><vb name="Discard the Saved State of a Virtual Machine" n="1729">' Discard the Saved State of a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

errReturn = objVM.DiscardSavedState()
</vb><vb name="Install Virtual Machine Additions" n="1730">' Install Virtual Machine Additions


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Set objGuestOS = objVM.GuestOS
objGuestOS.InstallAdditions()
</vb><vb name="List Virtual Server Tasks" n="1731">' List Virtual Server Tasks


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colTasks = objVS.Tasks

For Each objTask in colTasks
     Wscript.Echo "Description: " &amp;amp; objTask.Description
     Wscript.Echo "ID: " &amp;amp; objTask.ID
     Wscript.Echo "Is cancellable: " &amp;amp; objTask.IsCancelable
     Wscript.Echo "Is complete: " &amp;amp; objTask.IsComplete
     Wscript.Echo "Percent completed: " &amp;amp; objTask.PercentCompleted
     Wscript.Echo "Result: " &amp;amp; objTask.Result
     Wscript.Echo 
Next
</vb><vb name="Modify Virtual Machine Scheduling Parameters" n="1732">' Modify Virtual Machine Scheduling Parameters


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Set objAccountant = objVM.Accountant
errReturn = objAccountant.SetSchedulingParameters(99,99,99)
</vb><vb name="Pause a Virtual Machine" n="1733">' Pause a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")
objVM.Pause()
</vb><vb name="Register a Virtual Machine" n="1734">' Register a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
errReturn = objVS.RegisterVirtualMachine("Windows 2000 Server", _
    "C:\Virtual Machines")
</vb><vb name="Resume a Virtual Machine" n="1735">' Resume a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")
objVM.Resume()
</vb><vb name="Return Virtual Machine Mouse Button Status" n="1736">' Return Virtual Machine Mouse Button Status


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Set objMouse = objVM.Mouse
errReturn = objMouse.GetButton(1)
Wscript.Echo errReturn
</vb><vb name="Save the Virtual Machine State" n="1737">' Save the Virtual Machine State


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

errReturn = objVM.Save()
</vb><vb name="Search for a Virtual Machine" n="1738">' Search for a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Wscript.Echo "File: " &amp;amp; objVM.File
</vb><vb name="Shut Down the Guest Operating System on a Virtual Machine" n="1739">' Shut Down the Guest Operating System on a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Set objGuestOS = objVM.GuestOS
objGuestOS.Shutdown()
</vb><vb name="Start a Virtual Machine" n="1740">' Start a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

objVM.Startup()
</vb><vb name="Turn Off a Virtual Machine" n="1741">' Turn Off a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

objVM.Turnoff()
</vb><vb name="Unregister a Virtual Machine" n="1742">' Unregister a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")
errReturn = objVS.UnregisterVirtualMachine(objVM)
</vb></dd>
		<dd name="Virtual Networks" code="network" desc="Sample scripts for managing Virtual Server virtual networks."><vb name="Add a Network Adapter to a Virtual Machines" n="1743">' Add a Network Adapter to a Virtual Machines


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")
objVM.AddNetworkAdapter()
</vb><vb name="Attach a Virtual Network to a Virtual Network Adapter" n="1744">' Attach a Virtual Network to a Virtual Network Adapter


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Set objNetwork = objVS.FindVirtualNetwork("Internal Network")


Set colNetworkAdapters = objVM.NetworkAdapters
For Each objNetworkAdapter in colNetworkAdapters
    errReturn = objNetworkAdapter.AttachToVirtualNetwork(objNetwork)
Next
</vb><vb name="Create a Virtual Network" n="1745">' Create a Virtual Network


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
errReturn = objVS.CreateVirtualNetwork _
    ("Scripted Network","C:\Virtual Machines")
</vb><vb name="Delete a Virtual Network" n="1746">' Delete a Virtual Network


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objNetwork = objVS.FindVirtualNetwork("Scripted Network")
errReturn = objVS.DeleteVirtualNetwork(objNetwork)
</vb><vb name="Delete All Virtual Machine Network Adapters" n="1747">' Delete All Virtual Machine Network Adapters


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")
Set colNetworkAdapters = objVM.NetworkAdapters
For Each objAdapter in colNetworkAdapters
    objVM.RemoveNetworkAdapter(objAdapter)
Next
</vb><vb name="Detach a Network Adapter from a Virtual Machine" n="1748">' Detach a Network Adapter from a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Set colNetworkAdapters = objVM.NetworkAdapters
For Each objNetworkAdapter in colNetworkAdapters
    errReturn = objNetworkAdapter.DetachFromVirtualNetwork()
Next
</vb><vb name="List All Virtual Networks" n="1749">' List All Virtual Networks


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set colNetworks = objVS.VirtualNetworks

For Each objNetwork in colNetworks
    Wscript.Echo "Bytes dropped: " &amp;amp; objNetwork.BytesDropped
    Wscript.Echo "Bytes received: " &amp;amp; objNetwork.BytesReceived
    Wscript.Echo "Bytes sent: " &amp;amp; objNetwork.BytesSent
    Wscript.Echo "File: " &amp;amp; objNetwork.File
    Wscript.Echo "Host adapter: " &amp;amp; objNetwork.HostAdapter
    Wscript.Echo "Name: " &amp;amp; objNetwork.Name
    Wscript.Echo "Notes: " &amp;amp; objNetwork.Notes
    Wscript.Echo "Packets dropped: " &amp;amp; objNetwork.PacketsDropped
    Wscript.Echo "Packets received: " &amp;amp; objNetwork.PacketsReceived
    Wscript.Echo "Packets sent: " &amp;amp; objNetwork.PacketsSent
    Wscript.Echo
Next
</vb><vb name="List Network Adapter Information for All Virtual Machines" n="1750">' List Network Adapter Information for All Virtual Machines


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
set colVMs = objVS.VirtualMachines

For Each objVM in colVMS
    Set colNetworkAdapters = objVM.NetworkAdapters
    For Each objAdapter in colNetworkAdapters
        Wscript.Echo "Virtual machine: " &amp;amp; objVM.Name
        Wscript.Echo "Network adapter ID: " &amp;amp; objAdapter.ID
        Wscript.Echo "Ethernet address: " &amp;amp; objAdapter.EthernetAddress
        Wscript.Echo "Is ethernet address dynamic: " &amp;amp; _
            objAdapter.IsEthernetAddressDynamic
        Wscript.Echo "Virtual machine: " &amp;amp; objAdapter.VirtualMachine
        Wscript.Echo "Virtual network: " &amp;amp; objAdapter.VirtualNetwork
        Wscript.Echo
    Next
Next
</vb><vb name="List Virtual DHCP Server Information" n="1751">' List Virtual DHCP Server Information


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objNetwork = objVS.FindVirtualNetwork("Internal Network")

Set objDHCPServer = objNetwork.DHCPVirtualNetworkServer
Wscript.Echo "Default gateway address: " &amp;amp; objDHCPServer.DefaultGatewayAddress
Wscript.Echo "DNS servers: " &amp;amp; objDHCPServer.DNSServers
Wscript.Echo "Ending IP address: " &amp;amp; objDHCPServer.EndingIPAddress
Wscript.Echo "Is enabled: " &amp;amp; objDHCPServer.IsEnabled
Wscript.Echo "Lease rebinding time: " &amp;amp; objDHCPServer.LeaseRebindingTime
Wscript.Echo "Lease renewal time: " &amp;amp; objDHCPServer.LeaseRenewalTime
Wscript.Echo "Lease time: " &amp;amp; objDHCPServer.LeaseTime
Wscript.Echo "Network: " &amp;amp; objDHCPServer.Network
Wscript.Echo "Network mask: " &amp;amp; objDHCPServer.NetworkMask
Wscript.Echo "Server IP address: " &amp;amp; objDHCPServer.ServerIPAddress
Wscript.Echo "Starting IP address: " &amp;amp; objDHCPServer.StartingIPAddress
Wscript.Echo "WINS Server: " &amp;amp; objDHCPServer.WINSServers
</vb><vb name="Modify a Virtual Network Property" n="1752">' Modify a Virtual Network Property


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objNetwork = objVS.FindVirtualNetwork("Scripted Network")

objNetwork.Notes = "This note was added via a script."
</vb><vb name="Modify Virtual Server DHCP Lease Times" n="1753">' Modify Virtual Server DHCP Lease Times


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objNetwork = objVS.FindVirtualNetwork("Internal Network")

Set objDHCPServer = objNetwork.DHCPVirtualNetworkServer
errReturn = objDHCPServer.ConfigureDHCPLeaseTimes(129630,64830,97230)
</vb><vb name="Register a Virtual Network" n="1754">' Register a Virtual Network


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
errReturn = objVS.RegisterVirtualNetwork _
    ("Scripted Network","C:\Virtual Machines")
</vb><vb name="Search for a Virtual Network" n="1755">' Search for a Virtual Network


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objNetwork = objVS.FindVirtualNetwork("Scripted Network")
</vb><vb name="Unregister a Virtual Network" n="1756">' Unregister a Virtual Network


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objNetwork = objVS.FindVirtualNetwork("Scripted Network")
errReturn = objVS.UnregisterVirtualNetwork(objNetwork)
</vb></dd>
		<dd name="Virtual Server Access Rights and Security" code="access" desc="Sample scripts for managing Virtual Server security settings and access permissions."><vb name="List Current User Virtual Server Access Rights" n="1757">' List Current User Virtual Server Access Rights


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objSecurity = objVS.Security
Set objAccessRights = objSecurity.CurrentUserAccessRights

Wscript.Echo "Change permissions: " &amp;amp; objAccessRights.ChangePermissions
Wscript.Echo "Delete access: " &amp;amp; objAccessRights.DeleteAccess
Wscript.Echo "Execute access: " &amp;amp; objAccessRights.ExecuteAccess
Wscript.Echo "Flags: " &amp;amp; objAccessRights.Flags
Wscript.Echo "Name: " &amp;amp; objAccessRights.Name
Wscript.Echo "Read access: " &amp;amp; objAccessRights.ReadAccess
Wscript.Echo "Read permissions: " &amp;amp; objAccessRights.ReadPermissions
Wscript.Echo "SID: " &amp;amp; objAccessRights.SID
Wscript.Echo "Special access: " &amp;amp; objAccessRights.SpecialAccess
Wscript.Echo "Type: " &amp;amp; objAccessRights.Type
Wscript.Echo "Write access: " &amp;amp; objAccessRights.WriteAccess
</vb><vb name="List Virtual Server Access Rights" n="1758">' List Virtual Server Access Rights


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objSecurity = objVS.Security
Set colAccessRights = objSecurity.AccessRights

For Each objAccessRight in colAccessRights
    Wscript.Echo "Change permissions: " &amp;amp; objAccessRight.ChangePermissions
    Wscript.Echo "Delete access: " &amp;amp; objAccessRight.DeleteAccess
    Wscript.Echo "Execute access: " &amp;amp; objAccessRight.ExecuteAccess
    Wscript.Echo "Flags: " &amp;amp; objAccessRight.Flags
    Wscript.Echo "Name: " &amp;amp; objAccessRight.Name
    Wscript.Echo "Read access: " &amp;amp; objAccessRight.ReadAccess
    Wscript.Echo "Read permissions: " &amp;amp; objAccessRight.ReadPermissions
    Wscript.Echo "SID: " &amp;amp; objAccessRight.SID
    Wscript.Echo "Special access: " &amp;amp; objAccessRight.SpecialAccess
    Wscript.Echo "Type: " &amp;amp; objAccessRight.Type
    Wscript.Echo "Write access: " &amp;amp; objAccessRight.WriteAccess
    Wscript.Echo
Next
</vb><vb name="Search for a Virtual Server Security Entry" n="1759">' Search for a Virtual Server Security Entry


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Set objSecurity = objVM.Security
Set objEntry = objSecurity.FindEntry("bob",0)

Wscript.Echo objEntry.Name
Wscript.Echo objEntry.SID
</vb><vb name="Search for Virtual Server Access Rights" n="1760">' Search for Virtual Server Access Rights


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objSecurity = objVS.Security

Set objAccessRights = objSecurity.FindEntry("Administrators",0)
Wscript.Echo objAccessRights.Name
</vb></dd>
		<dd name="Virtual Server Client Information" code="client" desc="Sample scripts for managing Virtual Server clients."><vb name="Click a Mouse Button in a Virtual Machine" n="1761">' Click a Mouse Button in a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Set objMouse = objVM.Mouse
errReturn = objMouse.SetButton(1, TRUE)
Wscript.Echo errReturn
</vb><vb name="Click a Mouse Button in a Virtual Machine" n="1762">' Click a Mouse Button in a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Set objMouse = objVM.Mouse
errReturn = objMouse.Click(2)
</vb><vb name="Display the Client Control About Box" n="1763">' Display the Client Control About Box


Set objClientControl = CreateObject("MSVMRCActiveXClient.VMRCClientControl")
objClientControl.AboutBox
</vb><vb name="List Virtual Server Client Control Connection Information" n="1764">' List Virtual Server Client Control Connection Information


Set objClientControl = CreateObject("MSVMRCActiveXClient.VMRCClientControl")
objClientControl.ShowConnectionInfo
</vb><vb name="List Virtual Server Client Control Properties" n="1765">' List Virtual Server Client Control Properties


On Error Resume Next

Set objClientControl = CreateObject("MSVMRCActiveXClient.VMRCClientControl")
Wscript.Echo "Administrator mode: " &amp;amp; objClientControl.AdministratorMode
Wscript.Echo "Autosize: " &amp;amp; objClientControl.AutoSize
Wscript.Echo "Enabled: " &amp;amp; objClientControl.Enabled
Wscript.Echo "Host key: " &amp;amp; objClientControl.HostKey
Wscript.Echo "Menu back color: " &amp;amp; objClientControl.MenuBackColor
Wscript.Echo "Menu enabled: " &amp;amp; objClientControl.MenuEnabled
Wscript.Echo "Menu font color: " &amp;amp; objClientControl.MenuFontColor
Wscript.Echo "Menu font size: " &amp;amp; objClientControl.MenuFontSize
Wscript.Echo "Menu height: " &amp;amp; objClientControl.MenuHeight
Wscript.Echo "Ready state: " &amp;amp; objClientControl.ReadyState
Wscript.Echo "Reduced-colors mode: " &amp;amp; objClientControl.ReducedColorsMode
Wscript.Echo "Server address: " &amp;amp; objClientControl.ServerAddress
Wscript.Echo "Server display height: " &amp;amp; objClientControl.ServerDisplayHeight
Wscript.Echo "Server display name: " &amp;amp; objClientControl.ServerDisplayName
Wscript.Echo "Server display width: " &amp;amp; objClientControl.ServerDisplayWidth
Wscript.Echo "Server port: " &amp;amp; objClientControl.ServerPort
Wscript.Echo "State: " &amp;amp; objClientControl.State
Wscript.Echo "View-only mode: " &amp;amp; objClientControl.ViewOnlyMode
</vb><vb name="List Virtual Server VMRC Authenticators" n="1766">' List Virtual Server VMRC Authenticators


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set colAuthenticators = objVS.VMRCAuthenticators
For Each objAuthenticator in colAuthenticators
    Wscript.Echo "Name: " &amp;amp; objAuthenticator.Name
    Wscript.Echo "Description: " &amp;amp; objAuthenticator.Description
    Wscript.Echo "Type: " &amp;amp; objAuthenticator.Type
    Wscript.Echo
Next
</vb><vb name="Press a Key in a Virtual Machine" n="1767">' Press a Key in a Virtual Machine


On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Set objKeyboard = objVM.Keyboard
errReturn = objKeyboard.PressKey("Key_LeftCtrl")
errReturn = objKeyboard.PressKey("Key_Escape")
</vb><vb name="Type ASCII Text in a Virtual Machine" n="1768">' Type ASCII Text in a Virtual Machine



On Error Resume Next

Set objVS = CreateObject("VirtualServer.Application")
Set objVM = objVS.FindVirtualMachine("Windows 2000 Server")

Set objKeyboard = objVM.Keyboard
errReturn = objKeyboard.TypeASCIIText("Test string.")
</vb></dd>
	</dd>
</samples>
